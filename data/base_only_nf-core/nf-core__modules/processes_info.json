{
    "PLINK2_EXTRACT": {
        "name_process": "PLINK2_EXTRACT",
        "string_process": "process PLINK2_EXTRACT {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::plink2=2.00a2.3\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/plink2:2.00a2.3--h712d239_1' :\n        'quay.io/biocontainers/plink2:2.00a2.3--h712d239_1' }\"\n\n    input:\n    tuple val(meta), path(pgen), path(psam), path(pvar), path(variants)\n\n    output:\n    tuple val(meta), path(\"*.pgen\")    , emit: extract_pgen\n    tuple val(meta), path(\"*.psam\")    , emit: extract_psam\n    tuple val(meta), path(\"*.pvar.zst\"), emit: extract_pvar\n    path \"versions.yml\"                , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if( \"$pgen\" == \"${prefix}.pgen\" ) error \"Input and output names are the same, use \\\"task.ext.prefix\\\" in modules.config to disambiguate!\"\n    def mem_mb = task.memory.toMega()\n    \"\"\"\n    plink2 \\\\\n        --threads $task.cpus \\\\\n        --memory $mem_mb \\\\\n        --pfile ${pgen.baseName} \\\\\n        $args \\\\\n        --extract $variants \\\\\n        --make-pgen vzs \\\\\n        --out ${prefix}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        plink2: \\$(plink2 --version 2>&1 | sed 's/^PLINK v//; s/ 64.*\\$//' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 40,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if( \"$pgen\" == \"${prefix}.pgen\" ) error \"Input and output names are the same, use \\\"task.ext.prefix\\\" in modules.config to disambiguate!\"\n    def mem_mb = task.memory.toMega()\n    \"\"\"\n    plink2 \\\\\n        --threads $task.cpus \\\\\n        --memory $mem_mb \\\\\n        --pfile ${pgen.baseName} \\\\\n        $args \\\\\n        --extract $variants \\\\\n        --make-pgen vzs \\\\\n        --out ${prefix}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        plink2: \\$(plink2 --version 2>&1 | sed 's/^PLINK v//; s/ 64.*\\$//' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "pgen",
            "psam",
            "pvar",
            "variants"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::plink2=2.00a2.3\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/plink2:2.00a2.3--h712d239_1' : 'quay.io/biocontainers/plink2:2.00a2.3--h712d239_1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "RSEM_PREPAREREFERENCE": {
        "name_process": "RSEM_PREPAREREFERENCE",
        "string_process": "process RSEM_PREPAREREFERENCE {\n    tag \"$fasta\"\n    label 'process_high'\n\n    conda (params.enable_conda ? \"bioconda::rsem=1.3.3 bioconda::star=2.7.10a\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mulled-v2-cf0123ef83b3c38c13e3b0696a3f285d3f20f15b:64aad4a4e144878400649e71f42105311be7ed87-0' :\n        'quay.io/biocontainers/mulled-v2-cf0123ef83b3c38c13e3b0696a3f285d3f20f15b:64aad4a4e144878400649e71f42105311be7ed87-0' }\"\n\n    input:\n    path fasta, stageAs: \"rsem/*\"\n    path gtf\n\n    output:\n    path \"rsem\"           , emit: index\n    path \"*transcripts.fa\", emit: transcript_fasta\n    path \"versions.yml\"   , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    def args_list = args.tokenize()\n    if (args_list.contains('--star')) {\n        args_list.removeIf { it.contains('--star') }\n        def memory = task.memory ? \"--limitGenomeGenerateRAM ${task.memory.toBytes() - 100000000}\" : ''\n        \"\"\"\n        STAR \\\\\n            --runMode genomeGenerate \\\\\n            --genomeDir rsem/ \\\\\n            --genomeFastaFiles $fasta \\\\\n            --sjdbGTFfile $gtf \\\\\n            --runThreadN $task.cpus \\\\\n            $memory \\\\\n            $args2\n\n        rsem-prepare-reference \\\\\n            --gtf $gtf \\\\\n            --num-threads $task.cpus \\\\\n            ${args_list.join(' ')} \\\\\n            $fasta \\\\\n            rsem/genome\n\n        cp rsem/genome.transcripts.fa .\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            rsem: \\$(rsem-calculate-expression --version | sed -e \"s/Current version: RSEM v//g\")\n            star: \\$(STAR --version | sed -e \"s/STAR_//g\")\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        rsem-prepare-reference \\\\\n            --gtf $gtf \\\\\n            --num-threads $task.cpus \\\\\n            $args \\\\\n            $fasta \\\\\n            rsem/genome\n\n        cp rsem/genome.transcripts.fa .\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            rsem: \\$(rsem-calculate-expression --version | sed -e \"s/Current version: RSEM v//g\")\n            star: \\$(STAR --version | sed -e \"s/STAR_//g\")\n        END_VERSIONS\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 70,
        "string_script": "    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    def args_list = args.tokenize()\n    if (args_list.contains('--star')) {\n        args_list.removeIf { it.contains('--star') }\n        def memory = task.memory ? \"--limitGenomeGenerateRAM ${task.memory.toBytes() - 100000000}\" : ''\n        \"\"\"\n        STAR \\\\\n            --runMode genomeGenerate \\\\\n            --genomeDir rsem/ \\\\\n            --genomeFastaFiles $fasta \\\\\n            --sjdbGTFfile $gtf \\\\\n            --runThreadN $task.cpus \\\\\n            $memory \\\\\n            $args2\n\n        rsem-prepare-reference \\\\\n            --gtf $gtf \\\\\n            --num-threads $task.cpus \\\\\n            ${args_list.join(' ')} \\\\\n            $fasta \\\\\n            rsem/genome\n\n        cp rsem/genome.transcripts.fa .\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            rsem: \\$(rsem-calculate-expression --version | sed -e \"s/Current version: RSEM v//g\")\n            star: \\$(STAR --version | sed -e \"s/STAR_//g\")\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        rsem-prepare-reference \\\\\n            --gtf $gtf \\\\\n            --num-threads $task.cpus \\\\\n            $args \\\\\n            $fasta \\\\\n            rsem/genome\n\n        cp rsem/genome.transcripts.fa .\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            rsem: \\$(rsem-calculate-expression --version | sed -e \"s/Current version: RSEM v//g\")\n            star: \\$(STAR --version | sed -e \"s/STAR_//g\")\n        END_VERSIONS\n        \"\"\"\n    }",
        "nb_lignes_script": 48,
        "language_script": "bash",
        "tools": [
            "STAR",
            "Mgenome"
        ],
        "tools_url": [
            "https://bio.tools/star",
            "https://bio.tools/mgenome"
        ],
        "tools_dico": [
            {
                "name": "STAR",
                "uri": "https://bio.tools/star",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Ultrafast universal RNA-seq aligner",
                "homepage": "http://code.google.com/p/rna-star/"
            },
            {
                "name": "Mgenome",
                "uri": "https://bio.tools/mgenome",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2451",
                                    "term": "Sequence comparison"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Designed to find the optimal trees for multiple genome rearrangement by signed reversals. The problem is modeled as: For a given collection of genomes represented by signed permutations on genes, find a tree to connect the given genomes by reversal paths such that the number of all signed reversals is minimized.",
                "homepage": "http://xungulab.com/software/mgenome/mgenome.html"
            }
        ],
        "inputs": [
            "fasta",
            "gtf"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$fasta\"",
            "label 'process_high'",
            "conda (params.enable_conda ? \"bioconda::rsem=1.3.3 bioconda::star=2.7.10a\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mulled-v2-cf0123ef83b3c38c13e3b0696a3f285d3f20f15b:64aad4a4e144878400649e71f42105311be7ed87-0' : 'quay.io/biocontainers/mulled-v2-cf0123ef83b3c38c13e3b0696a3f285d3f20f15b:64aad4a4e144878400649e71f42105311be7ed87-0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "SAMTOOLS_AMPLICONCLIP": {
        "name_process": "SAMTOOLS_AMPLICONCLIP",
        "string_process": "process SAMTOOLS_AMPLICONCLIP {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::samtools=1.15.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/samtools:1.15.1--h1170115_0' :\n        'quay.io/biocontainers/samtools:1.15.1--h1170115_0' }\"\n\n    input:\n    tuple val(meta), path(bam)\n    path bed\n    val save_cliprejects\n    val save_clipstats\n\n    output:\n    tuple val(meta), path(\"*.bam\")            , emit: bam\n    tuple val(meta), path(\"*.clipstats.txt\")  , optional:true, emit: stats\n    tuple val(meta), path(\"*.cliprejects.bam\"), optional:true, emit: rejects_bam\n    path \"versions.yml\"                       , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def rejects = save_cliprejects ? \"--rejects-file ${prefix}.cliprejects.bam\" : \"\"\n    def stats   = save_clipstats   ? \"-f ${prefix}.clipstats.txt\"               : \"\"\n    if (\"$bam\" == \"${prefix}.bam\") error \"Input and output names are the same, use \\\"task.ext.prefix\\\" to disambiguate!\"\n    \"\"\"\n    samtools \\\\\n        ampliconclip \\\\\n        $args \\\\\n        $rejects \\\\\n        $stats \\\\\n        -b $bed \\\\\n        -o ${prefix}.bam \\\\\n        $bam\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 44,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def rejects = save_cliprejects ? \"--rejects-file ${prefix}.cliprejects.bam\" : \"\"\n    def stats   = save_clipstats   ? \"-f ${prefix}.clipstats.txt\"               : \"\"\n    if (\"$bam\" == \"${prefix}.bam\") error \"Input and output names are the same, use \\\"task.ext.prefix\\\" to disambiguate!\"\n    \"\"\"\n    samtools \\\\\n        ampliconclip \\\\\n        $args \\\\\n        $rejects \\\\\n        $stats \\\\\n        -b $bed \\\\\n        -o ${prefix}.bam \\\\\n        $bam\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "bam",
            "bed",
            "save_cliprejects",
            "save_clipstats"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::samtools=1.15.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/samtools:1.15.1--h1170115_0' : 'quay.io/biocontainers/samtools:1.15.1--h1170115_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "MINIMAP2_ALIGN": {
        "name_process": "MINIMAP2_ALIGN",
        "string_process": "process MINIMAP2_ALIGN {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? 'bioconda::minimap2=2.21 bioconda::samtools=1.12' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mulled-v2-66534bcbb7031a148b13e2ad42583020b9cd25c4:1679e915ddb9d6b4abda91880c4b48857d471bd8-0' :\n        'quay.io/biocontainers/mulled-v2-66534bcbb7031a148b13e2ad42583020b9cd25c4:1679e915ddb9d6b4abda91880c4b48857d471bd8-0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n    path reference\n    val bam_format\n    val cigar_paf_format\n    val cigar_bam\n\n    output:\n    tuple val(meta), path(\"*.paf\"), optional: true, emit: paf\n    tuple val(meta), path(\"*.bam\"), optional: true, emit: bam\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def input_reads = meta.single_end ? \"$reads\" : \"${reads[0]} ${reads[1]}\"\n    def bam_output = bam_format ? \"-a | samtools sort | samtools view -@ ${task.cpus} -b -h -o ${prefix}.bam\" : \"-o ${prefix}.paf\"\n    def cigar_paf = cigar_paf_format && !bam_format ? \"-c\" : ''\n    def set_cigar_bam = cigar_bam && bam_format ? \"-L\" : ''\n    \"\"\"\n    minimap2 \\\\\n        $args \\\\\n        -t $task.cpus \\\\\n        $reference \\\\\n        $input_reads \\\\\n        $cigar_paf \\\\\n        $set_cigar_bam \\\\\n        $bam_output\n\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        minimap2: \\$(minimap2 --version 2>&1)\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 46,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def input_reads = meta.single_end ? \"$reads\" : \"${reads[0]} ${reads[1]}\"\n    def bam_output = bam_format ? \"-a | samtools sort | samtools view -@ ${task.cpus} -b -h -o ${prefix}.bam\" : \"-o ${prefix}.paf\"\n    def cigar_paf = cigar_paf_format && !bam_format ? \"-c\" : ''\n    def set_cigar_bam = cigar_bam && bam_format ? \"-L\" : ''\n    \"\"\"\n    minimap2 \\\\\n        $args \\\\\n        -t $task.cpus \\\\\n        $reference \\\\\n        $input_reads \\\\\n        $cigar_paf \\\\\n        $set_cigar_bam \\\\\n        $bam_output\n\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        minimap2: \\$(minimap2 --version 2>&1)\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 21,
        "language_script": "bash",
        "tools": [
            "SAMtools",
            "Minimap2"
        ],
        "tools_url": [
            "https://bio.tools/samtools",
            "https://bio.tools/minimap2"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "Minimap2",
                "uri": "https://bio.tools/minimap2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise alignment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Pairwise aligner for genomic and spliced nucleotide sequences",
                "homepage": "https://github.com/lh3/minimap2"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "reference",
            "bam_format",
            "cigar_paf_format",
            "cigar_bam"
        ],
        "nb_inputs": 6,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? 'bioconda::minimap2=2.21 bioconda::samtools=1.12' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mulled-v2-66534bcbb7031a148b13e2ad42583020b9cd25c4:1679e915ddb9d6b4abda91880c4b48857d471bd8-0' : 'quay.io/biocontainers/mulled-v2-66534bcbb7031a148b13e2ad42583020b9cd25c4:1679e915ddb9d6b4abda91880c4b48857d471bd8-0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "BOWTIE2_BUILD": {
        "name_process": "BOWTIE2_BUILD",
        "string_process": "process BOWTIE2_BUILD {\n    tag \"$fasta\"\n    label 'process_high'\n\n    conda (params.enable_conda ? 'bioconda::bowtie2=2.4.4' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bowtie2:2.4.4--py39hbb4e92a_0' :\n        'quay.io/biocontainers/bowtie2:2.4.4--py39hbb4e92a_0' }\"\n\n    input:\n    path fasta\n\n    output:\n    path 'bowtie2'      , emit: index\n    path \"versions.yml\" , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    mkdir bowtie2\n    bowtie2-build $args --threads $task.cpus $fasta bowtie2/${fasta.baseName}\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bowtie2: \\$(echo \\$(bowtie2 --version 2>&1) | sed 's/^.*bowtie2-align-s version //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    mkdir bowtie2\n    bowtie2-build $args --threads $task.cpus $fasta bowtie2/${fasta.baseName}\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bowtie2: \\$(echo \\$(bowtie2 --version 2>&1) | sed 's/^.*bowtie2-align-s version //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fasta"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$fasta\"",
            "label 'process_high'",
            "conda (params.enable_conda ? 'bioconda::bowtie2=2.4.4' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bowtie2:2.4.4--py39hbb4e92a_0' : 'quay.io/biocontainers/bowtie2:2.4.4--py39hbb4e92a_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "RAXMLNG": {
        "name_process": "RAXMLNG",
        "string_process": "process RAXMLNG {\n    label 'process_high'\n\n    conda (params.enable_conda ? 'bioconda::raxml-ng=1.0.3' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/raxml-ng:1.0.3--h32fcf60_0' :\n        'quay.io/biocontainers/raxml-ng:1.0.3--h32fcf60_0' }\"\n\n    input:\n    path alignment\n\n    output:\n    path \"*.raxml.bestTree\", emit: phylogeny\n    path \"*.raxml.support\" , optional:true, emit: phylogeny_bootstrapped\n    path \"versions.yml\"    , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    raxml-ng \\\\\n        $args \\\\\n        --msa $alignment \\\\\n        --threads $task.cpus \\\\\n        --prefix output\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        raxmlng: \\$(echo \\$(raxml-ng --version 2>&1) | sed 's/^.*RAxML-NG v. //; s/released.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    raxml-ng \\\\\n        $args \\\\\n        --msa $alignment \\\\\n        --threads $task.cpus \\\\\n        --prefix output\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        raxmlng: \\$(echo \\$(raxml-ng --version 2>&1) | sed 's/^.*RAxML-NG v. //; s/released.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [
            "RAxML-NG"
        ],
        "tools_url": [
            "https://bio.tools/RAxML-NG"
        ],
        "tools_dico": [
            {
                "name": "RAxML-NG",
                "uri": "https://bio.tools/RAxML-NG",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3810",
                            "term": "Agricultural science"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0194",
                            "term": "Phylogenomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3293",
                            "term": "Phylogenetics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0547",
                                    "term": "Phylogenetic inference (maximum likelihood and Bayesian methods)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0552",
                                    "term": "Phylogenetic tree bootstrapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0547",
                                    "term": "Phylogenetic tree construction (maximum likelihood and Bayesian methods)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0547",
                                    "term": "Phylogenetic tree generation (maximum likelihood and Bayesian methods)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Phylogenetic tree inference tool which uses maximum-likelihood (ML) optimality criterion.",
                "homepage": "https://raxml-ng.vital-it.ch/"
            }
        ],
        "inputs": [
            "alignment"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "label 'process_high'",
            "conda (params.enable_conda ? 'bioconda::raxml-ng=1.0.3' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/raxml-ng:1.0.3--h32fcf60_0' : 'quay.io/biocontainers/raxml-ng:1.0.3--h32fcf60_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "ARTIC_GUPPYPLEX": {
        "name_process": "ARTIC_GUPPYPLEX",
        "string_process": "process ARTIC_GUPPYPLEX {\n    tag \"$meta.id\"\n    label 'process_high'\n\n    conda (params.enable_conda ? \"bioconda::artic=1.2.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/artic:1.2.1--py_0' :\n        'quay.io/biocontainers/artic:1.2.1--py_0' }\"\n\n    input:\n    tuple val(meta), path(fastq_dir)\n\n    output:\n    tuple val(meta), path(\"*.fastq.gz\"), emit: fastq\n    path  \"versions.yml\"               , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    artic \\\\\n        guppyplex \\\\\n        $args \\\\\n        --directory $fastq_dir \\\\\n        --output ${prefix}.fastq\n\n    pigz -p $task.cpus *.fastq\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        artic: \\$(artic --version 2>&1 | sed 's/^.*artic //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    artic \\\\\n        guppyplex \\\\\n        $args \\\\\n        --directory $fastq_dir \\\\\n        --output ${prefix}.fastq\n\n    pigz -p $task.cpus *.fastq\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        artic: \\$(artic --version 2>&1 | sed 's/^.*artic //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "ARTIC"
        ],
        "tools_url": [
            "https://bio.tools/artic"
        ],
        "tools_dico": [
            {
                "name": "ARTIC",
                "uri": "https://bio.tools/artic",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3494",
                                "term": "DNA sequence"
                            },
                            {
                                "uri": "http://edamontology.org/data_2012",
                                "term": "Sequence coordinates"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_1383",
                                "term": "Nucleic acid sequence alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "A bioinformatics pipeline for working with virus sequencing data sequenced with nanopore",
                "homepage": "https://github.com/artic-network/fieldbioinformatics"
            }
        ],
        "inputs": [
            "meta",
            "fastq_dir"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "conda (params.enable_conda ? \"bioconda::artic=1.2.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/artic:1.2.1--py_0' : 'quay.io/biocontainers/artic:1.2.1--py_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "RSEQC_BAMSTAT": {
        "name_process": "RSEQC_BAMSTAT",
        "string_process": "process RSEQC_BAMSTAT {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::rseqc=3.0.1 'conda-forge::r-base>=3.5'\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/rseqc:3.0.1--py37h516909a_1' :\n        'quay.io/biocontainers/rseqc:3.0.1--py37h516909a_1' }\"\n\n    input:\n    tuple val(meta), path(bam)\n\n    output:\n    tuple val(meta), path(\"*.bam_stat.txt\"), emit: txt\n    path  \"versions.yml\"                   , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    bam_stat.py \\\\\n        -i $bam \\\\\n        $args \\\\\n        > ${prefix}.bam_stat.txt\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        rseqc: \\$(bam_stat.py --version | sed -e \"s/bam_stat.py //g\")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    bam_stat.py \\\\\n        -i $bam \\\\\n        $args \\\\\n        > ${prefix}.bam_stat.txt\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        rseqc: \\$(bam_stat.py --version | sed -e \"s/bam_stat.py //g\")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "bam"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::rseqc=3.0.1 'conda-forge::r-base>=3.5'\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/rseqc:3.0.1--py37h516909a_1' : 'quay.io/biocontainers/rseqc:3.0.1--py37h516909a_1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "PROKKA": {
        "name_process": "PROKKA",
        "string_process": "process PROKKA {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::prokka=1.14.6\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/prokka:1.14.6--pl526_0' :\n        'quay.io/biocontainers/prokka:1.14.6--pl526_0' }\"\n\n    input:\n    tuple val(meta), path(fasta)\n    path proteins\n    path prodigal_tf\n\n    output:\n    tuple val(meta), path(\"${prefix}/*.gff\"), emit: gff\n    tuple val(meta), path(\"${prefix}/*.gbk\"), emit: gbk\n    tuple val(meta), path(\"${prefix}/*.fna\"), emit: fna\n    tuple val(meta), path(\"${prefix}/*.faa\"), emit: faa\n    tuple val(meta), path(\"${prefix}/*.ffn\"), emit: ffn\n    tuple val(meta), path(\"${prefix}/*.sqn\"), emit: sqn\n    tuple val(meta), path(\"${prefix}/*.fsa\"), emit: fsa\n    tuple val(meta), path(\"${prefix}/*.tbl\"), emit: tbl\n    tuple val(meta), path(\"${prefix}/*.err\"), emit: err\n    tuple val(meta), path(\"${prefix}/*.log\"), emit: log\n    tuple val(meta), path(\"${prefix}/*.txt\"), emit: txt\n    tuple val(meta), path(\"${prefix}/*.tsv\"), emit: tsv\n    path \"versions.yml\" , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args   ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n    def proteins_opt = proteins ? \"--proteins ${proteins[0]}\" : \"\"\n    def prodigal_opt = prodigal_tf ? \"--prodigaltf ${prodigal_tf[0]}\" : \"\"\n    \"\"\"\n    prokka \\\\\n        $args \\\\\n        --cpus $task.cpus \\\\\n        --prefix $prefix \\\\\n        $proteins_opt \\\\\n        $prodigal_tf \\\\\n        $fasta\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        prokka: \\$(echo \\$(prokka --version 2>&1) | sed 's/^.*prokka //')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 50,
        "string_script": "    def args = task.ext.args   ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n    def proteins_opt = proteins ? \"--proteins ${proteins[0]}\" : \"\"\n    def prodigal_opt = prodigal_tf ? \"--prodigaltf ${prodigal_tf[0]}\" : \"\"\n    \"\"\"\n    prokka \\\\\n        $args \\\\\n        --cpus $task.cpus \\\\\n        --prefix $prefix \\\\\n        $proteins_opt \\\\\n        $prodigal_tf \\\\\n        $fasta\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        prokka: \\$(echo \\$(prokka --version 2>&1) | sed 's/^.*prokka //')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 17,
        "language_script": "bash",
        "tools": [
            "Prokka"
        ],
        "tools_url": [
            "https://bio.tools/prokka"
        ],
        "tools_dico": [
            {
                "name": "Prokka",
                "uri": "https://bio.tools/prokka",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Model organisms"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0781",
                            "term": "Virology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Organisms"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "Coding region prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0362",
                                    "term": "Genome annotation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "ORF prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "ORF finding"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene finding"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene calling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Software tool to annotate bacterial, archaeal and viral genomes quickly and produce standards-compliant output files.",
                "homepage": "https://github.com/tseemann/prokka"
            }
        ],
        "inputs": [
            "meta",
            "fasta",
            "proteins",
            "prodigal_tf"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::prokka=1.14.6\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/prokka:1.14.6--pl526_0' : 'quay.io/biocontainers/prokka:1.14.6--pl526_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "SOURMASH_SKETCH": {
        "name_process": "SOURMASH_SKETCH",
        "string_process": "process SOURMASH_SKETCH {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::sourmash=4.2.4\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/sourmash:4.2.4--hdfd78af_0':\n        'quay.io/biocontainers/sourmash:4.2.4--hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(sequence)\n\n    output:\n    tuple val(meta), path(\"*.sig\"), emit: signatures\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: \"dna --param-string 'scaled=1000,k=31'\"\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    sourmash sketch \\\\\n        $args \\\\\n        --merge '${prefix}' \\\\\n        --output '${prefix}.sig' \\\\\n        $sequence\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        sourmash: \\$(echo \\$(sourmash --version 2>&1) | sed 's/^sourmash //' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    def args = task.ext.args ?: \"dna --param-string 'scaled=1000,k=31'\"\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    sourmash sketch \\\\\n        $args \\\\\n        --merge '${prefix}' \\\\\n        --output '${prefix}.sig' \\\\\n        $sequence\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        sourmash: \\$(echo \\$(sourmash --version 2>&1) | sed 's/^sourmash //' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [
            "sourmash"
        ],
        "tools_url": [
            "https://bio.tools/sourmash"
        ],
        "tools_dico": [
            {
                "name": "sourmash",
                "uri": "https://bio.tools/sourmash",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3307",
                            "term": "Computational biology"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0346",
                                    "term": "Sequence similarity search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0289",
                                    "term": "Sequence distance matrix generation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0289",
                                    "term": "Sequence distance calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0289",
                                    "term": "Phylogenetic distance matrix generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0289",
                                    "term": "Sequence distance matrix construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2975",
                                "term": "Nucleic acid sequence (raw)"
                            }
                        ],
                        "output": []
                    }
                ],
                "description": "Compute and compare MinHash signatures for DNA data sets.",
                "homepage": "https://sourmash.readthedocs.io/en/latest/"
            }
        ],
        "inputs": [
            "meta",
            "sequence"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::sourmash=4.2.4\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/sourmash:4.2.4--hdfd78af_0': 'quay.io/biocontainers/sourmash:4.2.4--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "COOLER_DUMP": {
        "name_process": "COOLER_DUMP",
        "string_process": "process COOLER_DUMP {\n    tag \"$meta.id\"\n    label 'process_high'\n\n    conda (params.enable_conda ? \"bioconda::cooler=0.8.11\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/cooler:0.8.11--pyh3252c3a_0' :\n        'quay.io/biocontainers/cooler:0.8.11--pyh3252c3a_0' }\"\n\n    input:\n    tuple val(meta), path(cool)\n    val resolution\n\n    output:\n    tuple val(meta), path(\"*.bedpe\"), emit: bedpe\n    path \"versions.yml\"             , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def suffix   = resolution     ? \"::$resolution\"               : \"\"\n    \"\"\"\n    cooler dump \\\\\n        $args \\\\\n        -o ${prefix}.bedpe \\\\\n        $cool$suffix\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        cooler: \\$(cooler --version 2>&1 | sed 's/cooler, version //')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def suffix   = resolution     ? \"::$resolution\"               : \"\"\n    \"\"\"\n    cooler dump \\\\\n        $args \\\\\n        -o ${prefix}.bedpe \\\\\n        $cool$suffix\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        cooler: \\$(cooler --version 2>&1 | sed 's/cooler, version //')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "cool",
            "resolution"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "conda (params.enable_conda ? \"bioconda::cooler=0.8.11\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/cooler:0.8.11--pyh3252c3a_0' : 'quay.io/biocontainers/cooler:0.8.11--pyh3252c3a_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "QUALIMAP_RNASEQ": {
        "name_process": "QUALIMAP_RNASEQ",
        "string_process": "process QUALIMAP_RNASEQ {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::qualimap=2.2.2d\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/qualimap:2.2.2d--1' :\n        'quay.io/biocontainers/qualimap:2.2.2d--1' }\"\n\n    input:\n    tuple val(meta), path(bam)\n    path  gtf\n\n    output:\n    tuple val(meta), path(\"${prefix}\"), emit: results\n    path  \"versions.yml\"              , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args   ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n    def paired_end = meta.single_end ? '' : '-pe'\n    def memory     = task.memory.toGiga() + \"G\"\n\n    def strandedness = 'non-strand-specific'\n    if (meta.strandedness == 'forward') {\n        strandedness = 'strand-specific-forward'\n    } else if (meta.strandedness == 'reverse') {\n        strandedness = 'strand-specific-reverse'\n    }\n    \"\"\"\n    unset DISPLAY\n    mkdir tmp\n    export _JAVA_OPTIONS=-Djava.io.tmpdir=./tmp\n    qualimap \\\\\n        --java-mem-size=$memory \\\\\n        rnaseq \\\\\n        $args \\\\\n        -bam $bam \\\\\n        -gtf $gtf \\\\\n        -p $strandedness \\\\\n        $paired_end \\\\\n        -outdir $prefix\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        qualimap: \\$(echo \\$(qualimap 2>&1) | sed 's/^.*QualiMap v.//; s/Built.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 50,
        "string_script": "    def args = task.ext.args   ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n    def paired_end = meta.single_end ? '' : '-pe'\n    def memory     = task.memory.toGiga() + \"G\"\n\n    def strandedness = 'non-strand-specific'\n    if (meta.strandedness == 'forward') {\n        strandedness = 'strand-specific-forward'\n    } else if (meta.strandedness == 'reverse') {\n        strandedness = 'strand-specific-reverse'\n    }\n    \"\"\"\n    unset DISPLAY\n    mkdir tmp\n    export _JAVA_OPTIONS=-Djava.io.tmpdir=./tmp\n    qualimap \\\\\n        --java-mem-size=$memory \\\\\n        rnaseq \\\\\n        $args \\\\\n        -bam $bam \\\\\n        -gtf $gtf \\\\\n        -p $strandedness \\\\\n        $paired_end \\\\\n        -outdir $prefix\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        qualimap: \\$(echo \\$(qualimap 2>&1) | sed 's/^.*QualiMap v.//; s/Built.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 29,
        "language_script": "bash",
        "tools": [
            "QualiMap",
            "RNASEQR"
        ],
        "tools_url": [
            "https://bio.tools/qualimap",
            "https://bio.tools/rnaseqr"
        ],
        "tools_dico": [
            {
                "name": "QualiMap",
                "uri": "https://bio.tools/qualimap",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Platform-independent application written in Java and R that provides both a Graphical User Inteface (GUI) and a command-line interface to facilitate the quality control of alignment sequencing data.",
                "homepage": "http://qualimap.bioinfo.cipf.es/"
            },
            {
                "name": "RNASEQR",
                "uri": "https://bio.tools/rnaseqr",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "Gene transcripts"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3320",
                            "term": "RNA splicing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "mRNA features"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3320",
                            "term": "Alternative splicing"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3185",
                                    "term": "Base-calling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3680",
                                    "term": "RNA-Seq analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2939",
                                    "term": "Principal component visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3891",
                                    "term": "Essential dynamics"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3185",
                                    "term": "Base calling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3185",
                                    "term": "Phred base calling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3185",
                                    "term": "Phred base-calling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2939",
                                    "term": "PCA plotting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2939",
                                    "term": "Principal component plotting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantitation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3891",
                                    "term": "PCA"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3891",
                                    "term": "Principal modes"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3891",
                                    "term": "ED"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "An R package for automated two-group RNA-Seq analysis workflow.\n\nThis R package is designed for case-control RNA-Seq analysis (two-group). There are six steps: \"RNASeqRParam S4 Object Creation\", \"Environment Setup\", \"Quality Assessment\", \"Reads Alignment & Quantification\", \"Gene-level Differential Analyses\" and \"Functional Analyses\". Each step corresponds to a function in this package. After running functions in order, a basic RNASeq analysis would be done easily.",
                "homepage": "https://bioconductor.org/packages/release/bioc/html/RNASeqR.html"
            }
        ],
        "inputs": [
            "meta",
            "bam",
            "gtf"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::qualimap=2.2.2d\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/qualimap:2.2.2d--1' : 'quay.io/biocontainers/qualimap:2.2.2d--1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "STAR_GENOMEGENERATE": {
        "name_process": "STAR_GENOMEGENERATE",
        "string_process": "process STAR_GENOMEGENERATE {\n    tag \"$fasta\"\n    label 'process_high'\n\n                                                         \n    conda (params.enable_conda ? \"bioconda::star=2.7.9a bioconda::samtools=1.15.1 conda-forge::gawk=5.1.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mulled-v2-1fa26d1ce03c295fe2fdcf85831a92fbcbd7e8c2:1c4c32d87798d425c970ececfbadd155e7560277-0' :\n        'quay.io/biocontainers/mulled-v2-1fa26d1ce03c295fe2fdcf85831a92fbcbd7e8c2:1c4c32d87798d425c970ececfbadd155e7560277-0' }\"\n\n    input:\n    path fasta\n    path gtf\n\n    output:\n    path \"star\"         , emit: index\n    path \"versions.yml\" , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def args_list = args.tokenize()\n    def memory   = task.memory ? \"--limitGenomeGenerateRAM ${task.memory.toBytes() - 100000000}\" : ''\n    if (args_list.contains('--genomeSAindexNbases')) {\n        \"\"\"\n        mkdir star\n        STAR \\\\\n            --runMode genomeGenerate \\\\\n            --genomeDir star/ \\\\\n            --genomeFastaFiles $fasta \\\\\n            --sjdbGTFfile $gtf \\\\\n            --runThreadN $task.cpus \\\\\n            $memory \\\\\n            $args\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            star: \\$(STAR --version | sed -e \"s/STAR_//g\")\n            samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n            gawk: \\$(echo \\$(gawk --version 2>&1) | sed 's/^.*GNU Awk //; s/, .*\\$//')\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        samtools faidx $fasta\n        NUM_BASES=`gawk '{sum = sum + \\$2}END{if ((log(sum)/log(2))/2 - 1 > 14) {printf \"%.0f\", 14} else {printf \"%.0f\", (log(sum)/log(2))/2 - 1}}' ${fasta}.fai`\n\n        mkdir star\n        STAR \\\\\n            --runMode genomeGenerate \\\\\n            --genomeDir star/ \\\\\n            --genomeFastaFiles $fasta \\\\\n            --sjdbGTFfile $gtf \\\\\n            --runThreadN $task.cpus \\\\\n            --genomeSAindexNbases \\$NUM_BASES \\\\\n            $memory \\\\\n            $args\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            star: \\$(STAR --version | sed -e \"s/STAR_//g\")\n            samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n            gawk: \\$(echo \\$(gawk --version 2>&1) | sed 's/^.*GNU Awk //; s/, .*\\$//')\n        END_VERSIONS\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 67,
        "string_script": "    def args = task.ext.args ?: ''\n    def args_list = args.tokenize()\n    def memory   = task.memory ? \"--limitGenomeGenerateRAM ${task.memory.toBytes() - 100000000}\" : ''\n    if (args_list.contains('--genomeSAindexNbases')) {\n        \"\"\"\n        mkdir star\n        STAR \\\\\n            --runMode genomeGenerate \\\\\n            --genomeDir star/ \\\\\n            --genomeFastaFiles $fasta \\\\\n            --sjdbGTFfile $gtf \\\\\n            --runThreadN $task.cpus \\\\\n            $memory \\\\\n            $args\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            star: \\$(STAR --version | sed -e \"s/STAR_//g\")\n            samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n            gawk: \\$(echo \\$(gawk --version 2>&1) | sed 's/^.*GNU Awk //; s/, .*\\$//')\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        samtools faidx $fasta\n        NUM_BASES=`gawk '{sum = sum + \\$2}END{if ((log(sum)/log(2))/2 - 1 > 14) {printf \"%.0f\", 14} else {printf \"%.0f\", (log(sum)/log(2))/2 - 1}}' ${fasta}.fai`\n\n        mkdir star\n        STAR \\\\\n            --runMode genomeGenerate \\\\\n            --genomeDir star/ \\\\\n            --genomeFastaFiles $fasta \\\\\n            --sjdbGTFfile $gtf \\\\\n            --runThreadN $task.cpus \\\\\n            --genomeSAindexNbases \\$NUM_BASES \\\\\n            $memory \\\\\n            $args\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            star: \\$(STAR --version | sed -e \"s/STAR_//g\")\n            samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n            gawk: \\$(echo \\$(gawk --version 2>&1) | sed 's/^.*GNU Awk //; s/, .*\\$//')\n        END_VERSIONS\n        \"\"\"\n    }",
        "nb_lignes_script": 45,
        "language_script": "bash",
        "tools": [
            "STAR",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/star",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "STAR",
                "uri": "https://bio.tools/star",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Ultrafast universal RNA-seq aligner",
                "homepage": "http://code.google.com/p/rna-star/"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "fasta",
            "gtf"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$fasta\"",
            "label 'process_high'",
            "conda (params.enable_conda ? \"bioconda::star=2.7.9a bioconda::samtools=1.15.1 conda-forge::gawk=5.1.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mulled-v2-1fa26d1ce03c295fe2fdcf85831a92fbcbd7e8c2:1c4c32d87798d425c970ececfbadd155e7560277-0' : 'quay.io/biocontainers/mulled-v2-1fa26d1ce03c295fe2fdcf85831a92fbcbd7e8c2:1c4c32d87798d425c970ececfbadd155e7560277-0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "BBMAP_BBSPLIT": {
        "name_process": "BBMAP_BBSPLIT",
        "string_process": "process BBMAP_BBSPLIT {\n    label 'process_high'\n\n    conda (params.enable_conda ? \"bioconda::bbmap=38.93\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bbmap:38.93--he522d1c_0' :\n        'quay.io/biocontainers/bbmap:38.93--he522d1c_0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n    path  index\n    path  primary_ref\n    tuple val(other_ref_names), path (other_ref_paths)\n    val   only_build_index\n\n    output:\n    path \"bbsplit\"                            , optional:true, emit: index\n    tuple val(meta), path('*primary*fastq.gz'), optional:true, emit: primary_fastq\n    tuple val(meta), path('*fastq.gz')        , optional:true, emit: all_fastq\n    tuple val(meta), path('*txt')             , optional:true, emit: stats\n    path \"versions.yml\"                       , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[BBSplit] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n\n    def other_refs = []\n    other_ref_names.eachWithIndex { name, index ->\n        other_refs << \"ref_${name}=${other_ref_paths[index]}\"\n    }\n    if (only_build_index) {\n        if (primary_ref && other_ref_names && other_ref_paths) {\n            \"\"\"\n            bbsplit.sh \\\\\n                -Xmx${avail_mem}g \\\\\n                ref_primary=$primary_ref \\\\\n                ${other_refs.join(' ')} \\\\\n                path=bbsplit \\\\\n                threads=$task.cpus \\\\\n                $args\n\n            cat <<-END_VERSIONS > versions.yml\n            \"${task.process}\":\n                bbmap: \\$(bbversion.sh 2>&1)\n            END_VERSIONS\n            \"\"\"\n        } else {\n            log.error 'ERROR: Please specify as input a primary fasta file along with names and paths to non-primary fasta files.'\n        }\n    } else {\n        def index_files = ''\n        if (index) {\n            index_files = \"path=$index\"\n        } else if (primary_ref && other_ref_names && other_ref_paths) {\n            index_files = \"ref_primary=${primary_ref} ${other_refs.join(' ')}\"\n        } else {\n            log.error 'ERROR: Please either specify a BBSplit index as input or a primary fasta file along with names and paths to non-primary fasta files.'\n        }\n        def fastq_in  = meta.single_end ? \"in=${reads}\" : \"in=${reads[0]} in2=${reads[1]}\"\n        def fastq_out = meta.single_end ? \"basename=${prefix}_%.fastq.gz\" : \"basename=${prefix}_%_#.fastq.gz\"\n        \"\"\"\n        bbsplit.sh \\\\\n            -Xmx${avail_mem}g \\\\\n            $index_files \\\\\n            threads=$task.cpus \\\\\n            $fastq_in \\\\\n            $fastq_out \\\\\n            refstats=${prefix}.stats.txt \\\\\n            $args\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            bbmap: \\$(bbversion.sh 2>&1)\n        END_VERSIONS\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 85,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[BBSplit] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n\n    def other_refs = []\n    other_ref_names.eachWithIndex { name, index ->\n        other_refs << \"ref_${name}=${other_ref_paths[index]}\"\n    }\n    if (only_build_index) {\n        if (primary_ref && other_ref_names && other_ref_paths) {\n            \"\"\"\n            bbsplit.sh \\\\\n                -Xmx${avail_mem}g \\\\\n                ref_primary=$primary_ref \\\\\n                ${other_refs.join(' ')} \\\\\n                path=bbsplit \\\\\n                threads=$task.cpus \\\\\n                $args\n\n            cat <<-END_VERSIONS > versions.yml\n            \"${task.process}\":\n                bbmap: \\$(bbversion.sh 2>&1)\n            END_VERSIONS\n            \"\"\"\n        } else {\n            log.error 'ERROR: Please specify as input a primary fasta file along with names and paths to non-primary fasta files.'\n        }\n    } else {\n        def index_files = ''\n        if (index) {\n            index_files = \"path=$index\"\n        } else if (primary_ref && other_ref_names && other_ref_paths) {\n            index_files = \"ref_primary=${primary_ref} ${other_refs.join(' ')}\"\n        } else {\n            log.error 'ERROR: Please either specify a BBSplit index as input or a primary fasta file along with names and paths to non-primary fasta files.'\n        }\n        def fastq_in  = meta.single_end ? \"in=${reads}\" : \"in=${reads[0]} in2=${reads[1]}\"\n        def fastq_out = meta.single_end ? \"basename=${prefix}_%.fastq.gz\" : \"basename=${prefix}_%_#.fastq.gz\"\n        \"\"\"\n        bbsplit.sh \\\\\n            -Xmx${avail_mem}g \\\\\n            $index_files \\\\\n            threads=$task.cpus \\\\\n            $fastq_in \\\\\n            $fastq_out \\\\\n            refstats=${prefix}.stats.txt \\\\\n            $args\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            bbmap: \\$(bbversion.sh 2>&1)\n        END_VERSIONS\n        \"\"\"\n    }",
        "nb_lignes_script": 59,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "reads",
            "index",
            "primary_ref",
            "other_ref_names",
            "other_ref_paths",
            "only_build_index"
        ],
        "nb_inputs": 7,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "label 'process_high'",
            "conda (params.enable_conda ? \"bioconda::bbmap=38.93\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bbmap:38.93--he522d1c_0' : 'quay.io/biocontainers/bbmap:38.93--he522d1c_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "UCSC_BED12TOBIGBED": {
        "name_process": "UCSC_BED12TOBIGBED",
        "string_process": "\nprocess UCSC_BED12TOBIGBED {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::ucsc-bedtobigbed=377\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/ucsc-bedtobigbed:377--h446ed27_1' :\n        'quay.io/biocontainers/ucsc-bedtobigbed:377--h446ed27_1' }\"\n\n    input:\n    tuple val(meta), path(bed)\n    path  sizes\n\n    output:\n    tuple val(meta), path(\"*.bigBed\"), emit: bigbed\n    path \"versions.yml\"              , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    bedToBigBed \\\\\n        $bed \\\\\n        $sizes \\\\\n        ${prefix}.bigBed\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        ucsc: $VERSION\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    bedToBigBed \\\\\n        $bed \\\\\n        $sizes \\\\\n        ${prefix}.bigBed\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        ucsc: $VERSION\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "bed",
            "sizes"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::ucsc-bedtobigbed=377\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/ucsc-bedtobigbed:377--h446ed27_1' : 'quay.io/biocontainers/ucsc-bedtobigbed:377--h446ed27_1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "NCBIGENOMEDOWNLOAD": {
        "name_process": "NCBIGENOMEDOWNLOAD",
        "string_process": "process NCBIGENOMEDOWNLOAD {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::ncbi-genome-download=0.3.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/ncbi-genome-download:0.3.0--pyh864c0ab_1' :\n        'quay.io/biocontainers/ncbi-genome-download:0.3.0--pyh864c0ab_1' }\"\n\n    input:\n    val meta\n    path accessions\n\n    output:\n    tuple val(meta), path(\"*_genomic.gbff.gz\")        , emit: gbk     , optional: true\n    tuple val(meta), path(\"*_genomic.fna.gz\")         , emit: fna     , optional: true\n    tuple val(meta), path(\"*_rm.out.gz\")              , emit: rm      , optional: true\n    tuple val(meta), path(\"*_feature_table.txt.gz\")   , emit: features, optional: true\n    tuple val(meta), path(\"*_genomic.gff.gz\")         , emit: gff     , optional: true\n    tuple val(meta), path(\"*_protein.faa.gz\")         , emit: faa     , optional: true\n    tuple val(meta), path(\"*_protein.gpff.gz\")        , emit: gpff    , optional: true\n    tuple val(meta), path(\"*_wgsmaster.gbff.gz\")      , emit: wgs_gbk , optional: true\n    tuple val(meta), path(\"*_cds_from_genomic.fna.gz\"), emit: cds     , optional: true\n    tuple val(meta), path(\"*_rna.fna.gz\")             , emit: rna     , optional: true\n    tuple val(meta), path(\"*_rna_from_genomic.fna.gz\"), emit: rna_fna , optional: true\n    tuple val(meta), path(\"*_assembly_report.txt\")    , emit: report  , optional: true\n    tuple val(meta), path(\"*_assembly_stats.txt\")     , emit: stats   , optional: true\n    path \"versions.yml\"                               , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def accessions_opt = accessions ? \"-A ${accessions}\" : \"\"\n    \"\"\"\n    ncbi-genome-download \\\\\n        $args \\\\\n        $accessions_opt \\\\\n        --output-folder ./ \\\\\n        --flat-output\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        ncbigenomedownload: \\$( ncbi-genome-download --version )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 47,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def accessions_opt = accessions ? \"-A ${accessions}\" : \"\"\n    \"\"\"\n    ncbi-genome-download \\\\\n        $args \\\\\n        $accessions_opt \\\\\n        --output-folder ./ \\\\\n        --flat-output\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        ncbigenomedownload: \\$( ncbi-genome-download --version )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "accessions"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::ncbi-genome-download=0.3.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/ncbi-genome-download:0.3.0--pyh864c0ab_1' : 'quay.io/biocontainers/ncbi-genome-download:0.3.0--pyh864c0ab_1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "ABRICATE_SUMMARY": {
        "name_process": "ABRICATE_SUMMARY",
        "string_process": "process ABRICATE_SUMMARY {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::abricate=1.0.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/abricate%3A1.0.1--ha8f3691_1':\n        'quay.io/biocontainers/abricate:1.0.1--ha8f3691_1' }\"\n\n    input:\n    tuple val(meta), path(reports)\n\n    output:\n    tuple val(meta), path(\"*.txt\"), emit: report\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    abricate \\\\\n        --summary \\\\\n        $reports > ${prefix}.txt\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        abricate: \\$(echo \\$(abricate --version 2>&1) | sed 's/^.*abricate //' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    abricate \\\\\n        --summary \\\\\n        $reports > ${prefix}.txt\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        abricate: \\$(echo \\$(abricate --version 2>&1) | sed 's/^.*abricate //' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "ABRicate"
        ],
        "tools_url": [
            "https://bio.tools/ABRicate"
        ],
        "tools_dico": [
            {
                "name": "ABRicate",
                "uri": "https://bio.tools/ABRicate",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3301",
                            "term": "Microbiology"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3482",
                                    "term": "Antimicrobial resistance prediction"
                                }
                            ],
                            []
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3494",
                                "term": "DNA sequence"
                            },
                            {
                                "uri": "http://edamontology.org/data_1234",
                                "term": "Sequence set (nucleic acid)"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0916",
                                "term": "Gene report"
                            }
                        ]
                    }
                ],
                "description": "Mass screening of contigs for antimicrobial resistance or virulence genes.",
                "homepage": "https://github.com/tseemann/abricate"
            }
        ],
        "inputs": [
            "meta",
            "reports"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::abricate=1.0.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/abricate%3A1.0.1--ha8f3691_1': 'quay.io/biocontainers/abricate:1.0.1--ha8f3691_1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "PYDAMAGE_FILTER": {
        "name_process": "PYDAMAGE_FILTER",
        "string_process": "process PYDAMAGE_FILTER {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::pydamage=0.70\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/pydamage:0.70--pyhdfd78af_0' :\n        'quay.io/biocontainers/pydamage:0.70--pyhdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(csv)\n\n    output:\n    tuple val(meta), path(\"pydamage_results/pydamage_filtered_results.csv\"), emit: csv\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n\n    pydamage \\\\\n        filter \\\\\n        $args \\\\\n        $csv\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        pydamage: \\$(echo \\$(pydamage --version 2>&1) | sed -e 's/pydamage, version //g')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n\n    pydamage \\\\\n        filter \\\\\n        $args \\\\\n        $csv\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        pydamage: \\$(echo \\$(pydamage --version 2>&1) | sed -e 's/pydamage, version //g')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [
            "Filter"
        ],
        "tools_url": [
            "https://bio.tools/filter"
        ],
        "tools_dico": [
            {
                "name": "Filter",
                "uri": "https://bio.tools/filter",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3187",
                                    "term": "Sequence contamination filtering"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Produce a filtered version of an sRNA dataset, controlled by several user-defined criteria, including sequence length, abundance, complexity, transfer and ribosomal RNA removal.",
                "homepage": "http://srna-workbench.cmp.uea.ac.uk/filter-2/"
            }
        ],
        "inputs": [
            "meta",
            "csv"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::pydamage=0.70\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/pydamage:0.70--pyhdfd78af_0' : 'quay.io/biocontainers/pydamage:0.70--pyhdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "ASSEMBLYSCAN": {
        "name_process": "ASSEMBLYSCAN",
        "string_process": "process ASSEMBLYSCAN {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::assembly-scan=0.4.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/assembly-scan:0.4.1--pyhdfd78af_0' :\n        'quay.io/biocontainers/assembly-scan:0.4.1--pyhdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(assembly)\n\n    output:\n    tuple val(meta), path(\"*.json\"), emit: json\n    path \"versions.yml\"            , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    assembly-scan $assembly > ${prefix}.json\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        assemblyscan: \\$( assembly-scan --version 2>&1 | sed 's/^.*assembly-scan //; s/Using.*\\$//' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    assembly-scan $assembly > ${prefix}.json\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        assemblyscan: \\$( assembly-scan --version 2>&1 | sed 's/^.*assembly-scan //; s/Using.*\\$//' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "assembly"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::assembly-scan=0.4.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/assembly-scan:0.4.1--pyhdfd78af_0' : 'quay.io/biocontainers/assembly-scan:0.4.1--pyhdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "FAQCS": {
        "name_process": "FAQCS",
        "string_process": "process FAQCS {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::faqcs=2.10\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/faqcs%3A2.10--r41h9a82719_2' :\n        'quay.io/biocontainers/faqcs:2.10--r41h9a82719_2' }\"\n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path('*.trimmed.fastq.gz')           , emit: reads\n    tuple val(meta), path('*.stats.txt')                  , emit: stats\n    tuple val(meta), path('*.txt')                        , optional:true, emit: txt\n    tuple val(meta), path('*_qc_report.pdf')              , optional:true, emit: statspdf\n    tuple val(meta), path('*.log')                        , emit: log\n    tuple val(meta), path('*.discard.fastq.gz')           , optional:true, emit: reads_fail\n    tuple val(meta), path('*.trimmed.unpaired.fastq.gz')  , optional:true, emit: reads_unpaired\n    path \"versions.yml\"                                   , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n                                                                           \n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (meta.single_end) {\n        \"\"\"\n        [ ! -f  ${prefix}.fastq.gz ] && ln -s $reads ${prefix}.fastq.gz\n        FaQCs \\\\\n            -d . \\\\\n            -u ${prefix}.fastq.gz \\\\\n            --prefix ${prefix} \\\\\n            -t $task.cpus \\\\\n            $args \\\\\n            2> ${prefix}.fastp.log\n\n\n        if [[ -f ${prefix}.unpaired.trimmed.fastq ]]; then\n            mv ${prefix}.unpaired.trimmed.fastq ${prefix}.trimmed.fastq\n            gzip ${prefix}.trimmed.fastq\n        fi\n        if [[ -f ${prefix}.discard.trimmed.fastq ]]; then\n            mv ${prefix}.discard.trimmed.fastq ${prefix}.trimmed.discard.fastq\n            gzip ${prefix}.trimmed.discard.fastq\n        fi\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            faqcs: \\$(echo \\$(FaQCs --version 2>&1) | sed 's/^.*Version: //;' )\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        [ ! -f  ${prefix}_1.fastq.gz ] && ln -s ${reads[0]} ${prefix}_1.fastq.gz\n        [ ! -f  ${prefix}_2.fastq.gz ] && ln -s ${reads[1]} ${prefix}_2.fastq.gz\n        FaQCs \\\\\n            -d . \\\\\n            -1 ${prefix}_1.fastq.gz \\\\\n            -2 ${prefix}_2.fastq.gz \\\\\n            --prefix ${meta.id} \\\\\n            -t $task.cpus \\\\\n            $args \\\\\n            2> ${prefix}.fastp.log\n\n        # Unpaired\n        if [[ -f ${prefix}.unpaired.trimmed.fastq ]]; then\n            # If it is empty remove it\n            if [[ ! -s ${prefix}.unpaired.trimmed.fastq ]]; then\n                rm ${prefix}.unpaired.trimmed.fastq\n            else\n                mv ${prefix}.unpaired.trimmed.fastq ${prefix}.trimmed.unpaired.fastq\n                gzip ${prefix}.trimmed.unpaired.fastq\n            fi\n        fi\n\n        # R1\n        if [[ -f ${prefix}.1.trimmed.fastq ]]; then\n            mv ${prefix}.1.trimmed.fastq ${prefix}_1.trimmed.fastq\n            gzip ${prefix}_1.trimmed.fastq\n        fi\n\n        # R2\n        if [[ -f ${prefix}.2.trimmed.fastq ]]; then\n            mv ${prefix}.2.trimmed.fastq ${prefix}_2.trimmed.fastq\n            gzip ${prefix}_2.trimmed.fastq\n        fi\n\n        # Discarded: Created if --discard argument is passed\n        if [[ -f ${prefix}.discard.trimmed.fastq ]]; then\n            mv ${prefix}.discard.trimmed.fastq ${prefix}.trimmed.discard.fastq\n            gzip ${prefix}.trimmed.discard.fastq\n        fi\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            faqcs: \\$(echo \\$(FaQCs --version 2>&1) | sed 's/^.*Version: //;' )\n        END_VERSIONS\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 101,
        "string_script": "    def args = task.ext.args ?: ''\n                                                                           \n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (meta.single_end) {\n        \"\"\"\n        [ ! -f  ${prefix}.fastq.gz ] && ln -s $reads ${prefix}.fastq.gz\n        FaQCs \\\\\n            -d . \\\\\n            -u ${prefix}.fastq.gz \\\\\n            --prefix ${prefix} \\\\\n            -t $task.cpus \\\\\n            $args \\\\\n            2> ${prefix}.fastp.log\n\n\n        if [[ -f ${prefix}.unpaired.trimmed.fastq ]]; then\n            mv ${prefix}.unpaired.trimmed.fastq ${prefix}.trimmed.fastq\n            gzip ${prefix}.trimmed.fastq\n        fi\n        if [[ -f ${prefix}.discard.trimmed.fastq ]]; then\n            mv ${prefix}.discard.trimmed.fastq ${prefix}.trimmed.discard.fastq\n            gzip ${prefix}.trimmed.discard.fastq\n        fi\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            faqcs: \\$(echo \\$(FaQCs --version 2>&1) | sed 's/^.*Version: //;' )\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        [ ! -f  ${prefix}_1.fastq.gz ] && ln -s ${reads[0]} ${prefix}_1.fastq.gz\n        [ ! -f  ${prefix}_2.fastq.gz ] && ln -s ${reads[1]} ${prefix}_2.fastq.gz\n        FaQCs \\\\\n            -d . \\\\\n            -1 ${prefix}_1.fastq.gz \\\\\n            -2 ${prefix}_2.fastq.gz \\\\\n            --prefix ${meta.id} \\\\\n            -t $task.cpus \\\\\n            $args \\\\\n            2> ${prefix}.fastp.log\n\n        # Unpaired\n        if [[ -f ${prefix}.unpaired.trimmed.fastq ]]; then\n            # If it is empty remove it\n            if [[ ! -s ${prefix}.unpaired.trimmed.fastq ]]; then\n                rm ${prefix}.unpaired.trimmed.fastq\n            else\n                mv ${prefix}.unpaired.trimmed.fastq ${prefix}.trimmed.unpaired.fastq\n                gzip ${prefix}.trimmed.unpaired.fastq\n            fi\n        fi\n\n        # R1\n        if [[ -f ${prefix}.1.trimmed.fastq ]]; then\n            mv ${prefix}.1.trimmed.fastq ${prefix}_1.trimmed.fastq\n            gzip ${prefix}_1.trimmed.fastq\n        fi\n\n        # R2\n        if [[ -f ${prefix}.2.trimmed.fastq ]]; then\n            mv ${prefix}.2.trimmed.fastq ${prefix}_2.trimmed.fastq\n            gzip ${prefix}_2.trimmed.fastq\n        fi\n\n        # Discarded: Created if --discard argument is passed\n        if [[ -f ${prefix}.discard.trimmed.fastq ]]; then\n            mv ${prefix}.discard.trimmed.fastq ${prefix}.trimmed.discard.fastq\n            gzip ${prefix}.trimmed.discard.fastq\n        fi\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            faqcs: \\$(echo \\$(FaQCs --version 2>&1) | sed 's/^.*Version: //;' )\n        END_VERSIONS\n        \"\"\"\n    }",
        "nb_lignes_script": 75,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::faqcs=2.10\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/faqcs%3A2.10--r41h9a82719_2' : 'quay.io/biocontainers/faqcs:2.10--r41h9a82719_2' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "FASTP": {
        "name_process": "FASTP",
        "string_process": "process FASTP {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? 'bioconda::fastp=0.23.2' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/fastp:0.23.2--h79da9fb_0' :\n        'quay.io/biocontainers/fastp:0.23.2--h79da9fb_0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n    val   save_trimmed_fail\n    val   save_merged\n\n    output:\n    tuple val(meta), path('*.trim.fastq.gz')  , optional:true, emit: reads\n    tuple val(meta), path('*.json')           , emit: json\n    tuple val(meta), path('*.html')           , emit: html\n    tuple val(meta), path('*.log')            , emit: log\n    path \"versions.yml\"                       , emit: versions\n    tuple val(meta), path('*.fail.fastq.gz')  , optional:true, emit: reads_fail\n    tuple val(meta), path('*.merged.fastq.gz'), optional:true, emit: reads_merged\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n                                                                           \n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (meta.single_end) {\n        def fail_fastq = save_trimmed_fail ? \"--failed_out ${prefix}.fail.fastq.gz\" : ''\n        \"\"\"\n        [ ! -f  ${prefix}.fastq.gz ] && ln -s $reads ${prefix}.fastq.gz\n        fastp \\\\\n            --in1 ${prefix}.fastq.gz \\\\\n            --out1 ${prefix}.trim.fastq.gz \\\\\n            --thread $task.cpus \\\\\n            --json ${prefix}.fastp.json \\\\\n            --html ${prefix}.fastp.html \\\\\n            $fail_fastq \\\\\n            $args \\\\\n            2> ${prefix}.fastp.log\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            fastp: \\$(fastp --version 2>&1 | sed -e \"s/fastp //g\")\n        END_VERSIONS\n        \"\"\"\n    } else {\n        def fail_fastq  = save_trimmed_fail ? \"--unpaired1 ${prefix}_1.fail.fastq.gz --unpaired2 ${prefix}_2.fail.fastq.gz\" : ''\n        def merge_fastq = save_merged ? \"-m --merged_out ${prefix}.merged.fastq.gz\" : ''\n        \"\"\"\n        [ ! -f  ${prefix}_1.fastq.gz ] && ln -s ${reads[0]} ${prefix}_1.fastq.gz\n        [ ! -f  ${prefix}_2.fastq.gz ] && ln -s ${reads[1]} ${prefix}_2.fastq.gz\n        fastp \\\\\n            --in1 ${prefix}_1.fastq.gz \\\\\n            --in2 ${prefix}_2.fastq.gz \\\\\n            --out1 ${prefix}_1.trim.fastq.gz \\\\\n            --out2 ${prefix}_2.trim.fastq.gz \\\\\n            --json ${prefix}.fastp.json \\\\\n            --html ${prefix}.fastp.html \\\\\n            $fail_fastq \\\\\n            $merge_fastq \\\\\n            --thread $task.cpus \\\\\n            --detect_adapter_for_pe \\\\\n            $args \\\\\n            2> ${prefix}.fastp.log\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            fastp: \\$(fastp --version 2>&1 | sed -e \"s/fastp //g\")\n        END_VERSIONS\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 73,
        "string_script": "    def args = task.ext.args ?: ''\n                                                                           \n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (meta.single_end) {\n        def fail_fastq = save_trimmed_fail ? \"--failed_out ${prefix}.fail.fastq.gz\" : ''\n        \"\"\"\n        [ ! -f  ${prefix}.fastq.gz ] && ln -s $reads ${prefix}.fastq.gz\n        fastp \\\\\n            --in1 ${prefix}.fastq.gz \\\\\n            --out1 ${prefix}.trim.fastq.gz \\\\\n            --thread $task.cpus \\\\\n            --json ${prefix}.fastp.json \\\\\n            --html ${prefix}.fastp.html \\\\\n            $fail_fastq \\\\\n            $args \\\\\n            2> ${prefix}.fastp.log\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            fastp: \\$(fastp --version 2>&1 | sed -e \"s/fastp //g\")\n        END_VERSIONS\n        \"\"\"\n    } else {\n        def fail_fastq  = save_trimmed_fail ? \"--unpaired1 ${prefix}_1.fail.fastq.gz --unpaired2 ${prefix}_2.fail.fastq.gz\" : ''\n        def merge_fastq = save_merged ? \"-m --merged_out ${prefix}.merged.fastq.gz\" : ''\n        \"\"\"\n        [ ! -f  ${prefix}_1.fastq.gz ] && ln -s ${reads[0]} ${prefix}_1.fastq.gz\n        [ ! -f  ${prefix}_2.fastq.gz ] && ln -s ${reads[1]} ${prefix}_2.fastq.gz\n        fastp \\\\\n            --in1 ${prefix}_1.fastq.gz \\\\\n            --in2 ${prefix}_2.fastq.gz \\\\\n            --out1 ${prefix}_1.trim.fastq.gz \\\\\n            --out2 ${prefix}_2.trim.fastq.gz \\\\\n            --json ${prefix}.fastp.json \\\\\n            --html ${prefix}.fastp.html \\\\\n            $fail_fastq \\\\\n            $merge_fastq \\\\\n            --thread $task.cpus \\\\\n            --detect_adapter_for_pe \\\\\n            $args \\\\\n            2> ${prefix}.fastp.log\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            fastp: \\$(fastp --version 2>&1 | sed -e \"s/fastp //g\")\n        END_VERSIONS\n        \"\"\"\n    }",
        "nb_lignes_script": 46,
        "language_script": "bash",
        "tools": [
            "fastPHASE"
        ],
        "tools_url": [
            "https://bio.tools/fastphase"
        ],
        "tools_dico": [
            {
                "name": "fastPHASE",
                "uri": "https://bio.tools/fastphase",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3056",
                            "term": "Population genetics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3454",
                                    "term": "Phasing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Imputation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Data imputation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "fastPHASE is a program to estimate missing genotypes and unobserved haplotypes. It is an implementation of the model described in Scheet & Stephens (2006). This is a cluster-based model for haplotype variation, and gains its utility from implicitly modeling the genealogy of chromosomes in a random sample from a population as a tree but summarizing all haplotype variation in the \"tips\" of the trees.",
                "homepage": "http://scheet.org/software.html"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "save_trimmed_fail",
            "save_merged"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? 'bioconda::fastp=0.23.2' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/fastp:0.23.2--h79da9fb_0' : 'quay.io/biocontainers/fastp:0.23.2--h79da9fb_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "CELLRANGER_MKFASTQ": {
        "name_process": "CELLRANGER_MKFASTQ",
        "string_process": "process CELLRANGER_MKFASTQ {\n    tag \"mkfastq\"\n    label 'process_medium'\n\n    if (params.enable_conda) {\n        exit 1, \"Conda environments cannot be used when using the Cell Ranger tool. Please use docker or singularity containers.\"\n    }\n    container \"nfcore/cellrangermkfastq:6.1.2\"\n\n    input:\n    path bcl\n    path csv\n\n    output:\n    path \"versions.yml\", emit: versions\n    path \"${bcl.getSimpleName()}/outs/fastq_path/*.fastq.gz\"  , emit: fastq\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    cellranger mkfastq --id=${bcl.getSimpleName()} \\\n        --run=$bcl \\\n        --csv=$csv \\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        cellranger: \\$(echo \\$( cellranger --version 2>&1) | sed 's/^.*[^0-9]\\\\([0-9]*\\\\.[0-9]*\\\\.[0-9]*\\\\).*\\$/\\\\1/' )\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    \"\"\"\n    mkdir -p \"${bcl.getSimpleName()}/outs/fastq_path/\"\n    touch ${bcl.getSimpleName()}/outs/fastq_path/fake_file.fastq.gz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        cellranger: \\$(echo \\$( cellranger --version 2>&1) | sed 's/^.*[^0-9]\\\\([0-9]*\\\\.[0-9]*\\\\.[0-9]*\\\\).*\\$/\\\\1/' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 43,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    cellranger mkfastq --id=${bcl.getSimpleName()} \\\n        --run=$bcl \\\n        --csv=$csv \\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        cellranger: \\$(echo \\$( cellranger --version 2>&1) | sed 's/^.*[^0-9]\\\\([0-9]*\\\\.[0-9]*\\\\.[0-9]*\\\\).*\\$/\\\\1/' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bcl",
            "csv"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"mkfastq\"",
            "label 'process_medium' if (params.enable_conda) { exit 1, \"Conda environments cannot be used when using the Cell Ranger tool. Please use docker or singularity containers.\" }",
            "container \"nfcore/cellrangermkfastq:6.1.2\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    \"\"\"\n    mkdir -p \"${bcl.getSimpleName()}/outs/fastq_path/\"\n    touch ${bcl.getSimpleName()}/outs/fastq_path/fake_file.fastq.gz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        cellranger: \\$(echo \\$( cellranger --version 2>&1) | sed 's/^.*[^0-9]\\\\([0-9]*\\\\.[0-9]*\\\\.[0-9]*\\\\).*\\$/\\\\1/' )\n    END_VERSIONS\n    \"\"\""
    },
    "IDR": {
        "name_process": "IDR",
        "string_process": "process IDR {\n    tag \"$prefix\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::idr=2.0.4.2\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/idr:2.0.4.2--py39hcbe4a3b_5' :\n        'quay.io/biocontainers/idr:2.0.4.2--py39hcbe4a3b_5' }\"\n\n    input:\n    path peaks\n    val peak_type\n    val prefix\n\n    output:\n    path \"*idrValues.txt\", emit: idr\n    path \"*log.txt\"      , emit: log\n    path \"*.png\"         , emit: png\n    path \"versions.yml\"  , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    if (peaks.toList().size < 2) {\n        log.error \"[ERROR] idr needs at least two replicates only one provided.\"\n    }\n    def peak_types = ['narrowPeak', 'broadPeak', 'bed']\n    if (!peak_types.contains(peak_type)) {\n        log.error \"[ERROR] Invalid option: '${peak_type}'. Valid options for 'peak_type': ${peak_types.join(', ')}.\"\n    }\n    def idr_vals = prefix ? \"${prefix}.idrValues.txt\" : \"idrValues.txt\"\n    def log_file = prefix ? \"${prefix}.log.txt\" : \"log.txt\"\n    \"\"\"\n    idr \\\\\n        --samples $peaks \\\\\n        --input-file-type $peak_type \\\\\n        --output-file $idr_vals \\\\\n        --log-output-file $log_file \\\\\n        --plot \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        idr: \\$(echo \\$(idr --version 2>&1) | sed 's/^.*IDR //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 47,
        "string_script": "    def args = task.ext.args ?: ''\n    if (peaks.toList().size < 2) {\n        log.error \"[ERROR] idr needs at least two replicates only one provided.\"\n    }\n    def peak_types = ['narrowPeak', 'broadPeak', 'bed']\n    if (!peak_types.contains(peak_type)) {\n        log.error \"[ERROR] Invalid option: '${peak_type}'. Valid options for 'peak_type': ${peak_types.join(', ')}.\"\n    }\n    def idr_vals = prefix ? \"${prefix}.idrValues.txt\" : \"idrValues.txt\"\n    def log_file = prefix ? \"${prefix}.log.txt\" : \"log.txt\"\n    \"\"\"\n    idr \\\\\n        --samples $peaks \\\\\n        --input-file-type $peak_type \\\\\n        --output-file $idr_vals \\\\\n        --log-output-file $log_file \\\\\n        --plot \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        idr: \\$(echo \\$(idr --version 2>&1) | sed 's/^.*IDR //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 23,
        "language_script": "bash",
        "tools": [
            "SIDR"
        ],
        "tools_url": [
            "https://bio.tools/sidr"
        ],
        "tools_dico": [
            {
                "name": "SIDR",
                "uri": "https://bio.tools/sidr",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomic classification"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomy assignment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Tool to filter Next Generation Sequencing (NGS) data based on a chosen target organism. It uses data fron BLAST (or similar classifiers) to train a Decision Tree model to classify sequence data as either belonging to the target organism, or belonging to something else. This classification can be used to filter the data for later assembly.",
                "homepage": "https://sidr.readthedocs.io/en/latest/"
            }
        ],
        "inputs": [
            "peaks",
            "peak_type",
            "prefix"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$prefix\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::idr=2.0.4.2\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/idr:2.0.4.2--py39hcbe4a3b_5' : 'quay.io/biocontainers/idr:2.0.4.2--py39hcbe4a3b_5' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "GATK4_FASTQTOSAM": {
        "name_process": "GATK4_FASTQTOSAM",
        "string_process": "process GATK4_FASTQTOSAM {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::gatk4=4.2.6.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/gatk4:4.2.6.1--hdfd78af_0':\n        'quay.io/biocontainers/gatk4:4.2.6.1--hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path(\"*.bam\"), emit: bam\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def reads_command = meta.single_end ? \"--FASTQ $reads\" : \"--FASTQ ${reads[0]} --FASTQ2 ${reads[1]}\"\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[GATK FastqToSam] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    gatk --java-options \"-Xmx${avail_mem}g\" FastqToSam \\\\\n        $reads_command \\\\\n        --OUTPUT ${prefix}.bam \\\\\n        --SAMPLE_NAME $prefix \\\\\n        --TMP_DIR . \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 42,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def reads_command = meta.single_end ? \"--FASTQ $reads\" : \"--FASTQ ${reads[0]} --FASTQ2 ${reads[1]}\"\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[GATK FastqToSam] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    gatk --java-options \"-Xmx${avail_mem}g\" FastqToSam \\\\\n        $reads_command \\\\\n        --OUTPUT ${prefix}.bam \\\\\n        --SAMPLE_NAME $prefix \\\\\n        --TMP_DIR . \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 22,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::gatk4=4.2.6.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/gatk4:4.2.6.1--hdfd78af_0': 'quay.io/biocontainers/gatk4:4.2.6.1--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "PYCOQC": {
        "name_process": "PYCOQC",
        "string_process": "process PYCOQC {\n    tag \"$summary\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::pycoqc=2.5.2\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/pycoqc:2.5.2--py_0' :\n        'quay.io/biocontainers/pycoqc:2.5.2--py_0' }\"\n\n    input:\n    path summary\n\n    output:\n    path \"*.html\"        , emit: html\n    path \"*.json\"        , emit: json\n    path  \"versions.yml\" , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    pycoQC \\\\\n        $args \\\\\n        -f $summary \\\\\n        -o pycoqc.html \\\\\n        -j pycoqc.json\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        pycoqc: \\$(pycoQC --version 2>&1 | sed 's/^.*pycoQC v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    pycoQC \\\\\n        $args \\\\\n        -f $summary \\\\\n        -o pycoqc.html \\\\\n        -j pycoqc.json\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        pycoqc: \\$(pycoQC --version 2>&1 | sed 's/^.*pycoQC v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "summary"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$summary\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::pycoqc=2.5.2\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/pycoqc:2.5.2--py_0' : 'quay.io/biocontainers/pycoqc:2.5.2--py_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "FGBIO_CALLMOLECULARCONSENSUSREADS": {
        "name_process": "FGBIO_CALLMOLECULARCONSENSUSREADS",
        "string_process": "process FGBIO_CALLMOLECULARCONSENSUSREADS {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::fgbio=1.3.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/fgbio:1.3.0--0' :\n        'quay.io/biocontainers/fgbio:1.3.0--0' }\"\n\n    input:\n    tuple val(meta), path(bam)\n\n    output:\n    tuple val(meta), path(\"*.bam\"), emit: bam\n    path  \"versions.yml\"          , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    fgbio \\\\\n        CallMolecularConsensusReads \\\\\n        -i $bam \\\\\n        $args \\\\\n        -o ${prefix}.bam\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        fgbio: \\$( echo \\$(fgbio --version 2>&1 | tr -d '[:cntrl:]' ) | sed -e 's/^.*Version: //;s/\\\\[.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    fgbio \\\\\n        CallMolecularConsensusReads \\\\\n        -i $bam \\\\\n        $args \\\\\n        -o ${prefix}.bam\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        fgbio: \\$( echo \\$(fgbio --version 2>&1 | tr -d '[:cntrl:]' ) | sed -e 's/^.*Version: //;s/\\\\[.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "bam"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::fgbio=1.3.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/fgbio:1.3.0--0' : 'quay.io/biocontainers/fgbio:1.3.0--0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "SAMTOOLS_FASTQ": {
        "name_process": "SAMTOOLS_FASTQ",
        "string_process": "process SAMTOOLS_FASTQ {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::samtools=1.15.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/samtools:1.15.1--h1170115_0' :\n        'quay.io/biocontainers/samtools:1.15.1--h1170115_0' }\"\n\n    input:\n    tuple val(meta), path(bam)\n\n    output:\n    tuple val(meta), path(\"*.fastq.gz\"), emit: fastq\n    path  \"versions.yml\"               , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def endedness = meta.single_end ? \"-0 ${prefix}.fastq.gz\" : \"-1 ${prefix}_1.fastq.gz -2 ${prefix}_2.fastq.gz\"\n    \"\"\"\n    samtools \\\\\n        fastq \\\\\n        $args \\\\\n        --threads ${task.cpus-1} \\\\\n        $endedness \\\\\n        $bam\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def endedness = meta.single_end ? \"-0 ${prefix}.fastq.gz\" : \"-1 ${prefix}_1.fastq.gz -2 ${prefix}_2.fastq.gz\"\n    \"\"\"\n    samtools \\\\\n        fastq \\\\\n        $args \\\\\n        --threads ${task.cpus-1} \\\\\n        $endedness \\\\\n        $bam\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [
            "SAMtools",
            "FastQC"
        ],
        "tools_url": [
            "https://bio.tools/samtools",
            "https://bio.tools/fastqc"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            }
        ],
        "inputs": [
            "meta",
            "bam"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::samtools=1.15.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/samtools:1.15.1--h1170115_0' : 'quay.io/biocontainers/samtools:1.15.1--h1170115_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "ICHORCNA_RUN": {
        "name_process": "ICHORCNA_RUN",
        "string_process": "\nprocess ICHORCNA_RUN {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::r-ichorcna=0.3.2\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/r-ichorcna:0.3.2--r41hdfd78af_0' :\n        'quay.io/biocontainers/r-ichorcna:0.3.2--r41hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(wig)\n    path gc_wig\n    path map_wig\n    path panel_of_normals\n    path centromere\n\n    output:\n    tuple val(meta), path(\"*.cna.seg\")    , emit: cna_seg\n    tuple val(meta), path(\"*.params.txt\") , emit: ichorcna_params\n    path \"**/*genomeWide.pdf\"             , emit: genome_plot\n    path \"versions.yml\"                   , emit: versions\n\n    when:\n        task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def pon = panel_of_normals ? \"--normalPanel ${panel_of_normals}\" : ''\n    def centro = centromere ? \"--centromere ${centromere}\" : ''\n\n    \"\"\"\n    runIchorCNA.R --id ${prefix} \\\\\n        $args \\\\\n        --WIG ${wig} \\\\\n        --id ${meta.id} \\\\\n        --gcWig ${gc_wig} \\\\\n        --mapWig ${map_wig} \\\\\n        ${pon} \\\\\n        ${centro} \\\\\n        --outDir .\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        ichorcna: $VERSION\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 47,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def pon = panel_of_normals ? \"--normalPanel ${panel_of_normals}\" : ''\n    def centro = centromere ? \"--centromere ${centromere}\" : ''\n\n    \"\"\"\n    runIchorCNA.R --id ${prefix} \\\\\n        $args \\\\\n        --WIG ${wig} \\\\\n        --id ${meta.id} \\\\\n        --gcWig ${gc_wig} \\\\\n        --mapWig ${map_wig} \\\\\n        ${pon} \\\\\n        ${centro} \\\\\n        --outDir .\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        ichorcna: $VERSION\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 20,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "wig",
            "gc_wig",
            "map_wig",
            "panel_of_normals",
            "centromere"
        ],
        "nb_inputs": 6,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::r-ichorcna=0.3.2\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/r-ichorcna:0.3.2--r41hdfd78af_0' : 'quay.io/biocontainers/r-ichorcna:0.3.2--r41hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "CSVTK_SPLIT": {
        "name_process": "CSVTK_SPLIT",
        "string_process": "process CSVTK_SPLIT {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::csvtk=0.23.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/csvtk:0.23.0--h9ee0642_0' :\n        'quay.io/biocontainers/csvtk:0.23.0--h9ee0642_0' }\"\n\n    input:\n    tuple val(meta), path(csv)\n    val in_format\n    val out_format\n\n    output:\n    tuple val(meta), path(\"*.${out_extension}\"), emit: split_csv\n    path \"versions.yml\"                        , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def delimiter = in_format == \"tsv\" ? \"--tabs\" : (in_format == \"csv\" ? \"--delimiter ',' \" : in_format)\n    def out_delimiter = out_format == \"tsv\" ? \"--out-tabs\" : (out_format == \"csv\" ? \"--out-delimiter ',' \" : out_format)\n    out_extension = out_format == \"tsv\" ? 'tsv' : 'csv'\n    \"\"\"\n    sed -i.bak '/^##/d' $csv\n    csvtk \\\\\n        split \\\\\n        $args \\\\\n        --num-cpus $task.cpus \\\\\n        $delimiter \\\\\n        $out_delimiter \\\\\n        $csv\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        csvtk: \\$(echo \\$( csvtk version | sed -e 's/csvtk v//g' ))\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 41,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def delimiter = in_format == \"tsv\" ? \"--tabs\" : (in_format == \"csv\" ? \"--delimiter ',' \" : in_format)\n    def out_delimiter = out_format == \"tsv\" ? \"--out-tabs\" : (out_format == \"csv\" ? \"--out-delimiter ',' \" : out_format)\n    out_extension = out_format == \"tsv\" ? 'tsv' : 'csv'\n    \"\"\"\n    sed -i.bak '/^##/d' $csv\n    csvtk \\\\\n        split \\\\\n        $args \\\\\n        --num-cpus $task.cpus \\\\\n        $delimiter \\\\\n        $out_delimiter \\\\\n        $csv\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        csvtk: \\$(echo \\$( csvtk version | sed -e 's/csvtk v//g' ))\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "csv",
            "in_format",
            "out_format"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::csvtk=0.23.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/csvtk:0.23.0--h9ee0642_0' : 'quay.io/biocontainers/csvtk:0.23.0--h9ee0642_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "BWA_SAMSE": {
        "name_process": "BWA_SAMSE",
        "string_process": "process BWA_SAMSE {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::bwa=0.7.17 bioconda::samtools=1.15.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mulled-v2-fe8faa35dbf6dc65a0f7f5d4ea12e31a79f73e40:8110a70be2bfe7f75a2ea7f2a89cda4cc7732095-0' :\n        'quay.io/biocontainers/mulled-v2-fe8faa35dbf6dc65a0f7f5d4ea12e31a79f73e40:8110a70be2bfe7f75a2ea7f2a89cda4cc7732095-0' }\"\n\n    input:\n    tuple val(meta), path(reads), path(sai)\n    path index\n\n    output:\n    tuple val(meta), path(\"*.bam\"), emit: bam\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def read_group = meta.read_group ? \"-r ${meta.read_group}\" : \"\"\n\n    \"\"\"\n    INDEX=`find -L ./ -name \"*.amb\" | sed 's/.amb//'`\n\n    bwa samse \\\\\n        $args \\\\\n        $read_group \\\\\n        \\$INDEX \\\\\n        $sai \\\\\n        $reads | samtools sort -@ ${task.cpus - 1} -O bam - > ${prefix}.bam\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bwa: \\$(echo \\$(bwa 2>&1) | sed 's/^.*Version: //; s/Contact:.*\\$//')\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 40,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def read_group = meta.read_group ? \"-r ${meta.read_group}\" : \"\"\n\n    \"\"\"\n    INDEX=`find -L ./ -name \"*.amb\" | sed 's/.amb//'`\n\n    bwa samse \\\\\n        $args \\\\\n        $read_group \\\\\n        \\$INDEX \\\\\n        $sai \\\\\n        $reads | samtools sort -@ ${task.cpus - 1} -O bam - > ${prefix}.bam\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bwa: \\$(echo \\$(bwa 2>&1) | sed 's/^.*Version: //; s/Contact:.*\\$//')\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [
            "BWA",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/bwa",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "BWA",
                "uri": "https://bio.tools/bwa",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3211",
                                    "term": "Genome indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2044",
                                "term": "Sequence"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_2012",
                                "term": "Sequence coordinates"
                            },
                            {
                                "uri": "http://edamontology.org/data_1916",
                                "term": "Alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ]
                    }
                ],
                "description": "Fast, accurate, memory-efficient aligner for short and long sequencing reads",
                "homepage": "http://bio-bwa.sourceforge.net"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "sai",
            "index"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::bwa=0.7.17 bioconda::samtools=1.15.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mulled-v2-fe8faa35dbf6dc65a0f7f5d4ea12e31a79f73e40:8110a70be2bfe7f75a2ea7f2a89cda4cc7732095-0' : 'quay.io/biocontainers/mulled-v2-fe8faa35dbf6dc65a0f7f5d4ea12e31a79f73e40:8110a70be2bfe7f75a2ea7f2a89cda4cc7732095-0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "IMPUTEME_VCFTOPRS": {
        "name_process": "IMPUTEME_VCFTOPRS",
        "string_process": "process IMPUTEME_VCFTOPRS {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"YOUR-TOOL-HERE\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://containers.biocontainers.pro/s3/SingImgsRepo/imputeme/vv1.0.7_cv1/imputeme_vv1.0.7_cv1.img' :\n        'biocontainers/imputeme:vv1.0.7_cv1' }\"\n\n    input:\n    tuple val(meta), path(vcf)\n\n    output:\n    tuple val(meta), path(\"*.json\"), emit: json\n    path \"versions.yml\"            , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    #!/usr/bin/env Rscript\n\n    #Set configuration - either from args or from defaults\n    source(\"/imputeme/code/impute-me/functions.R\")\n    if(file.exists('$args')){\n        set_conf(\"set_from_file\",'$args')\n    }else{\n        set_conf(\"set_from_file\", \"/imputeme/code/impute-me/template/nextflow_default_configuration.R\")\n    }\n\n    #main run\n    return_message <- prepare_individual_genome('$vcf',overrule_vcf_checks=T)\n    uniqueID <- sub(' </b>.+\\$','',sub('^.+this run is <b> ','',return_message))\n    convert_vcfs_to_simple_format(uniqueID=uniqueID)\n    crawl_for_snps_to_analyze(uniqueIDs=uniqueID)\n    run_export_script(uniqueIDs=uniqueID)\n    file.copy(paste0(\"./\",uniqueID,\"/\",uniqueID,\"_data.json\"),\"output.json\")\n\n    #version export. Have to hardcode process name and software name because\n    #won't run inside an R-block\n    version_file_path=\"versions.yml\"\n    f <- file(version_file_path,\"w\")\n    writeLines(\"IMPUTEME_VCFTOPRS:\", f)\n    writeLines(paste0(\" imputeme: \", sub(\"^v\",\"\",get_conf(\"version\"))),f)\n    close(f)\n\n    \"\"\"\n\n}",
        "nb_lignes_process": 50,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    #!/usr/bin/env Rscript\n\n    #Set configuration - either from args or from defaults\n    source(\"/imputeme/code/impute-me/functions.R\")\n    if(file.exists('$args')){\n        set_conf(\"set_from_file\",'$args')\n    }else{\n        set_conf(\"set_from_file\", \"/imputeme/code/impute-me/template/nextflow_default_configuration.R\")\n    }\n\n    #main run\n    return_message <- prepare_individual_genome('$vcf',overrule_vcf_checks=T)\n    uniqueID <- sub(' </b>.+\\$','',sub('^.+this run is <b> ','',return_message))\n    convert_vcfs_to_simple_format(uniqueID=uniqueID)\n    crawl_for_snps_to_analyze(uniqueIDs=uniqueID)\n    run_export_script(uniqueIDs=uniqueID)\n    file.copy(paste0(\"./\",uniqueID,\"/\",uniqueID,\"_data.json\"),\"output.json\")\n\n    #version export. Have to hardcode process name and software name because\n    #won't run inside an R-block\n    version_file_path=\"versions.yml\"\n    f <- file(version_file_path,\"w\")\n    writeLines(\"IMPUTEME_VCFTOPRS:\", f)\n    writeLines(paste0(\" imputeme: \", sub(\"^v\",\"\",get_conf(\"version\"))),f)\n    close(f)\n\n    \"\"\"",
        "nb_lignes_script": 29,
        "language_script": "Rscript",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "vcf"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"YOUR-TOOL-HERE\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://containers.biocontainers.pro/s3/SingImgsRepo/imputeme/vv1.0.7_cv1/imputeme_vv1.0.7_cv1.img' : 'biocontainers/imputeme:vv1.0.7_cv1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "PICARD_SORTVCF": {
        "name_process": "PICARD_SORTVCF",
        "string_process": "process PICARD_SORTVCF {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::picard=2.27.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/picard:2.27.1--hdfd78af_0' :\n        'quay.io/biocontainers/picard:2.27.1--hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(vcf)\n    path reference\n    path sequence_dict\n\n    output:\n    tuple val(meta), path(\"*_sorted.vcf.gz\"), emit: vcf\n    path \"versions.yml\"                     , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def seq_dict = sequence_dict ? \"--SEQUENCE_DICTIONARY $sequence_dict\" : \"\"\n    def reference = reference ? \"--REFERENCE_SEQUENCE $reference\" : \"\"\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[Picard SortVcf] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n\n    \"\"\"\n    picard \\\\\n        SortVcf \\\\\n        -Xmx${avail_mem}g \\\\\n        --INPUT $vcf \\\\\n        $args \\\\\n        $seq_dict \\\\\n        $reference \\\\\n        --OUTPUT ${prefix}_sorted.vcf.gz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        picard: \\$(picard SortVcf --version 2>&1 | grep -o 'Version:.*' | cut -f2- -d:)\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}_sorted.vcf.gz\n    touch ${prefix}.bam.bai\n    touch ${prefix}.MarkDuplicates.metrics.txt\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        picard: \\$(picard SortVcf --version 2>&1 | grep -o 'Version:.*' | cut -f2- -d:)\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 60,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def seq_dict = sequence_dict ? \"--SEQUENCE_DICTIONARY $sequence_dict\" : \"\"\n    def reference = reference ? \"--REFERENCE_SEQUENCE $reference\" : \"\"\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[Picard SortVcf] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n\n    \"\"\"\n    picard \\\\\n        SortVcf \\\\\n        -Xmx${avail_mem}g \\\\\n        --INPUT $vcf \\\\\n        $args \\\\\n        $seq_dict \\\\\n        $reference \\\\\n        --OUTPUT ${prefix}_sorted.vcf.gz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        picard: \\$(picard SortVcf --version 2>&1 | grep -o 'Version:.*' | cut -f2- -d:)\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 25,
        "language_script": "bash",
        "tools": [
            "Picard"
        ],
        "tools_url": [
            "https://bio.tools/picard_tools"
        ],
        "tools_dico": [
            {
                "name": "Picard",
                "uri": "https://bio.tools/picard_tools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Sequence variation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Variant analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation annotation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A set of command line tools for manipulating high-throughput sequencing (HTS) data in formats such as SAM/BAM/CRAM and VCF. Available as a standalone program or within the GATK4 program.",
                "homepage": "https://github.com/broadinstitute/picard"
            }
        ],
        "inputs": [
            "meta",
            "vcf",
            "reference",
            "sequence_dict"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::picard=2.27.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/picard:2.27.1--hdfd78af_0' : 'quay.io/biocontainers/picard:2.27.1--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}_sorted.vcf.gz\n    touch ${prefix}.bam.bai\n    touch ${prefix}.MarkDuplicates.metrics.txt\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        picard: \\$(picard SortVcf --version 2>&1 | grep -o 'Version:.*' | cut -f2- -d:)\n    END_VERSIONS\n    \"\"\""
    },
    "LAST_TRAIN": {
        "name_process": "LAST_TRAIN",
        "string_process": "process LAST_TRAIN {\n    tag \"$meta.id\"\n    label 'process_high'\n\n    conda (params.enable_conda ? 'bioconda::last=1250' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/last:1250--h2e03b76_0' :\n        'quay.io/biocontainers/last:1250--h2e03b76_0' }\"\n\n    input:\n    tuple val(meta), path(fastx)\n    path  index\n\n    output:\n    tuple val(meta), path(\"*.par\"), emit: param_file\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    INDEX_NAME=\\$(basename \\$(ls $index/*.des) .des)\n\n    last-train \\\\\n        $args \\\\\n        -P $task.cpus \\\\\n        ${index}/\\$INDEX_NAME \\\\\n        $fastx \\\\\n        > ${prefix}.\\$INDEX_NAME.par\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        last: \\$(lastdb --version | sed 's/lastdb //')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 37,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    INDEX_NAME=\\$(basename \\$(ls $index/*.des) .des)\n\n    last-train \\\\\n        $args \\\\\n        -P $task.cpus \\\\\n        ${index}/\\$INDEX_NAME \\\\\n        $fastx \\\\\n        > ${prefix}.\\$INDEX_NAME.par\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        last: \\$(lastdb --version | sed 's/lastdb //')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "fastx",
            "index"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "conda (params.enable_conda ? 'bioconda::last=1250' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/last:1250--h2e03b76_0' : 'quay.io/biocontainers/last:1250--h2e03b76_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "SUBREAD_FEATURECOUNTS": {
        "name_process": "SUBREAD_FEATURECOUNTS",
        "string_process": "process SUBREAD_FEATURECOUNTS {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::subread=2.0.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/subread:2.0.1--hed695b0_0' :\n        'quay.io/biocontainers/subread:2.0.1--hed695b0_0' }\"\n\n    input:\n    tuple val(meta), path(bams), path(annotation)\n\n    output:\n    tuple val(meta), path(\"*featureCounts.txt\")        , emit: counts\n    tuple val(meta), path(\"*featureCounts.txt.summary\"), emit: summary\n    path \"versions.yml\"                                , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def paired_end = meta.single_end ? '' : '-p'\n\n    def strandedness = 0\n    if (meta.strandedness == 'forward') {\n        strandedness = 1\n    } else if (meta.strandedness == 'reverse') {\n        strandedness = 2\n    }\n    \"\"\"\n    featureCounts \\\\\n        $args \\\\\n        $paired_end \\\\\n        -T $task.cpus \\\\\n        -a $annotation \\\\\n        -s $strandedness \\\\\n        -o ${prefix}.featureCounts.txt \\\\\n        ${bams.join(' ')}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        subread: \\$( echo \\$(featureCounts -v 2>&1) | sed -e \"s/featureCounts v//g\")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 45,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def paired_end = meta.single_end ? '' : '-p'\n\n    def strandedness = 0\n    if (meta.strandedness == 'forward') {\n        strandedness = 1\n    } else if (meta.strandedness == 'reverse') {\n        strandedness = 2\n    }\n    \"\"\"\n    featureCounts \\\\\n        $args \\\\\n        $paired_end \\\\\n        -T $task.cpus \\\\\n        -a $annotation \\\\\n        -s $strandedness \\\\\n        -o ${prefix}.featureCounts.txt \\\\\n        ${bams.join(' ')}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        subread: \\$( echo \\$(featureCounts -v 2>&1) | sed -e \"s/featureCounts v//g\")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 24,
        "language_script": "bash",
        "tools": [
            "FeatureCounts"
        ],
        "tools_url": [
            "https://bio.tools/featurecounts"
        ],
        "tools_dico": [
            {
                "name": "FeatureCounts",
                "uri": "https://bio.tools/featurecounts",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3793",
                                    "term": "Read summarisation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "featureCounts is a very efficient read quantifier. It can be used to summarize RNA-seq reads and gDNA-seq reads to a variety of genomic features such as genes, exons, promoters, gene bodies and genomic bins. It is included in the Bioconductor Rsubread package and also in the SourceForge Subread package.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/Rsubread.html"
            }
        ],
        "inputs": [
            "meta",
            "bams",
            "annotation"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::subread=2.0.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/subread:2.0.1--hed695b0_0' : 'quay.io/biocontainers/subread:2.0.1--hed695b0_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "MUSCLE": {
        "name_process": "MUSCLE",
        "string_process": "process MUSCLE {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::muscle=3.8.1551\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/muscle:3.8.1551--h7d875b9_6' :\n        'quay.io/biocontainers/muscle:3.8.1551--h7d875b9_6' }\"\n\n    input:\n    tuple val(meta), path(fasta)\n\n    output:\n    tuple val(meta), path(\"*.afa\") , optional: true, emit: aligned_fasta\n    tuple val(meta), path(\"*.phyi\"), optional: true, emit: phyi\n    tuple val(meta), path(\"*.phys\"), optional: true, emit: phys\n    tuple val(meta), path(\"*.clw\") , optional: true, emit: clustalw\n    tuple val(meta), path(\"*.html\"), optional: true, emit: html\n    tuple val(meta), path(\"*.msf\") , optional: true, emit: msf\n    tuple val(meta), path(\"*.tree\"), optional: true, emit: tree\n    path \"*.log\"                                   , emit: log\n    path \"versions.yml\"                            , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def fasta_out = args.contains('-fasta') ? \"-fastaout ${prefix}_muscle_msa.afa\" : ''\n    def clw_out   = args.contains('-clw') ? \"-clwout ${prefix}_muscle_msa.clw\" : ''\n    def msf_out   = args.contains('-msf') ? \"-msfout ${prefix}_muscle_msa.msf\" : ''\n    def phys_out  = args.contains('-phys') ? \"-physout ${prefix}_muscle_msa.phys\" : ''\n    def phyi_out  = args.contains('-phyi') ? \"-phyiout ${prefix}_muscle_msa.phyi\" : ''\n    def html_out  = args.contains('-html') ? \"-htmlout ${prefix}_muscle_msa.html\" : ''\n    def tree_out  = args.contains('-maketree') ? \"-out ${prefix}_muscle_msa.tree\" : ''\n    \"\"\"\n    muscle \\\\\n        $args \\\\\n        -in $fasta \\\\\n        $fasta_out \\\\\n        $clw_out \\\\\n        $msf_out \\\\\n        $phys_out \\\\\n        $phyi_out \\\\\n        $html_out \\\\\n        $tree_out \\\\\n        -loga muscle_msa.log\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        muscle: \\$(muscle -version |  sed 's/^MUSCLE v//; s/by.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 52,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def fasta_out = args.contains('-fasta') ? \"-fastaout ${prefix}_muscle_msa.afa\" : ''\n    def clw_out   = args.contains('-clw') ? \"-clwout ${prefix}_muscle_msa.clw\" : ''\n    def msf_out   = args.contains('-msf') ? \"-msfout ${prefix}_muscle_msa.msf\" : ''\n    def phys_out  = args.contains('-phys') ? \"-physout ${prefix}_muscle_msa.phys\" : ''\n    def phyi_out  = args.contains('-phyi') ? \"-phyiout ${prefix}_muscle_msa.phyi\" : ''\n    def html_out  = args.contains('-html') ? \"-htmlout ${prefix}_muscle_msa.html\" : ''\n    def tree_out  = args.contains('-maketree') ? \"-out ${prefix}_muscle_msa.tree\" : ''\n    \"\"\"\n    muscle \\\\\n        $args \\\\\n        -in $fasta \\\\\n        $fasta_out \\\\\n        $clw_out \\\\\n        $msf_out \\\\\n        $phys_out \\\\\n        $phyi_out \\\\\n        $html_out \\\\\n        $tree_out \\\\\n        -loga muscle_msa.log\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        muscle: \\$(muscle -version |  sed 's/^MUSCLE v//; s/by.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 25,
        "language_script": "bash",
        "tools": [
            "MUSCLE"
        ],
        "tools_url": [
            "https://bio.tools/muscle"
        ],
        "tools_dico": [
            {
                "name": "MUSCLE",
                "uri": "https://bio.tools/muscle",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0492",
                                    "term": "Multiple sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0492",
                                    "term": "Multiple alignment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3494",
                                "term": "DNA sequence"
                            },
                            {
                                "uri": "http://edamontology.org/data_3495",
                                "term": "RNA sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            }
                        ]
                    }
                ],
                "description": "This tool performs multiple sequence alignments of nucleotide or amino acid sequences.",
                "homepage": "https://www.drive5.com/muscle/"
            }
        ],
        "inputs": [
            "meta",
            "fasta"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::muscle=3.8.1551\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/muscle:3.8.1551--h7d875b9_6' : 'quay.io/biocontainers/muscle:3.8.1551--h7d875b9_6' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "QUALIMAP_BAMQCCRAM": {
        "name_process": "QUALIMAP_BAMQCCRAM",
        "string_process": "process QUALIMAP_BAMQCCRAM {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::qualimap=2.2.2d bioconda::samtools=1.15.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mulled-v2-d3934ca6bb4e61334891ffa2e9a4c87a530e3188:61f6d4658ac88635fc37623af50bba77561988ab-0' :\n        'quay.io/biocontainers/mulled-v2-d3934ca6bb4e61334891ffa2e9a4c87a530e3188:61f6d4658ac88635fc37623af50bba77561988ab-0' }\"\n\n    input:\n    tuple val(meta), path(cram), path(crai)\n    path  gff\n    path  fasta\n    path  fasta_fai\n\n    output:\n    tuple val(meta), path(\"${prefix}\"), emit: results\n    path  \"versions.yml\"              , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args   ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n\n    def collect_pairs = meta.single_end ? '' : '--collect-overlap-pairs'\n    def memory     = task.memory.toGiga() + \"G\"\n    def regions = gff ? \"--gff $gff\" : ''\n\n    def strandedness = 'non-strand-specific'\n    if (meta.strandedness == 'forward') {\n        strandedness = 'strand-specific-forward'\n    } else if (meta.strandedness == 'reverse') {\n        strandedness = 'strand-specific-reverse'\n    }\n    \"\"\"\n    unset DISPLAY\n    mkdir tmp\n    export _JAVA_OPTIONS=-Djava.io.tmpdir=./tmp\n\n    samtools view -hb -T ${fasta} ${cram} |\n    qualimap \\\\\n        --java-mem-size=$memory \\\\\n        bamqc \\\\\n        $args \\\\\n        -bam /dev/stdin \\\\\n        $regions \\\\\n        -p $strandedness \\\\\n        $collect_pairs \\\\\n        -outdir $prefix \\\\\n        -nt $task.cpus\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        qualimap: \\$(echo \\$(qualimap 2>&1) | sed 's/^.*QualiMap v.//; s/Built.*\\$//')\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 58,
        "string_script": "    def args = task.ext.args   ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n\n    def collect_pairs = meta.single_end ? '' : '--collect-overlap-pairs'\n    def memory     = task.memory.toGiga() + \"G\"\n    def regions = gff ? \"--gff $gff\" : ''\n\n    def strandedness = 'non-strand-specific'\n    if (meta.strandedness == 'forward') {\n        strandedness = 'strand-specific-forward'\n    } else if (meta.strandedness == 'reverse') {\n        strandedness = 'strand-specific-reverse'\n    }\n    \"\"\"\n    unset DISPLAY\n    mkdir tmp\n    export _JAVA_OPTIONS=-Djava.io.tmpdir=./tmp\n\n    samtools view -hb -T ${fasta} ${cram} |\n    qualimap \\\\\n        --java-mem-size=$memory \\\\\n        bamqc \\\\\n        $args \\\\\n        -bam /dev/stdin \\\\\n        $regions \\\\\n        -p $strandedness \\\\\n        $collect_pairs \\\\\n        -outdir $prefix \\\\\n        -nt $task.cpus\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        qualimap: \\$(echo \\$(qualimap 2>&1) | sed 's/^.*QualiMap v.//; s/Built.*\\$//')\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 35,
        "language_script": "bash",
        "tools": [
            "SAMtools",
            "QualiMap"
        ],
        "tools_url": [
            "https://bio.tools/samtools",
            "https://bio.tools/qualimap"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "QualiMap",
                "uri": "https://bio.tools/qualimap",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Platform-independent application written in Java and R that provides both a Graphical User Inteface (GUI) and a command-line interface to facilitate the quality control of alignment sequencing data.",
                "homepage": "http://qualimap.bioinfo.cipf.es/"
            }
        ],
        "inputs": [
            "meta",
            "cram",
            "crai",
            "gff",
            "fasta",
            "fasta_fai"
        ],
        "nb_inputs": 6,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::qualimap=2.2.2d bioconda::samtools=1.15.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mulled-v2-d3934ca6bb4e61334891ffa2e9a4c87a530e3188:61f6d4658ac88635fc37623af50bba77561988ab-0' : 'quay.io/biocontainers/mulled-v2-d3934ca6bb4e61334891ffa2e9a4c87a530e3188:61f6d4658ac88635fc37623af50bba77561988ab-0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "ADAPTERREMOVALFIXPREFIX": {
        "name_process": "ADAPTERREMOVALFIXPREFIX",
        "string_process": "\nprocess ADAPTERREMOVALFIXPREFIX {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::adapterremovalfixprefix=0.0.5\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/adapterremovalfixprefix:0.0.5--hdfd78af_2':\n        'quay.io/biocontainers/adapterremovalfixprefix:0.0.5--hdfd78af_2' }\"\n\n    input:\n    tuple val(meta), path(fastq)\n\n    output:\n    tuple val(meta), path(\"*.fq.gz\"), emit: fixed_fastq\n    path \"versions.yml\"             , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (\"$fastq\" == \"${prefix}.fq.gz\") error \"Input and output names are the same, set prefix in module configuration to disambiguate!\"\n\n    \"\"\"\n    AdapterRemovalFixPrefix \\\\\n        $fastq \\\\\n        $args \\\\\n        | gzip > ${prefix}.fq.gz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        adapterremovalfixprefix: $VERSION\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (\"$fastq\" == \"${prefix}.fq.gz\") error \"Input and output names are the same, set prefix in module configuration to disambiguate!\"\n\n    \"\"\"\n    AdapterRemovalFixPrefix \\\\\n        $fastq \\\\\n        $args \\\\\n        | gzip > ${prefix}.fq.gz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        adapterremovalfixprefix: $VERSION\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "fastq"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::adapterremovalfixprefix=0.0.5\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/adapterremovalfixprefix:0.0.5--hdfd78af_2': 'quay.io/biocontainers/adapterremovalfixprefix:0.0.5--hdfd78af_2' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "PICARD_COLLECTWGSMETRICS": {
        "name_process": "PICARD_COLLECTWGSMETRICS",
        "string_process": "process PICARD_COLLECTWGSMETRICS {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::picard=2.27.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/picard:2.27.1--hdfd78af_0' :\n        'quay.io/biocontainers/picard:2.27.1--hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(bam)\n    path  fasta\n\n    output:\n    tuple val(meta), path(\"*_metrics\"), emit: metrics\n    path  \"versions.yml\"              , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[Picard CollectWgsMetrics] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    picard \\\\\n        -Xmx${avail_mem}g \\\\\n        CollectWgsMetrics \\\\\n        $args \\\\\n        --INPUT $bam \\\\\n        --OUTPUT ${prefix}.CollectWgsMetrics.coverage_metrics \\\\\n        --REFERENCE_SEQUENCE $fasta\n\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        picard: \\$(picard CollectWgsMetrics --version 2>&1 | grep -o 'Version.*' | cut -f2- -d:)\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 43,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[Picard CollectWgsMetrics] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    picard \\\\\n        -Xmx${avail_mem}g \\\\\n        CollectWgsMetrics \\\\\n        $args \\\\\n        --INPUT $bam \\\\\n        --OUTPUT ${prefix}.CollectWgsMetrics.coverage_metrics \\\\\n        --REFERENCE_SEQUENCE $fasta\n\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        picard: \\$(picard CollectWgsMetrics --version 2>&1 | grep -o 'Version.*' | cut -f2- -d:)\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 22,
        "language_script": "bash",
        "tools": [
            "Picard"
        ],
        "tools_url": [
            "https://bio.tools/picard_tools"
        ],
        "tools_dico": [
            {
                "name": "Picard",
                "uri": "https://bio.tools/picard_tools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Sequence variation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Variant analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation annotation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A set of command line tools for manipulating high-throughput sequencing (HTS) data in formats such as SAM/BAM/CRAM and VCF. Available as a standalone program or within the GATK4 program.",
                "homepage": "https://github.com/broadinstitute/picard"
            }
        ],
        "inputs": [
            "meta",
            "bam",
            "fasta"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::picard=2.27.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/picard:2.27.1--hdfd78af_0' : 'quay.io/biocontainers/picard:2.27.1--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "HMMER_HMMSEARCH": {
        "name_process": "HMMER_HMMSEARCH",
        "string_process": "process HMMER_HMMSEARCH {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::hmmer=3.3.2\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/hmmer:3.3.2--h1b792b2_1' :\n        'quay.io/biocontainers/hmmer:3.3.2--h1b792b2_1' }\"\n\n    input:\n    tuple val(meta), path(hmmfile), path(seqdb), val(write_align), val(write_target), val(write_domain)\n\n    output:\n    tuple val(meta), path('*.txt.gz')    , emit: output\n    tuple val(meta), path('*.sto.gz')   , emit: alignments    , optional: true\n    tuple val(meta), path('*.tbl.gz')   , emit: target_summary, optional: true\n    tuple val(meta), path('*.domtbl.gz'), emit: domain_summary, optional: true\n    path \"versions.yml\"              , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    output = \"${prefix}.txt\"\n    alignment = write_align ? \"-A ${prefix}.sto\" : ''\n    target_summary = write_target ? \"--tblout ${prefix}.tbl\" : ''\n    domain_summary = write_domain ? \"--domtblout ${prefix}.domtbl\" :  ''\n    \"\"\"\n    hmmsearch \\\\\n        $args \\\\\n        --cpu $task.cpus \\\\\n        -o $output \\\\\n        $alignment \\\\\n        $target_summary \\\\\n        $domain_summary \\\\\n        $hmmfile \\\\\n        $seqdb\n\n    gzip --no-name *.txt \\\\\n        ${write_align ? '*.sto' : ''} \\\\\n        ${write_target ? '*.tbl' : ''} \\\\\n        ${write_domain ? '*.domtbl' : ''}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        hmmer: \\$(hmmsearch -h | grep -o '^# HMMER [0-9.]*' | sed 's/^# HMMER *//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 49,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    output = \"${prefix}.txt\"\n    alignment = write_align ? \"-A ${prefix}.sto\" : ''\n    target_summary = write_target ? \"--tblout ${prefix}.tbl\" : ''\n    domain_summary = write_domain ? \"--domtblout ${prefix}.domtbl\" :  ''\n    \"\"\"\n    hmmsearch \\\\\n        $args \\\\\n        --cpu $task.cpus \\\\\n        -o $output \\\\\n        $alignment \\\\\n        $target_summary \\\\\n        $domain_summary \\\\\n        $hmmfile \\\\\n        $seqdb\n\n    gzip --no-name *.txt \\\\\n        ${write_align ? '*.sto' : ''} \\\\\n        ${write_target ? '*.tbl' : ''} \\\\\n        ${write_domain ? '*.domtbl' : ''}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        hmmer: \\$(hmmsearch -h | grep -o '^# HMMER [0-9.]*' | sed 's/^# HMMER *//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 26,
        "language_script": "bash",
        "tools": [
            "wossoutput",
            "GPalignment"
        ],
        "tools_url": [
            "https://bio.tools/wossoutput",
            "https://bio.tools/gpalignment"
        ],
        "tools_dico": [
            {
                "name": "wossoutput",
                "uri": "https://bio.tools/wossoutput",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0219",
                            "term": "Data submission, annotation and curation"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0958",
                                "term": "Tool metadata"
                            }
                        ]
                    }
                ],
                "description": "Find programs by EDAM output data.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/wossoutput.html"
            },
            {
                "name": "GPalignment",
                "uri": "https://bio.tools/gpalignment",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Whole genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0194",
                            "term": "Phylogenomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "WGS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3182",
                                    "term": "Genome alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0295",
                                    "term": "Structure alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0300",
                                    "term": "Sequence profile alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3182",
                                    "term": "Genome alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3182",
                                    "term": "Whole genome alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0295",
                                    "term": "Structural alignment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Efficient merging of genome profile alignments | Andr\u00e9 Hennig authored Jul 17, 2019",
                "homepage": "https://lambda.informatik.uni-tuebingen.de/gitlab/ahennig/GPA"
            }
        ],
        "inputs": [
            "meta",
            "write_align",
            "write_target",
            "write_domain",
            "hmmfile",
            "seqdb"
        ],
        "nb_inputs": 6,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::hmmer=3.3.2\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/hmmer:3.3.2--h1b792b2_1' : 'quay.io/biocontainers/hmmer:3.3.2--h1b792b2_1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "DSHBIO_EXPORTSEGMENTS": {
        "name_process": "DSHBIO_EXPORTSEGMENTS",
        "string_process": "process DSHBIO_EXPORTSEGMENTS {\n    tag \"${meta.id}\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::dsh-bio=2.0.8\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/dsh-bio:2.0.8--hdfd78af_0' :\n        'quay.io/biocontainers/dsh-bio:2.0.8--hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(gfa)\n\n    output:\n    tuple val(meta), path(\"*.fa.gz\"), emit: fasta\n    path \"versions.yml\"              , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    dsh-bio \\\\\n        export-segments \\\\\n        $args \\\\\n        -i $gfa \\\\\n        -o ${prefix}.fa.gz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        dshbio: \\$(dsh-bio --version 2>&1 | grep -o 'dsh-bio-tools .*' | cut -f2 -d ' ')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    dsh-bio \\\\\n        export-segments \\\\\n        $args \\\\\n        -i $gfa \\\\\n        -o ${prefix}.fa.gz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        dshbio: \\$(dsh-bio --version 2>&1 | grep -o 'dsh-bio-tools .*' | cut -f2 -d ' ')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "gfa"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"${meta.id}\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::dsh-bio=2.0.8\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/dsh-bio:2.0.8--hdfd78af_0' : 'quay.io/biocontainers/dsh-bio:2.0.8--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "BISCUIT_PILEUP": {
        "name_process": "BISCUIT_PILEUP",
        "string_process": "process BISCUIT_PILEUP {\n    tag \"$meta.id\"\n    label 'process_high'\n\n    conda (params.enable_conda ? \"bioconda::biscuit=1.0.2.20220113 bioconda::samtools=1.15\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mulled-v2-db16f1c237a26ea9245cf9924f858974ff321d6e:17fa66297f088a1bc7560b7b90dc273bf23f2d8c-0':\n        'quay.io/biocontainers/mulled-v2-db16f1c237a26ea9245cf9924f858974ff321d6e:17fa66297f088a1bc7560b7b90dc273bf23f2d8c-0' }\"\n\n    input:\n    tuple val(meta), path(normal_bams), path(normal_bais), path(tumor_bam), path(tumor_bai)\n    path index\n\n    output:\n    tuple val(meta), path(\"*.vcf.gz\"), emit: vcf\n    path \"versions.yml\"              , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def biscuit_cpus = (int) Math.max(Math.floor(task.cpus*0.9),1)\n    def bgzip_cpus = task.cpus-biscuit_cpus\n    if ( tumor_bam != [] && normal_bams.toList().size() > 1 ) error \"[BISCUIT_PILEUP] error: Tumor BAM provided with more than one normal BAM\"\n    if ( tumor_bam.toList().size() > 1 ) error \"[BISCUIT_PILEUP] error: more than one tumor BAM provided\"\n    input = ( tumor_bam==[] ) ? \"${normal_bams}\" : \"-S -T ${tumor_bam} -I ${normal_bams}\"\n    \"\"\"\n    INDEX=`find -L ./ -name \"*.bis.amb\" | sed 's/.bis.amb//'`\n\n    biscuit pileup \\\\\n        -@ $biscuit_cpus \\\\\n        $args \\\\\n        \\$INDEX \\\\\n        $input \\\\\n        | bgzip -@ $bgzip_cpus $args2 > ${prefix}.vcf.gz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        biscuit: \\$( biscuit version |& sed '1!d; s/^.*BISCUIT Version: //' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 43,
        "string_script": "    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def biscuit_cpus = (int) Math.max(Math.floor(task.cpus*0.9),1)\n    def bgzip_cpus = task.cpus-biscuit_cpus\n    if ( tumor_bam != [] && normal_bams.toList().size() > 1 ) error \"[BISCUIT_PILEUP] error: Tumor BAM provided with more than one normal BAM\"\n    if ( tumor_bam.toList().size() > 1 ) error \"[BISCUIT_PILEUP] error: more than one tumor BAM provided\"\n    input = ( tumor_bam==[] ) ? \"${normal_bams}\" : \"-S -T ${tumor_bam} -I ${normal_bams}\"\n    \"\"\"\n    INDEX=`find -L ./ -name \"*.bis.amb\" | sed 's/.bis.amb//'`\n\n    biscuit pileup \\\\\n        -@ $biscuit_cpus \\\\\n        $args \\\\\n        \\$INDEX \\\\\n        $input \\\\\n        | bgzip -@ $bgzip_cpus $args2 > ${prefix}.vcf.gz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        biscuit: \\$( biscuit version |& sed '1!d; s/^.*BISCUIT Version: //' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 22,
        "language_script": "bash",
        "tools": [
            "wossinput"
        ],
        "tools_url": [
            "https://bio.tools/wossinput"
        ],
        "tools_dico": [
            {
                "name": "wossinput",
                "uri": "https://bio.tools/wossinput",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0219",
                            "term": "Data submission, annotation and curation"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0958",
                                "term": "Tool metadata"
                            }
                        ]
                    }
                ],
                "description": "Find programs by EDAM input data.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/wossinput.html"
            }
        ],
        "inputs": [
            "meta",
            "normal_bams",
            "normal_bais",
            "tumor_bam",
            "tumor_bai",
            "index"
        ],
        "nb_inputs": 6,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "conda (params.enable_conda ? \"bioconda::biscuit=1.0.2.20220113 bioconda::samtools=1.15\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mulled-v2-db16f1c237a26ea9245cf9924f858974ff321d6e:17fa66297f088a1bc7560b7b90dc273bf23f2d8c-0': 'quay.io/biocontainers/mulled-v2-db16f1c237a26ea9245cf9924f858974ff321d6e:17fa66297f088a1bc7560b7b90dc273bf23f2d8c-0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "ABRICATE_RUN": {
        "name_process": "ABRICATE_RUN",
        "string_process": "process ABRICATE_RUN {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::abricate=1.0.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/abricate%3A1.0.1--ha8f3691_1':\n        'quay.io/biocontainers/abricate:1.0.1--ha8f3691_1' }\"\n\n    input:\n    tuple val(meta), path(assembly)\n\n    output:\n    tuple val(meta), path(\"*.txt\"), emit: report\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    abricate \\\\\n        $assembly \\\\\n        $args \\\\\n        --threads $task.cpus > ${prefix}.txt\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        abricate: \\$(echo \\$(abricate --version 2>&1) | sed 's/^.*abricate //' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    abricate \\\\\n        $assembly \\\\\n        $args \\\\\n        --threads $task.cpus > ${prefix}.txt\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        abricate: \\$(echo \\$(abricate --version 2>&1) | sed 's/^.*abricate //' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [
            "ABRicate"
        ],
        "tools_url": [
            "https://bio.tools/ABRicate"
        ],
        "tools_dico": [
            {
                "name": "ABRicate",
                "uri": "https://bio.tools/ABRicate",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3301",
                            "term": "Microbiology"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3482",
                                    "term": "Antimicrobial resistance prediction"
                                }
                            ],
                            []
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3494",
                                "term": "DNA sequence"
                            },
                            {
                                "uri": "http://edamontology.org/data_1234",
                                "term": "Sequence set (nucleic acid)"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0916",
                                "term": "Gene report"
                            }
                        ]
                    }
                ],
                "description": "Mass screening of contigs for antimicrobial resistance or virulence genes.",
                "homepage": "https://github.com/tseemann/abricate"
            }
        ],
        "inputs": [
            "meta",
            "assembly"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::abricate=1.0.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/abricate%3A1.0.1--ha8f3691_1': 'quay.io/biocontainers/abricate:1.0.1--ha8f3691_1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "BISCUIT_ALIGN": {
        "name_process": "BISCUIT_ALIGN",
        "string_process": "process BISCUIT_ALIGN {\n    tag \"$meta.id\"\n    label 'process_high'\n\n    conda (params.enable_conda ? \"bioconda::biscuit=1.0.2.20220113 bioconda::samtools=1.15\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mulled-v2-db16f1c237a26ea9245cf9924f858974ff321d6e:17fa66297f088a1bc7560b7b90dc273bf23f2d8c-0':\n        'quay.io/biocontainers/mulled-v2-db16f1c237a26ea9245cf9924f858974ff321d6e:17fa66297f088a1bc7560b7b90dc273bf23f2d8c-0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n    path index\n\n    output:\n    tuple val(meta), path(\"*.bam\"), emit: bam\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def biscuit_cpus = (int) Math.max(Math.floor(task.cpus*0.9),1)\n    def samtools_cpus = task.cpus-biscuit_cpus\n    \"\"\"\n    INDEX=`find -L ./ -name \"*.bis.amb\" | sed 's/.bis.amb//'`\n\n    biscuit align \\\\\n        $args \\\\\n        -@ $biscuit_cpus \\\\\n        \\$INDEX \\\\\n        $reads \\\\\n        | samtools sort $args2 --threads $samtools_cpus -o ${prefix}.bam -\n\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        biscuit: \\$( biscuit version |& sed '1!d; s/^.*BISCUIT Version: //' )\n        samtools: \\$( samtools --version |& sed '1!d; s/^.*samtools //' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 42,
        "string_script": "    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def biscuit_cpus = (int) Math.max(Math.floor(task.cpus*0.9),1)\n    def samtools_cpus = task.cpus-biscuit_cpus\n    \"\"\"\n    INDEX=`find -L ./ -name \"*.bis.amb\" | sed 's/.bis.amb//'`\n\n    biscuit align \\\\\n        $args \\\\\n        -@ $biscuit_cpus \\\\\n        \\$INDEX \\\\\n        $reads \\\\\n        | samtools sort $args2 --threads $samtools_cpus -o ${prefix}.bam -\n\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        biscuit: \\$( biscuit version |& sed '1!d; s/^.*BISCUIT Version: //' )\n        samtools: \\$( samtools --version |& sed '1!d; s/^.*samtools //' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 21,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "index"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "conda (params.enable_conda ? \"bioconda::biscuit=1.0.2.20220113 bioconda::samtools=1.15\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mulled-v2-db16f1c237a26ea9245cf9924f858974ff321d6e:17fa66297f088a1bc7560b7b90dc273bf23f2d8c-0': 'quay.io/biocontainers/mulled-v2-db16f1c237a26ea9245cf9924f858974ff321d6e:17fa66297f088a1bc7560b7b90dc273bf23f2d8c-0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "MANTA_GERMLINE": {
        "name_process": "MANTA_GERMLINE",
        "string_process": "process MANTA_GERMLINE {\n    tag \"$meta.id\"\n    label 'process_high'\n\n    conda (params.enable_conda ? \"bioconda::manta=1.6.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/manta:1.6.0--h9ee0642_1' :\n        'quay.io/biocontainers/manta:1.6.0--h9ee0642_1' }\"\n\n    input:\n                                                                                                                                             \n    tuple val(meta), path(input), path(index), path(target_bed), path(target_bed_tbi)\n    path fasta\n    path fasta_fai\n\n    output:\n    tuple val(meta), path(\"*candidate_small_indels.vcf.gz\")    , emit: candidate_small_indels_vcf\n    tuple val(meta), path(\"*candidate_small_indels.vcf.gz.tbi\"), emit: candidate_small_indels_vcf_tbi\n    tuple val(meta), path(\"*candidate_sv.vcf.gz\")              , emit: candidate_sv_vcf\n    tuple val(meta), path(\"*candidate_sv.vcf.gz.tbi\")          , emit: candidate_sv_vcf_tbi\n    tuple val(meta), path(\"*diploid_sv.vcf.gz\")                , emit: diploid_sv_vcf\n    tuple val(meta), path(\"*diploid_sv.vcf.gz.tbi\")            , emit: diploid_sv_vcf_tbi\n    path \"versions.yml\"                                        , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def input_files = input.collect{\"--bam ${it}\"}.join(' ')\n    def options_manta = target_bed ? \"--callRegions $target_bed\" : \"\"\n    \"\"\"\n    configManta.py \\\n        ${input_files} \\\n        --reference $fasta \\\n        --runDir manta \\\n        $options_manta \\\n        $args\n\n    python manta/runWorkflow.py -m local -j $task.cpus\n\n    mv manta/results/variants/candidateSmallIndels.vcf.gz \\\n        ${prefix}.candidate_small_indels.vcf.gz\n    mv manta/results/variants/candidateSmallIndels.vcf.gz.tbi \\\n        ${prefix}.candidate_small_indels.vcf.gz.tbi\n    mv manta/results/variants/candidateSV.vcf.gz \\\n        ${prefix}.candidate_sv.vcf.gz\n    mv manta/results/variants/candidateSV.vcf.gz.tbi \\\n        ${prefix}.candidate_sv.vcf.gz.tbi\n    mv manta/results/variants/diploidSV.vcf.gz \\\n        ${prefix}.diploid_sv.vcf.gz\n    mv manta/results/variants/diploidSV.vcf.gz.tbi \\\n        ${prefix}.diploid_sv.vcf.gz.tbi\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        manta: \\$( configManta.py --version )\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.candidate_small_indels.vcf.gz\n    touch ${prefix}.candidate_small_indels.vcf.gz.tbi\n    touch ${prefix}.candidate_sv.vcf.gz\n    touch ${prefix}.candidate_sv.vcf.gz.tbi\n    touch ${prefix}.diploid_sv.vcf.gz\n    touch ${prefix}.diploid_sv.vcf.gz.tbi\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        manta: \\$( configManta.py --version )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 75,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def input_files = input.collect{\"--bam ${it}\"}.join(' ')\n    def options_manta = target_bed ? \"--callRegions $target_bed\" : \"\"\n    \"\"\"\n    configManta.py \\\n        ${input_files} \\\n        --reference $fasta \\\n        --runDir manta \\\n        $options_manta \\\n        $args\n\n    python manta/runWorkflow.py -m local -j $task.cpus\n\n    mv manta/results/variants/candidateSmallIndels.vcf.gz \\\n        ${prefix}.candidate_small_indels.vcf.gz\n    mv manta/results/variants/candidateSmallIndels.vcf.gz.tbi \\\n        ${prefix}.candidate_small_indels.vcf.gz.tbi\n    mv manta/results/variants/candidateSV.vcf.gz \\\n        ${prefix}.candidate_sv.vcf.gz\n    mv manta/results/variants/candidateSV.vcf.gz.tbi \\\n        ${prefix}.candidate_sv.vcf.gz.tbi\n    mv manta/results/variants/diploidSV.vcf.gz \\\n        ${prefix}.diploid_sv.vcf.gz\n    mv manta/results/variants/diploidSV.vcf.gz.tbi \\\n        ${prefix}.diploid_sv.vcf.gz.tbi\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        manta: \\$( configManta.py --version )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 31,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "input",
            "index",
            "target_bed",
            "target_bed_tbi",
            "fasta",
            "fasta_fai"
        ],
        "nb_inputs": 7,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "conda (params.enable_conda ? \"bioconda::manta=1.6.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/manta:1.6.0--h9ee0642_1' : 'quay.io/biocontainers/manta:1.6.0--h9ee0642_1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.candidate_small_indels.vcf.gz\n    touch ${prefix}.candidate_small_indels.vcf.gz.tbi\n    touch ${prefix}.candidate_sv.vcf.gz\n    touch ${prefix}.candidate_sv.vcf.gz.tbi\n    touch ${prefix}.diploid_sv.vcf.gz\n    touch ${prefix}.diploid_sv.vcf.gz.tbi\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        manta: \\$( configManta.py --version )\n    END_VERSIONS\n    \"\"\""
    },
    "PARACLU": {
        "name_process": "PARACLU",
        "string_process": "\nprocess PARACLU {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::paraclu=10\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/paraclu:10--h9a82719_1' :\n        'quay.io/biocontainers/paraclu:10--h9a82719_1' }\"\n\n    input:\n    tuple val(meta), path(bed)\n    val(min_cluster)\n\n    output:\n    tuple val(meta), path(\"*.bed\"), emit: bed\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n\n    awk -F \"\\t\" '{print\\$1\"\\t\"\\$6\"\\t\"\\$2\"\\t\"\\$5}' < $bed > ${bed}_4P\n    sort -k1,1 -k3n ${bed}_4P > ${bed}_4Ps\n    paraclu $min_cluster ${bed}_4Ps > ${prefix}.clustered\n    paraclu-cut  ${prefix}.clustered >  ${prefix}.clustered.simplified\n    awk -F '\\t' '{print \\$1\"\\t\"\\$3\"\\t\"\\$4\"\\t\"\\$1\":\"\\$3\"..\"\\$4\",\"\\$2\"\\t\"\\$6\"\\t\"\\$2}' ${prefix}.clustered.simplified >  ${prefix}.clustered.simplified.bed\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        paraclu: $VERSION\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 36,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n\n    awk -F \"\\t\" '{print\\$1\"\\t\"\\$6\"\\t\"\\$2\"\\t\"\\$5}' < $bed > ${bed}_4P\n    sort -k1,1 -k3n ${bed}_4P > ${bed}_4Ps\n    paraclu $min_cluster ${bed}_4Ps > ${prefix}.clustered\n    paraclu-cut  ${prefix}.clustered >  ${prefix}.clustered.simplified\n    awk -F '\\t' '{print \\$1\"\\t\"\\$3\"\\t\"\\$4\"\\t\"\\$1\":\"\\$3\"..\"\\$4\",\"\\$2\"\\t\"\\$6\"\\t\"\\$2}' ${prefix}.clustered.simplified >  ${prefix}.clustered.simplified.bed\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        paraclu: $VERSION\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "bed",
            "min_cluster"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::paraclu=10\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/paraclu:10--h9a82719_1' : 'quay.io/biocontainers/paraclu:10--h9a82719_1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "SPATYPER": {
        "name_process": "SPATYPER",
        "string_process": "process SPATYPER {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::spatyper=0.3.3\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/spatyper:0.3.3--pyhdfd78af_3' :\n        'quay.io/biocontainers/spatyper:0.3.3--pyhdfd78af_3' }\"\n\n    input:\n    tuple val(meta), path(fasta)\n    path repeats\n    path repeat_order\n\n    output:\n    tuple val(meta), path(\"*.tsv\"), emit: tsv\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def input_args = repeats && repeat_order ? \"-r ${repeats} -o ${repeat_order}\" : \"\"\n    \"\"\"\n    spaTyper \\\\\n        $args \\\\\n        $input_args \\\\\n        --fasta $fasta \\\\\n        --output ${prefix}.tsv\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        spatyper: \\$( echo \\$(spaTyper --version 2>&1) | sed 's/^.*spaTyper //' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 36,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def input_args = repeats && repeat_order ? \"-r ${repeats} -o ${repeat_order}\" : \"\"\n    \"\"\"\n    spaTyper \\\\\n        $args \\\\\n        $input_args \\\\\n        --fasta $fasta \\\\\n        --output ${prefix}.tsv\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        spatyper: \\$( echo \\$(spaTyper --version 2>&1) | sed 's/^.*spaTyper //' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "fasta",
            "repeats",
            "repeat_order"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::spatyper=0.3.3\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/spatyper:0.3.3--pyhdfd78af_3' : 'quay.io/biocontainers/spatyper:0.3.3--pyhdfd78af_3' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "METAPHLAN3": {
        "name_process": "METAPHLAN3",
        "string_process": "process METAPHLAN3 {\n    tag \"$meta.id\"\n    label 'process_high'\n\n    conda (params.enable_conda ? 'bioconda::metaphlan=3.0.12' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/metaphlan:3.0.12--pyhb7b1952_0' :\n        'quay.io/biocontainers/metaphlan:3.0.12--pyhb7b1952_0' }\"\n\n    input:\n    tuple val(meta), path(input)\n    path metaphlan_db\n\n    output:\n    tuple val(meta), path(\"*_profile.txt\")   ,                emit: profile\n    tuple val(meta), path(\"*.biom\")          ,                emit: biom\n    tuple val(meta), path('*.bowtie2out.txt'), optional:true, emit: bt2out\n    path \"versions.yml\"                      ,                emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def input_type  = (\"$input\".endsWith(\".fastq.gz\") || \"$input\".endsWith(\".fq.gz\")) ? \"--input_type fastq\" :  (\"$input\".contains(\".fasta\")) ? \"--input_type fasta\" : (\"$input\".endsWith(\".bowtie2out.txt\")) ? \"--input_type bowtie2out\" : \"--input_type sam\"\n    def input_data  = (\"$input_type\".contains(\"fastq\")) && !meta.single_end ? \"${input[0]},${input[1]}\" : \"$input\"\n    def bowtie2_out = \"$input_type\" == \"--input_type bowtie2out\" || \"$input_type\" == \"--input_type sam\" ? '' : \"--bowtie2out ${prefix}.bowtie2out.txt\"\n\n    \"\"\"\n    metaphlan \\\\\n        --nproc $task.cpus \\\\\n        $input_type \\\\\n        $input_data \\\\\n        $args \\\\\n        $bowtie2_out \\\\\n        --bowtie2db ${metaphlan_db} \\\\\n        --biom ${prefix}.biom \\\\\n        --output_file ${prefix}_profile.txt\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        metaphlan3: \\$(metaphlan --version 2>&1 | awk '{print \\$3}')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 43,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def input_type  = (\"$input\".endsWith(\".fastq.gz\") || \"$input\".endsWith(\".fq.gz\")) ? \"--input_type fastq\" :  (\"$input\".contains(\".fasta\")) ? \"--input_type fasta\" : (\"$input\".endsWith(\".bowtie2out.txt\")) ? \"--input_type bowtie2out\" : \"--input_type sam\"\n    def input_data  = (\"$input_type\".contains(\"fastq\")) && !meta.single_end ? \"${input[0]},${input[1]}\" : \"$input\"\n    def bowtie2_out = \"$input_type\" == \"--input_type bowtie2out\" || \"$input_type\" == \"--input_type sam\" ? '' : \"--bowtie2out ${prefix}.bowtie2out.txt\"\n\n    \"\"\"\n    metaphlan \\\\\n        --nproc $task.cpus \\\\\n        $input_type \\\\\n        $input_data \\\\\n        $args \\\\\n        $bowtie2_out \\\\\n        --bowtie2db ${metaphlan_db} \\\\\n        --biom ${prefix}.biom \\\\\n        --output_file ${prefix}_profile.txt\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        metaphlan3: \\$(metaphlan --version 2>&1 | awk '{print \\$3}')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 20,
        "language_script": "bash",
        "tools": [
            "MetaPhlAn"
        ],
        "tools_url": [
            "https://bio.tools/metaphlan"
        ],
        "tools_dico": [
            {
                "name": "MetaPhlAn",
                "uri": "https://bio.tools/metaphlan",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0194",
                            "term": "Phylogenomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0324",
                                    "term": "Phylogenetic analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2478",
                                    "term": "Nucleic acid sequence analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0324",
                                    "term": "Phylogenetic tree analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2478",
                                    "term": "Sequence analysis (nucleic acid)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Computational tool for profiling the composition of microbial communities from metagenomic shotgun sequencing data.",
                "homepage": "http://huttenhower.sph.harvard.edu/metaphlan"
            }
        ],
        "inputs": [
            "meta",
            "input",
            "metaphlan_db"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "conda (params.enable_conda ? 'bioconda::metaphlan=3.0.12' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/metaphlan:3.0.12--pyhb7b1952_0' : 'quay.io/biocontainers/metaphlan:3.0.12--pyhb7b1952_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "GATK4_MERGEMUTECTSTATS": {
        "name_process": "GATK4_MERGEMUTECTSTATS",
        "string_process": "process GATK4_MERGEMUTECTSTATS {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::gatk4=4.2.6.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/gatk4:4.2.6.1--hdfd78af_0':\n        'quay.io/biocontainers/gatk4:4.2.6.1--hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(stats)\n\n    output:\n    tuple val(meta), path(\"*.vcf.gz.stats\"), emit: stats\n    path \"versions.yml\"                    , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    prefix = task.ext.prefix ?: \"${meta.id}\"\n    def input_list = stats.collect{ \"--stats ${it}\"}.join(' ')\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[GATK MergeMutectStats] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    gatk --java-options \"-Xmx${avail_mem}g\" MergeMutectStats \\\\\n        $input_list \\\\\n        --output ${prefix}.vcf.gz.stats \\\\\n        --tmp-dir . \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 41,
        "string_script": "    def args = task.ext.args ?: ''\n    prefix = task.ext.prefix ?: \"${meta.id}\"\n    def input_list = stats.collect{ \"--stats ${it}\"}.join(' ')\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[GATK MergeMutectStats] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    gatk --java-options \"-Xmx${avail_mem}g\" MergeMutectStats \\\\\n        $input_list \\\\\n        --output ${prefix}.vcf.gz.stats \\\\\n        --tmp-dir . \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 21,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "meta",
            "stats"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::gatk4=4.2.6.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/gatk4:4.2.6.1--hdfd78af_0': 'quay.io/biocontainers/gatk4:4.2.6.1--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "COOLER_MERGE": {
        "name_process": "COOLER_MERGE",
        "string_process": "process COOLER_MERGE {\n    tag \"$meta.id\"\n    label 'process_high'\n\n    conda (params.enable_conda ? \"bioconda::cooler=0.8.11\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/cooler:0.8.11--pyh3252c3a_0' :\n        'quay.io/biocontainers/cooler:0.8.11--pyh3252c3a_0' }\"\n\n    input:\n    tuple val(meta), path(cool)\n\n    output:\n    tuple val(meta), path(\"*.cool\"), emit: cool\n    path \"versions.yml\"            , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    cooler merge \\\\\n        $args \\\\\n        ${prefix}.cool \\\\\n        ${cool}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        cooler: \\$(cooler --version 2>&1 | sed 's/cooler, version //')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    cooler merge \\\\\n        $args \\\\\n        ${prefix}.cool \\\\\n        ${cool}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        cooler: \\$(cooler --version 2>&1 | sed 's/cooler, version //')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "cool"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "conda (params.enable_conda ? \"bioconda::cooler=0.8.11\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/cooler:0.8.11--pyh3252c3a_0' : 'quay.io/biocontainers/cooler:0.8.11--pyh3252c3a_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "RGI_MAIN": {
        "name_process": "RGI_MAIN",
        "string_process": "process RGI_MAIN {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::rgi=5.2.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/rgi:5.2.1--pyha8f3691_2':\n        'quay.io/biocontainers/rgi:5.2.1--pyha8f3691_2' }\"\n\n    input:\n    tuple val(meta), path(fasta)\n\n    output:\n    tuple val(meta), path(\"*.json\"), emit: json\n    tuple val(meta), path(\"*.txt\") , emit: tsv\n    path \"versions.yml\"            , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    rgi \\\\\n        main \\\\\n        $args \\\\\n        --num_threads $task.cpus \\\\\n        --output_file $prefix \\\\\n        --input_sequence $fasta\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        rgi: \\$(rgi main --version)\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    rgi \\\\\n        main \\\\\n        $args \\\\\n        --num_threads $task.cpus \\\\\n        --output_file $prefix \\\\\n        --input_sequence $fasta\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        rgi: \\$(rgi main --version)\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "Rgin",
            "Domainoid"
        ],
        "tools_url": [
            "https://bio.tools/rgin",
            "https://bio.tools/Domainoid"
        ],
        "tools_dico": [
            {
                "name": "Rgin",
                "uri": "https://bio.tools/rgin",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3053",
                            "term": "Genetics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2497",
                                    "term": "Pathway or network analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "C++ implementation of SConES.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/Rgin.html"
            },
            {
                "name": "Domainoid",
                "uri": "https://bio.tools/Domainoid",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0736",
                            "term": "Protein folds and structural domains"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0084",
                            "term": "Phylogeny"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0130",
                            "term": "Protein folding, stability and design"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3767",
                                    "term": "Protein identification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0303",
                                    "term": "Fold recognition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3435",
                                    "term": "Standardisation and normalisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0327",
                                    "term": "Phylogenetic footprinting"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3767",
                                    "term": "Protein inference"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0303",
                                    "term": "Protein domain prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0303",
                                    "term": "Fold prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0303",
                                    "term": "Protein fold recognition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0303",
                                    "term": "Domain prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0303",
                                    "term": "Protein fold prediction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "domain-oriented orthology inference.\n\nBACKGROUND:Orthology inference is normally based on full-length protein sequences. However, most proteins contain independently folding and recurring regions, domains. The domain architecture of a protein is vital for its function, and recombination events mean individual domains can have different evolutionary histories. It has previously been shown that orthologous proteins may differ in domain architecture, creating challenges for orthology inference methods operating on full-length sequences. We have developed Domainoid, a new tool aiming to overcome these challenges faced by full-length orthology methods by inferring orthology on the domain level. It employs the InParanoid algorithm on single domains separately, to infer groups of orthologous domains. RESULTS:This domain-oriented approach allows detection of discordant domain orthologs, cases where different domains on the same protein have different evolutionary histories",
                "homepage": "https://bitbucket.org/sonnhammergroup/domainoid/"
            }
        ],
        "inputs": [
            "meta",
            "fasta"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::rgi=5.2.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/rgi:5.2.1--pyha8f3691_2': 'quay.io/biocontainers/rgi:5.2.1--pyha8f3691_2' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "HMMCOPY_GENERATEMAP": {
        "name_process": "HMMCOPY_GENERATEMAP",
        "string_process": "\nprocess HMMCOPY_GENERATEMAP {\n    tag '$bam'\n    label 'process_long'\n\n    conda (params.enable_conda ? \"bioconda::hmmcopy=0.1.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/hmmcopy:0.1.1--h2e03b76_7':\n        'quay.io/biocontainers/hmmcopy:0.1.1--h2e03b76_7' }\"\n\n    input:\n    path fasta\n\n    output:\n    path \"*.map.bw\"              , emit: bigwig\n    path \"versions.yml\"          , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n\n    \"\"\"\n    # build required indexes\n    generateMap.pl -b \\\\\n        $args \\\\\n        $fasta\n\n    # run\n    generateMap.pl \\\\\n        $args \\\\\n        $fasta\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        hmmcopy: \\$(echo $VERSION)\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 38,
        "string_script": "    def args = task.ext.args ?: ''\n\n    \"\"\"\n    # build required indexes\n    generateMap.pl -b \\\\\n        $args \\\\\n        $fasta\n\n    # run\n    generateMap.pl \\\\\n        $args \\\\\n        $fasta\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        hmmcopy: \\$(echo $VERSION)\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 17,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fasta"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag '$bam'",
            "label 'process_long'",
            "conda (params.enable_conda ? \"bioconda::hmmcopy=0.1.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/hmmcopy:0.1.1--h2e03b76_7': 'quay.io/biocontainers/hmmcopy:0.1.1--h2e03b76_7' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "DSHBIO_FILTERBED": {
        "name_process": "DSHBIO_FILTERBED",
        "string_process": "process DSHBIO_FILTERBED {\n    tag \"${meta.id}\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::dsh-bio=2.0.8\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/dsh-bio:2.0.8--hdfd78af_0' :\n        'quay.io/biocontainers/dsh-bio:2.0.8--hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(bed)\n\n    output:\n    tuple val(meta), path(\"*.bed.gz\"), emit: bed\n    path \"versions.yml\"              , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    dsh-bio \\\\\n        filter-bed \\\\\n        $args \\\\\n        -i $bed \\\\\n        -o ${prefix}.bed.gz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        dshbio: \\$(dsh-bio --version 2>&1 | grep -o 'dsh-bio-tools .*' | cut -f2 -d ' ')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    dsh-bio \\\\\n        filter-bed \\\\\n        $args \\\\\n        -i $bed \\\\\n        -o ${prefix}.bed.gz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        dshbio: \\$(dsh-bio --version 2>&1 | grep -o 'dsh-bio-tools .*' | cut -f2 -d ' ')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "bed"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"${meta.id}\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::dsh-bio=2.0.8\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/dsh-bio:2.0.8--hdfd78af_0' : 'quay.io/biocontainers/dsh-bio:2.0.8--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "GATK4_LEARNREADORIENTATIONMODEL": {
        "name_process": "GATK4_LEARNREADORIENTATIONMODEL",
        "string_process": "process GATK4_LEARNREADORIENTATIONMODEL {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::gatk4=4.2.6.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/gatk4:4.2.6.1--hdfd78af_0':\n        'quay.io/biocontainers/gatk4:4.2.6.1--hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(f1r2)\n\n    output:\n    tuple val(meta), path(\"*.tar.gz\"), emit: artifactprior\n    path \"versions.yml\"              , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def input_list = f1r2.collect{\"--input $it\"}.join(' ')\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[GATK LearnReadOrientationModel] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    gatk --java-options \"-Xmx${avail_mem}g\" LearnReadOrientationModel \\\\\n        $input_list \\\\\n        --output ${prefix}.tar.gz \\\\\n        --tmp-dir . \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 41,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def input_list = f1r2.collect{\"--input $it\"}.join(' ')\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[GATK LearnReadOrientationModel] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    gatk --java-options \"-Xmx${avail_mem}g\" LearnReadOrientationModel \\\\\n        $input_list \\\\\n        --output ${prefix}.tar.gz \\\\\n        --tmp-dir . \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 21,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "meta",
            "f1r2"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::gatk4=4.2.6.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/gatk4:4.2.6.1--hdfd78af_0': 'quay.io/biocontainers/gatk4:4.2.6.1--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "BEDTOOLS_BAMTOBED": {
        "name_process": "BEDTOOLS_BAMTOBED",
        "string_process": "process BEDTOOLS_BAMTOBED {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::bedtools=2.30.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bedtools:2.30.0--hc088bd4_0' :\n        'quay.io/biocontainers/bedtools:2.30.0--hc088bd4_0' }\"\n\n    input:\n    tuple val(meta), path(bam)\n\n    output:\n    tuple val(meta), path(\"*.bed\"), emit: bed\n    path  \"versions.yml\"          , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    bedtools \\\\\n        bamtobed \\\\\n        $args \\\\\n        -i $bam \\\\\n        | bedtools sort > ${prefix}.bed\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bedtools: \\$(bedtools --version | sed -e \"s/bedtools v//g\")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    bedtools \\\\\n        bamtobed \\\\\n        $args \\\\\n        -i $bam \\\\\n        | bedtools sort > ${prefix}.bed\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bedtools: \\$(bedtools --version | sed -e \"s/bedtools v//g\")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [
            "BEDTools"
        ],
        "tools_url": [
            "https://bio.tools/bedtools"
        ],
        "tools_dico": [
            {
                "name": "BEDTools",
                "uri": "https://bio.tools/bedtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "BEDTools is an extensive suite of utilities for comparing genomic features in BED format.",
                "homepage": "https://github.com/arq5x/bedtools2"
            }
        ],
        "inputs": [
            "meta",
            "bam"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::bedtools=2.30.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bedtools:2.30.0--hc088bd4_0' : 'quay.io/biocontainers/bedtools:2.30.0--hc088bd4_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "DAMAGEPROFILER": {
        "name_process": "DAMAGEPROFILER",
        "string_process": "process DAMAGEPROFILER {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::damageprofiler=1.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/damageprofiler:1.1--hdfd78af_2' :\n        'quay.io/biocontainers/damageprofiler:1.1--hdfd78af_2' }\"\n\n    input:\n    tuple val(meta), path(bam)\n    path fasta\n    path fai\n    path specieslist\n\n    output:\n    tuple val(meta), path(\"${prefix}\"), emit: results\n    path  \"versions.yml\"              , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args   ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n    def reference    = fasta ? \"-r $fasta\" : \"\"\n    def species_list = specieslist ? \"-sf $specieslist\" : \"\"\n    \"\"\"\n    damageprofiler \\\\\n        -i $bam \\\\\n        -o $prefix/ \\\\\n        $args \\\\\n        $reference \\\\\n        $species_list\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        damageprofiler: \\$(damageprofiler -v | sed 's/^DamageProfiler v//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 39,
        "string_script": "    def args = task.ext.args   ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n    def reference    = fasta ? \"-r $fasta\" : \"\"\n    def species_list = specieslist ? \"-sf $specieslist\" : \"\"\n    \"\"\"\n    damageprofiler \\\\\n        -i $bam \\\\\n        -o $prefix/ \\\\\n        $args \\\\\n        $reference \\\\\n        $species_list\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        damageprofiler: \\$(damageprofiler -v | sed 's/^DamageProfiler v//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "bam",
            "fasta",
            "fai",
            "specieslist"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::damageprofiler=1.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/damageprofiler:1.1--hdfd78af_2' : 'quay.io/biocontainers/damageprofiler:1.1--hdfd78af_2' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "BEDTOOLS_MAKEWINDOWS": {
        "name_process": "BEDTOOLS_MAKEWINDOWS",
        "string_process": "process BEDTOOLS_MAKEWINDOWS {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::bedtools=2.30.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bedtools:2.30.0--h7d7f7ad_1' :\n        'quay.io/biocontainers/bedtools:2.30.0--h7d7f7ad_1' }\"\n\n    input:\n    tuple val(meta), path(regions)\n    val(use_bed)\n\n    output:\n    tuple val(meta), path(\"*.tab\"), emit: tab\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def arg_input = use_bed ? \"-b $regions\" : \"-g $regions\"\n    \"\"\"\n    bedtools \\\\\n        makewindows \\\\\n        ${arg_input} \\\\\n        $args \\\\\n        > ${prefix}.tab\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bedtools: \\$(bedtools --version | sed -e \"s/bedtools v//g\")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def arg_input = use_bed ? \"-b $regions\" : \"-g $regions\"\n    \"\"\"\n    bedtools \\\\\n        makewindows \\\\\n        ${arg_input} \\\\\n        $args \\\\\n        > ${prefix}.tab\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bedtools: \\$(bedtools --version | sed -e \"s/bedtools v//g\")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "BEDTools"
        ],
        "tools_url": [
            "https://bio.tools/bedtools"
        ],
        "tools_dico": [
            {
                "name": "BEDTools",
                "uri": "https://bio.tools/bedtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "BEDTools is an extensive suite of utilities for comparing genomic features in BED format.",
                "homepage": "https://github.com/arq5x/bedtools2"
            }
        ],
        "inputs": [
            "meta",
            "regions",
            "use_bed"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::bedtools=2.30.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bedtools:2.30.0--h7d7f7ad_1' : 'quay.io/biocontainers/bedtools:2.30.0--h7d7f7ad_1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "KRAKEN2_KRAKEN2": {
        "name_process": "KRAKEN2_KRAKEN2",
        "string_process": "process KRAKEN2_KRAKEN2 {\n    tag \"$meta.id\"\n    label 'process_high'\n\n    conda (params.enable_conda ? 'bioconda::kraken2=2.1.2 conda-forge::pigz=2.6' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mulled-v2-5799ab18b5fc681e75923b2450abaa969907ec98:87fc08d11968d081f3e8a37131c1f1f6715b6542-0' :\n        'quay.io/biocontainers/mulled-v2-5799ab18b5fc681e75923b2450abaa969907ec98:87fc08d11968d081f3e8a37131c1f1f6715b6542-0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n    path  db\n    val save_output_fastqs\n    val save_reads_assignment\n\n    output:\n    tuple val(meta), path('*classified*')     , optional:true, emit: classified_reads_fastq\n    tuple val(meta), path('*unclassified*')   , optional:true, emit: unclassified_reads_fastq\n    tuple val(meta), path('*classifiedreads*'), optional:true, emit: classified_reads_assignment\n    tuple val(meta), path('*report.txt')                     , emit: report\n    path \"versions.yml\"                                      , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def paired       = meta.single_end ? \"\" : \"--paired\"\n    def classified   = meta.single_end ? \"${prefix}.classified.fastq\"   : \"${prefix}.classified#.fastq\"\n    def unclassified = meta.single_end ? \"${prefix}.unclassified.fastq\" : \"${prefix}.unclassified#.fastq\"\n    def classified_command = save_output_fastqs ? \"--classified-out ${classified}\" : \"\"\n    def unclassified_command = save_output_fastqs ? \"--unclassified-out ${unclassified}\" : \"\"\n    def readclassification_command = save_reads_assignment ? \"--output ${prefix}.kraken2.classifiedreads.txt\" : \"\"\n    def compress_reads_command = save_output_fastqs ? \"pigz -p $task.cpus *.fastq\" : \"\"\n\n    \"\"\"\n    kraken2 \\\\\n        --db $db \\\\\n        --threads $task.cpus \\\\\n        --report ${prefix}.kraken2.report.txt \\\\\n        --gzip-compressed \\\\\n        $unclassified_command \\\\\n        $classified_command \\\\\n        $readclassification_command \\\\\n        $paired \\\\\n        $args \\\\\n        $reads\n\n    $compress_reads_command\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        kraken2: \\$(echo \\$(kraken2 --version 2>&1) | sed 's/^.*Kraken version //; s/ .*\\$//')\n        pigz: \\$( pigz --version 2>&1 | sed 's/pigz //g' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 56,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def paired       = meta.single_end ? \"\" : \"--paired\"\n    def classified   = meta.single_end ? \"${prefix}.classified.fastq\"   : \"${prefix}.classified#.fastq\"\n    def unclassified = meta.single_end ? \"${prefix}.unclassified.fastq\" : \"${prefix}.unclassified#.fastq\"\n    def classified_command = save_output_fastqs ? \"--classified-out ${classified}\" : \"\"\n    def unclassified_command = save_output_fastqs ? \"--unclassified-out ${unclassified}\" : \"\"\n    def readclassification_command = save_reads_assignment ? \"--output ${prefix}.kraken2.classifiedreads.txt\" : \"\"\n    def compress_reads_command = save_output_fastqs ? \"pigz -p $task.cpus *.fastq\" : \"\"\n\n    \"\"\"\n    kraken2 \\\\\n        --db $db \\\\\n        --threads $task.cpus \\\\\n        --report ${prefix}.kraken2.report.txt \\\\\n        --gzip-compressed \\\\\n        $unclassified_command \\\\\n        $classified_command \\\\\n        $readclassification_command \\\\\n        $paired \\\\\n        $args \\\\\n        $reads\n\n    $compress_reads_command\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        kraken2: \\$(echo \\$(kraken2 --version 2>&1) | sed 's/^.*Kraken version //; s/ .*\\$//')\n        pigz: \\$( pigz --version 2>&1 | sed 's/pigz //g' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 30,
        "language_script": "bash",
        "tools": [
            "kraken2"
        ],
        "tools_url": [
            "https://bio.tools/kraken2"
        ],
        "tools_dico": [
            {
                "name": "kraken2",
                "uri": "https://bio.tools/kraken2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0637",
                            "term": "Taxonomy"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomic classification"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomy assignment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3494",
                                "term": "DNA sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3028",
                                "term": "Taxonomy"
                            }
                        ]
                    }
                ],
                "description": "Kraken 2 is the newest version of Kraken, a taxonomic classification system using exact k-mer matches to achieve high accuracy and fast classification speeds. This classifier matches each k-mer within a query sequence to the lowest common ancestor (LCA) of all genomes containing the given k-mer. The k-mer assignments inform the classification algorithm.",
                "homepage": "https://ccb.jhu.edu/software/kraken2/"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "db",
            "save_output_fastqs",
            "save_reads_assignment"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "conda (params.enable_conda ? 'bioconda::kraken2=2.1.2 conda-forge::pigz=2.6' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mulled-v2-5799ab18b5fc681e75923b2450abaa969907ec98:87fc08d11968d081f3e8a37131c1f1f6715b6542-0' : 'quay.io/biocontainers/mulled-v2-5799ab18b5fc681e75923b2450abaa969907ec98:87fc08d11968d081f3e8a37131c1f1f6715b6542-0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "PICARD_COLLECTHSMETRICS": {
        "name_process": "PICARD_COLLECTHSMETRICS",
        "string_process": "process PICARD_COLLECTHSMETRICS {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::picard=2.27.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/picard:2.27.1--hdfd78af_0' :\n        'quay.io/biocontainers/picard:2.27.1--hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(bam)\n    path fasta\n    path fai\n    path bait_intervals\n    path target_intervals\n\n    output:\n    tuple val(meta), path(\"*_metrics\")  , emit: metrics\n    path \"versions.yml\"                 , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def reference = fasta ? \"-R $fasta\" : \"\"\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[Picard CollectHsMetrics] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    picard \\\\\n        -Xmx${avail_mem}g \\\\\n        CollectHsMetrics \\\\\n        $args \\\\\n        $reference \\\\\n        --BAIT_INTERVALS $bait_intervals \\\\\n        --TARGET_INTERVALS $target_intervals \\\\\n        --INPUT $bam \\\\\n        --OUTPUT ${prefix}.CollectHsMetrics.coverage_metrics\n\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        picard: \\$(echo \\$(picard CollectHsMetrics --version 2>&1) | grep -o 'Version:.*' | cut -f2- -d:)\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.CollectHsMetrics.coverage_metrics\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        picard: \\$(echo \\$(picard CollectHsMetrics --version 2>&1) | grep -o 'Version:.*' | cut -f2- -d:)\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 61,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def reference = fasta ? \"-R $fasta\" : \"\"\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[Picard CollectHsMetrics] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    picard \\\\\n        -Xmx${avail_mem}g \\\\\n        CollectHsMetrics \\\\\n        $args \\\\\n        $reference \\\\\n        --BAIT_INTERVALS $bait_intervals \\\\\n        --TARGET_INTERVALS $target_intervals \\\\\n        --INPUT $bam \\\\\n        --OUTPUT ${prefix}.CollectHsMetrics.coverage_metrics\n\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        picard: \\$(echo \\$(picard CollectHsMetrics --version 2>&1) | grep -o 'Version:.*' | cut -f2- -d:)\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 26,
        "language_script": "bash",
        "tools": [
            "Picard"
        ],
        "tools_url": [
            "https://bio.tools/picard_tools"
        ],
        "tools_dico": [
            {
                "name": "Picard",
                "uri": "https://bio.tools/picard_tools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Sequence variation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Variant analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation annotation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A set of command line tools for manipulating high-throughput sequencing (HTS) data in formats such as SAM/BAM/CRAM and VCF. Available as a standalone program or within the GATK4 program.",
                "homepage": "https://github.com/broadinstitute/picard"
            }
        ],
        "inputs": [
            "meta",
            "bam",
            "fasta",
            "fai",
            "bait_intervals",
            "target_intervals"
        ],
        "nb_inputs": 6,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::picard=2.27.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/picard:2.27.1--hdfd78af_0' : 'quay.io/biocontainers/picard:2.27.1--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.CollectHsMetrics.coverage_metrics\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        picard: \\$(echo \\$(picard CollectHsMetrics --version 2>&1) | grep -o 'Version:.*' | cut -f2- -d:)\n    END_VERSIONS\n    \"\"\""
    },
    "LAST_DOTPLOT": {
        "name_process": "LAST_DOTPLOT",
        "string_process": "process LAST_DOTPLOT {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? 'bioconda::last=1250' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/last:1250--h2e03b76_0' :\n        'quay.io/biocontainers/last:1250--h2e03b76_0' }\"\n\n    input:\n    tuple val(meta), path(maf)\n    val(format)\n\n    output:\n    tuple val(meta), path(\"*.gif\"), optional:true, emit: gif\n    tuple val(meta), path(\"*.png\"), optional:true, emit: png\n    path \"versions.yml\"                          , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    last-dotplot \\\\\n        $args \\\\\n        $maf \\\\\n        $prefix.$format\n\n    # last-dotplot has no --version option so let's use lastal from the same suite\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        last: \\$(lastal --version | sed 's/lastal //')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    last-dotplot \\\\\n        $args \\\\\n        $maf \\\\\n        $prefix.$format\n\n    # last-dotplot has no --version option so let's use lastal from the same suite\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        last: \\$(lastal --version | sed 's/lastal //')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "maf",
            "format"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? 'bioconda::last=1250' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/last:1250--h2e03b76_0' : 'quay.io/biocontainers/last:1250--h2e03b76_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "GATK4_MUTECT2": {
        "name_process": "GATK4_MUTECT2",
        "string_process": "process GATK4_MUTECT2 {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::gatk4=4.2.6.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/gatk4:4.2.6.1--hdfd78af_0':\n        'quay.io/biocontainers/gatk4:4.2.6.1--hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(input), path(input_index), path(intervals)\n    path fasta\n    path fai\n    path dict\n    path germline_resource\n    path germline_resource_tbi\n    path panel_of_normals\n    path panel_of_normals_tbi\n\n    output:\n    tuple val(meta), path(\"*.vcf.gz\")     , emit: vcf\n    tuple val(meta), path(\"*.tbi\")        , emit: tbi\n    tuple val(meta), path(\"*.stats\")      , emit: stats\n    tuple val(meta), path(\"*.f1r2.tar.gz\"), optional:true, emit: f1r2\n    path \"versions.yml\"                   , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def inputs = input.collect{ \"--input $it\"}.join(\" \")\n    def interval_command = intervals ? \"--intervals $intervals\" : \"\"\n    def pon_command = panel_of_normals ? \"--panel-of-normals $panel_of_normals\" : \"\"\n    def gr_command = germline_resource ? \"--germline-resource $germline_resource\" : \"\"\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[GATK Mutect2] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    gatk --java-options \"-Xmx${avail_mem}g\" Mutect2 \\\\\n        $inputs \\\\\n        --output ${prefix}.vcf.gz \\\\\n        --reference $fasta \\\\\n        $pon_command \\\\\n        $gr_command \\\\\n        $interval_command \\\\\n        --tmp-dir . \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.vcf.gz\n    touch ${prefix}.vcf.gz.tbi\n    touch ${prefix}.vcf.gz.stats\n    touch ${prefix}.f1r2.tar.gz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 72,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def inputs = input.collect{ \"--input $it\"}.join(\" \")\n    def interval_command = intervals ? \"--intervals $intervals\" : \"\"\n    def pon_command = panel_of_normals ? \"--panel-of-normals $panel_of_normals\" : \"\"\n    def gr_command = germline_resource ? \"--germline-resource $germline_resource\" : \"\"\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[GATK Mutect2] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    gatk --java-options \"-Xmx${avail_mem}g\" Mutect2 \\\\\n        $inputs \\\\\n        --output ${prefix}.vcf.gz \\\\\n        --reference $fasta \\\\\n        $pon_command \\\\\n        $gr_command \\\\\n        $interval_command \\\\\n        --tmp-dir . \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 28,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "meta",
            "input",
            "input_index",
            "intervals",
            "fasta",
            "fai",
            "dict",
            "germline_resource",
            "germline_resource_tbi",
            "panel_of_normals",
            "panel_of_normals_tbi"
        ],
        "nb_inputs": 11,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::gatk4=4.2.6.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/gatk4:4.2.6.1--hdfd78af_0': 'quay.io/biocontainers/gatk4:4.2.6.1--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.vcf.gz\n    touch ${prefix}.vcf.gz.tbi\n    touch ${prefix}.vcf.gz.stats\n    touch ${prefix}.f1r2.tar.gz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\""
    },
    "GATK4_CALCULATECONTAMINATION": {
        "name_process": "GATK4_CALCULATECONTAMINATION",
        "string_process": "process GATK4_CALCULATECONTAMINATION {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::gatk4=4.2.6.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/gatk4:4.2.6.1--hdfd78af_0':\n        'quay.io/biocontainers/gatk4:4.2.6.1--hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(pileup), path(matched)\n\n    output:\n    tuple val(meta), path('*.contamination.table'), emit: contamination\n    tuple val(meta), path('*.segmentation.table') , emit: segmentation, optional:true\n    path \"versions.yml\"                           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def matched_command = matched ? \"--matched-normal $matched\" : ''\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[GATK CalculateContamination] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    gatk --java-options \"-Xmx${avail_mem}g\" CalculateContamination \\\\\n        --input $pileup \\\\\n        --output ${prefix}.contamination.table \\\\\n        $matched_command \\\\\n        --tmp-dir . \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 43,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def matched_command = matched ? \"--matched-normal $matched\" : ''\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[GATK CalculateContamination] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    gatk --java-options \"-Xmx${avail_mem}g\" CalculateContamination \\\\\n        --input $pileup \\\\\n        --output ${prefix}.contamination.table \\\\\n        $matched_command \\\\\n        --tmp-dir . \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 22,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "meta",
            "pileup",
            "matched"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::gatk4=4.2.6.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/gatk4:4.2.6.1--hdfd78af_0': 'quay.io/biocontainers/gatk4:4.2.6.1--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "GATK4_GENOTYPEGVCFS": {
        "name_process": "GATK4_GENOTYPEGVCFS",
        "string_process": "process GATK4_GENOTYPEGVCFS {\n    tag \"$meta.id\"\n    label 'process_high'\n\n    conda (params.enable_conda ? \"bioconda::gatk4=4.2.6.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/gatk4:4.2.6.1--hdfd78af_0':\n        'quay.io/biocontainers/gatk4:4.2.6.1--hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(gvcf), path(gvcf_index), path(intervals), path(intervals_index)\n    path  fasta\n    path  fai\n    path  dict\n    path  dbsnp\n    path  dbsnp_tbi\n\n    output:\n    tuple val(meta), path(\"*.vcf.gz\"), emit: vcf\n    tuple val(meta), path(\"*.tbi\")   , emit: tbi\n    path  \"versions.yml\"             , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def gvcf_command = gvcf.name.endsWith(\".vcf\") || gvcf.name.endsWith(\".vcf.gz\") ? \"$gvcf\" : \"gendb://$gvcf\"\n    def dbsnp_command = dbsnp ? \"--dbsnp $dbsnp\" : \"\"\n    def interval_command = intervals ? \"--intervals $intervals\" : \"\"\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[GATK GenotypeGVCFs] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    gatk --java-options \"-Xmx${avail_mem}g\" GenotypeGVCFs \\\\\n        --variant $gvcf_command \\\\\n        --output ${prefix}.vcf.gz \\\\\n        --reference $fasta \\\\\n        $interval_command \\\\\n        $dbsnp_command \\\\\n        --tmp-dir . \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 52,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def gvcf_command = gvcf.name.endsWith(\".vcf\") || gvcf.name.endsWith(\".vcf.gz\") ? \"$gvcf\" : \"gendb://$gvcf\"\n    def dbsnp_command = dbsnp ? \"--dbsnp $dbsnp\" : \"\"\n    def interval_command = intervals ? \"--intervals $intervals\" : \"\"\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[GATK GenotypeGVCFs] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    gatk --java-options \"-Xmx${avail_mem}g\" GenotypeGVCFs \\\\\n        --variant $gvcf_command \\\\\n        --output ${prefix}.vcf.gz \\\\\n        --reference $fasta \\\\\n        $interval_command \\\\\n        $dbsnp_command \\\\\n        --tmp-dir . \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 26,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "meta",
            "gvcf",
            "gvcf_index",
            "intervals",
            "intervals_index",
            "fasta",
            "fai",
            "dict",
            "dbsnp",
            "dbsnp_tbi"
        ],
        "nb_inputs": 10,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "conda (params.enable_conda ? \"bioconda::gatk4=4.2.6.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/gatk4:4.2.6.1--hdfd78af_0': 'quay.io/biocontainers/gatk4:4.2.6.1--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "PANGOLIN": {
        "name_process": "PANGOLIN",
        "string_process": "process PANGOLIN {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? 'bioconda::pangolin=3.1.20' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/pangolin:3.1.20--pyhdfd78af_0' :\n        'quay.io/biocontainers/pangolin:3.1.20--pyhdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(fasta)\n\n    output:\n    tuple val(meta), path('*.csv'), emit: report\n    path  \"versions.yml\"          , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    pangolin \\\\\n        $fasta\\\\\n        --outfile ${prefix}.pangolin.csv \\\\\n        --threads $task.cpus \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        pangolin: \\$(pangolin --version | sed \"s/pangolin //g\")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    pangolin \\\\\n        $fasta\\\\\n        --outfile ${prefix}.pangolin.csv \\\\\n        --threads $task.cpus \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        pangolin: \\$(pangolin --version | sed \"s/pangolin //g\")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "fasta"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? 'bioconda::pangolin=3.1.20' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/pangolin:3.1.20--pyhdfd78af_0' : 'quay.io/biocontainers/pangolin:3.1.20--pyhdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "LISSERO": {
        "name_process": "LISSERO",
        "string_process": "process LISSERO {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::lissero=0.4.9\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/lissero:0.4.9--py_0' :\n        'quay.io/biocontainers/lissero:0.4.9--py_0' }\"\n\n    input:\n    tuple val(meta), path(fasta)\n\n    output:\n    tuple val(meta), path(\"*.tsv\"), emit: tsv\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    lissero \\\\\n        $args \\\\\n        $fasta \\\\\n        > ${prefix}.tsv\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        lissero: \\$( echo \\$(lissero --version 2>&1) | sed 's/^.*LisSero //' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    lissero \\\\\n        $args \\\\\n        $fasta \\\\\n        > ${prefix}.tsv\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        lissero: \\$( echo \\$(lissero --version 2>&1) | sed 's/^.*LisSero //' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "fasta"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::lissero=0.4.9\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/lissero:0.4.9--py_0' : 'quay.io/biocontainers/lissero:0.4.9--py_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "PAIRTOOLS_DEDUP": {
        "name_process": "PAIRTOOLS_DEDUP",
        "string_process": "process PAIRTOOLS_DEDUP {\n    tag \"$meta.id\"\n    label 'process_high'\n\n    conda (params.enable_conda ? \"bioconda::pairtools=0.3.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/pairtools:0.3.0--py37hb9c2fc3_5' :\n        'quay.io/biocontainers/pairtools:0.3.0--py37hb9c2fc3_5' }\"\n\n    input:\n    tuple val(meta), path(input)\n\n    output:\n    tuple val(meta), path(\"*.pairs.gz\")  , emit: pairs\n    tuple val(meta), path(\"*.pairs.stat\"), emit: stat\n    path \"versions.yml\"                  , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    pairtools dedup \\\\\n        $args \\\\\n        -o ${prefix}.pairs.gz \\\\\n        --output-stats ${prefix}.pairs.stat \\\\\n        $input\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        pairtools: \\$(pairtools --version 2>&1 | sed 's/pairtools.*version //')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    pairtools dedup \\\\\n        $args \\\\\n        -o ${prefix}.pairs.gz \\\\\n        --output-stats ${prefix}.pairs.stat \\\\\n        $input\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        pairtools: \\$(pairtools --version 2>&1 | sed 's/pairtools.*version //')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "input"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "conda (params.enable_conda ? \"bioconda::pairtools=0.3.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/pairtools:0.3.0--py37hb9c2fc3_5' : 'quay.io/biocontainers/pairtools:0.3.0--py37hb9c2fc3_5' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "GATK4_REVERTSAM": {
        "name_process": "GATK4_REVERTSAM",
        "string_process": "process GATK4_REVERTSAM {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::gatk4=4.2.6.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/gatk4:4.2.6.1--hdfd78af_0':\n        'quay.io/biocontainers/gatk4:4.2.6.1--hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(bam)\n\n    output:\n    tuple val(meta), path('*.bam'), emit: bam\n    path  \"versions.yml\"          , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[GATK RevertSam] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    gatk --java-options \"-Xmx${avail_mem}g\" RevertSam \\\\\n        --INPUT $bam \\\\\n        --OUTPUT ${prefix}.reverted.bam \\\\\n        --TMP_DIR . \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.reverted.bam\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 51,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[GATK RevertSam] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    gatk --java-options \"-Xmx${avail_mem}g\" RevertSam \\\\\n        --INPUT $bam \\\\\n        --OUTPUT ${prefix}.reverted.bam \\\\\n        --TMP_DIR . \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 20,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "meta",
            "bam"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::gatk4=4.2.6.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/gatk4:4.2.6.1--hdfd78af_0': 'quay.io/biocontainers/gatk4:4.2.6.1--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.reverted.bam\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\""
    },
    "DEDUP": {
        "name_process": "DEDUP",
        "string_process": "process DEDUP {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::dedup=0.12.8\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/dedup:0.12.8--hdfd78af_1' :\n        'quay.io/biocontainers/dedup:0.12.8--hdfd78af_1' }\"\n\n    input:\n    tuple val(meta), path(bam)\n\n    output:\n    tuple val(meta), path(\"*_rmdup.bam\"), emit: bam                                             \n    tuple val(meta), path(\"*.json\")     , emit: json\n    tuple val(meta), path(\"*.hist\")     , emit: hist\n    tuple val(meta), path(\"*log\")       , emit: log\n    path \"versions.yml\"                 , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args   ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n\n    \"\"\"\n    dedup \\\\\n        -Xmx${task.memory.toGiga()}g  \\\\\n        -i $bam \\\\\n        -o . \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        dedup: \\$( echo \\$(dedup --version 2>&1) | tail -n 1 | sed 's/.* v//')\n\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 38,
        "string_script": "    def args = task.ext.args   ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n\n    \"\"\"\n    dedup \\\\\n        -Xmx${task.memory.toGiga()}g  \\\\\n        -i $bam \\\\\n        -o . \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        dedup: \\$( echo \\$(dedup --version 2>&1) | tail -n 1 | sed 's/.* v//')\n\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "bam"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::dedup=0.12.8\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/dedup:0.12.8--hdfd78af_1' : 'quay.io/biocontainers/dedup:0.12.8--hdfd78af_1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "ROARY": {
        "name_process": "ROARY",
        "string_process": "process ROARY {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::roary=3.13.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/roary:3.13.0--pl526h516909a_0' :\n        'quay.io/biocontainers/roary:3.13.0--pl526h516909a_0' }\"\n\n    input:\n    tuple val(meta), path(gff)\n\n    output:\n    tuple val(meta), path(\"results/*\")                    , emit: results\n    tuple val(meta), path(\"results/*.aln\"), optional: true, emit: aln\n    path \"versions.yml\"                                   , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    roary \\\\\n        $args \\\\\n        -p $task.cpus \\\\\n        -f results/ \\\\\n        $gff\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        roary: \\$( roary --version )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    roary \\\\\n        $args \\\\\n        -p $task.cpus \\\\\n        -f results/ \\\\\n        $gff\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        roary: \\$( roary --version )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [
            "Roary"
        ],
        "tools_url": [
            "https://bio.tools/roary"
        ],
        "tools_dico": [
            {
                "name": "Roary",
                "uri": "https://bio.tools/roary",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A high speed stand alone pan genome pipeline, which takes annotated assemblies in GFF3 format (produced by Prokka (Seemann, 2014)) and calculates the pan genome.",
                "homepage": "http://sanger-pathogens.github.io/Roary/"
            }
        ],
        "inputs": [
            "meta",
            "gff"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::roary=3.13.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/roary:3.13.0--pl526h516909a_0' : 'quay.io/biocontainers/roary:3.13.0--pl526h516909a_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "MASHTREE": {
        "name_process": "MASHTREE",
        "string_process": "process MASHTREE {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::mashtree=1.2.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mashtree:1.2.0--pl526h516909a_0' :\n        'quay.io/biocontainers/mashtree:1.2.0--pl526h516909a_0' }\"\n\n    input:\n    tuple val(meta), path(seqs)\n\n    output:\n    tuple val(meta), path(\"*.dnd\"), emit: tree\n    tuple val(meta), path(\"*.tsv\"), emit: matrix\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    mashtree \\\\\n        $args \\\\\n        --numcpus $task.cpus \\\\\n        --outmatrix ${prefix}.tsv \\\\\n        --outtree ${prefix}.dnd \\\\\n        $seqs\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        mashtree: \\$( echo \\$( mashtree --version 2>&1 ) | sed 's/^.*Mashtree //' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    mashtree \\\\\n        $args \\\\\n        --numcpus $task.cpus \\\\\n        --outmatrix ${prefix}.tsv \\\\\n        --outtree ${prefix}.dnd \\\\\n        $seqs\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        mashtree: \\$( echo \\$( mashtree --version 2>&1 ) | sed 's/^.*Mashtree //' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "seqs"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::mashtree=1.2.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mashtree:1.2.0--pl526h516909a_0' : 'quay.io/biocontainers/mashtree:1.2.0--pl526h516909a_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "DIAMOND_MAKEDB": {
        "name_process": "DIAMOND_MAKEDB",
        "string_process": "process DIAMOND_MAKEDB {\n    tag \"$fasta\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::diamond=2.0.15\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/diamond:2.0.15--hb97b32f_0' :\n        'quay.io/biocontainers/diamond:2.0.15--hb97b32f_0' }\"\n\n    input:\n    path fasta\n\n    output:\n    path \"${fasta}.dmnd\", emit: db\n    path \"versions.yml\" , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    diamond \\\\\n        makedb \\\\\n        --threads $task.cpus \\\\\n        --in  $fasta \\\\\n        -d $fasta \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        diamond: \\$(diamond --version 2>&1 | tail -n 1 | sed 's/^diamond version //')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    diamond \\\\\n        makedb \\\\\n        --threads $task.cpus \\\\\n        --in  $fasta \\\\\n        -d $fasta \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        diamond: \\$(diamond --version 2>&1 | tail -n 1 | sed 's/^diamond version //')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [
            "Diamond"
        ],
        "tools_url": [
            "https://bio.tools/diamond"
        ],
        "tools_dico": [
            {
                "name": "Diamond",
                "uri": "https://bio.tools/diamond",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Proteins"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein informatics"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0258",
                                    "term": "Sequence alignment analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Sequence aligner for protein and translated DNA searches and functions as a drop-in replacement for the NCBI BLAST software tools. It is suitable for protein-protein search as well as DNA-protein search on short reads and longer sequences including contigs and assemblies, providing a speedup of BLAST ranging up to x20,000.",
                "homepage": "https://github.com/bbuchfink/diamond"
            }
        ],
        "inputs": [
            "fasta"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$fasta\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::diamond=2.0.15\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/diamond:2.0.15--hb97b32f_0' : 'quay.io/biocontainers/diamond:2.0.15--hb97b32f_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "STRINGTIE_MERGE": {
        "name_process": "STRINGTIE_MERGE",
        "string_process": "process STRINGTIE_MERGE {\n    label 'process_medium'\n\n                                                         \n    conda     (params.enable_conda ? \"bioconda::stringtie=2.2.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/stringtie:2.2.1--hecb563c_2' :\n        'quay.io/biocontainers/stringtie:2.2.1--hecb563c_2' }\"\n\n    input:\n    path stringtie_gtf\n    path annotation_gtf\n\n    output:\n    path \"stringtie.merged.gtf\", emit: gtf\n    path  \"versions.yml\"       , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    stringtie \\\\\n        --merge $stringtie_gtf \\\\\n        -G $annotation_gtf \\\\\n        -o stringtie.merged.gtf\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        stringtie: \\$(stringtie --version 2>&1)\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    stringtie \\\\\n        --merge $stringtie_gtf \\\\\n        -G $annotation_gtf \\\\\n        -o stringtie.merged.gtf\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        stringtie: \\$(stringtie --version 2>&1)\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "StringTie"
        ],
        "tools_url": [
            "https://bio.tools/stringtie"
        ],
        "tools_dico": [
            {
                "name": "StringTie",
                "uri": "https://bio.tools/stringtie",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3680",
                                    "term": "RNA-Seq analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3258",
                                    "term": "Transcriptome assembly"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Fast and highly efficient assembler of RNA-Seq alignments into potential transcripts. It uses a novel network flow algorithm as well as an optional de novo assembly step to assemble and quantitate full-length transcripts representing multiple splice variants for each gene locus.",
                "homepage": "https://ccb.jhu.edu/software/stringtie/"
            }
        ],
        "inputs": [
            "stringtie_gtf",
            "annotation_gtf"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::stringtie=2.2.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/stringtie:2.2.1--hecb563c_2' : 'quay.io/biocontainers/stringtie:2.2.1--hecb563c_2' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "PLINK_EXTRACT": {
        "name_process": "PLINK_EXTRACT",
        "string_process": "process PLINK_EXTRACT {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::plink=1.90b6.21\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/plink:1.90b6.21--h779adbc_1' :\n        'quay.io/biocontainers/plink:1.90b6.21--h779adbc_1' }\"\n\n    input:\n    tuple val(meta), path(bed), path(bim), path(fam), path(variants)\n\n    output:\n    tuple val(meta), path(\"*.bed\"), emit: bed\n    tuple val(meta), path(\"*.bim\"), emit: bim\n    tuple val(meta), path(\"*.fam\"), emit: fam\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if( \"$bed\" == \"${prefix}.bed\" ) error \"Input and output names are the same, use \\\"task.ext.prefix\\\" to disambiguate!\"\n    \"\"\"\n    plink \\\\\n        --bfile ${meta.id} \\\\\n        $args \\\\\n        --extract $variants \\\\\n        --threads $task.cpus \\\\\n        --make-bed \\\\\n        --out $prefix\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        plink: \\$(echo \\$(plink --version) | sed 's/^PLINK v//;s/64.*//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 38,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if( \"$bed\" == \"${prefix}.bed\" ) error \"Input and output names are the same, use \\\"task.ext.prefix\\\" to disambiguate!\"\n    \"\"\"\n    plink \\\\\n        --bfile ${meta.id} \\\\\n        $args \\\\\n        --extract $variants \\\\\n        --threads $task.cpus \\\\\n        --make-bed \\\\\n        --out $prefix\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        plink: \\$(echo \\$(plink --version) | sed 's/^PLINK v//;s/64.*//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [
            "pLink"
        ],
        "tools_url": [
            "https://bio.tools/pLink-2"
        ],
        "tools_dico": [
            {
                "name": "pLink",
                "uri": "https://bio.tools/pLink-2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3520",
                            "term": "Proteomics experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0154",
                            "term": "Small molecules"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0121",
                            "term": "Proteomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3649",
                                    "term": "Target-Decoy"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Protein fragment weight comparison"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "PMF"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Peptide mass fingerprinting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Protein fingerprinting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A high-speed search engine pLink 2 with systematic evaluation for proteome-scale identification of cross-linked peptides.",
                "homepage": "http://pfind.ict.ac.cn/software/pLink/index.html"
            }
        ],
        "inputs": [
            "meta",
            "bed",
            "bim",
            "fam",
            "variants"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::plink=1.90b6.21\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/plink:1.90b6.21--h779adbc_1' : 'quay.io/biocontainers/plink:1.90b6.21--h779adbc_1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "KALLISTO_INDEX": {
        "name_process": "KALLISTO_INDEX",
        "string_process": "process KALLISTO_INDEX {\n    tag \"$fasta\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::kallisto=0.46.2\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/kallisto:0.46.2--h4f7b962_1' :\n        'quay.io/biocontainers/kallisto:0.46.2--h4f7b962_1' }\"\n\n    input:\n    path fasta\n\n    output:\n    path \"kallisto\" , emit: idx\n    path \"versions.yml\" , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    kallisto \\\\\n        index \\\\\n        $args \\\\\n        -i kallisto \\\\\n        $fasta\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        kallisto: \\$(echo \\$(kallisto 2>&1) | sed 's/^kallisto //; s/Usage.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    kallisto \\\\\n        index \\\\\n        $args \\\\\n        -i kallisto \\\\\n        $fasta\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        kallisto: \\$(echo \\$(kallisto 2>&1) | sed 's/^kallisto //; s/Usage.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [
            "kallisto",
            "CINdex"
        ],
        "tools_url": [
            "https://bio.tools/kallisto",
            "https://bio.tools/cindex"
        ],
        "tools_dico": [
            {
                "name": "kallisto",
                "uri": "https://bio.tools/kallisto",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0314",
                                    "term": "Gene expression profiling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0314",
                                    "term": "Functional profiling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0314",
                                    "term": "Gene expression profile construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0314",
                                    "term": "Feature expression analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0314",
                                    "term": "Gene transcription profiling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0314",
                                    "term": "Gene expression quantification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0314",
                                    "term": "Gene expression profile generation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A program for quantifying abundances of transcripts from RNA-Seq data, or more generally of target sequences using high-throughput sequencing reads. It is based on the novel idea of pseudoalignment for rapidly determining the compatibility of reads with targets, without the need for alignment.",
                "homepage": "https://pachterlab.github.io/kallisto/about.html"
            },
            {
                "name": "CINdex",
                "uri": "https://bio.tools/cindex",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3233",
                                    "term": "Copy number estimation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3233",
                                    "term": "Transcript copy number estimation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The package addresses important area of high-throughput genomic analysis. It allows the automated processing and analysis of the experimental DNA copy number data generated by Affymetrix SNP 6.0 arrays or similar. It calculates the chromosome instability index to quantitatively characterize genome-wide DNA copy number alterations. This package calculates not only overall genomic instability, but also instability in terms of copy number gains and losses at the chromosome and cytoband level.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/CINdex.html"
            }
        ],
        "inputs": [
            "fasta"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$fasta\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::kallisto=0.46.2\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/kallisto:0.46.2--h4f7b962_1' : 'quay.io/biocontainers/kallisto:0.46.2--h4f7b962_1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "HMMER_HMMALIGN": {
        "name_process": "HMMER_HMMALIGN",
        "string_process": "process HMMER_HMMALIGN {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::hmmer=3.3.2\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/hmmer:3.3.2--h1b792b2_1' :\n        'quay.io/biocontainers/hmmer:3.3.2--h1b792b2_1' }\"\n\n    input:\n    tuple val(meta), path(fasta)\n    path hmm\n\n    output:\n    tuple val(meta), path(\"*.sthlm.gz\"), emit: sthlm\n    path \"versions.yml\"                , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    hmmalign \\\\\n        $args \\\\\n        $hmm \\\\\n        $fasta | gzip -c > ${meta.id}.sthlm.gz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        hmmer: \\$(hmmalign -h | grep -o '^# HMMER [0-9.]*' | sed 's/^# HMMER *//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    hmmalign \\\\\n        $args \\\\\n        $hmm \\\\\n        $fasta | gzip -c > ${meta.id}.sthlm.gz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        hmmer: \\$(hmmalign -h | grep -o '^# HMMER [0-9.]*' | sed 's/^# HMMER *//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "fasta",
            "hmm"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::hmmer=3.3.2\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/hmmer:3.3.2--h1b792b2_1' : 'quay.io/biocontainers/hmmer:3.3.2--h1b792b2_1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "CUSTOM_DUMPSOFTWAREVERSIONS": {
        "name_process": "CUSTOM_DUMPSOFTWAREVERSIONS",
        "string_process": "process CUSTOM_DUMPSOFTWAREVERSIONS {\n    label 'process_low'\n\n                                                                                                  \n    conda (params.enable_conda ? \"bioconda::multiqc=1.11\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/multiqc:1.11--pyhdfd78af_0' :\n        'quay.io/biocontainers/multiqc:1.11--pyhdfd78af_0' }\"\n\n    input:\n    path versions\n\n    output:\n    path \"software_versions.yml\"    , emit: yml\n    path \"software_versions_mqc.yml\", emit: mqc_yml\n    path \"versions.yml\"             , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    template 'dumpsoftwareversions.py'\n}",
        "nb_lignes_process": 22,
        "string_script": "    def args = task.ext.args ?: ''\n    template 'dumpsoftwareversions.py'",
        "nb_lignes_script": 1,
        "language_script": "bash",
        "tools": [
            "docxtemplate"
        ],
        "tools_url": [
            "https://bio.tools/docxtemplate"
        ],
        "tools_dico": [
            {
                "name": "docxtemplate",
                "uri": "https://bio.tools/docxtemplate",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3314",
                            "term": "Chemistry"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0176",
                            "term": "Molecular dynamics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3489",
                            "term": "Database management"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3489",
                            "term": "Database administration"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0249",
                                    "term": "Protein geometry calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0322",
                                    "term": "Molecular model refinement"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Deposition"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Data submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Database deposition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Database submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Data deposition"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "> VERY_LOW CONFIDENCE! | > CORRECT NAME OF TOOL COULD ALSO BE 'Phenix', 'restraints', 'Amber', 'refinement' | Improved chemistry restraints for crystallographic refinement by integrating the Amber force field into Phenix | Word templates and tools for Windows | The IUCr Word templates utilize the content management features and document styles of Word to format your manuscript and to store essential details for submission of your manuscript",
                "homepage": "http://journals.iucr.org/services/docxtemplate/"
            }
        ],
        "inputs": [
            "versions"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::multiqc=1.11\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/multiqc:1.11--pyhdfd78af_0' : 'quay.io/biocontainers/multiqc:1.11--pyhdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "SISTR": {
        "name_process": "SISTR",
        "string_process": "process SISTR {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::sistr_cmd=1.1.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/sistr_cmd:1.1.1--pyh864c0ab_2':\n        'quay.io/biocontainers/sistr_cmd:1.1.1--pyh864c0ab_2' }\"\n\n    input:\n    tuple val(meta), path(fasta)\n\n    output:\n    tuple val(meta), path(\"*.tab\")         , emit: tsv\n    tuple val(meta), path(\"*-allele.fasta\"), emit: allele_fasta\n    tuple val(meta), path(\"*-allele.json\") , emit: allele_json\n    tuple val(meta), path(\"*-cgmlst.csv\")  , emit: cgmlst_csv\n    path \"versions.yml\"                    , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def is_compressed = fasta.getName().endsWith(\".gz\") ? true : false\n    def fasta_name = fasta.getName().replace(\".gz\", \"\")\n    \"\"\"\n    if [ \"$is_compressed\" == \"true\" ]; then\n        gzip -c -d $fasta > $fasta_name\n    fi\n\n    sistr \\\\\n        --qc \\\\\n        $args \\\\\n        --threads $task.cpus \\\\\n        --alleles-output ${prefix}-allele.json \\\\\n        --novel-alleles ${prefix}-allele.fasta \\\\\n        --cgmlst-profiles ${prefix}-cgmlst.csv \\\\\n        --output-prediction ${prefix} \\\\\n        --output-format tab \\\\\n        $fasta_name\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        sistr: \\$(echo \\$(sistr --version 2>&1) | sed 's/^.*sistr_cmd //; s/ .*\\$//' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 47,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def is_compressed = fasta.getName().endsWith(\".gz\") ? true : false\n    def fasta_name = fasta.getName().replace(\".gz\", \"\")\n    \"\"\"\n    if [ \"$is_compressed\" == \"true\" ]; then\n        gzip -c -d $fasta > $fasta_name\n    fi\n\n    sistr \\\\\n        --qc \\\\\n        $args \\\\\n        --threads $task.cpus \\\\\n        --alleles-output ${prefix}-allele.json \\\\\n        --novel-alleles ${prefix}-allele.fasta \\\\\n        --cgmlst-profiles ${prefix}-cgmlst.csv \\\\\n        --output-prediction ${prefix} \\\\\n        --output-format tab \\\\\n        $fasta_name\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        sistr: \\$(echo \\$(sistr --version 2>&1) | sed 's/^.*sistr_cmd //; s/ .*\\$//' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 24,
        "language_script": "bash",
        "tools": [
            "SISTR"
        ],
        "tools_url": [
            "https://bio.tools/SISTR"
        ],
        "tools_dico": [
            {
                "name": "SISTR",
                "uri": "https://bio.tools/SISTR",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "Public health and epidemiology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3500",
                            "term": "Zoology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2830",
                            "term": "Immunoproteins and antigens"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Whole genome sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Public_health"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Epidemiology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3500",
                            "term": "Metazoa"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3500",
                            "term": "Animal biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3500",
                            "term": "Animal"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3500",
                            "term": "Animals"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "WGS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3840",
                                    "term": "Multilocus sequence typing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3840",
                                    "term": "MLST"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Salmonella In Silico Typing Resource (SISTR) is an open-source and freely available web application for rapid in silico typing and serovar prediction from Salmonella genome assemblies using cgMLST and O and H antigen gene searching.",
                "homepage": "https://lfz.corefacility.ca/sistr-app/"
            }
        ],
        "inputs": [
            "meta",
            "fasta"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::sistr_cmd=1.1.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/sistr_cmd:1.1.1--pyh864c0ab_2': 'quay.io/biocontainers/sistr_cmd:1.1.1--pyh864c0ab_2' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "CHROMAP_INDEX": {
        "name_process": "CHROMAP_INDEX",
        "string_process": "process CHROMAP_INDEX {\n    tag \"$fasta\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::chromap=0.2.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/chromap:0.2.1--hd03093a_0' :\n        'quay.io/biocontainers/chromap:0.2.1--hd03093a_0' }\"\n\n    input:\n    path fasta\n\n    output:\n    path \"*.index\"     , emit: index\n    path \"versions.yml\", emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = fasta.baseName\n    \"\"\"\n    chromap \\\\\n        -i \\\\\n        $args \\\\\n        -t $task.cpus \\\\\n        -r $fasta \\\\\n        -o ${prefix}.index\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        chromap: \\$(echo \\$(chromap --version 2>&1))\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = fasta.baseName\n    \"\"\"\n    chromap \\\\\n        -i \\\\\n        $args \\\\\n        -t $task.cpus \\\\\n        -r $fasta \\\\\n        -o ${prefix}.index\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        chromap: \\$(echo \\$(chromap --version 2>&1))\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fasta"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$fasta\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::chromap=0.2.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/chromap:0.2.1--hd03093a_0' : 'quay.io/biocontainers/chromap:0.2.1--hd03093a_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "BEDTOOLS_SORT": {
        "name_process": "BEDTOOLS_SORT",
        "string_process": "process BEDTOOLS_SORT {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::bedtools=2.30.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bedtools:2.30.0--hc088bd4_0' :\n        'quay.io/biocontainers/bedtools:2.30.0--hc088bd4_0' }\"\n\n    input:\n    tuple val(meta), path(intervals)\n    val   extension\n\n    output:\n    tuple val(meta), path(\"*.${extension}\"), emit: sorted\n    path  \"versions.yml\"                   , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    bedtools \\\\\n        sort \\\\\n        -i $intervals \\\\\n        $args \\\\\n        > ${prefix}.${extension}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bedtools: \\$(bedtools --version | sed -e \"s/bedtools v//g\")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    bedtools \\\\\n        sort \\\\\n        -i $intervals \\\\\n        $args \\\\\n        > ${prefix}.${extension}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bedtools: \\$(bedtools --version | sed -e \"s/bedtools v//g\")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [
            "BEDTools"
        ],
        "tools_url": [
            "https://bio.tools/bedtools"
        ],
        "tools_dico": [
            {
                "name": "BEDTools",
                "uri": "https://bio.tools/bedtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "BEDTools is an extensive suite of utilities for comparing genomic features in BED format.",
                "homepage": "https://github.com/arq5x/bedtools2"
            }
        ],
        "inputs": [
            "meta",
            "intervals",
            "extension"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::bedtools=2.30.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bedtools:2.30.0--hc088bd4_0' : 'quay.io/biocontainers/bedtools:2.30.0--hc088bd4_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "GATK4_MERGEVCFS": {
        "name_process": "GATK4_MERGEVCFS",
        "string_process": "process GATK4_MERGEVCFS {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::gatk4=4.2.6.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/gatk4:4.2.6.1--hdfd78af_0':\n        'quay.io/biocontainers/gatk4:4.2.6.1--hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(vcf)\n    path  dict\n\n    output:\n    tuple val(meta), path('*.vcf.gz'), emit: vcf\n    path  \"versions.yml\"             , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def input_list = vcf.collect{ \"--INPUT $it\"}.join(' ')\n    def reference_command = dict ? \"--SEQUENCE_DICTIONARY $dict\" : \"\"\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[GATK MergeVcfs] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    gatk --java-options \"-Xmx${avail_mem}g\" MergeVcfs \\\\\n        $input_list \\\\\n        --OUTPUT ${prefix}.vcf.gz \\\\\n        $reference_command \\\\\n        --TMP_DIR . \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 44,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def input_list = vcf.collect{ \"--INPUT $it\"}.join(' ')\n    def reference_command = dict ? \"--SEQUENCE_DICTIONARY $dict\" : \"\"\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[GATK MergeVcfs] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    gatk --java-options \"-Xmx${avail_mem}g\" MergeVcfs \\\\\n        $input_list \\\\\n        --OUTPUT ${prefix}.vcf.gz \\\\\n        $reference_command \\\\\n        --TMP_DIR . \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 23,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "meta",
            "vcf",
            "dict"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::gatk4=4.2.6.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/gatk4:4.2.6.1--hdfd78af_0': 'quay.io/biocontainers/gatk4:4.2.6.1--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "PHYLOFLASH": {
        "name_process": "PHYLOFLASH",
        "string_process": "process PHYLOFLASH {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::phyloflash=3.4\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/phyloflash:3.4--hdfd78af_1' :\n        'quay.io/biocontainers/phyloflash:3.4--hdfd78af_1' }\"\n\n    input:\n    tuple val(meta), path(reads)\n    path  silva_db\n    path  univec_db\n\n    output:\n    tuple val(meta), path(\"${meta.id}*/*\"), emit: results\n    path \"versions.yml\"                   , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (meta.single_end) {\n        \"\"\"\n        phyloFlash.pl \\\\\n            $args \\\\\n            -read1 ${reads[0]} \\\\\n            -lib $prefix \\\\\n            -interleaved \\\\\n            -dbhome . \\\\\n            -CPUs $task.cpus\n\n        mkdir $prefix\n        mv ${prefix}.* $prefix\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            phyloflash: \\$(echo \\$(phyloFlash.pl -version 2>&1) | sed \"s/^.*phyloFlash v//\")\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        phyloFlash.pl \\\\\n            $args \\\\\n            -read1 ${reads[0]} \\\\\n            -read2 ${reads[1]} \\\\\n            -lib $prefix \\\\\n            -dbhome . \\\\\n            -CPUs $task.cpus\n\n        mkdir $prefix\n        mv ${prefix}.* $prefix\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            phyloflash: \\$(echo \\$(phyloFlash.pl -version 2>&1) | sed \"s/^.*phyloFlash v//\")\n        END_VERSIONS\n        \"\"\"\n    }\n\n    stub:\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    mkdir ${prefix}\n    touch ${prefix}/${prefix}.SSU.collection.fasta\n    touch ${prefix}/${prefix}.phyloFlash\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        phyloflash: \\$(echo \\$(phyloFlash.pl -version 2>&1) | sed \"s/^.*phyloFlash v//\")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 73,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (meta.single_end) {\n        \"\"\"\n        phyloFlash.pl \\\\\n            $args \\\\\n            -read1 ${reads[0]} \\\\\n            -lib $prefix \\\\\n            -interleaved \\\\\n            -dbhome . \\\\\n            -CPUs $task.cpus\n\n        mkdir $prefix\n        mv ${prefix}.* $prefix\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            phyloflash: \\$(echo \\$(phyloFlash.pl -version 2>&1) | sed \"s/^.*phyloFlash v//\")\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        phyloFlash.pl \\\\\n            $args \\\\\n            -read1 ${reads[0]} \\\\\n            -read2 ${reads[1]} \\\\\n            -lib $prefix \\\\\n            -dbhome . \\\\\n            -CPUs $task.cpus\n\n        mkdir $prefix\n        mv ${prefix}.* $prefix\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            phyloflash: \\$(echo \\$(phyloFlash.pl -version 2>&1) | sed \"s/^.*phyloFlash v//\")\n        END_VERSIONS\n        \"\"\"\n    }",
        "nb_lignes_script": 38,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "reads",
            "silva_db",
            "univec_db"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::phyloflash=3.4\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/phyloflash:3.4--hdfd78af_1' : 'quay.io/biocontainers/phyloflash:3.4--hdfd78af_1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    mkdir ${prefix}\n    touch ${prefix}/${prefix}.SSU.collection.fasta\n    touch ${prefix}/${prefix}.phyloFlash\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        phyloflash: \\$(echo \\$(phyloFlash.pl -version 2>&1) | sed \"s/^.*phyloFlash v//\")\n    END_VERSIONS\n    \"\"\""
    },
    "BISMARK_SUMMARY": {
        "name_process": "BISMARK_SUMMARY",
        "string_process": "process BISMARK_SUMMARY {\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::bismark=0.23.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bismark:0.23.0--0' :\n        'quay.io/biocontainers/bismark:0.23.0--0' }\"\n\n    input:\n    path(bam)\n    path(align_report)\n    path(dedup_report)\n    path(splitting_report)\n    path(mbias)\n\n    output:\n    path  \"*report.{html,txt}\", emit: summary\n    path  \"versions.yml\"      , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    bismark2summary\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bismark: \\$(echo \\$(bismark -v 2>&1) | sed 's/^.*Bismark Version: v//; s/Copyright.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    bismark2summary\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bismark: \\$(echo \\$(bismark -v 2>&1) | sed 's/^.*Bismark Version: v//; s/Copyright.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bam",
            "align_report",
            "dedup_report",
            "splitting_report",
            "mbias"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::bismark=0.23.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bismark:0.23.0--0' : 'quay.io/biocontainers/bismark:0.23.0--0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "ARRIBA": {
        "name_process": "ARRIBA",
        "string_process": "process ARRIBA {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::arriba=2.2.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/arriba:2.2.1--hecb563c_2' :\n        'quay.io/biocontainers/arriba:2.2.1--hecb563c_2' }\"\n\n    input:\n    tuple val(meta), path(bam)\n    path fasta\n    path gtf\n    path blacklist\n    path known_fusions\n    path structural_variants\n    path tags\n    path protein_domains\n\n    output:\n    tuple val(meta), path(\"*.fusions.tsv\")          , emit: fusions\n    tuple val(meta), path(\"*.fusions.discarded.tsv\"), emit: fusions_fail\n    path \"versions.yml\"                             , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def blacklist = blacklist ? \"-b $blacklist\" : \"-f blacklist\"\n    def known_fusions = known_fusions ? \"-k $known_fusions\" : \"\"\n    def structural_variants = structural_variants ? \"-d $structual_variants\" : \"\"\n    def tags = tags ? \"-t $tags\" : \"\"\n    def protein_domains = protein_domains ? \"-p $protein_domains\" : \"\"\n\n    \"\"\"\n    arriba \\\\\n        -x $bam \\\\\n        -a $fasta \\\\\n        -g $gtf \\\\\n        -o ${prefix}.fusions.tsv \\\\\n        -O ${prefix}.fusions.discarded.tsv \\\\\n        $blacklist \\\\\n        $known_fusions \\\\\n        $structural_variants \\\\\n        $tags \\\\\n        $protein_domains \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        arriba: \\$(arriba -h | grep 'Version:' 2>&1 |  sed 's/Version:\\s//')\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    echo stub > ${prefix}.fusions.tsv\n    echo stub > ${prefix}.fusions.discarded.tsv\n\n    echo \"${task.process}:\" > versions.yml\n    echo ' arriba: 2.2.1' >> versions.yml\n    \"\"\"\n}",
        "nb_lignes_process": 64,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def blacklist = blacklist ? \"-b $blacklist\" : \"-f blacklist\"\n    def known_fusions = known_fusions ? \"-k $known_fusions\" : \"\"\n    def structural_variants = structural_variants ? \"-d $structual_variants\" : \"\"\n    def tags = tags ? \"-t $tags\" : \"\"\n    def protein_domains = protein_domains ? \"-p $protein_domains\" : \"\"\n\n    \"\"\"\n    arriba \\\\\n        -x $bam \\\\\n        -a $fasta \\\\\n        -g $gtf \\\\\n        -o ${prefix}.fusions.tsv \\\\\n        -O ${prefix}.fusions.discarded.tsv \\\\\n        $blacklist \\\\\n        $known_fusions \\\\\n        $structural_variants \\\\\n        $tags \\\\\n        $protein_domains \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        arriba: \\$(arriba -h | grep 'Version:' 2>&1 |  sed 's/Version:\\s//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 26,
        "language_script": "bash",
        "tools": [
            "Arriba"
        ],
        "tools_url": [
            "https://bio.tools/Arriba"
        ],
        "tools_dico": [
            {
                "name": "Arriba",
                "uri": "https://bio.tools/Arriba",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "Structural variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "Gene transcripts"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3320",
                            "term": "RNA splicing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "Genomic structural variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "DNA structural variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "mRNA features"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3320",
                            "term": "Alternative splicing"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3199",
                                    "term": "Split read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3228",
                                    "term": "Structural variation detection"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3199",
                                    "term": "Split-read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3228",
                                    "term": "Structural variation discovery"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3495",
                                "term": "RNA sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Arriba is a command-line tool to detect gene fusions from RNA-Seq data based on the STAR aligner. In addition to fusions, it can detect exon duplications/inversions and truncations of genes (i.e., breakpoints in introns and intergenic regions). Arriba is the winner of the DREAM SMC-RNA Challenge.",
                "homepage": "https://github.com/suhrig/arriba/"
            }
        ],
        "inputs": [
            "meta",
            "bam",
            "fasta",
            "gtf",
            "blacklist",
            "known_fusions",
            "structural_variants",
            "tags",
            "protein_domains"
        ],
        "nb_inputs": 9,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::arriba=2.2.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/arriba:2.2.1--hecb563c_2' : 'quay.io/biocontainers/arriba:2.2.1--hecb563c_2' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    echo stub > ${prefix}.fusions.tsv\n    echo stub > ${prefix}.fusions.discarded.tsv\n\n    echo \"${task.process}:\" > versions.yml\n    echo ' arriba: 2.2.1' >> versions.yml\n    \"\"\""
    },
    "CNVKIT_BATCH": {
        "name_process": "CNVKIT_BATCH",
        "string_process": "process CNVKIT_BATCH {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? 'bioconda::cnvkit=0.9.9' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/cnvkit:0.9.9--pyhdfd78af_0' :\n        'quay.io/biocontainers/cnvkit:0.9.9--pyhdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(tumor), path(normal)\n    path  fasta\n    path  targets\n    path  reference\n\n    output:\n    tuple val(meta), path(\"*.bed\"), emit: bed\n    tuple val(meta), path(\"*.cnn\"), emit: cnn, optional: true\n    tuple val(meta), path(\"*.cnr\"), emit: cnr, optional: true\n    tuple val(meta), path(\"*.cns\"), emit: cns, optional: true\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def normal_args = normal ? \"--normal $normal\" : \"\"\n    def fasta_args = fasta ? \"--fasta $fasta\" : \"\"\n    def reference_args = reference ? \"--reference $reference\" : \"\"\n\n    def target_args = \"\"\n    if (args.contains(\"--method wgs\") || args.contains(\"-m wgs\")) {\n        target_args = targets ? \"--targets $targets\" : \"\"\n    }\n    else {\n        target_args = \"--targets $targets\"\n    }\n    \"\"\"\n    cnvkit.py \\\\\n        batch \\\\\n        $tumor \\\\\n        $normal_args \\\\\n        $fasta_args \\\\\n        $reference_args \\\\\n        $target_args \\\\\n        --processes $task.cpus \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        cnvkit: \\$(cnvkit.py version | sed -e \"s/cnvkit v//g\")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 53,
        "string_script": "    def args = task.ext.args ?: ''\n    def normal_args = normal ? \"--normal $normal\" : \"\"\n    def fasta_args = fasta ? \"--fasta $fasta\" : \"\"\n    def reference_args = reference ? \"--reference $reference\" : \"\"\n\n    def target_args = \"\"\n    if (args.contains(\"--method wgs\") || args.contains(\"-m wgs\")) {\n        target_args = targets ? \"--targets $targets\" : \"\"\n    }\n    else {\n        target_args = \"--targets $targets\"\n    }\n    \"\"\"\n    cnvkit.py \\\\\n        batch \\\\\n        $tumor \\\\\n        $normal_args \\\\\n        $fasta_args \\\\\n        $reference_args \\\\\n        $target_args \\\\\n        --processes $task.cpus \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        cnvkit: \\$(cnvkit.py version | sed -e \"s/cnvkit v//g\")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 27,
        "language_script": "bash",
        "tools": [
            "BatchQC"
        ],
        "tools_url": [
            "https://bio.tools/batchqc"
        ],
        "tools_dico": [
            {
                "name": "BatchQC",
                "uri": "https://bio.tools/batchqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3518",
                            "term": "Microarray experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3518",
                            "term": "Microarrays"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Sequencing and microarray samples often are collected or processed in multiple batches or at different times. This can produce technical biases that can lead to incorrect results. This is a software tool that streamlines batch preprocessing and evaluation by providing interactive diagnostics, visualizations, and statistical analyses to explore the extent to which batch variation impacts the data. Its diagnostics help determine if batch adjustment is needed, and how correction should be applied.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/BatchQC.html"
            }
        ],
        "inputs": [
            "meta",
            "tumor",
            "normal",
            "fasta",
            "targets",
            "reference"
        ],
        "nb_inputs": 6,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? 'bioconda::cnvkit=0.9.9' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/cnvkit:0.9.9--pyhdfd78af_0' : 'quay.io/biocontainers/cnvkit:0.9.9--pyhdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "ADAPTERREMOVAL": {
        "name_process": "ADAPTERREMOVAL",
        "string_process": "process ADAPTERREMOVAL {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::adapterremoval=2.3.2\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/adapterremoval:2.3.2--hb7ba0dd_0' :\n        'quay.io/biocontainers/adapterremoval:2.3.2--hb7ba0dd_0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n    path(adapterlist)\n\n    output:\n    tuple val(meta), path(\"${prefix}.truncated.fastq.gz\")            , optional: true, emit: singles_truncated\n    tuple val(meta), path(\"${prefix}.discarded.fastq.gz\")            , optional: true, emit: discarded\n    tuple val(meta), path(\"${prefix}.pair{1,2}.truncated.fastq.gz\")  , optional: true, emit: paired_truncated\n    tuple val(meta), path(\"${prefix}.collapsed.fastq.gz\")            , optional: true, emit: collapsed\n    tuple val(meta), path(\"${prefix}.collapsed.truncated.fastq.gz\")  , optional: true, emit: collapsed_truncated\n    tuple val(meta), path(\"${prefix}.paired.fastq.gz\")               , optional: true, emit: paired_interleaved\n    tuple val(meta), path('*.settings')                              , emit: settings\n    path \"versions.yml\"                                              , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def list = adapterlist ? \"--adapter-list ${adapterlist}\" : \"\"\n    prefix = task.ext.prefix ?: \"${meta.id}\"\n\n    if (meta.single_end) {\n        \"\"\"\n        AdapterRemoval  \\\\\n            --file1 $reads \\\\\n            $args \\\\\n            $adapterlist \\\\\n            --basename ${prefix} \\\\\n            --threads ${task.cpus} \\\\\n            --seed 42 \\\\\n            --gzip\n\n        ensure_fastq() {\n            if [ -f \"\\${1}\" ]; then\n                mv \"\\${1}\" \"\\${1::-3}.fastq.gz\"\n            fi\n\n        }\n\n        ensure_fastq '${prefix}.truncated.gz'\n        ensure_fastq '${prefix}.discarded.gz'\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            adapterremoval: \\$(AdapterRemoval --version 2>&1 | sed -e \"s/AdapterRemoval ver. //g\")\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        AdapterRemoval  \\\\\n            --file1 ${reads[0]} \\\\\n            --file2 ${reads[1]} \\\\\n            $args \\\\\n            $adapterlist \\\\\n            --basename ${prefix} \\\\\n            --threads $task.cpus \\\\\n            --seed 42 \\\\\n            --gzip\n\n        ensure_fastq() {\n            if [ -f \"\\${1}\" ]; then\n                mv \"\\${1}\" \"\\${1::-3}.fastq.gz\"\n            fi\n\n        }\n\n        ensure_fastq '${prefix}.truncated.gz'\n        ensure_fastq '${prefix}.discarded.gz'\n        ensure_fastq '${prefix}.pair1.truncated.gz'\n        ensure_fastq '${prefix}.pair2.truncated.gz'\n        ensure_fastq '${prefix}.collapsed.gz'\n        ensure_fastq '${prefix}.collapsed.truncated.gz'\n        ensure_fastq '${prefix}.paired.gz'\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            adapterremoval: \\$(AdapterRemoval --version 2>&1 | sed -e \"s/AdapterRemoval ver. //g\")\n        END_VERSIONS\n        \"\"\"\n    }\n\n}",
        "nb_lignes_process": 90,
        "string_script": "    def args = task.ext.args ?: ''\n    def list = adapterlist ? \"--adapter-list ${adapterlist}\" : \"\"\n    prefix = task.ext.prefix ?: \"${meta.id}\"\n\n    if (meta.single_end) {\n        \"\"\"\n        AdapterRemoval  \\\\\n            --file1 $reads \\\\\n            $args \\\\\n            $adapterlist \\\\\n            --basename ${prefix} \\\\\n            --threads ${task.cpus} \\\\\n            --seed 42 \\\\\n            --gzip\n\n        ensure_fastq() {\n            if [ -f \"\\${1}\" ]; then\n                mv \"\\${1}\" \"\\${1::-3}.fastq.gz\"\n            fi\n\n        }\n\n        ensure_fastq '${prefix}.truncated.gz'\n        ensure_fastq '${prefix}.discarded.gz'\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            adapterremoval: \\$(AdapterRemoval --version 2>&1 | sed -e \"s/AdapterRemoval ver. //g\")\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        AdapterRemoval  \\\\\n            --file1 ${reads[0]} \\\\\n            --file2 ${reads[1]} \\\\\n            $args \\\\\n            $adapterlist \\\\\n            --basename ${prefix} \\\\\n            --threads $task.cpus \\\\\n            --seed 42 \\\\\n            --gzip\n\n        ensure_fastq() {\n            if [ -f \"\\${1}\" ]; then\n                mv \"\\${1}\" \"\\${1::-3}.fastq.gz\"\n            fi\n\n        }\n\n        ensure_fastq '${prefix}.truncated.gz'\n        ensure_fastq '${prefix}.discarded.gz'\n        ensure_fastq '${prefix}.pair1.truncated.gz'\n        ensure_fastq '${prefix}.pair2.truncated.gz'\n        ensure_fastq '${prefix}.collapsed.gz'\n        ensure_fastq '${prefix}.collapsed.truncated.gz'\n        ensure_fastq '${prefix}.paired.gz'\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            adapterremoval: \\$(AdapterRemoval --version 2>&1 | sed -e \"s/AdapterRemoval ver. //g\")\n        END_VERSIONS\n        \"\"\"\n    }",
        "nb_lignes_script": 62,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "reads",
            "adapterlist"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::adapterremoval=2.3.2\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/adapterremoval:2.3.2--hb7ba0dd_0' : 'quay.io/biocontainers/adapterremoval:2.3.2--hb7ba0dd_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "KRONA_KTIMPORTTAXONOMY": {
        "name_process": "KRONA_KTIMPORTTAXONOMY",
        "string_process": "\nprocess KRONA_KTIMPORTTAXONOMY {\n    tag \"${meta.id}\"\n    label 'process_high'\n\n    conda (params.enable_conda ? \"bioconda::krona=2.8\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/krona:2.8--pl5262hdfd78af_2' :\n        'quay.io/biocontainers/krona:2.8--pl5262hdfd78af_2' }\"\n\n    input:\n    tuple val(meta), path(report)\n    path  \"taxonomy/taxonomy.tab\"\n\n    output:\n    tuple val(meta), path ('*.html'), emit: html\n    path \"versions.yml\"             , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    ktImportTaxonomy \\\\\n        $args \\\\\n        -tax taxonomy/ \\\\\n        \"$report\"\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        krona: $VERSION\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    ktImportTaxonomy \\\\\n        $args \\\\\n        -tax taxonomy/ \\\\\n        \"$report\"\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        krona: $VERSION\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "report"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"${meta.id}\"",
            "label 'process_high'",
            "conda (params.enable_conda ? \"bioconda::krona=2.8\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/krona:2.8--pl5262hdfd78af_2' : 'quay.io/biocontainers/krona:2.8--pl5262hdfd78af_2' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "HOMER_FINDPEAKS": {
        "name_process": "HOMER_FINDPEAKS",
        "string_process": "\nprocess HOMER_FINDPEAKS {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::homer=4.11=pl526hc9558a2_3\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/homer:4.11--pl526hc9558a2_3' :\n        'quay.io/biocontainers/homer:4.11--pl526hc9558a2_3' }\"\n\n    input:\n    tuple val(meta), path(tagDir)\n\n    output:\n    tuple val(meta), path(\"*.peaks.txt\"), emit: txt\n    path  \"versions.yml\"                , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n\n    findPeaks \\\\\n        $tagDir \\\\\n        $args \\\\\n        -o ${prefix}.peaks.txt\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        homer: $VERSION\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n\n    findPeaks \\\\\n        $tagDir \\\\\n        $args \\\\\n        -o ${prefix}.peaks.txt\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        homer: $VERSION\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "tagDir"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::homer=4.11=pl526hc9558a2_3\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/homer:4.11--pl526hc9558a2_3' : 'quay.io/biocontainers/homer:4.11--pl526hc9558a2_3' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "EMMTYPER": {
        "name_process": "EMMTYPER",
        "string_process": "process EMMTYPER {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::emmtyper=0.2.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/emmtyper:0.2.0--py_0' :\n        'quay.io/biocontainers/emmtyper:0.2.0--py_0' }\"\n\n    input:\n    tuple val(meta), path(fasta)\n\n    output:\n    tuple val(meta), path(\"*.tsv\"), emit: tsv\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    emmtyper \\\\\n        $args \\\\\n        $fasta \\\\\n        > ${prefix}.tsv\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        emmtyper: \\$( echo \\$(emmtyper --version 2>&1) | sed 's/^.*emmtyper v//' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    emmtyper \\\\\n        $args \\\\\n        $fasta \\\\\n        > ${prefix}.tsv\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        emmtyper: \\$( echo \\$(emmtyper --version 2>&1) | sed 's/^.*emmtyper v//' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "fasta"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::emmtyper=0.2.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/emmtyper:0.2.0--py_0' : 'quay.io/biocontainers/emmtyper:0.2.0--py_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "GATK4_GATHERPILEUPSUMMARIES": {
        "name_process": "GATK4_GATHERPILEUPSUMMARIES",
        "string_process": "process GATK4_GATHERPILEUPSUMMARIES {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::gatk4=4.2.6.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/gatk4:4.2.6.1--hdfd78af_0':\n        'quay.io/biocontainers/gatk4:4.2.6.1--hdfd78af_0' }\"\n\n\n    input:\n    tuple val(meta), path(pileup)\n    path  dict\n\n    output:\n    tuple val(meta), path(\"*.pileupsummaries.table\"), emit: table\n    path \"versions.yml\"                             , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def input_list = pileup.collect{ \"--I $it\" }.join(' ')\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[GATK GatherPileupSummaries] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    gatk --java-options \"-Xmx${avail_mem}g\" GatherPileupSummaries \\\\\n        $input_list \\\\\n        --O ${prefix}.pileupsummaries.table \\\\\n        --sequence-dictionary $dict \\\\\n        --tmp-dir . \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 44,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def input_list = pileup.collect{ \"--I $it\" }.join(' ')\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[GATK GatherPileupSummaries] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    gatk --java-options \"-Xmx${avail_mem}g\" GatherPileupSummaries \\\\\n        $input_list \\\\\n        --O ${prefix}.pileupsummaries.table \\\\\n        --sequence-dictionary $dict \\\\\n        --tmp-dir . \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 22,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "meta",
            "pileup",
            "dict"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::gatk4=4.2.6.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/gatk4:4.2.6.1--hdfd78af_0': 'quay.io/biocontainers/gatk4:4.2.6.1--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "BEDTOOLS_COMPLEMENT": {
        "name_process": "BEDTOOLS_COMPLEMENT",
        "string_process": "process BEDTOOLS_COMPLEMENT {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::bedtools=2.30.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bedtools:2.30.0--hc088bd4_0' :\n        'quay.io/biocontainers/bedtools:2.30.0--hc088bd4_0' }\"\n\n    input:\n    tuple val(meta), path(bed)\n    path  sizes\n\n    output:\n    tuple val(meta), path('*.bed'), emit: bed\n    path  \"versions.yml\"          , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    bedtools \\\\\n        complement \\\\\n        -i $bed \\\\\n        -g $sizes \\\\\n        $args \\\\\n        > ${prefix}.bed\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bedtools: \\$(bedtools --version | sed -e \"s/bedtools v//g\")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    bedtools \\\\\n        complement \\\\\n        -i $bed \\\\\n        -g $sizes \\\\\n        $args \\\\\n        > ${prefix}.bed\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bedtools: \\$(bedtools --version | sed -e \"s/bedtools v//g\")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "BEDTools"
        ],
        "tools_url": [
            "https://bio.tools/bedtools"
        ],
        "tools_dico": [
            {
                "name": "BEDTools",
                "uri": "https://bio.tools/bedtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "BEDTools is an extensive suite of utilities for comparing genomic features in BED format.",
                "homepage": "https://github.com/arq5x/bedtools2"
            }
        ],
        "inputs": [
            "meta",
            "bed",
            "sizes"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::bedtools=2.30.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bedtools:2.30.0--hc088bd4_0' : 'quay.io/biocontainers/bedtools:2.30.0--hc088bd4_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "SALMON_QUANT": {
        "name_process": "SALMON_QUANT",
        "string_process": "process SALMON_QUANT {\n    tag \"$meta.id\"\n    label \"process_medium\"\n\n    conda (params.enable_conda ? 'bioconda::salmon=1.5.2' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/salmon:1.5.2--h84f40af_0' :\n        'quay.io/biocontainers/salmon:1.5.2--h84f40af_0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n    path  index\n    path  gtf\n    path  transcript_fasta\n    val   alignment_mode\n    val   lib_type\n\n    output:\n    tuple val(meta), path(\"${prefix}\"), emit: results\n    path  \"versions.yml\"              , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args   ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n\n    def reference   = \"--index $index\"\n    def input_reads = meta.single_end ? \"-r $reads\" : \"-1 ${reads[0]} -2 ${reads[1]}\"\n    if (alignment_mode) {\n        reference   = \"-t $transcript_fasta\"\n        input_reads = \"-a $reads\"\n    }\n\n    def strandedness_opts = [\n        'A', 'U', 'SF', 'SR',\n        'IS', 'IU' , 'ISF', 'ISR',\n        'OS', 'OU' , 'OSF', 'OSR',\n        'MS', 'MU' , 'MSF', 'MSR'\n    ]\n    def strandedness =  'A'\n    if (lib_type) {\n        if (strandedness_opts.contains(lib_type)) {\n            strandedness = lib_type\n        } else {\n            log.info \"[Salmon Quant] Invalid library type specified '--libType=${lib_type}', defaulting to auto-detection with '--libType=A'.\"\n        }\n    } else {\n        strandedness = meta.single_end ? 'U' : 'IU'\n        if (meta.strandedness == 'forward') {\n            strandedness = meta.single_end ? 'SF' : 'ISF'\n        } else if (meta.strandedness == 'reverse') {\n            strandedness = meta.single_end ? 'SR' : 'ISR'\n        }\n    }\n    \"\"\"\n    salmon quant \\\\\n        --geneMap $gtf \\\\\n        --threads $task.cpus \\\\\n        --libType=$strandedness \\\\\n        $reference \\\\\n        $input_reads \\\\\n        $args \\\\\n        -o $prefix\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        salmon: \\$(echo \\$(salmon --version) | sed -e \"s/salmon //g\")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 70,
        "string_script": "    def args = task.ext.args   ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n\n    def reference   = \"--index $index\"\n    def input_reads = meta.single_end ? \"-r $reads\" : \"-1 ${reads[0]} -2 ${reads[1]}\"\n    if (alignment_mode) {\n        reference   = \"-t $transcript_fasta\"\n        input_reads = \"-a $reads\"\n    }\n\n    def strandedness_opts = [\n        'A', 'U', 'SF', 'SR',\n        'IS', 'IU' , 'ISF', 'ISR',\n        'OS', 'OU' , 'OSF', 'OSR',\n        'MS', 'MU' , 'MSF', 'MSR'\n    ]\n    def strandedness =  'A'\n    if (lib_type) {\n        if (strandedness_opts.contains(lib_type)) {\n            strandedness = lib_type\n        } else {\n            log.info \"[Salmon Quant] Invalid library type specified '--libType=${lib_type}', defaulting to auto-detection with '--libType=A'.\"\n        }\n    } else {\n        strandedness = meta.single_end ? 'U' : 'IU'\n        if (meta.strandedness == 'forward') {\n            strandedness = meta.single_end ? 'SF' : 'ISF'\n        } else if (meta.strandedness == 'reverse') {\n            strandedness = meta.single_end ? 'SR' : 'ISR'\n        }\n    }\n    \"\"\"\n    salmon quant \\\\\n        --geneMap $gtf \\\\\n        --threads $task.cpus \\\\\n        --libType=$strandedness \\\\\n        $reference \\\\\n        $input_reads \\\\\n        $args \\\\\n        -o $prefix\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        salmon: \\$(echo \\$(salmon --version) | sed -e \"s/salmon //g\")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 45,
        "language_script": "bash",
        "tools": [
            "AVA,Dx",
            "Salmon"
        ],
        "tools_url": [
            "https://bio.tools/AVADx",
            "https://bio.tools/salmon"
        ],
        "tools_dico": [
            {
                "name": "AVA,Dx",
                "uri": "https://bio.tools/AVADx",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Exome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "Gene transcripts"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0602",
                            "term": "Molecular interactions, pathways and networks"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Targeted exome capture"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Exome analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "WES"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Exome"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Whole exome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Exome capture"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "mRNA features"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3501",
                                    "term": "Enrichment analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3501",
                                    "term": "Enrichment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3501",
                                    "term": "Over-representation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype reconstruction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype map generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype inference"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Identifying Crohn's disease signal from variome analysis | prediction of individual predisposition to disease x through variation analysis | After years of concentrated research efforts, the exact cause of Crohn\u2019s disease (CD) remains unknown",
                "homepage": "https://bromberglab.org/project/avadx/"
            },
            {
                "name": "Salmon",
                "uri": "https://bio.tools/salmon",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression data analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantitation"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3496",
                                "term": "RNA sequence (raw)"
                            },
                            {
                                "uri": "http://edamontology.org/data_2093",
                                "term": "Data reference"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "A tool for transcript expression quantification from RNA-seq data",
                "homepage": "https://github.com/COMBINE-lab/salmon"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "index",
            "gtf",
            "transcript_fasta",
            "alignment_mode",
            "lib_type"
        ],
        "nb_inputs": 7,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label \"process_medium\"",
            "conda (params.enable_conda ? 'bioconda::salmon=1.5.2' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/salmon:1.5.2--h84f40af_0' : 'quay.io/biocontainers/salmon:1.5.2--h84f40af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "AGRVATE": {
        "name_process": "AGRVATE",
        "string_process": "process AGRVATE {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::agrvate=1.0.2\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/agrvate:1.0.2--hdfd78af_0' :\n        'quay.io/biocontainers/agrvate:1.0.2--hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(fasta)\n\n    output:\n    tuple val(meta), path(\"${fasta.baseName}-results/${fasta.baseName}-summary.tab\"), emit: summary\n    path \"${fasta.baseName}-results\"                                                , emit: results_dir\n    path \"versions.yml\"                                                             , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    agrvate \\\\\n        $args \\\\\n        -i $fasta\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        agrvate: \\$(echo \\$(agrvate -v 2>&1) | sed 's/agrvate v//;')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    agrvate \\\\\n        $args \\\\\n        -i $fasta\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        agrvate: \\$(echo \\$(agrvate -v 2>&1) | sed 's/agrvate v//;')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "fasta"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::agrvate=1.0.2\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/agrvate:1.0.2--hdfd78af_0' : 'quay.io/biocontainers/agrvate:1.0.2--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "PICARD_MERGESAMFILES": {
        "name_process": "PICARD_MERGESAMFILES",
        "string_process": "process PICARD_MERGESAMFILES {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::picard=2.27.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/picard:2.27.1--hdfd78af_0' :\n        'quay.io/biocontainers/picard:2.27.1--hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(bams)\n\n    output:\n    tuple val(meta), path(\"*.bam\"), emit: bam\n    path  \"versions.yml\"          , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def bam_files = bams.sort()\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[Picard MergeSamFiles] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    if (bam_files.size() > 1) {\n        \"\"\"\n        picard \\\\\n            -Xmx${avail_mem}g \\\\\n            MergeSamFiles \\\\\n            $args \\\\\n            ${'--INPUT '+bam_files.join(' --INPUT ')} \\\\\n            --OUTPUT ${prefix}.bam\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            picard: \\$( echo \\$(picard MergeSamFiles --version 2>&1) | grep -o 'Version:.*' | cut -f2- -d:)\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        ln -s ${bam_files[0]} ${prefix}.bam\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            picard: \\$( echo \\$(picard MergeSamFiles --version 2>&1) | grep -o 'Version:.*' | cut -f2- -d:)\n        END_VERSIONS\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 50,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def bam_files = bams.sort()\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[Picard MergeSamFiles] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    if (bam_files.size() > 1) {\n        \"\"\"\n        picard \\\\\n            -Xmx${avail_mem}g \\\\\n            MergeSamFiles \\\\\n            $args \\\\\n            ${'--INPUT '+bam_files.join(' --INPUT ')} \\\\\n            --OUTPUT ${prefix}.bam\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            picard: \\$( echo \\$(picard MergeSamFiles --version 2>&1) | grep -o 'Version:.*' | cut -f2- -d:)\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        ln -s ${bam_files[0]} ${prefix}.bam\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            picard: \\$( echo \\$(picard MergeSamFiles --version 2>&1) | grep -o 'Version:.*' | cut -f2- -d:)\n        END_VERSIONS\n        \"\"\"\n    }",
        "nb_lignes_script": 30,
        "language_script": "bash",
        "tools": [
            "Picard"
        ],
        "tools_url": [
            "https://bio.tools/picard_tools"
        ],
        "tools_dico": [
            {
                "name": "Picard",
                "uri": "https://bio.tools/picard_tools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Sequence variation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Variant analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation annotation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A set of command line tools for manipulating high-throughput sequencing (HTS) data in formats such as SAM/BAM/CRAM and VCF. Available as a standalone program or within the GATK4 program.",
                "homepage": "https://github.com/broadinstitute/picard"
            }
        ],
        "inputs": [
            "meta",
            "bams"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::picard=2.27.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/picard:2.27.1--hdfd78af_0' : 'quay.io/biocontainers/picard:2.27.1--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "BCFTOOLS_QUERY": {
        "name_process": "BCFTOOLS_QUERY",
        "string_process": "process BCFTOOLS_QUERY {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? 'bioconda::bcftools=1.14' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bcftools:1.14--h88f3f91_0' :\n        'quay.io/biocontainers/bcftools:1.14--h88f3f91_0' }\"\n\n    input:\n    tuple val(meta), path(vcf), path(tbi)\n    path regions\n    path targets\n    path samples\n\n    output:\n    tuple val(meta), path(\"*.txt\"), emit: txt\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def regions_file = regions ? \"--regions-file ${regions}\" : \"\"\n    def targets_file = targets ? \"--targets-file ${targets}\" : \"\"\n    def samples_file =  samples ? \"--samples-file ${samples}\" : \"\"\n    \"\"\"\n    bcftools query \\\\\n        --output ${prefix}.txt \\\\\n        $regions_file \\\\\n        $targets_file \\\\\n        $samples_file \\\\\n        $args \\\\\n        $vcf\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bcftools: \\$(bcftools --version 2>&1 | head -n1 | sed 's/^.*bcftools //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 41,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def regions_file = regions ? \"--regions-file ${regions}\" : \"\"\n    def targets_file = targets ? \"--targets-file ${targets}\" : \"\"\n    def samples_file =  samples ? \"--samples-file ${samples}\" : \"\"\n    \"\"\"\n    bcftools query \\\\\n        --output ${prefix}.txt \\\\\n        $regions_file \\\\\n        $targets_file \\\\\n        $samples_file \\\\\n        $args \\\\\n        $vcf\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bcftools: \\$(bcftools --version 2>&1 | head -n1 | sed 's/^.*bcftools //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [
            "BCFtools"
        ],
        "tools_url": [
            "https://bio.tools/bcftools"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "vcf",
            "tbi",
            "regions",
            "targets",
            "samples"
        ],
        "nb_inputs": 6,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? 'bioconda::bcftools=1.14' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bcftools:1.14--h88f3f91_0' : 'quay.io/biocontainers/bcftools:1.14--h88f3f91_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "GATK4_CREATESOMATICPANELOFNORMALS": {
        "name_process": "GATK4_CREATESOMATICPANELOFNORMALS",
        "string_process": "process GATK4_CREATESOMATICPANELOFNORMALS {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::gatk4=4.2.6.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/gatk4:4.2.6.1--hdfd78af_0':\n        'quay.io/biocontainers/gatk4:4.2.6.1--hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(genomicsdb)\n    path  fasta\n    path  fai\n    path  dict\n\n    output:\n    tuple val(meta), path(\"*.vcf.gz\"), emit: vcf\n    tuple val(meta), path(\"*.tbi\")   , emit: tbi\n    path \"versions.yml\"              , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[GATK CreateSomaticPanelOfNormals] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    gatk --java-options \"-Xmx${avail_mem}g\" CreateSomaticPanelOfNormals \\\\\n        --variant gendb://$genomicsdb \\\\\n        --output ${prefix}.vcf.gz \\\\\n        --reference $fasta \\\\\n        --tmp-dir . \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 45,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[GATK CreateSomaticPanelOfNormals] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    gatk --java-options \"-Xmx${avail_mem}g\" CreateSomaticPanelOfNormals \\\\\n        --variant gendb://$genomicsdb \\\\\n        --output ${prefix}.vcf.gz \\\\\n        --reference $fasta \\\\\n        --tmp-dir . \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 21,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "meta",
            "genomicsdb",
            "fasta",
            "fai",
            "dict"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::gatk4=4.2.6.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/gatk4:4.2.6.1--hdfd78af_0': 'quay.io/biocontainers/gatk4:4.2.6.1--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "BWAMEM2_INDEX": {
        "name_process": "BWAMEM2_INDEX",
        "string_process": "process BWAMEM2_INDEX {\n    tag \"$fasta\"\n    label 'process_high'\n\n    conda (params.enable_conda ? \"bioconda::bwa-mem2=2.2.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bwa-mem2:2.2.1--he513fc3_0' :\n        'quay.io/biocontainers/bwa-mem2:2.2.1--he513fc3_0' }\"\n\n    input:\n    path fasta\n\n    output:\n    path \"bwamem2\"      , emit: index\n    path \"versions.yml\" , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    mkdir bwamem2\n    bwa-mem2 \\\\\n        index \\\\\n        $args \\\\\n        $fasta -p bwamem2/${fasta}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bwamem2: \\$(echo \\$(bwa-mem2 version 2>&1) | sed 's/.* //')\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    \"\"\"\n    mkdir bwamem2\n    touch bwamem2/${fasta}.0123\n    touch bwamem2/${fasta}.ann\n    touch bwamem2/${fasta}.pac\n    touch bwamem2/${fasta}.amb\n    touch bwamem2/${fasta}.bwt.2bit.64\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bwamem2: \\$(echo \\$(bwa-mem2 version 2>&1) | sed 's/.* //')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 47,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    mkdir bwamem2\n    bwa-mem2 \\\\\n        index \\\\\n        $args \\\\\n        $fasta -p bwamem2/${fasta}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bwamem2: \\$(echo \\$(bwa-mem2 version 2>&1) | sed 's/.* //')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [
            "CINdex"
        ],
        "tools_url": [
            "https://bio.tools/cindex"
        ],
        "tools_dico": [
            {
                "name": "CINdex",
                "uri": "https://bio.tools/cindex",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3233",
                                    "term": "Copy number estimation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3233",
                                    "term": "Transcript copy number estimation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The package addresses important area of high-throughput genomic analysis. It allows the automated processing and analysis of the experimental DNA copy number data generated by Affymetrix SNP 6.0 arrays or similar. It calculates the chromosome instability index to quantitatively characterize genome-wide DNA copy number alterations. This package calculates not only overall genomic instability, but also instability in terms of copy number gains and losses at the chromosome and cytoband level.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/CINdex.html"
            }
        ],
        "inputs": [
            "fasta"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$fasta\"",
            "label 'process_high'",
            "conda (params.enable_conda ? \"bioconda::bwa-mem2=2.2.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bwa-mem2:2.2.1--he513fc3_0' : 'quay.io/biocontainers/bwa-mem2:2.2.1--he513fc3_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    \"\"\"\n    mkdir bwamem2\n    touch bwamem2/${fasta}.0123\n    touch bwamem2/${fasta}.ann\n    touch bwamem2/${fasta}.pac\n    touch bwamem2/${fasta}.amb\n    touch bwamem2/${fasta}.bwt.2bit.64\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bwamem2: \\$(echo \\$(bwa-mem2 version 2>&1) | sed 's/.* //')\n    END_VERSIONS\n    \"\"\""
    },
    "SAMTOOLS_MPILEUP": {
        "name_process": "SAMTOOLS_MPILEUP",
        "string_process": "process SAMTOOLS_MPILEUP {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::samtools=1.15.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/samtools:1.15.1--h1170115_0' :\n        'quay.io/biocontainers/samtools:1.15.1--h1170115_0' }\"\n    input:\n    tuple val(meta), path(input), path(intervals)\n    path  fasta\n\n    output:\n    tuple val(meta), path(\"*.mpileup\"), emit: mpileup\n    path  \"versions.yml\"              , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def intervals = intervals ? \"-l ${intervals}\" : \"\"\n    \"\"\"\n    samtools mpileup \\\\\n        --fasta-ref $fasta \\\\\n        --output ${prefix}.mpileup \\\\\n        $args \\\\\n        $input\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def intervals = intervals ? \"-l ${intervals}\" : \"\"\n    \"\"\"\n    samtools mpileup \\\\\n        --fasta-ref $fasta \\\\\n        --output ${prefix}.mpileup \\\\\n        $args \\\\\n        $input\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "input",
            "intervals",
            "fasta"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::samtools=1.15.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/samtools:1.15.1--h1170115_0' : 'quay.io/biocontainers/samtools:1.15.1--h1170115_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "MTNUCRATIO": {
        "name_process": "MTNUCRATIO",
        "string_process": "process MTNUCRATIO {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::mtnucratio=0.7\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mtnucratio:0.7--hdfd78af_2' :\n        'quay.io/biocontainers/mtnucratio:0.7--hdfd78af_2' }\"\n\n    input:\n    tuple val(meta), path(bam)\n    val(mt_id)\n\n    output:\n    tuple val(meta), path(\"*.mtnucratio\"), emit: mtnucratio\n    tuple val(meta), path(\"*.json\")      , emit: json\n    path \"versions.yml\"                  , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n    \"\"\"\n    mtnucratio \\\\\n        $args \\\\\n        $bam \\\\\n        $mt_id\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        mtnucratio: \\$(echo \\$(mtnucratio --version 2>&1) | head -n1 | sed 's/Version: //')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n    \"\"\"\n    mtnucratio \\\\\n        $args \\\\\n        $bam \\\\\n        $mt_id\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        mtnucratio: \\$(echo \\$(mtnucratio --version 2>&1) | head -n1 | sed 's/Version: //')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "bam",
            "mt_id"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::mtnucratio=0.7\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mtnucratio:0.7--hdfd78af_2' : 'quay.io/biocontainers/mtnucratio:0.7--hdfd78af_2' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "BCFTOOLS_REHEADER": {
        "name_process": "BCFTOOLS_REHEADER",
        "string_process": "process BCFTOOLS_REHEADER {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? 'bioconda::bcftools=1.14' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bcftools:1.14--h88f3f91_0' :\n        'quay.io/biocontainers/bcftools:1.14--h88f3f91_0' }\"\n\n    input:\n    tuple val(meta), path(vcf)\n    path fai\n    path header\n\n    output:\n    tuple val(meta), path(\"*.vcf.gz\"), emit: vcf\n    path \"versions.yml\"              , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def update_sequences = fai ? \"-f $fai\" : \"\"\n    def new_header       = header ? \"-h $header\" : \"\"\n    \"\"\"\n    bcftools \\\\\n        reheader \\\\\n        $update_sequences \\\\\n        $new_header \\\\\n        $args \\\\\n        --threads $task.cpus \\\\\n        -o ${prefix}.vcf.gz \\\\\n        $vcf\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bcftools: \\$(bcftools --version 2>&1 | head -n1 | sed 's/^.*bcftools //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 40,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def update_sequences = fai ? \"-f $fai\" : \"\"\n    def new_header       = header ? \"-h $header\" : \"\"\n    \"\"\"\n    bcftools \\\\\n        reheader \\\\\n        $update_sequences \\\\\n        $new_header \\\\\n        $args \\\\\n        --threads $task.cpus \\\\\n        -o ${prefix}.vcf.gz \\\\\n        $vcf\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bcftools: \\$(bcftools --version 2>&1 | head -n1 | sed 's/^.*bcftools //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [
            "BCFtools"
        ],
        "tools_url": [
            "https://bio.tools/bcftools"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "vcf",
            "fai",
            "header"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? 'bioconda::bcftools=1.14' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bcftools:1.14--h88f3f91_0' : 'quay.io/biocontainers/bcftools:1.14--h88f3f91_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "KALLISTOBUSTOOLS_COUNT": {
        "name_process": "KALLISTOBUSTOOLS_COUNT",
        "string_process": "process KALLISTOBUSTOOLS_COUNT {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? 'bioconda::kb-python=0.26.3' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/kb-python:0.26.3--pyhdfd78af_0' :\n        'quay.io/biocontainers/kb-python:0.26.3--pyhdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n    path  index\n    path  t2g\n    path  t1c\n    path  t2c\n    val   workflow_mode\n    val   technology\n\n    output:\n    tuple val(meta), path (\"*.count\"), emit: count\n    path \"versions.yml\"              , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def cdna     = t1c ? \"-c1 $t1c\" : ''\n    def introns  = t2c ? \"-c2 $t2c\" : ''\n    \"\"\"\n    kb \\\\\n        count \\\\\n        -t $task.cpus \\\\\n        -i $index \\\\\n        -g $t2g \\\\\n        $cdna \\\\\n        $introns \\\\\n        --workflow $workflow_mode \\\\\n        -x $technology \\\\\n        $args \\\\\n        -o ${prefix}.count \\\\\n        ${reads[0]} \\\\\n        ${reads[1]}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        kallistobustools: \\$(echo \\$(kb --version 2>&1) | sed 's/^.*kb_python //;s/positional arguments.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 49,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def cdna     = t1c ? \"-c1 $t1c\" : ''\n    def introns  = t2c ? \"-c2 $t2c\" : ''\n    \"\"\"\n    kb \\\\\n        count \\\\\n        -t $task.cpus \\\\\n        -i $index \\\\\n        -g $t2g \\\\\n        $cdna \\\\\n        $introns \\\\\n        --workflow $workflow_mode \\\\\n        -x $technology \\\\\n        $args \\\\\n        -o ${prefix}.count \\\\\n        ${reads[0]} \\\\\n        ${reads[1]}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        kallistobustools: \\$(echo \\$(kb --version 2>&1) | sed 's/^.*kb_python //;s/positional arguments.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 23,
        "language_script": "bash",
        "tools": [
            "gfkb",
            "Count"
        ],
        "tools_url": [
            "https://bio.tools/gfkb",
            "https://bio.tools/count"
        ],
        "tools_dico": [
            {
                "name": "gfkb",
                "uri": "https://bio.tools/gfkb",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0637",
                            "term": "Taxonomy"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3697",
                            "term": "Microbial ecology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3697",
                            "term": "Environmental microbiology"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0362",
                                    "term": "Genome annotation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomic classification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0310",
                                    "term": "Sequence assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomy assignment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Baseline human gut microbiota profile in healthy people and standard reporting template | High-performance Integrated Virtual Environment | We have developed a proof-of-concept gut microbiome monitoring system using a sequencing and analysis pipeline implemented during our previous I-Corps award (see below) | We have collected from the individuals enrolled in our study the following: three separate fecal samples for metagenomic sequencing, anthropometric measurements, a diet history questionnaire, gastrointestinal symptoms questionnaires, perceived stress questionnaires, physical activity questionnaires, and sleep questionnaires | We would like to thank the following individuals for their significant work in curation and annotation of the GFKB:",
                "homepage": "https://hive.biochemistry.gwu.edu/gfkb"
            },
            {
                "name": "Count",
                "uri": "https://bio.tools/count",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3299",
                            "term": "Evolutionary biology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3299",
                            "term": "Evolution"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Count is a software package for the evolutionary analysis of homolog family sizes (phylogenetic profiles), or other numerical census-type characters along a phylogeny.",
                "homepage": "http://www.iro.umontreal.ca/~csuros/gene_content/count.html"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "index",
            "t2g",
            "t1c",
            "t2c",
            "workflow_mode",
            "technology"
        ],
        "nb_inputs": 8,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? 'bioconda::kb-python=0.26.3' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/kb-python:0.26.3--pyhdfd78af_0' : 'quay.io/biocontainers/kb-python:0.26.3--pyhdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "BAMALIGNCLEANER": {
        "name_process": "BAMALIGNCLEANER",
        "string_process": "process BAMALIGNCLEANER {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::bamaligncleaner=0.2.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bamaligncleaner:0.2.1--pyhdfd78af_0' :\n        'quay.io/biocontainers/bamaligncleaner:0.2.1--pyhdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(bam)\n\n    output:\n    tuple val(meta), path(\"*.bam\"), emit: bam\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n    \"\"\"\n    bamAlignCleaner \\\\\n        $args \\\\\n        -o ${prefix}.bam \\\\\n        ${bam}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bamaligncleaner: \\$(bamAlignCleaner --version | sed 's/.*version //')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n    \"\"\"\n    bamAlignCleaner \\\\\n        $args \\\\\n        -o ${prefix}.bam \\\\\n        ${bam}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bamaligncleaner: \\$(bamAlignCleaner --version | sed 's/.*version //')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "bam"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::bamaligncleaner=0.2.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bamaligncleaner:0.2.1--pyhdfd78af_0' : 'quay.io/biocontainers/bamaligncleaner:0.2.1--pyhdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "HIFIASM": {
        "name_process": "HIFIASM",
        "string_process": "process HIFIASM {\n    tag \"$meta.id\"\n    label 'process_high'\n\n    conda (params.enable_conda ? \"bioconda::hifiasm=0.15.4\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/hifiasm:0.15.4--h2e03b76_0' :\n        'quay.io/biocontainers/hifiasm:0.15.4--h2e03b76_0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n    path  paternal_kmer_dump\n    path  maternal_kmer_dump\n    val   use_parental_kmers\n\n    output:\n    tuple val(meta), path(\"*.r_utg.gfa\")       , emit: raw_unitigs\n    tuple val(meta), path(\"*.ec.bin\")          , emit: corrected_reads\n    tuple val(meta), path(\"*.ovlp.source.bin\") , emit: source_overlaps\n    tuple val(meta), path(\"*.ovlp.reverse.bin\"), emit: reverse_overlaps\n    tuple val(meta), path(\"*.p_utg.gfa\")       , emit: processed_unitigs, optional: true\n    tuple val(meta), path(\"*.asm.p_ctg.gfa\")   , emit: primary_contigs  , optional: true\n    tuple val(meta), path(\"*.asm.a_ctg.gfa\")   , emit: alternate_contigs, optional: true\n    tuple val(meta), path(\"*.hap1.p_ctg.gfa\")  , emit: paternal_contigs , optional: true\n    tuple val(meta), path(\"*.hap2.p_ctg.gfa\")  , emit: maternal_contigs , optional: true\n    path  \"versions.yml\"                       , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (use_parental_kmers) {\n        \"\"\"\n        hifiasm \\\\\n            $args \\\\\n            -o ${prefix}.asm \\\\\n            -t $task.cpus \\\\\n            -1 $paternal_kmer_dump \\\\\n            -2 $maternal_kmer_dump \\\\\n            $reads\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            hifiasm: \\$(hifiasm --version 2>&1)\n        END_VERSIONS\n        \"\"\"\n    } else {                                               \n        \"\"\"\n        hifiasm \\\\\n            $args \\\\\n            -o ${prefix}.asm \\\\\n            -t $task.cpus \\\\\n            $reads\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            hifiasm: \\$(hifiasm --version 2>&1)\n        END_VERSIONS\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 61,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (use_parental_kmers) {\n        \"\"\"\n        hifiasm \\\\\n            $args \\\\\n            -o ${prefix}.asm \\\\\n            -t $task.cpus \\\\\n            -1 $paternal_kmer_dump \\\\\n            -2 $maternal_kmer_dump \\\\\n            $reads\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            hifiasm: \\$(hifiasm --version 2>&1)\n        END_VERSIONS\n        \"\"\"\n    } else {                                               \n        \"\"\"\n        hifiasm \\\\\n            $args \\\\\n            -o ${prefix}.asm \\\\\n            -t $task.cpus \\\\\n            $reads\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            hifiasm: \\$(hifiasm --version 2>&1)\n        END_VERSIONS\n        \"\"\"\n    }",
        "nb_lignes_script": 30,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "reads",
            "paternal_kmer_dump",
            "maternal_kmer_dump",
            "use_parental_kmers"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "conda (params.enable_conda ? \"bioconda::hifiasm=0.15.4\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/hifiasm:0.15.4--h2e03b76_0' : 'quay.io/biocontainers/hifiasm:0.15.4--h2e03b76_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "UCSC_BEDGRAPHTOBIGWIG": {
        "name_process": "UCSC_BEDGRAPHTOBIGWIG",
        "string_process": "\nprocess UCSC_BEDGRAPHTOBIGWIG {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::ucsc-bedgraphtobigwig=377\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/ucsc-bedgraphtobigwig:377--h446ed27_1' :\n        'quay.io/biocontainers/ucsc-bedgraphtobigwig:377--h446ed27_1' }\"\n\n    input:\n    tuple val(meta), path(bedgraph)\n    path  sizes\n\n    output:\n    tuple val(meta), path(\"*.bigWig\"), emit: bigwig\n    path \"versions.yml\"              , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    bedGraphToBigWig \\\\\n        $bedgraph \\\\\n        $sizes \\\\\n        ${prefix}.bigWig\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        ucsc: $VERSION\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    bedGraphToBigWig \\\\\n        $bedgraph \\\\\n        $sizes \\\\\n        ${prefix}.bigWig\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        ucsc: $VERSION\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [
            "bedGraphToBigWig"
        ],
        "tools_url": [
            "https://bio.tools/bedgraphtobigwig"
        ],
        "tools_dico": [
            {
                "name": "bedGraphToBigWig",
                "uri": "https://bio.tools/bedgraphtobigwig",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Convert bedGraph to bigWig file.",
                "homepage": "https://www.encodeproject.org/software/bedgraphtobigwig/"
            }
        ],
        "inputs": [
            "meta",
            "bedgraph",
            "sizes"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::ucsc-bedgraphtobigwig=377\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/ucsc-bedgraphtobigwig:377--h446ed27_1' : 'quay.io/biocontainers/ucsc-bedgraphtobigwig:377--h446ed27_1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "BCFTOOLS_MPILEUP": {
        "name_process": "BCFTOOLS_MPILEUP",
        "string_process": "process BCFTOOLS_MPILEUP {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? 'bioconda::bcftools=1.14' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bcftools:1.14--h88f3f91_0' :\n        'quay.io/biocontainers/bcftools:1.14--h88f3f91_0' }\"\n\n    input:\n    tuple val(meta), path(bam)\n    path fasta\n    val save_mpileup\n\n    output:\n    tuple val(meta), path(\"*.gz\")      , emit: vcf\n    tuple val(meta), path(\"*.tbi\")     , emit: tbi\n    tuple val(meta), path(\"*stats.txt\"), emit: stats\n    tuple val(meta), path(\"*.mpileup\") , emit: mpileup, optional: true\n    path  \"versions.yml\"               , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    def args3 = task.ext.args3 ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def mpileup = save_mpileup ? \"| tee ${prefix}.mpileup\" : \"\"\n    \"\"\"\n    echo \"${meta.id}\" > sample_name.list\n\n    bcftools \\\\\n        mpileup \\\\\n        --fasta-ref $fasta \\\\\n        $args \\\\\n        $bam \\\\\n        $mpileup \\\\\n        | bcftools call --output-type v $args2 \\\\\n        | bcftools reheader --samples sample_name.list \\\\\n        | bcftools view --output-file ${prefix}.vcf.gz --output-type z $args3\n\n    tabix -p vcf -f ${prefix}.vcf.gz\n\n    bcftools stats ${prefix}.vcf.gz > ${prefix}.bcftools_stats.txt\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bcftools: \\$(bcftools --version 2>&1 | head -n1 | sed 's/^.*bcftools //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 51,
        "string_script": "    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    def args3 = task.ext.args3 ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def mpileup = save_mpileup ? \"| tee ${prefix}.mpileup\" : \"\"\n    \"\"\"\n    echo \"${meta.id}\" > sample_name.list\n\n    bcftools \\\\\n        mpileup \\\\\n        --fasta-ref $fasta \\\\\n        $args \\\\\n        $bam \\\\\n        $mpileup \\\\\n        | bcftools call --output-type v $args2 \\\\\n        | bcftools reheader --samples sample_name.list \\\\\n        | bcftools view --output-file ${prefix}.vcf.gz --output-type z $args3\n\n    tabix -p vcf -f ${prefix}.vcf.gz\n\n    bcftools stats ${prefix}.vcf.gz > ${prefix}.bcftools_stats.txt\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bcftools: \\$(bcftools --version 2>&1 | head -n1 | sed 's/^.*bcftools //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 26,
        "language_script": "bash",
        "tools": [
            "BCFtools",
            "mpileup"
        ],
        "tools_url": [
            "https://bio.tools/bcftools",
            "https://bio.tools/mpileup"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "mpileup",
                "uri": "https://bio.tools/mpileup",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3695",
                                    "term": "Filtering"
                                }
                            ],
                            []
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            },
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            },
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            },
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Filter bam file using mpileup on coverage and SNPs.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "bam",
            "fasta",
            "save_mpileup"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? 'bioconda::bcftools=1.14' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bcftools:1.14--h88f3f91_0' : 'quay.io/biocontainers/bcftools:1.14--h88f3f91_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "COOLER_ZOOMIFY": {
        "name_process": "COOLER_ZOOMIFY",
        "string_process": "process COOLER_ZOOMIFY {\n    tag \"$meta.id\"\n    label 'process_high'\n\n    conda (params.enable_conda ? \"bioconda::cooler=0.8.11\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/cooler:0.8.11--pyh3252c3a_0' :\n        'quay.io/biocontainers/cooler:0.8.11--pyh3252c3a_0' }\"\n\n    input:\n    tuple val(meta), path(cool)\n\n    output:\n    tuple val(meta), path(\"*.mcool\"), emit: mcool\n    path \"versions.yml\"             , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    cooler zoomify \\\\\n        $args \\\\\n        -n $task.cpus \\\\\n        -o ${prefix}.mcool \\\\\n        $cool\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        cooler: \\$(cooler --version 2>&1 | sed 's/cooler, version //')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    cooler zoomify \\\\\n        $args \\\\\n        -n $task.cpus \\\\\n        -o ${prefix}.mcool \\\\\n        $cool\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        cooler: \\$(cooler --version 2>&1 | sed 's/cooler, version //')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "cool"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "conda (params.enable_conda ? \"bioconda::cooler=0.8.11\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/cooler:0.8.11--pyh3252c3a_0' : 'quay.io/biocontainers/cooler:0.8.11--pyh3252c3a_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "GATK4_INDEXFEATUREFILE": {
        "name_process": "GATK4_INDEXFEATUREFILE",
        "string_process": "process GATK4_INDEXFEATUREFILE {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::gatk4=4.2.6.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/gatk4:4.2.6.1--hdfd78af_0':\n        'quay.io/biocontainers/gatk4:4.2.6.1--hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(feature_file)\n\n    output:\n    tuple val(meta), path(\"*.{tbi,idx}\"), emit: index\n    path  \"versions.yml\"                , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[GATK IndexFeatureFile] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    gatk --java-options \"-Xmx${avail_mem}g\" IndexFeatureFile \\\\\n        --input $feature_file \\\\\n        --tmp-dir . \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 38,
        "string_script": "    def args = task.ext.args ?: ''\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[GATK IndexFeatureFile] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    gatk --java-options \"-Xmx${avail_mem}g\" IndexFeatureFile \\\\\n        --input $feature_file \\\\\n        --tmp-dir . \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "meta",
            "feature_file"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::gatk4=4.2.6.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/gatk4:4.2.6.1--hdfd78af_0': 'quay.io/biocontainers/gatk4:4.2.6.1--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "VCFANNO": {
        "name_process": "VCFANNO",
        "string_process": "process VCFANNO {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::vcfanno=0.3.3\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/vcfanno:0.3.3--h9ee0642_0':\n        'quay.io/biocontainers/vcfanno:0.3.3--h9ee0642_0' }\"\n\n    input:\n    tuple val(meta), path(vcf), path(tbi)\n    tuple val(meta), path(vcf_uncompressed)\n    path toml\n    path resource_dir\n\n    output:\n    tuple val(meta), path(\"*_annotated.vcf\"), emit: vcf\n    path \"versions.yml\"                     , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def input_vcf = vcf_uncompressed ?: vcf\n    \"\"\"\n    ln -sf $resource_dir/* \\$(pwd)\n\n    vcfanno \\\\\n        -p $task.cpus \\\\\n        $args \\\\\n        $toml \\\\\n        $input_vcf \\\\\n        > ${prefix}_annotated.vcf\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        vcfanno: \\$(echo \\$(vcfanno 2>&1 | grep version | cut -f3 -d' ' ))\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}_annotated.vcf\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        vcfanno: \\$(echo \\$(vcfanno 2>&1 | grep version | cut -f3 -d' ' ))\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 51,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def input_vcf = vcf_uncompressed ?: vcf\n    \"\"\"\n    ln -sf $resource_dir/* \\$(pwd)\n\n    vcfanno \\\\\n        -p $task.cpus \\\\\n        $args \\\\\n        $toml \\\\\n        $input_vcf \\\\\n        > ${prefix}_annotated.vcf\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        vcfanno: \\$(echo \\$(vcfanno 2>&1 | grep version | cut -f3 -d' ' ))\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 17,
        "language_script": "bash",
        "tools": [
            "vcfanno"
        ],
        "tools_url": [
            "https://bio.tools/vcfanno"
        ],
        "tools_dico": [
            {
                "name": "vcfanno",
                "uri": "https://bio.tools/vcfanno",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0219",
                            "term": "Data submission, annotation and curation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3661",
                                    "term": "SNP annotation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Fast, flexible annotation of genetic variants.",
                "homepage": "https://github.com/brentp/vcfanno"
            }
        ],
        "inputs": [
            "meta",
            "vcf",
            "tbi",
            "meta",
            "vcf_uncompressed",
            "toml",
            "resource_dir"
        ],
        "nb_inputs": 7,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::vcfanno=0.3.3\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/vcfanno:0.3.3--h9ee0642_0': 'quay.io/biocontainers/vcfanno:0.3.3--h9ee0642_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}_annotated.vcf\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        vcfanno: \\$(echo \\$(vcfanno 2>&1 | grep version | cut -f3 -d' ' ))\n    END_VERSIONS\n    \"\"\""
    },
    "SNPSITES": {
        "name_process": "SNPSITES",
        "string_process": "process SNPSITES {\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::snp-sites=2.5.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/snp-sites:2.5.1--hed695b0_0' :\n        'quay.io/biocontainers/snp-sites:2.5.1--hed695b0_0' }\"\n\n    input:\n    path alignment\n\n    output:\n    path \"*.fas\"        , emit: fasta\n    path \"*.sites.txt\"  , emit: constant_sites\n    path \"versions.yml\" , emit: versions\n    env   CONSTANT_SITES, emit: constant_sites_string\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    snp-sites \\\\\n        $alignment \\\\\n        $args \\\\\n        > filtered_alignment.fas\n\n    echo \\$(snp-sites -C $alignment) > constant.sites.txt\n\n    CONSTANT_SITES=\\$(cat constant.sites.txt)\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        snpsites: \\$(snp-sites -V 2>&1 | sed 's/snp-sites //')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 36,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    snp-sites \\\\\n        $alignment \\\\\n        $args \\\\\n        > filtered_alignment.fas\n\n    echo \\$(snp-sites -C $alignment) > constant.sites.txt\n\n    CONSTANT_SITES=\\$(cat constant.sites.txt)\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        snpsites: \\$(snp-sites -V 2>&1 | sed 's/snp-sites //')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "alignment"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::snp-sites=2.5.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/snp-sites:2.5.1--hed695b0_0' : 'quay.io/biocontainers/snp-sites:2.5.1--hed695b0_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "SEQTK_SAMPLE": {
        "name_process": "SEQTK_SAMPLE",
        "string_process": "process SEQTK_SAMPLE {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::seqtk=1.3\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/seqtk:1.3--h5bf99c6_3' :\n        'quay.io/biocontainers/seqtk:1.3--h5bf99c6_3' }\"\n\n    input:\n    tuple val(meta), path(reads)\n    val sample_size\n\n    output:\n    tuple val(meta), path(\"*.fastq.gz\"), emit: reads\n    path \"versions.yml\"                , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (meta.single_end) {\n        \"\"\"\n        seqtk \\\\\n            sample \\\\\n            $args \\\\\n            $reads \\\\\n            $sample_size \\\\\n            | gzip --no-name > ${prefix}.fastq.gz \\\\\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            seqtk: \\$(echo \\$(seqtk 2>&1) | sed 's/^.*Version: //; s/ .*\\$//')\n        END_VERSIONS\n        \"\"\"\n    } else {\n        if (!(args ==~ /.*-s[0-9]+.*/)) {\n            args += \" -s100\"\n        }\n        \"\"\"\n        seqtk \\\\\n            sample \\\\\n            $args \\\\\n            ${reads[0]} \\\\\n            $sample_size \\\\\n            | gzip --no-name > ${prefix}_1.fastq.gz \\\\\n\n        seqtk \\\\\n            sample \\\\\n            $args \\\\\n            ${reads[1]} \\\\\n            $sample_size \\\\\n            | gzip --no-name > ${prefix}_2.fastq.gz \\\\\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            seqtk: \\$(echo \\$(seqtk 2>&1) | sed 's/^.*Version: //; s/ .*\\$//')\n        END_VERSIONS\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 61,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (meta.single_end) {\n        \"\"\"\n        seqtk \\\\\n            sample \\\\\n            $args \\\\\n            $reads \\\\\n            $sample_size \\\\\n            | gzip --no-name > ${prefix}.fastq.gz \\\\\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            seqtk: \\$(echo \\$(seqtk 2>&1) | sed 's/^.*Version: //; s/ .*\\$//')\n        END_VERSIONS\n        \"\"\"\n    } else {\n        if (!(args ==~ /.*-s[0-9]+.*/)) {\n            args += \" -s100\"\n        }\n        \"\"\"\n        seqtk \\\\\n            sample \\\\\n            $args \\\\\n            ${reads[0]} \\\\\n            $sample_size \\\\\n            | gzip --no-name > ${prefix}_1.fastq.gz \\\\\n\n        seqtk \\\\\n            sample \\\\\n            $args \\\\\n            ${reads[1]} \\\\\n            $sample_size \\\\\n            | gzip --no-name > ${prefix}_2.fastq.gz \\\\\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            seqtk: \\$(echo \\$(seqtk 2>&1) | sed 's/^.*Version: //; s/ .*\\$//')\n        END_VERSIONS\n        \"\"\"\n    }",
        "nb_lignes_script": 40,
        "language_script": "bash",
        "tools": [
            "seqtk",
            "SAMPLE",
            "PopTargs"
        ],
        "tools_url": [
            "https://bio.tools/seqtk",
            "https://bio.tools/sample",
            "https://bio.tools/PopTargs"
        ],
        "tools_dico": [
            {
                "name": "seqtk",
                "uri": "https://bio.tools/seqtk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2121",
                                    "term": "Sequence file editing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A tool for processing sequences in the FASTA or FASTQ format. It parses both FASTA and FASTQ files which can also be optionally compressed by gzip.",
                "homepage": "https://github.com/lh3/seqtk"
            },
            {
                "name": "SAMPLE",
                "uri": "https://bio.tools/sample",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3053",
                            "term": "Genetics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0282",
                                    "term": "Genetic mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0282",
                                    "term": "Genetic map construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0282",
                                    "term": "Linkage mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0282",
                                    "term": "Functional mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0282",
                                    "term": "Genetic cartography"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0282",
                                    "term": "Genetic map generation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The tool is designed to identify regions that are linked to a recessive disease by analysing genotype data from the parents and unaffected sibs of affected individuals. Since this analysis does not use data from affected patients, it is suited to the identification of lethal recessive genes, when the patients may have died before DNA samples could be obtained.",
                "homepage": "http://dna.leeds.ac.uk/sample/"
            },
            {
                "name": "PopTargs",
                "uri": "https://bio.tools/PopTargs",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0659",
                            "term": "Functional, regulatory and non-coding RNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0160",
                            "term": "Sequence sites, features and motifs"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3056",
                            "term": "Population genetics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "miRNA target prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Database search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "microRNA target detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "miRNA prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "microRNA detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "PopTargs is a database for studying population evolutionary genetics of human microRNA target sites.\n\nThese are the scripts used to create the MySQL database that is used by PopTargs.essex.ac.uk. The pipeline can be altered to create similar databases with different species, it may need to be adjusted to fit your file names.",
                "homepage": "https://poptargs.essex.ac.uk/"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "sample_size"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::seqtk=1.3\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/seqtk:1.3--h5bf99c6_3' : 'quay.io/biocontainers/seqtk:1.3--h5bf99c6_3' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "UCSC_LIFTOVER": {
        "name_process": "UCSC_LIFTOVER",
        "string_process": "\nprocess UCSC_LIFTOVER {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::ucsc-liftover=377\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/ucsc-liftover:377--h0b8a92a_3' :\n        'quay.io/biocontainers/ucsc-liftover:377--h0b8a92a_3' }\"\n\n    input:\n    tuple val(meta), path(bed)\n    path(chain)\n\n    output:\n    tuple val(meta), path(\"*.lifted.bed\")  , emit: lifted\n    tuple val(meta), path(\"*.unlifted.bed\"), emit: unlifted\n    path \"versions.yml\"                    , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n    \"\"\"\n    liftOver \\\\\n        $args \\\n        $bed \\\\\n        $chain \\\\\n        ${prefix}.lifted.bed \\\\\n        ${prefix}.unlifted.bed\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        ucsc: $VERSION\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 38,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n    \"\"\"\n    liftOver \\\\\n        $args \\\n        $bed \\\\\n        $chain \\\\\n        ${prefix}.lifted.bed \\\\\n        ${prefix}.unlifted.bed\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        ucsc: $VERSION\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [
            "LiftOver"
        ],
        "tools_url": [
            "https://bio.tools/liftover"
        ],
        "tools_dico": [
            {
                "name": "LiftOver",
                "uri": "https://bio.tools/liftover",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "This service converts genome coordinates and genome annotation files between assemblies.",
                "homepage": "http://api.bioinfo.no/wsdl/LiftOverService.wsdl"
            }
        ],
        "inputs": [
            "meta",
            "bed",
            "chain"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::ucsc-liftover=377\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/ucsc-liftover:377--h0b8a92a_3' : 'quay.io/biocontainers/ucsc-liftover:377--h0b8a92a_3' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "SNPDISTS": {
        "name_process": "SNPDISTS",
        "string_process": "process SNPDISTS {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::snp-dists=0.8.2\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/snp-dists:0.8.2--h5bf99c6_0' :\n        'quay.io/biocontainers/snp-dists:0.8.2--h5bf99c6_0' }\"\n\n    input:\n    tuple val(meta), path(alignment)\n\n    output:\n    tuple val(meta), path(\"*.tsv\"), emit: tsv\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    snp-dists \\\\\n        $args \\\\\n        $alignment > ${prefix}.tsv\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        snpdists: \\$(snp-dists -v 2>&1 | sed 's/snp-dists //;')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    snp-dists \\\\\n        $args \\\\\n        $alignment > ${prefix}.tsv\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        snpdists: \\$(snp-dists -v 2>&1 | sed 's/snp-dists //;')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "alignment"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::snp-dists=0.8.2\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/snp-dists:0.8.2--h5bf99c6_0' : 'quay.io/biocontainers/snp-dists:0.8.2--h5bf99c6_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "NANOLYSE": {
        "name_process": "NANOLYSE",
        "string_process": "process NANOLYSE {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::nanolyse=1.2.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/nanolyse:1.2.0--py_0' :\n        'quay.io/biocontainers/nanolyse:1.2.0--py_0' }\"\n\n    input:\n    tuple val(meta), path(fastq)\n    path  fasta\n\n    output:\n    tuple val(meta), path(\"*.fastq.gz\"), emit: fastq\n    path \"*.log\"                       , emit: log\n    path \"versions.yml\"                , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    gunzip -c $fastq | NanoLyse -r $fasta | gzip > ${prefix}.fastq.gz\n    mv NanoLyse.log ${prefix}.nanolyse.log\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        nanolyse: \\$(NanoLyse --version 2>&1 | sed -e \"s/NanoLyse //g\")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    gunzip -c $fastq | NanoLyse -r $fasta | gzip > ${prefix}.fastq.gz\n    mv NanoLyse.log ${prefix}.nanolyse.log\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        nanolyse: \\$(NanoLyse --version 2>&1 | sed -e \"s/NanoLyse //g\")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "fastq",
            "fasta"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::nanolyse=1.2.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/nanolyse:1.2.0--py_0' : 'quay.io/biocontainers/nanolyse:1.2.0--py_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "GATK4_MERGEBAMALIGNMENT": {
        "name_process": "GATK4_MERGEBAMALIGNMENT",
        "string_process": "process GATK4_MERGEBAMALIGNMENT {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::gatk4=4.2.6.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/gatk4:4.2.6.1--hdfd78af_0':\n        'quay.io/biocontainers/gatk4:4.2.6.1--hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(aligned), path(unmapped)\n    path  fasta\n    path  dict\n\n    output:\n    tuple val(meta), path('*.bam'), emit: bam\n    path  \"versions.yml\"          , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[GATK MergeBamAlignment] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    gatk --java-options \"-Xmx${avail_mem}g\" MergeBamAlignment \\\\\n        --UNMAPPED_BAM $unmapped \\\\\n        --ALIGNED_BAM $aligned \\\\\n        --OUTPUT ${prefix}.bam \\\\\n        --REFERENCE_SEQUENCE $fasta \\\\\n        --TMP_DIR . \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.bam\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 55,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[GATK MergeBamAlignment] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    gatk --java-options \"-Xmx${avail_mem}g\" MergeBamAlignment \\\\\n        --UNMAPPED_BAM $unmapped \\\\\n        --ALIGNED_BAM $aligned \\\\\n        --OUTPUT ${prefix}.bam \\\\\n        --REFERENCE_SEQUENCE $fasta \\\\\n        --TMP_DIR . \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 22,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "meta",
            "aligned",
            "unmapped",
            "fasta",
            "dict"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::gatk4=4.2.6.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/gatk4:4.2.6.1--hdfd78af_0': 'quay.io/biocontainers/gatk4:4.2.6.1--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.bam\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\""
    },
    "BAMTOOLS_SPLIT": {
        "name_process": "BAMTOOLS_SPLIT",
        "string_process": "process BAMTOOLS_SPLIT {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::bamtools=2.5.2\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bamtools:2.5.2--hd03093a_0' :\n        'quay.io/biocontainers/bamtools:2.5.2--hd03093a_0' }\"\n\n    input:\n    tuple val(meta), path(bam)\n\n    output:\n    tuple val(meta), path(\"*.bam\"), emit: bam\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def input_list = bam.collect{\"-in $it\"}.join(' ')\n    \"\"\"\n    bamtools \\\\\n        merge \\\\\n        $input_list \\\\\n        | bamtools \\\\\n            split \\\\\n            -stub $prefix \\\\\n            $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bamtools: \\$( bamtools --version | grep -e 'bamtools' | sed 's/^.*bamtools //' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 36,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def input_list = bam.collect{\"-in $it\"}.join(' ')\n    \"\"\"\n    bamtools \\\\\n        merge \\\\\n        $input_list \\\\\n        | bamtools \\\\\n            split \\\\\n            -stub $prefix \\\\\n            $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bamtools: \\$( bamtools --version | grep -e 'bamtools' | sed 's/^.*bamtools //' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [
            "BamTools",
            "merger"
        ],
        "tools_url": [
            "https://bio.tools/bamtools",
            "https://bio.tools/merger"
        ],
        "tools_dico": [
            {
                "name": "BamTools",
                "uri": "https://bio.tools/bamtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0258",
                                    "term": "Sequence alignment analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "BamTools provides a fast, flexible C++ API & toolkit for reading, writing, and managing BAM files.",
                "homepage": "https://github.com/pezmaster31/bamtools"
            },
            {
                "name": "merger",
                "uri": "https://bio.tools/merger",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0097",
                            "term": "Nucleic acid structure analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0097",
                            "term": "Nucleic acid structure"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise sequence alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0232",
                                    "term": "Sequence merging"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0232",
                                    "term": "Sequence splicing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0874",
                                "term": "Comparison matrix"
                            },
                            {
                                "uri": "http://edamontology.org/data_0849",
                                "term": "Sequence record"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0849",
                                "term": "Sequence record"
                            },
                            {
                                "uri": "http://edamontology.org/data_1381",
                                "term": "Pair sequence alignment"
                            }
                        ]
                    }
                ],
                "description": "Merge two overlapping sequences.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/merger.html"
            }
        ],
        "inputs": [
            "meta",
            "bam"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::bamtools=2.5.2\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bamtools:2.5.2--hd03093a_0' : 'quay.io/biocontainers/bamtools:2.5.2--hd03093a_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "BLAST_BLASTN": {
        "name_process": "BLAST_BLASTN",
        "string_process": "process BLAST_BLASTN {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? 'bioconda::blast=2.12.0' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/blast:2.12.0--pl5262h3289130_0' :\n        'quay.io/biocontainers/blast:2.12.0--pl5262h3289130_0' }\"\n\n    input:\n    tuple val(meta), path(fasta)\n    path  db\n\n    output:\n    tuple val(meta), path('*.blastn.txt'), emit: txt\n    path \"versions.yml\"                  , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    DB=`find -L ./ -name \"*.ndb\" | sed 's/.ndb//'`\n    blastn \\\\\n        -num_threads $task.cpus \\\\\n        -db \\$DB \\\\\n        -query $fasta \\\\\n        $args \\\\\n        -out ${prefix}.blastn.txt\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        blast: \\$(blastn -version 2>&1 | sed 's/^.*blastn: //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    DB=`find -L ./ -name \"*.ndb\" | sed 's/.ndb//'`\n    blastn \\\\\n        -num_threads $task.cpus \\\\\n        -db \\$DB \\\\\n        -query $fasta \\\\\n        $args \\\\\n        -out ${prefix}.blastn.txt\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        blast: \\$(blastn -version 2>&1 | sed 's/^.*blastn: //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "G-BLASTN"
        ],
        "tools_url": [
            "https://bio.tools/g-blastn"
        ],
        "tools_dico": [
            {
                "name": "G-BLASTN",
                "uri": "https://bio.tools/g-blastn",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acids"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acid bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acid informatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0346",
                                    "term": "Sequence similarity search"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2976",
                                "term": "Protein sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0857",
                                "term": "Sequence search results"
                            }
                        ]
                    }
                ],
                "description": "GPU-accelerated nucleotide alignment tool based on the widely used NCBI-BLAST.",
                "homepage": "http://www.comp.hkbu.edu.hk/~chxw/software/G-BLASTN.html"
            }
        ],
        "inputs": [
            "meta",
            "fasta",
            "db"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? 'bioconda::blast=2.12.0' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/blast:2.12.0--pl5262h3289130_0' : 'quay.io/biocontainers/blast:2.12.0--pl5262h3289130_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "CNVPYTOR_IMPORTREADDEPTH": {
        "name_process": "CNVPYTOR_IMPORTREADDEPTH",
        "string_process": "process CNVPYTOR_IMPORTREADDEPTH {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::cnvpytor=1.2.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/cnvpytor:1.2.1--pyhdfd78af_0':\n        'quay.io/biocontainers/cnvpytor:1.2.1--pyhdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(input_file), path(index)\n    path fasta\n    path fai\n\n    output:\n    tuple val(meta), path(\"*.pytor\")\t, emit: pytor\n    path \"versions.yml\"                 , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def reference = fasta ? \"-T ${fasta}\" : ''\n    \"\"\"\n    cnvpytor \\\\\n        -root ${prefix}.pytor \\\\\n        -rd $input_file \\\\\n        $args \\\\\n        $reference\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        cnvpytor: \\$(echo \\$(cnvpytor --version 2>&1) | sed 's/CNVpytor //' ))\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.pytor\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        cnvpytor: \\$(echo \\$(cnvpytor --version 2>&1) | sed 's/CNVpytor //' ))\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 47,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def reference = fasta ? \"-T ${fasta}\" : ''\n    \"\"\"\n    cnvpytor \\\\\n        -root ${prefix}.pytor \\\\\n        -rd $input_file \\\\\n        $args \\\\\n        $reference\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        cnvpytor: \\$(echo \\$(cnvpytor --version 2>&1) | sed 's/CNVpytor //' ))\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "input_file",
            "index",
            "fasta",
            "fai"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::cnvpytor=1.2.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/cnvpytor:1.2.1--pyhdfd78af_0': 'quay.io/biocontainers/cnvpytor:1.2.1--pyhdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.pytor\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        cnvpytor: \\$(echo \\$(cnvpytor --version 2>&1) | sed 's/CNVpytor //' ))\n    END_VERSIONS\n    \"\"\""
    },
    "BEDTOOLS_SLOP": {
        "name_process": "BEDTOOLS_SLOP",
        "string_process": "process BEDTOOLS_SLOP {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::bedtools=2.30.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bedtools:2.30.0--hc088bd4_0' :\n        'quay.io/biocontainers/bedtools:2.30.0--hc088bd4_0' }\"\n\n    input:\n    tuple val(meta), path(bed)\n    path  sizes\n\n    output:\n    tuple val(meta), path(\"*.bed\"), emit: bed\n    path  \"versions.yml\"          , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    bedtools \\\\\n        slop \\\\\n        -i $bed \\\\\n        -g $sizes \\\\\n        $args \\\\\n        > ${prefix}.bed\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bedtools: \\$(bedtools --version | sed -e \"s/bedtools v//g\")\n    END_VERSIONS\n    \"\"\"\n\n}",
        "nb_lignes_process": 36,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    bedtools \\\\\n        slop \\\\\n        -i $bed \\\\\n        -g $sizes \\\\\n        $args \\\\\n        > ${prefix}.bed\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bedtools: \\$(bedtools --version | sed -e \"s/bedtools v//g\")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "BEDTools",
            "SLOPE"
        ],
        "tools_url": [
            "https://bio.tools/bedtools",
            "https://bio.tools/slope"
        ],
        "tools_dico": [
            {
                "name": "BEDTools",
                "uri": "https://bio.tools/bedtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "BEDTools is an extensive suite of utilities for comparing genomic features in BED format.",
                "homepage": "https://github.com/arq5x/bedtools2"
            },
            {
                "name": "SLOPE",
                "uri": "https://bio.tools/slope",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Exome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "Structural variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Targeted exome capture"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Exome analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "WES"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Exome"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Whole exome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Exome capture"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "Genomic structural variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "DNA structural variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3228",
                                    "term": "Structural variation detection"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3228",
                                    "term": "Structural variation discovery"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Detects structural variants from targeted short DNA reads",
                "homepage": "http://www-genepi.med.utah.edu/suppl/SLOPE/index.html"
            }
        ],
        "inputs": [
            "meta",
            "bed",
            "sizes"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::bedtools=2.30.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bedtools:2.30.0--hc088bd4_0' : 'quay.io/biocontainers/bedtools:2.30.0--hc088bd4_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "HOMER_ANNOTATEPEAKS": {
        "name_process": "HOMER_ANNOTATEPEAKS",
        "string_process": "\nprocess HOMER_ANNOTATEPEAKS {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::homer=4.11\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/homer:4.11--pl526hc9558a2_3' :\n        'quay.io/biocontainers/homer:4.11--pl526hc9558a2_3' }\"\n\n    input:\n    tuple val(meta), path(peak)\n    path  fasta\n    path  gtf\n\n    output:\n    tuple val(meta), path(\"*annotatePeaks.txt\"), emit: txt\n    path  \"versions.yml\"                       , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    annotatePeaks.pl \\\\\n        $peak \\\\\n        $fasta \\\\\n        $args \\\\\n        -gtf $gtf \\\\\n        -cpu $task.cpus \\\\\n        > ${prefix}.annotatePeaks.txt\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        homer: $VERSION\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 38,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    annotatePeaks.pl \\\\\n        $peak \\\\\n        $fasta \\\\\n        $args \\\\\n        -gtf $gtf \\\\\n        -cpu $task.cpus \\\\\n        > ${prefix}.annotatePeaks.txt\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        homer: $VERSION\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "peak",
            "fasta",
            "gtf"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::homer=4.11\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/homer:4.11--pl526hc9558a2_3' : 'quay.io/biocontainers/homer:4.11--pl526hc9558a2_3' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "FGBIO_GROUPREADSBYUMI": {
        "name_process": "FGBIO_GROUPREADSBYUMI",
        "string_process": "process FGBIO_GROUPREADSBYUMI {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::fgbio=1.4.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/fgbio:1.4.0--hdfd78af_0' :\n        'quay.io/biocontainers/fgbio:1.4.0--hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(taggedbam)\n    val(strategy)\n\n    output:\n    tuple val(meta), path(\"*_umi-grouped.bam\")  , emit: bam\n    tuple val(meta), path(\"*_umi_histogram.txt\"), emit: histogram\n    path \"versions.yml\"                         , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n    \"\"\"\n    mkdir tmp\n\n    fgbio \\\\\n        --tmp-dir=${PWD}/tmp \\\\\n        GroupReadsByUmi \\\\\n        -s $strategy \\\\\n        $args \\\\\n        -i $taggedbam \\\\\n        -o ${prefix}_umi-grouped.bam \\\\\n        -f ${prefix}_umi_histogram.txt\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        fgbio: \\$( echo \\$(fgbio --version 2>&1 | tr -d '[:cntrl:]' ) | sed -e 's/^.*Version: //;s/\\\\[.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 41,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n    \"\"\"\n    mkdir tmp\n\n    fgbio \\\\\n        --tmp-dir=${PWD}/tmp \\\\\n        GroupReadsByUmi \\\\\n        -s $strategy \\\\\n        $args \\\\\n        -i $taggedbam \\\\\n        -o ${prefix}_umi-grouped.bam \\\\\n        -f ${prefix}_umi_histogram.txt\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        fgbio: \\$( echo \\$(fgbio --version 2>&1 | tr -d '[:cntrl:]' ) | sed -e 's/^.*Version: //;s/\\\\[.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [
            "TMPD"
        ],
        "tools_url": [
            "https://bio.tools/tmpd"
        ],
        "tools_dico": [
            {
                "name": "TMPD",
                "uri": "https://bio.tools/tmpd",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0780",
                            "term": "Plant biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0160",
                            "term": "Sequence sites, features and motifs"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0780",
                            "term": "Plant science"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0780",
                            "term": "Plants"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0780",
                            "term": "Botany"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0780",
                            "term": "Plant"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Tobacco Markers & Primers Database.",
                "homepage": "http://biodb.sdau.edu.cn/tmpd/index.html"
            }
        ],
        "inputs": [
            "meta",
            "taggedbam",
            "strategy"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::fgbio=1.4.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/fgbio:1.4.0--hdfd78af_0' : 'quay.io/biocontainers/fgbio:1.4.0--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "UNICYCLER": {
        "name_process": "UNICYCLER",
        "string_process": "process UNICYCLER {\n    tag \"$meta.id\"\n    label 'process_high'\n\n    conda (params.enable_conda ? 'bioconda::unicycler=0.4.8' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/unicycler:0.4.8--py38h8162308_3' :\n        'quay.io/biocontainers/unicycler:0.4.8--py38h8162308_3' }\"\n\n    input:\n    tuple val(meta), path(shortreads), path(longreads)\n\n    output:\n    tuple val(meta), path('*.scaffolds.fa.gz'), emit: scaffolds\n    tuple val(meta), path('*.assembly.gfa.gz'), emit: gfa\n    tuple val(meta), path('*.log')            , emit: log\n    path  \"versions.yml\"                      , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def short_reads = shortreads ? ( meta.single_end ? \"-s $shortreads\" : \"-1 ${shortreads[0]} -2 ${shortreads[1]}\" ) : \"\"\n    def long_reads  = longreads ? \"-l $longreads\" : \"\"\n    \"\"\"\n    unicycler \\\\\n        --threads $task.cpus \\\\\n        $args \\\\\n        $short_reads \\\\\n        $long_reads \\\\\n        --out ./\n\n    mv assembly.fasta ${prefix}.scaffolds.fa\n    gzip -n ${prefix}.scaffolds.fa\n    mv assembly.gfa ${prefix}.assembly.gfa\n    gzip -n ${prefix}.assembly.gfa\n    mv unicycler.log ${prefix}.unicycler.log\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        unicycler: \\$(echo \\$(unicycler --version 2>&1) | sed 's/^.*Unicycler v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 44,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def short_reads = shortreads ? ( meta.single_end ? \"-s $shortreads\" : \"-1 ${shortreads[0]} -2 ${shortreads[1]}\" ) : \"\"\n    def long_reads  = longreads ? \"-l $longreads\" : \"\"\n    \"\"\"\n    unicycler \\\\\n        --threads $task.cpus \\\\\n        $args \\\\\n        $short_reads \\\\\n        $long_reads \\\\\n        --out ./\n\n    mv assembly.fasta ${prefix}.scaffolds.fa\n    gzip -n ${prefix}.scaffolds.fa\n    mv assembly.gfa ${prefix}.assembly.gfa\n    gzip -n ${prefix}.assembly.gfa\n    mv unicycler.log ${prefix}.unicycler.log\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        unicycler: \\$(echo \\$(unicycler --version 2>&1) | sed 's/^.*Unicycler v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 22,
        "language_script": "bash",
        "tools": [
            "Unicycler"
        ],
        "tools_url": [
            "https://bio.tools/unicycler"
        ],
        "tools_dico": [
            {
                "name": "Unicycler",
                "uri": "https://bio.tools/unicycler",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3301",
                            "term": "Microbiology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3436",
                                    "term": "Aggregation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0925",
                                "term": "Sequence assembly"
                            }
                        ]
                    }
                ],
                "description": "A tool for assembling bacterial genomes from a combination of short (2nd generation) and long (3rd generation) sequencing reads.",
                "homepage": "https://github.com/rrwick/Unicycler"
            }
        ],
        "inputs": [
            "meta",
            "shortreads",
            "longreads"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "conda (params.enable_conda ? 'bioconda::unicycler=0.4.8' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/unicycler:0.4.8--py38h8162308_3' : 'quay.io/biocontainers/unicycler:0.4.8--py38h8162308_3' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "PRESEQ_LCEXTRAP": {
        "name_process": "PRESEQ_LCEXTRAP",
        "string_process": "process PRESEQ_LCEXTRAP {\n    tag \"$meta.id\"\n    label 'process_medium'\n    label 'error_ignore'\n\n    conda (params.enable_conda ? \"bioconda::preseq=3.1.2\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/preseq:3.1.2--h445547b_2':\n        'quay.io/biocontainers/preseq:3.1.2--h445547b_2' }\"\n\n    input:\n    tuple val(meta), path(bam)\n\n    output:\n    tuple val(meta), path(\"*.lc_extrap.txt\"), emit: lc_extrap\n    tuple val(meta), path(\"*.log\")          , emit: log\n    path  \"versions.yml\"                    , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def paired_end = meta.single_end ? '' : '-pe'\n    \"\"\"\n    preseq \\\\\n        lc_extrap \\\\\n        $args \\\\\n        $paired_end \\\\\n        -output ${prefix}.lc_extrap.txt \\\\\n        $bam\n    cp .command.err ${prefix}.command.log\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        preseq: \\$(echo \\$(preseq 2>&1) | sed 's/^.*Version: //; s/Usage:.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 38,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def paired_end = meta.single_end ? '' : '-pe'\n    \"\"\"\n    preseq \\\\\n        lc_extrap \\\\\n        $args \\\\\n        $paired_end \\\\\n        -output ${prefix}.lc_extrap.txt \\\\\n        $bam\n    cp .command.err ${prefix}.command.log\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        preseq: \\$(echo \\$(preseq 2>&1) | sed 's/^.*Version: //; s/Usage:.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [
            "preseq"
        ],
        "tools_url": [
            "https://bio.tools/preseq"
        ],
        "tools_dico": [
            {
                "name": "preseq",
                "uri": "https://bio.tools/preseq",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2423",
                                    "term": "Prediction and recognition"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "This package is aimed at predicting and number of distinct reads and how many will be expected from additional sequencing using an initial sequencing experiment. The estimates can then be used to examine the utility of further sequencing, optimize the sequencing depth, or to screen multiple libraries to avoid low complexity samples.",
                "homepage": "http://smithlabresearch.org/software/preseq/"
            }
        ],
        "inputs": [
            "meta",
            "bam"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "label 'error_ignore'",
            "conda (params.enable_conda ? \"bioconda::preseq=3.1.2\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/preseq:3.1.2--h445547b_2': 'quay.io/biocontainers/preseq:3.1.2--h445547b_2' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "MINIMAP2_INDEX": {
        "name_process": "MINIMAP2_INDEX",
        "string_process": "process MINIMAP2_INDEX {\n    label 'process_medium'\n\n    conda (params.enable_conda ? 'bioconda::minimap2=2.21' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/minimap2:2.21--h5bf99c6_0' :\n        'quay.io/biocontainers/minimap2:2.21--h5bf99c6_0' }\"\n\n    input:\n    path fasta\n\n    output:\n    path \"*.mmi\"        , emit: index\n    path \"versions.yml\" , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    minimap2 \\\\\n        -t $task.cpus \\\\\n        -d ${fasta.baseName}.mmi \\\\\n        $args \\\\\n        $fasta\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        minimap2: \\$(minimap2 --version 2>&1)\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    minimap2 \\\\\n        -t $task.cpus \\\\\n        -d ${fasta.baseName}.mmi \\\\\n        $args \\\\\n        $fasta\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        minimap2: \\$(minimap2 --version 2>&1)\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [
            "Minimap2"
        ],
        "tools_url": [
            "https://bio.tools/minimap2"
        ],
        "tools_dico": [
            {
                "name": "Minimap2",
                "uri": "https://bio.tools/minimap2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise alignment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Pairwise aligner for genomic and spliced nucleotide sequences",
                "homepage": "https://github.com/lh3/minimap2"
            }
        ],
        "inputs": [
            "fasta"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "label 'process_medium'",
            "conda (params.enable_conda ? 'bioconda::minimap2=2.21' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/minimap2:2.21--h5bf99c6_0' : 'quay.io/biocontainers/minimap2:2.21--h5bf99c6_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "GUNC_RUN": {
        "name_process": "GUNC_RUN",
        "string_process": "process GUNC_RUN {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::gunc=1.0.5\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/gunc:1.0.5--pyhdfd78af_0' :\n        'quay.io/biocontainers/gunc:1.0.5--pyhdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(fasta)\n    path(db)\n\n    output:\n    tuple val(meta), path(\"*maxCSS_level.tsv\")                  , emit: maxcss_level_tsv\n    tuple val(meta), path(\"*all_levels.tsv\")    , optional: true, emit: all_levels_tsv\n    path \"versions.yml\"                                         , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    gunc \\\\\n        run \\\\\n        --input_fasta $fasta \\\\\n        --db_file $db \\\\\n        --threads $task.cpus \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gunc: \\$( gunc --version )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 36,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    gunc \\\\\n        run \\\\\n        --input_fasta $fasta \\\\\n        --db_file $db \\\\\n        --threads $task.cpus \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gunc: \\$( gunc --version )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "Faerun"
        ],
        "tools_url": [
            "https://bio.tools/Faerun"
        ],
        "tools_dico": [
            {
                "name": "Faerun",
                "uri": "https://bio.tools/Faerun",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0154",
                            "term": "Small molecules"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0218",
                            "term": "Natural language processing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3047",
                            "term": "Molecular biology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0218",
                            "term": "NLP"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "PubChem and ChEMBL Beyond Lipinski.",
                "homepage": "http://faerun.gdb.tools/"
            }
        ],
        "inputs": [
            "meta",
            "fasta",
            "db"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::gunc=1.0.5\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/gunc:1.0.5--pyhdfd78af_0' : 'quay.io/biocontainers/gunc:1.0.5--pyhdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "LOFREQ_FILTER": {
        "name_process": "LOFREQ_FILTER",
        "string_process": "process LOFREQ_FILTER {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::lofreq=2.1.5\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/lofreq:2.1.5--py38h588ecb2_4' :\n        'quay.io/biocontainers/lofreq:2.1.5--py38h588ecb2_4' }\"\n\n    input:\n    tuple val(meta), path(vcf)\n\n    output:\n    tuple val(meta), path(\"*.gz\"), emit: vcf\n    path \"versions.yml\"          , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    lofreq \\\\\n        filter \\\\\n        $args \\\\\n        -i $vcf \\\\\n        -o ${prefix}.vcf.gz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        lofreq: \\$(echo \\$(lofreq version 2>&1) | sed 's/^version: //; s/ *commit.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    lofreq \\\\\n        filter \\\\\n        $args \\\\\n        -i $vcf \\\\\n        -o ${prefix}.vcf.gz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        lofreq: \\$(echo \\$(lofreq version 2>&1) | sed 's/^version: //; s/ *commit.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [
            "Filter"
        ],
        "tools_url": [
            "https://bio.tools/filter"
        ],
        "tools_dico": [
            {
                "name": "Filter",
                "uri": "https://bio.tools/filter",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3187",
                                    "term": "Sequence contamination filtering"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Produce a filtered version of an sRNA dataset, controlled by several user-defined criteria, including sequence length, abundance, complexity, transfer and ribosomal RNA removal.",
                "homepage": "http://srna-workbench.cmp.uea.ac.uk/filter-2/"
            }
        ],
        "inputs": [
            "meta",
            "vcf"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::lofreq=2.1.5\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/lofreq:2.1.5--py38h588ecb2_4' : 'quay.io/biocontainers/lofreq:2.1.5--py38h588ecb2_4' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "BISMARK_GENOMEPREPARATION": {
        "name_process": "BISMARK_GENOMEPREPARATION",
        "string_process": "process BISMARK_GENOMEPREPARATION {\n    tag \"$fasta\"\n    label 'process_high'\n\n    conda (params.enable_conda ? \"bioconda::bismark=0.23.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bismark:0.23.0--0' :\n        'quay.io/biocontainers/bismark:0.23.0--0' }\"\n\n    input:\n    path fasta, stageAs: \"BismarkIndex/*\"\n\n    output:\n    path \"BismarkIndex\" , emit: index\n    path \"versions.yml\" , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    bismark_genome_preparation \\\\\n        $args \\\\\n        BismarkIndex\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bismark: \\$(echo \\$(bismark -v 2>&1) | sed 's/^.*Bismark Version: v//; s/Copyright.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    bismark_genome_preparation \\\\\n        $args \\\\\n        BismarkIndex\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bismark: \\$(echo \\$(bismark -v 2>&1) | sed 's/^.*Bismark Version: v//; s/Copyright.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fasta"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$fasta\"",
            "label 'process_high'",
            "conda (params.enable_conda ? \"bioconda::bismark=0.23.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bismark:0.23.0--0' : 'quay.io/biocontainers/bismark:0.23.0--0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "ULTRA_PIPELINE": {
        "name_process": "ULTRA_PIPELINE",
        "string_process": "process ULTRA_PIPELINE {\n    tag \"$meta.id\"\n    label 'process_high'\n\n    conda (params.enable_conda ? \"bioconda::ultra_bioinformatics=0.0.4.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/ultra_bioinformatics:0.0.4.1--pyh5e36f6f_0' :\n        'quay.io/biocontainers/ultra_bioinformatics:0.0.4.1--pyh5e36f6f_0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n    path genome\n    path gtf\n\n    output:\n    tuple val(meta), path(\"*.sam\"), emit: sam\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    uLTRA \\\\\n        pipeline \\\\\n        --t $task.cpus \\\\\n        --prefix $prefix \\\\\n        $args \\\\\n        $genome \\\\\n        $gtf \\\\\n        $reads \\\\\n        ./\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        ultra: \\$( uLTRA --version|sed 's/uLTRA //g' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 39,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    uLTRA \\\\\n        pipeline \\\\\n        --t $task.cpus \\\\\n        --prefix $prefix \\\\\n        $args \\\\\n        $genome \\\\\n        $gtf \\\\\n        $reads \\\\\n        ./\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        ultra: \\$( uLTRA --version|sed 's/uLTRA //g' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 17,
        "language_script": "bash",
        "tools": [
            "ULTRA",
            "pipeline"
        ],
        "tools_url": [
            "https://bio.tools/ULTRA",
            "https://bio.tools/pipeline"
        ],
        "tools_dico": [
            {
                "name": "ULTRA",
                "uri": "https://bio.tools/ULTRA",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0749",
                            "term": "Transcription factors and regulatory sites"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0157",
                            "term": "Sequence composition, complexity and repeats"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0452",
                                    "term": "Indel detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0368",
                                    "term": "Sequence masking"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0452",
                                    "term": "Indel discovery"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0452",
                                    "term": "Sequence alignment analysis (indel detection)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "> MEDIUM CONFIDENCE! | A Model Based Tool to Detect Tandem Repeats | ULTRA Locates Tandemly Repetitive Areas | To contribute to ULTRA development, you want to be on the develop branch, which is where we are currently integrating feature branches. For more information, see the ULTRA wiki",
                "homepage": "https://github.com/TravisWheelerLab/ULTRA"
            },
            {
                "name": "pipeline",
                "uri": "https://bio.tools/pipeline",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0602",
                            "term": "Molecular interactions, pathways and networks"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3223",
                                    "term": "Differential gene expression profiling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3680",
                                    "term": "RNA-Seq analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3454",
                                    "term": "Phasing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3223",
                                    "term": "Differential gene analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3223",
                                    "term": "Differentially expressed gene identification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3223",
                                    "term": "Differential expression analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3223",
                                    "term": "Differential gene expression analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantitation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A comprehensive RNA-Seq pipeline includes meta-analysis, interactivity and automatic reporting.\n\nThere are many methods available for each phase of the RNA-Seq analysis and each of them uses different algorithms. It is therefore useful to identify a pipeline that combines the best tools in terms of time and results. For this purpose, we compared five different pipelines, obtained by combining the most used tools in RNA-Seq analysis. Using RNA-Seq data on samples of different Acute Myeloid Leukemia (AML) cell lines, we compared five pipelines from the alignment to the differential expression analysis (DEA). For each one we evaluated the peak of RAM and time and then compared the differentially expressed genes identified by each pipeline.\n\n||| HOMEPAGE MISSING!.\n\n||| CORRECT NAME OF TOOL COULD ALSO BE 'recurs', 'meta-analysis', 'DEA', 'HISAT2' (bio.tools/hisat2)",
                "homepage": "https://doi.org/10.7287/PEERJ.PREPRINTS.27317V2"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "genome",
            "gtf"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "conda (params.enable_conda ? \"bioconda::ultra_bioinformatics=0.0.4.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/ultra_bioinformatics:0.0.4.1--pyh5e36f6f_0' : 'quay.io/biocontainers/ultra_bioinformatics:0.0.4.1--pyh5e36f6f_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "PRODIGAL": {
        "name_process": "PRODIGAL",
        "string_process": "process PRODIGAL {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"prodigal=2.6.3 pigz=2.6\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mulled-v2-2e442ba7b07bfa102b9cf8fac6221263cd746ab8:57f05cfa73f769d6ed6d54144cb3aa2a6a6b17e0-0' :\n        'quay.io/biocontainers/mulled-v2-2e442ba7b07bfa102b9cf8fac6221263cd746ab8:57f05cfa73f769d6ed6d54144cb3aa2a6a6b17e0-0' }\"\n\n    input:\n    tuple val(meta), path(genome)\n    val(output_format)\n\n    output:\n    tuple val(meta), path(\"${prefix}.${output_format}\"),    emit: gene_annotations\n    tuple val(meta), path(\"${prefix}.fna\"),                 emit: nucleotide_fasta\n    tuple val(meta), path(\"${prefix}.faa\"),                 emit: amino_acid_fasta\n    tuple val(meta), path(\"${prefix}_all.txt\"),             emit: all_gene_annotations\n    path \"versions.yml\",                                    emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args   ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    pigz -cdf ${genome} | prodigal \\\\\n        $args \\\\\n        -f $output_format \\\\\n        -d \"${prefix}.fna\" \\\\\n        -o \"${prefix}.${output_format}\" \\\\\n        -a \"${prefix}.faa\" \\\\\n        -s \"${prefix}_all.txt\"\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        prodigal: \\$(prodigal -v 2>&1 | sed -n 's/Prodigal V\\\\(.*\\\\):.*/\\\\1/p')\n        pigz: \\$(pigz -V 2>&1 | sed 's/pigz //g')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 40,
        "string_script": "    def args = task.ext.args   ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    pigz -cdf ${genome} | prodigal \\\\\n        $args \\\\\n        -f $output_format \\\\\n        -d \"${prefix}.fna\" \\\\\n        -o \"${prefix}.${output_format}\" \\\\\n        -a \"${prefix}.faa\" \\\\\n        -s \"${prefix}_all.txt\"\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        prodigal: \\$(prodigal -v 2>&1 | sed -n 's/Prodigal V\\\\(.*\\\\):.*/\\\\1/p')\n        pigz: \\$(pigz -V 2>&1 | sed 's/pigz //g')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "genome",
            "output_format"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"prodigal=2.6.3 pigz=2.6\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mulled-v2-2e442ba7b07bfa102b9cf8fac6221263cd746ab8:57f05cfa73f769d6ed6d54144cb3aa2a6a6b17e0-0' : 'quay.io/biocontainers/mulled-v2-2e442ba7b07bfa102b9cf8fac6221263cd746ab8:57f05cfa73f769d6ed6d54144cb3aa2a6a6b17e0-0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "HMMCOPY_GCCOUNTER": {
        "name_process": "HMMCOPY_GCCOUNTER",
        "string_process": "\nprocess HMMCOPY_GCCOUNTER {\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::hmmcopy=0.1.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/hmmcopy:0.1.1--h2e03b76_7' :\n        'quay.io/biocontainers/hmmcopy:0.1.1--h2e03b76_7' }\"\n\n    input:\n    path fasta\n\n    output:\n    path \"*.gc.wig\"    , emit: wig\n    path \"versions.yml\", emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    gcCounter \\\\\n        $args \\\\\n        ${fasta} > ${fasta.baseName}.gc.wig\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        hmmcopy: $VERSION\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    gcCounter \\\\\n        $args \\\\\n        ${fasta} > ${fasta.baseName}.gc.wig\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        hmmcopy: $VERSION\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fasta"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::hmmcopy=0.1.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/hmmcopy:0.1.1--h2e03b76_7' : 'quay.io/biocontainers/hmmcopy:0.1.1--h2e03b76_7' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "ISOSEQ3_REFINE": {
        "name_process": "ISOSEQ3_REFINE",
        "string_process": "process ISOSEQ3_REFINE {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::isoseq3=3.4.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/isoseq3:3.4.0--0' :\n        'quay.io/biocontainers/isoseq3:3.4.0--0' }\"\n\n    input:\n    tuple val(meta), path(bam)\n    path primers\n\n    output:\n    tuple val(meta), path(\"*.bam\")                 , emit: bam\n    tuple val(meta), path(\"*.bam.pbi\")             , emit: pbi\n    tuple val(meta), path(\"*.consensusreadset.xml\"), emit: consensusreadset\n    tuple val(meta), path(\"*.filter_summary.json\") , emit: summary\n    tuple val(meta), path(\"*.report.csv\")          , emit: report\n    path  \"versions.yml\"                           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    isoseq3 \\\\\n        refine \\\\\n        -j $task.cpus \\\\\n        $args \\\\\n        $bam \\\\\n        $primers \\\\\n        ${prefix}.bam\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        isoseq3: \\$( isoseq3 refine --version|sed 's/isoseq refine //'|sed 's/ (commit.\\\\+//' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 40,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    isoseq3 \\\\\n        refine \\\\\n        -j $task.cpus \\\\\n        $args \\\\\n        $bam \\\\\n        $primers \\\\\n        ${prefix}.bam\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        isoseq3: \\$( isoseq3 refine --version|sed 's/isoseq refine //'|sed 's/ (commit.\\\\+//' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [
            "i3Drefine"
        ],
        "tools_url": [
            "https://bio.tools/i3drefine"
        ],
        "tools_dico": [
            {
                "name": "i3Drefine",
                "uri": "https://bio.tools/i3drefine",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Proteins"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3318",
                            "term": "Physics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2275",
                            "term": "Molecular modelling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2814",
                            "term": "Protein structure analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein informatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2814",
                            "term": "Protein structure"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0322",
                                    "term": "Molecular model refinement"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Completely automated and computationally efficient protein 3D structure refinement method which based on an iterative and highly convergent energy minimization algorithm with a powerful all-atom composite physics and knowledge-based force fields and hydrogen bonding (HB) network optimization technique.",
                "homepage": "http://sysbio.rnet.missouri.edu/multicom_toolbox/tools.html"
            }
        ],
        "inputs": [
            "meta",
            "bam",
            "primers"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::isoseq3=3.4.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/isoseq3:3.4.0--0' : 'quay.io/biocontainers/isoseq3:3.4.0--0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "TRANSDECODER_PREDICT": {
        "name_process": "TRANSDECODER_PREDICT",
        "string_process": "process TRANSDECODER_PREDICT {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::transdecoder=5.5.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/transdecoder:5.5.0--pl5262hdfd78af_4':\n        'quay.io/comp-bio-aging/transdecoder' }\"\n\n    input:\n    tuple val(meta), path(fasta)\n    path(fold)\n\n    output:\n    tuple val(meta), path(\"*.transdecoder.pep\")  , emit: pep\n    tuple val(meta), path(\"*.transdecoder.gff3\") , emit: gff3\n    tuple val(meta), path(\"*.transdecoder.cds\")  , emit: cds\n    tuple val(meta), path(\"*.transdecoder.bed\")  , emit: bed\n    path \"versions.yml\"                          , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n    \"\"\"\n    TransDecoder.Predict \\\\\n        $args \\\\\n        -O ${prefix} \\\\\n        -t \\\\\n        $fasta\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        transdecoder: \\$(echo \\$(TransDecoder.Predict --version) | sed -e \"s/TransDecoder.Predict //g\")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 38,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n    \"\"\"\n    TransDecoder.Predict \\\\\n        $args \\\\\n        -O ${prefix} \\\\\n        -t \\\\\n        $fasta\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        transdecoder: \\$(echo \\$(TransDecoder.Predict --version) | sed -e \"s/TransDecoder.Predict //g\")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "fasta",
            "fold"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::transdecoder=5.5.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/transdecoder:5.5.0--pl5262hdfd78af_4': 'quay.io/comp-bio-aging/transdecoder' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "COOLER_DIGEST": {
        "name_process": "COOLER_DIGEST",
        "string_process": "process COOLER_DIGEST {\n    tag \"$fasta\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::cooler=0.8.11\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/cooler:0.8.11--pyh3252c3a_0' :\n        'quay.io/biocontainers/cooler:0.8.11--pyh3252c3a_0' }\"\n\n    input:\n    path fasta\n    path chromsizes\n    val  enzyme\n\n    output:\n    path \"*.bed\"                  , emit: bed\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    cooler digest \\\\\n        $args \\\\\n        -o \"${fasta.baseName}_${enzyme.replaceAll(/[^0-9a-zA-Z]+/, '_')}.bed\" \\\\\n        $chromsizes \\\\\n        $fasta \\\\\n        $enzyme\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        cooler: \\$(cooler --version 2>&1 | sed 's/cooler, version //')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    cooler digest \\\\\n        $args \\\\\n        -o \"${fasta.baseName}_${enzyme.replaceAll(/[^0-9a-zA-Z]+/, '_')}.bed\" \\\\\n        $chromsizes \\\\\n        $fasta \\\\\n        $enzyme\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        cooler: \\$(cooler --version 2>&1 | sed 's/cooler, version //')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fasta",
            "chromsizes",
            "enzyme"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$fasta\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::cooler=0.8.11\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/cooler:0.8.11--pyh3252c3a_0' : 'quay.io/biocontainers/cooler:0.8.11--pyh3252c3a_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "BWAMETH_INDEX": {
        "name_process": "BWAMETH_INDEX",
        "string_process": "process BWAMETH_INDEX {\n    tag \"$fasta\"\n    label 'process_high'\n\n    conda (params.enable_conda ? \"bioconda::bwameth=0.2.2\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bwameth:0.2.2--py_1' :\n        'quay.io/biocontainers/bwameth:0.2.2--py_1' }\"\n\n    input:\n    path fasta, stageAs: \"bwameth/*\"\n\n    output:\n    path \"bwameth\"      , emit: index\n    path \"versions.yml\" , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    bwameth.py index $fasta\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bwameth: \\$(echo \\$(bwameth.py --version 2>&1) | cut -f2 -d\" \")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    bwameth.py index $fasta\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bwameth: \\$(echo \\$(bwameth.py --version 2>&1) | cut -f2 -d\" \")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fasta"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$fasta\"",
            "label 'process_high'",
            "conda (params.enable_conda ? \"bioconda::bwameth=0.2.2\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bwameth:0.2.2--py_1' : 'quay.io/biocontainers/bwameth:0.2.2--py_1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "BANDAGE_IMAGE": {
        "name_process": "BANDAGE_IMAGE",
        "string_process": "process BANDAGE_IMAGE {\n    tag \"${meta.id}\"\n    label 'process_low'\n\n    conda (params.enable_conda ? 'bioconda::bandage=0.8.1' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bandage:0.8.1--hc9558a2_2' :\n        'quay.io/biocontainers/bandage:0.8.1--hc9558a2_2' }\"\n\n    input:\n    tuple val(meta), path(gfa)\n\n    output:\n    tuple val(meta), path('*.png'), emit: png\n    tuple val(meta), path('*.svg'), emit: svg\n    path  \"versions.yml\"          , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    Bandage image $gfa ${prefix}.png $args\n    Bandage image $gfa ${prefix}.svg $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bandage: \\$(echo \\$(Bandage --version 2>&1) | sed 's/^.*Version: //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    Bandage image $gfa ${prefix}.png $args\n    Bandage image $gfa ${prefix}.svg $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bandage: \\$(echo \\$(Bandage --version 2>&1) | sed 's/^.*Version: //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [
            "Bandage"
        ],
        "tools_url": [
            "https://bio.tools/bandage"
        ],
        "tools_dico": [
            {
                "name": "Bandage",
                "uri": "https://bio.tools/bandage",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3184",
                                    "term": "Sequence assembly visualisation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3184",
                                    "term": "Sequence assembly rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3184",
                                    "term": "Assembly visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3184",
                                    "term": "Assembly rendering"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0925",
                                "term": "Sequence assembly"
                            }
                        ],
                        "output": []
                    }
                ],
                "description": "GUI program that allows users to interact with the assembly graphs made by de novo assemblers such as Velvet, SPAdes, MEGAHIT and others. It visualises assembly graphs, with connections, using graph layout algorithms.",
                "homepage": "https://rrwick.github.io/Bandage/"
            }
        ],
        "inputs": [
            "meta",
            "gfa"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"${meta.id}\"",
            "label 'process_low'",
            "conda (params.enable_conda ? 'bioconda::bandage=0.8.1' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bandage:0.8.1--hc9558a2_2' : 'quay.io/biocontainers/bandage:0.8.1--hc9558a2_2' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "HISAT2_BUILD": {
        "name_process": "HISAT2_BUILD",
        "string_process": "\nprocess HISAT2_BUILD {\n    tag \"$fasta\"\n    label 'process_high'\n    label 'process_high_memory'\n\n    conda (params.enable_conda ? 'bioconda::hisat2=2.2.1' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/hisat2:2.2.1--h1b792b2_3' :\n        'quay.io/biocontainers/hisat2:2.2.1--h1b792b2_3' }\"\n\n    input:\n    path fasta\n    path gtf\n    path splicesites\n\n    output:\n    path \"hisat2\"       , emit: index\n    path \"versions.yml\" , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def avail_mem = 0\n    if (!task.memory) {\n        log.info \"[HISAT2 index build] Available memory not known - defaulting to 0. Specify process memory requirements to change this.\"\n    } else {\n        log.info \"[HISAT2 index build] Available memory: ${task.memory}\"\n        avail_mem = task.memory.toGiga()\n    }\n\n    def ss = ''\n    def exon = ''\n    def extract_exons = ''\n    def hisat2_build_memory = params.hisat2_build_memory ? (params.hisat2_build_memory as nextflow.util.MemoryUnit).toGiga() : 0\n    if (avail_mem >= hisat2_build_memory) {\n        log.info \"[HISAT2 index build] At least ${hisat2_build_memory} GB available, so using splice sites and exons to build HISAT2 index\"\n        extract_exons = \"hisat2_extract_exons.py $gtf > ${gtf.baseName}.exons.txt\"\n        ss = \"--ss $splicesites\"\n        exon = \"--exon ${gtf.baseName}.exons.txt\"\n    } else {\n        log.info \"[HISAT2 index build] Less than ${hisat2_build_memory} GB available, so NOT using splice sites and exons to build HISAT2 index.\"\n        log.info \"[HISAT2 index build] Use --hisat2_build_memory [small number] to skip this check.\"\n    }\n    \"\"\"\n    mkdir hisat2\n    $extract_exons\n    hisat2-build \\\\\n        -p $task.cpus \\\\\n        $ss \\\\\n        $exon \\\\\n        $args \\\\\n        $fasta \\\\\n        hisat2/${fasta.baseName}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        hisat2: $VERSION\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 61,
        "string_script": "    def args = task.ext.args ?: ''\n    def avail_mem = 0\n    if (!task.memory) {\n        log.info \"[HISAT2 index build] Available memory not known - defaulting to 0. Specify process memory requirements to change this.\"\n    } else {\n        log.info \"[HISAT2 index build] Available memory: ${task.memory}\"\n        avail_mem = task.memory.toGiga()\n    }\n\n    def ss = ''\n    def exon = ''\n    def extract_exons = ''\n    def hisat2_build_memory = params.hisat2_build_memory ? (params.hisat2_build_memory as nextflow.util.MemoryUnit).toGiga() : 0\n    if (avail_mem >= hisat2_build_memory) {\n        log.info \"[HISAT2 index build] At least ${hisat2_build_memory} GB available, so using splice sites and exons to build HISAT2 index\"\n        extract_exons = \"hisat2_extract_exons.py $gtf > ${gtf.baseName}.exons.txt\"\n        ss = \"--ss $splicesites\"\n        exon = \"--exon ${gtf.baseName}.exons.txt\"\n    } else {\n        log.info \"[HISAT2 index build] Less than ${hisat2_build_memory} GB available, so NOT using splice sites and exons to build HISAT2 index.\"\n        log.info \"[HISAT2 index build] Use --hisat2_build_memory [small number] to skip this check.\"\n    }\n    \"\"\"\n    mkdir hisat2\n    $extract_exons\n    hisat2-build \\\\\n        -p $task.cpus \\\\\n        $ss \\\\\n        $exon \\\\\n        $args \\\\\n        $fasta \\\\\n        hisat2/${fasta.baseName}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        hisat2: $VERSION\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 37,
        "language_script": "bash",
        "tools": [
            "SSA",
            "Assexon"
        ],
        "tools_url": [
            "https://bio.tools/ssa",
            "https://bio.tools/Assexon"
        ],
        "tools_dico": [
            {
                "name": "SSA",
                "uri": "https://bio.tools/ssa",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0160",
                            "term": "Sequence sites, features and motifs"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0238",
                                    "term": "Sequence motif discovery"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0240",
                                    "term": "Sequence motif comparison"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0238",
                                    "term": "Motif discovery"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "SSA (Signal Search Analysis) is a software package for the analysis of nucleic acid sequence motifs that are postionally correlated with a functional site (e.g a transcription or translation initiation site).",
                "homepage": "http://ccg.vital-it.ch/ssa/"
            },
            {
                "name": "Assexon",
                "uri": "https://bio.tools/Assexon",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "Gene transcripts"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0194",
                            "term": "Phylogenomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "mRNA features"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Sequence trimming"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De-novo assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3644",
                                    "term": "de Novo sequencing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Trimming"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De Bruijn graph"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "Sequence assembly (de-novo assembly)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Assembling Exon Using Gene Capture Data | Exon capture across species has been one of the most broadly applied approaches to acquire multi-locus data in phylogenomic studies of non-model organisms. Methods for assembling loci from short-read sequences (eg, Illumina platforms) that rely on mapping reads to a reference genome may not be suitable for studies comprising species across a wide phylogenetic spectrum; thus, de novo assembling methods are more generally applied. Current approaches for assembling targeted exons from short reads are not particularly optimized as they cannot (1) assemble loci with low read depth, (2) handle large files efficiently, and (3) reliably address issues with paralogs. Thus, we present Assexon: a streamlined pipeline that de novo assembles targeted exons and their flanking sequences from raw reads",
                "homepage": "https://github.com/yhadevol/Assexon"
            }
        ],
        "inputs": [
            "fasta",
            "gtf",
            "splicesites"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$fasta\"",
            "label 'process_high'",
            "label 'process_high_memory'",
            "conda (params.enable_conda ? 'bioconda::hisat2=2.2.1' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/hisat2:2.2.1--h1b792b2_3' : 'quay.io/biocontainers/hisat2:2.2.1--h1b792b2_3' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "MINIA": {
        "name_process": "MINIA",
        "string_process": "process MINIA {\n    tag \"$meta.id\"\n    label 'process_high'\n\n    conda (params.enable_conda ? \"bioconda::minia=3.2.6\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/minia:3.2.6--h9a82719_0' :\n        'quay.io/biocontainers/minia:3.2.6--h9a82719_0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path('*.contigs.fa'), emit: contigs\n    tuple val(meta), path('*.unitigs.fa'), emit: unitigs\n    tuple val(meta), path('*.h5')        , emit: h5\n    path  \"versions.yml\"                 , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def read_list = reads.join(\",\")\n    \"\"\"\n    echo \"${read_list}\" | sed 's/,/\\\\n/g' > input_files.txt\n    minia \\\\\n        $args \\\\\n        -nb-cores $task.cpus \\\\\n        -in input_files.txt \\\\\n        -out $prefix\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        minia: \\$(echo \\$(minia --version 2>&1 | grep Minia) | sed 's/^.*Minia version //;')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 37,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def read_list = reads.join(\",\")\n    \"\"\"\n    echo \"${read_list}\" | sed 's/,/\\\\n/g' > input_files.txt\n    minia \\\\\n        $args \\\\\n        -nb-cores $task.cpus \\\\\n        -in input_files.txt \\\\\n        -out $prefix\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        minia: \\$(echo \\$(minia --version 2>&1 | grep Minia) | sed 's/^.*Minia version //;')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [
            "Minia"
        ],
        "tools_url": [
            "https://bio.tools/minia"
        ],
        "tools_dico": [
            {
                "name": "Minia",
                "uri": "https://bio.tools/minia",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2975",
                                "term": "Nucleic acid sequence (raw)"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0925",
                                "term": "Sequence assembly"
                            }
                        ]
                    }
                ],
                "description": "Short-read assembler based on a de Bruijn graph, capable of assembling a human genome on a desktop computer in a day.",
                "homepage": "http://minia.genouest.org/"
            }
        ],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "conda (params.enable_conda ? \"bioconda::minia=3.2.6\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/minia:3.2.6--h9a82719_0' : 'quay.io/biocontainers/minia:3.2.6--h9a82719_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "MANTA_TUMORONLY": {
        "name_process": "MANTA_TUMORONLY",
        "string_process": "process MANTA_TUMORONLY {\n    tag \"$meta.id\"\n    label 'process_high'\n\n    conda (params.enable_conda ? \"bioconda::manta=1.6.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/manta:1.6.0--h9ee0642_1' :\n        'quay.io/biocontainers/manta:1.6.0--h9ee0642_1' }\"\n\n    input:\n    tuple val(meta), path(input), path(input_index), path(target_bed), path(target_bed_tbi)\n    path fasta\n    path fai\n\n    output:\n    tuple val(meta), path(\"*candidate_small_indels.vcf.gz\")    , emit: candidate_small_indels_vcf\n    tuple val(meta), path(\"*candidate_small_indels.vcf.gz.tbi\"), emit: candidate_small_indels_vcf_tbi\n    tuple val(meta), path(\"*candidate_sv.vcf.gz\")              , emit: candidate_sv_vcf\n    tuple val(meta), path(\"*candidate_sv.vcf.gz.tbi\")          , emit: candidate_sv_vcf_tbi\n    tuple val(meta), path(\"*tumor_sv.vcf.gz\")                  , emit: tumor_sv_vcf\n    tuple val(meta), path(\"*tumor_sv.vcf.gz.tbi\")              , emit: tumor_sv_vcf_tbi\n    path \"versions.yml\"                                        , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def options_manta = target_bed ? \"--exome --callRegions $target_bed\" : \"\"\n    \"\"\"\n    configManta.py \\\n        --tumorBam $input \\\n        --reference $fasta \\\n        $options_manta \\\n        --runDir manta\n\n    python manta/runWorkflow.py -m local -j $task.cpus\n\n    mv manta/results/variants/candidateSmallIndels.vcf.gz \\\n        ${prefix}.candidate_small_indels.vcf.gz\n    mv manta/results/variants/candidateSmallIndels.vcf.gz.tbi \\\n        ${prefix}.candidate_small_indels.vcf.gz.tbi\n    mv manta/results/variants/candidateSV.vcf.gz \\\n        ${prefix}.candidate_sv.vcf.gz\n    mv manta/results/variants/candidateSV.vcf.gz.tbi \\\n        ${prefix}.candidate_sv.vcf.gz.tbi\n    mv manta/results/variants/tumorSV.vcf.gz \\\n        ${prefix}.tumor_sv.vcf.gz\n    mv manta/results/variants/tumorSV.vcf.gz.tbi \\\n        ${prefix}.tumor_sv.vcf.gz.tbi\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        manta: \\$( configManta.py --version )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 56,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def options_manta = target_bed ? \"--exome --callRegions $target_bed\" : \"\"\n    \"\"\"\n    configManta.py \\\n        --tumorBam $input \\\n        --reference $fasta \\\n        $options_manta \\\n        --runDir manta\n\n    python manta/runWorkflow.py -m local -j $task.cpus\n\n    mv manta/results/variants/candidateSmallIndels.vcf.gz \\\n        ${prefix}.candidate_small_indels.vcf.gz\n    mv manta/results/variants/candidateSmallIndels.vcf.gz.tbi \\\n        ${prefix}.candidate_small_indels.vcf.gz.tbi\n    mv manta/results/variants/candidateSV.vcf.gz \\\n        ${prefix}.candidate_sv.vcf.gz\n    mv manta/results/variants/candidateSV.vcf.gz.tbi \\\n        ${prefix}.candidate_sv.vcf.gz.tbi\n    mv manta/results/variants/tumorSV.vcf.gz \\\n        ${prefix}.tumor_sv.vcf.gz\n    mv manta/results/variants/tumorSV.vcf.gz.tbi \\\n        ${prefix}.tumor_sv.vcf.gz.tbi\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        manta: \\$( configManta.py --version )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 29,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "input",
            "input_index",
            "target_bed",
            "target_bed_tbi",
            "fasta",
            "fai"
        ],
        "nb_inputs": 7,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "conda (params.enable_conda ? \"bioconda::manta=1.6.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/manta:1.6.0--h9ee0642_1' : 'quay.io/biocontainers/manta:1.6.0--h9ee0642_1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "MOBSUITE_RECON": {
        "name_process": "MOBSUITE_RECON",
        "string_process": "process MOBSUITE_RECON {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::mob_suite=3.0.3\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mob_suite%3A3.0.3--pyhdfd78af_0':\n        'quay.io/biocontainers/mob_suite:3.0.3--pyhdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(fasta)\n\n    output:\n    tuple val(meta), path(\"results/chromosome.fasta\")    , emit: chromosome\n    tuple val(meta), path(\"results/contig_report.txt\")   , emit: contig_report\n    tuple val(meta), path(\"results/plasmid_*.fasta\")     , emit: plasmids        , optional: true\n    tuple val(meta), path(\"results/mobtyper_results.txt\"), emit: mobtyper_results, optional: true\n    path \"versions.yml\"                                  , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def is_compressed = fasta.getName().endsWith(\".gz\") ? true : false\n    def fasta_name = fasta.getName().replace(\".gz\", \"\")\n    \"\"\"\n    if [ \"$is_compressed\" == \"true\" ]; then\n        gzip -c -d $fasta > $fasta_name\n    fi\n\n    mob_recon \\\\\n        --infile $fasta_name \\\\\n        $args \\\\\n        --num_threads $task.cpus \\\\\n        --outdir results \\\\\n        --sample_id $prefix\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        mobsuite: \\$(echo \\$(mob_recon --version 2>&1) | sed 's/^.*mob_recon //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 43,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def is_compressed = fasta.getName().endsWith(\".gz\") ? true : false\n    def fasta_name = fasta.getName().replace(\".gz\", \"\")\n    \"\"\"\n    if [ \"$is_compressed\" == \"true\" ]; then\n        gzip -c -d $fasta > $fasta_name\n    fi\n\n    mob_recon \\\\\n        --infile $fasta_name \\\\\n        $args \\\\\n        --num_threads $task.cpus \\\\\n        --outdir results \\\\\n        --sample_id $prefix\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        mobsuite: \\$(echo \\$(mob_recon --version 2>&1) | sed 's/^.*mob_recon //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 20,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "fasta"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::mob_suite=3.0.3\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mob_suite%3A3.0.3--pyhdfd78af_0': 'quay.io/biocontainers/mob_suite:3.0.3--pyhdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "GATK4_APPLYVQSR": {
        "name_process": "GATK4_APPLYVQSR",
        "string_process": "process GATK4_APPLYVQSR {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::gatk4=4.2.6.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/gatk4:4.2.6.1--hdfd78af_0':\n        'quay.io/biocontainers/gatk4:4.2.6.1--hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(vcf), path(vcf_tbi), path(recal), path(recal_index), path(tranches)\n    path  fasta\n    path  fai\n    path  dict\n\n    output:\n    tuple val(meta), path(\"*.vcf.gz\"), emit: vcf\n    tuple val(meta), path(\"*.tbi\")   , emit: tbi\n    path \"versions.yml\"              , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def reference_command = fasta ? \"--reference $fasta\" : ''\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[GATK ApplyVQSR] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    gatk --java-options \"-Xmx${avail_mem}g\" ApplyVQSR \\\\\n        --variant ${vcf} \\\\\n        --output ${prefix}.vcf.gz \\\\\n        $reference_command \\\\\n        --tranches-file $tranches \\\\\n        --recal-file $recal \\\\\n        --tmp-dir . \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 48,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def reference_command = fasta ? \"--reference $fasta\" : ''\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[GATK ApplyVQSR] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    gatk --java-options \"-Xmx${avail_mem}g\" ApplyVQSR \\\\\n        --variant ${vcf} \\\\\n        --output ${prefix}.vcf.gz \\\\\n        $reference_command \\\\\n        --tranches-file $tranches \\\\\n        --recal-file $recal \\\\\n        --tmp-dir . \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 24,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "meta",
            "vcf",
            "vcf_tbi",
            "recal",
            "recal_index",
            "tranches",
            "fasta",
            "fai",
            "dict"
        ],
        "nb_inputs": 9,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::gatk4=4.2.6.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/gatk4:4.2.6.1--hdfd78af_0': 'quay.io/biocontainers/gatk4:4.2.6.1--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "TABIX_BGZIPTABIX": {
        "name_process": "TABIX_BGZIPTABIX",
        "string_process": "process TABIX_BGZIPTABIX {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? 'bioconda::tabix=1.11' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/tabix:1.11--hdfd78af_0' :\n        'quay.io/biocontainers/tabix:1.11--hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(input)\n\n    output:\n    tuple val(meta), path(\"*.gz\"), path(\"*.tbi\"), emit: gz_tbi\n    path  \"versions.yml\" ,                        emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    bgzip  --threads ${task.cpus} -c $args $input > ${prefix}.gz\n    tabix $args2 ${prefix}.gz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        tabix: \\$(echo \\$(tabix -h 2>&1) | sed 's/^.*Version: //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.gz\n    touch ${prefix}.gz.tbi\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        tabix: \\$(echo \\$(tabix -h 2>&1) | sed 's/^.*Version: //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 43,
        "string_script": "    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    bgzip  --threads ${task.cpus} -c $args $input > ${prefix}.gz\n    tabix $args2 ${prefix}.gz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        tabix: \\$(echo \\$(tabix -h 2>&1) | sed 's/^.*Version: //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "input"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? 'bioconda::tabix=1.11' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/tabix:1.11--hdfd78af_0' : 'quay.io/biocontainers/tabix:1.11--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.gz\n    touch ${prefix}.gz.tbi\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        tabix: \\$(echo \\$(tabix -h 2>&1) | sed 's/^.*Version: //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\""
    },
    "KLEBORATE": {
        "name_process": "KLEBORATE",
        "string_process": "process KLEBORATE {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::kleborate=2.1.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/kleborate:2.1.0--pyhdfd78af_1' :\n        'quay.io/biocontainers/kleborate:2.1.0--pyhdfd78af_1' }\"\n\n    input:\n    tuple val(meta), path(fastas)\n\n    output:\n    tuple val(meta), path(\"*.txt\"), emit: txt\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    kleborate \\\\\n        $args \\\\\n        --outfile ${prefix}.results.txt \\\\\n        --assemblies $fastas\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        kleborate: \\$( echo \\$(kleborate --version | sed 's/Kleborate v//;'))\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    kleborate \\\\\n        $args \\\\\n        --outfile ${prefix}.results.txt \\\\\n        --assemblies $fastas\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        kleborate: \\$( echo \\$(kleborate --version | sed 's/Kleborate v//;'))\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "fastas"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::kleborate=2.1.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/kleborate:2.1.0--pyhdfd78af_1' : 'quay.io/biocontainers/kleborate:2.1.0--pyhdfd78af_1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "GFFREAD": {
        "name_process": "GFFREAD",
        "string_process": "process GFFREAD {\n    tag \"$gff\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::gffread=0.12.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/gffread:0.12.1--h8b12597_0' :\n        'quay.io/biocontainers/gffread:0.12.1--h8b12597_0' }\"\n\n    input:\n    path gff\n\n    output:\n    path \"*.gtf\"        , emit: gtf\n    path \"versions.yml\" , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args   = task.ext.args   ?: ''\n    def prefix = task.ext.prefix ?: \"${gff.baseName}\"\n    \"\"\"\n    gffread \\\\\n        $gff \\\\\n        $args \\\\\n        -o ${prefix}.gtf\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gffread: \\$(gffread --version 2>&1)\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "    def args   = task.ext.args   ?: ''\n    def prefix = task.ext.prefix ?: \"${gff.baseName}\"\n    \"\"\"\n    gffread \\\\\n        $gff \\\\\n        $args \\\\\n        -o ${prefix}.gtf\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gffread: \\$(gffread --version 2>&1)\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "gffread"
        ],
        "tools_url": [
            "https://bio.tools/gffread"
        ],
        "tools_dico": [
            {
                "name": "gffread",
                "uri": "https://bio.tools/gffread",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acids"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acid bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acid informatics"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0361",
                                    "term": "Sequence annotation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "program for filtering, converting and manipulating GFF files",
                "homepage": "https://ccb.jhu.edu/software/stringtie/gff.shtml"
            }
        ],
        "inputs": [
            "gff"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$gff\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::gffread=0.12.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/gffread:0.12.1--h8b12597_0' : 'quay.io/biocontainers/gffread:0.12.1--h8b12597_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "MACS2_CALLPEAK": {
        "name_process": "MACS2_CALLPEAK",
        "string_process": "process MACS2_CALLPEAK {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::macs2=2.2.7.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/macs2:2.2.7.1--py38h4a8c8d9_3' :\n        'quay.io/biocontainers/macs2:2.2.7.1--py38h4a8c8d9_3' }\"\n\n    input:\n    tuple val(meta), path(ipbam), path(controlbam)\n    val   macs2_gsize\n\n    output:\n    tuple val(meta), path(\"*.{narrowPeak,broadPeak}\"), emit: peak\n    tuple val(meta), path(\"*.xls\")                   , emit: xls\n    path  \"versions.yml\"                             , emit: versions\n\n    tuple val(meta), path(\"*.gappedPeak\"), optional:true, emit: gapped\n    tuple val(meta), path(\"*.bed\")       , optional:true, emit: bed\n    tuple val(meta), path(\"*.bdg\")       , optional:true, emit: bdg\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def args_list = args.tokenize()\n    def format    = meta.single_end ? 'BAM' : 'BAMPE'\n    def control   = controlbam ? \"--control $controlbam\" : ''\n    if(args_list.contains('--format')){\n        def id = args_list.findIndexOf{it=='--format'}\n        format = args_list[id+1]\n        args_list.remove(id+1)\n        args_list.remove(id)\n    }\n    \"\"\"\n    macs2 \\\\\n        callpeak \\\\\n        ${args_list.join(' ')} \\\\\n        --gsize $macs2_gsize \\\\\n        --format $format \\\\\n        --name $prefix \\\\\n        --treatment $ipbam \\\\\n        $control\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        macs2: \\$(macs2 --version | sed -e \"s/macs2 //g\")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 51,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def args_list = args.tokenize()\n    def format    = meta.single_end ? 'BAM' : 'BAMPE'\n    def control   = controlbam ? \"--control $controlbam\" : ''\n    if(args_list.contains('--format')){\n        def id = args_list.findIndexOf{it=='--format'}\n        format = args_list[id+1]\n        args_list.remove(id+1)\n        args_list.remove(id)\n    }\n    \"\"\"\n    macs2 \\\\\n        callpeak \\\\\n        ${args_list.join(' ')} \\\\\n        --gsize $macs2_gsize \\\\\n        --format $format \\\\\n        --name $prefix \\\\\n        --treatment $ipbam \\\\\n        $control\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        macs2: \\$(macs2 --version | sed -e \"s/macs2 //g\")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 25,
        "language_script": "bash",
        "tools": [
            "DEFormats"
        ],
        "tools_url": [
            "https://bio.tools/deformats"
        ],
        "tools_dico": [
            {
                "name": "DEFormats",
                "uri": "https://bio.tools/deformats",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Covert between different data formats used by differential gene expression analysis tools.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/DEFormats.html"
            }
        ],
        "inputs": [
            "meta",
            "ipbam",
            "controlbam",
            "macs2_gsize"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::macs2=2.2.7.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/macs2:2.2.7.1--py38h4a8c8d9_3' : 'quay.io/biocontainers/macs2:2.2.7.1--py38h4a8c8d9_3' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "CELLRANGER_COUNT": {
        "name_process": "CELLRANGER_COUNT",
        "string_process": "process CELLRANGER_COUNT {\n    tag \"$meta.gem\"\n    label 'process_high'\n\n    if (params.enable_conda) {\n        exit 1, \"Conda environments cannot be used when using the Cell Ranger tool. Please use docker or singularity containers.\"\n    }\n    container \"nfcore/cellranger:6.1.2\"\n\n    input:\n    tuple val(meta), path(reads)\n    path  reference\n\n    output:\n    path(\"sample-${meta.gem}/outs/*\"), emit: outs\n    path \"versions.yml\"              , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def sample_arg = meta.samples.unique().join(\",\")\n    def reference_name = reference.name\n    \"\"\"\n    cellranger \\\\\n        count \\\\\n        --id='sample-${meta.gem}' \\\\\n        --fastqs=. \\\\\n        --transcriptome=$reference_name \\\\\n        --sample=$sample_arg \\\\\n        --localcores=$task.cpus \\\\\n        --localmem=${task.memory.toGiga()} \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        cellranger: \\$(echo \\$( cellranger --version 2>&1) | sed 's/^.*[^0-9]\\\\([0-9]*\\\\.[0-9]*\\\\.[0-9]*\\\\).*\\$/\\\\1/' )\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    \"\"\"\n    mkdir -p \"sample-${meta.gem}/outs/\"\n    touch sample-${meta.gem}/outs/fake_file.txt\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        cellranger: \\$(echo \\$( cellranger --version 2>&1) | sed 's/^.*[^0-9]\\\\([0-9]*\\\\.[0-9]*\\\\.[0-9]*\\\\).*\\$/\\\\1/' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 50,
        "string_script": "    def args = task.ext.args ?: ''\n    def sample_arg = meta.samples.unique().join(\",\")\n    def reference_name = reference.name\n    \"\"\"\n    cellranger \\\\\n        count \\\\\n        --id='sample-${meta.gem}' \\\\\n        --fastqs=. \\\\\n        --transcriptome=$reference_name \\\\\n        --sample=$sample_arg \\\\\n        --localcores=$task.cpus \\\\\n        --localmem=${task.memory.toGiga()} \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        cellranger: \\$(echo \\$( cellranger --version 2>&1) | sed 's/^.*[^0-9]\\\\([0-9]*\\\\.[0-9]*\\\\.[0-9]*\\\\).*\\$/\\\\1/' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [
            "Count"
        ],
        "tools_url": [
            "https://bio.tools/count"
        ],
        "tools_dico": [
            {
                "name": "Count",
                "uri": "https://bio.tools/count",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3299",
                            "term": "Evolutionary biology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3299",
                            "term": "Evolution"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Count is a software package for the evolutionary analysis of homolog family sizes (phylogenetic profiles), or other numerical census-type characters along a phylogeny.",
                "homepage": "http://www.iro.umontreal.ca/~csuros/gene_content/count.html"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "reference"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.gem\"",
            "label 'process_high' if (params.enable_conda) { exit 1, \"Conda environments cannot be used when using the Cell Ranger tool. Please use docker or singularity containers.\" }",
            "container \"nfcore/cellranger:6.1.2\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    \"\"\"\n    mkdir -p \"sample-${meta.gem}/outs/\"\n    touch sample-${meta.gem}/outs/fake_file.txt\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        cellranger: \\$(echo \\$( cellranger --version 2>&1) | sed 's/^.*[^0-9]\\\\([0-9]*\\\\.[0-9]*\\\\.[0-9]*\\\\).*\\$/\\\\1/' )\n    END_VERSIONS\n    \"\"\""
    },
    "PICARD_FIXMATEINFORMATION": {
        "name_process": "PICARD_FIXMATEINFORMATION",
        "string_process": "process PICARD_FIXMATEINFORMATION {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::picard=2.27.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/picard:2.27.1--hdfd78af_0' :\n        'quay.io/biocontainers/picard:2.27.1--hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(bam)\n\n    output:\n    tuple val(meta), path(\"*.bam\"), emit: bam\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def STRINGENCY = task.ext.stringency ?: \"STRICT\"\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[Picard FixMateInformation] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    picard \\\\\n        FixMateInformation \\\\\n        -Xmx${avail_mem}g \\\\\n        --INPUT ${bam} \\\\\n        --OUTPUT ${prefix}.bam \\\\\n        --VALIDATION_STRINGENCY ${STRINGENCY}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        picard: \\$(picard FixMateInformation --version 2>&1 | grep -o 'Version:.*' | cut -f2- -d:)\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 41,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def STRINGENCY = task.ext.stringency ?: \"STRICT\"\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[Picard FixMateInformation] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    picard \\\\\n        FixMateInformation \\\\\n        -Xmx${avail_mem}g \\\\\n        --INPUT ${bam} \\\\\n        --OUTPUT ${prefix}.bam \\\\\n        --VALIDATION_STRINGENCY ${STRINGENCY}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        picard: \\$(picard FixMateInformation --version 2>&1 | grep -o 'Version:.*' | cut -f2- -d:)\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 21,
        "language_script": "bash",
        "tools": [
            "Picard"
        ],
        "tools_url": [
            "https://bio.tools/picard_tools"
        ],
        "tools_dico": [
            {
                "name": "Picard",
                "uri": "https://bio.tools/picard_tools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Sequence variation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Variant analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation annotation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A set of command line tools for manipulating high-throughput sequencing (HTS) data in formats such as SAM/BAM/CRAM and VCF. Available as a standalone program or within the GATK4 program.",
                "homepage": "https://github.com/broadinstitute/picard"
            }
        ],
        "inputs": [
            "meta",
            "bam"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::picard=2.27.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/picard:2.27.1--hdfd78af_0' : 'quay.io/biocontainers/picard:2.27.1--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "METHYLDACKEL_MBIAS": {
        "name_process": "METHYLDACKEL_MBIAS",
        "string_process": "process METHYLDACKEL_MBIAS {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? 'bioconda::methyldackel=0.6.0' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/methyldackel:0.6.0--h22771d5_0' :\n        'quay.io/biocontainers/methyldackel:0.6.0--h22771d5_0' }\"\n\n    input:\n    tuple val(meta), path(bam), path(bai)\n    path fasta\n    path fai\n\n    output:\n    tuple val(meta), path(\"*.mbias.txt\"), emit: txt\n    path  \"versions.yml\"                , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    MethylDackel mbias \\\\\n        $args \\\\\n        $fasta \\\\\n        $bam \\\\\n        $prefix \\\\\n        --txt \\\\\n        > ${prefix}.mbias.txt\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        methyldackel: \\$(MethylDackel --version 2>&1 | cut -f1 -d\" \")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 37,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    MethylDackel mbias \\\\\n        $args \\\\\n        $fasta \\\\\n        $bam \\\\\n        $prefix \\\\\n        --txt \\\\\n        > ${prefix}.mbias.txt\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        methyldackel: \\$(MethylDackel --version 2>&1 | cut -f1 -d\" \")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "bam",
            "bai",
            "fasta",
            "fai"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? 'bioconda::methyldackel=0.6.0' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/methyldackel:0.6.0--h22771d5_0' : 'quay.io/biocontainers/methyldackel:0.6.0--h22771d5_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "BEDTOOLS_SUBTRACT": {
        "name_process": "BEDTOOLS_SUBTRACT",
        "string_process": "process BEDTOOLS_SUBTRACT {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::bedtools=2.30.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bedtools:2.30.0--hc088bd4_0' :\n        'quay.io/biocontainers/bedtools:2.30.0--hc088bd4_0' }\"\n\n    input:\n    tuple val(meta), path(intervals1), path(intervals2)\n\n    output:\n    tuple val(meta), path(\"*.bed\"), emit: bed\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    bedtools \\\\\n        subtract \\\\\n        -a $intervals1 \\\\\n        -b $intervals2 \\\\\n        $args \\\\\n        > ${prefix}.bed\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bedtools: \\$(bedtools --version | sed -e \"s/bedtools v//g\")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    bedtools \\\\\n        subtract \\\\\n        -a $intervals1 \\\\\n        -b $intervals2 \\\\\n        $args \\\\\n        > ${prefix}.bed\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bedtools: \\$(bedtools --version | sed -e \"s/bedtools v//g\")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "BEDTools"
        ],
        "tools_url": [
            "https://bio.tools/bedtools"
        ],
        "tools_dico": [
            {
                "name": "BEDTools",
                "uri": "https://bio.tools/bedtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "BEDTools is an extensive suite of utilities for comparing genomic features in BED format.",
                "homepage": "https://github.com/arq5x/bedtools2"
            }
        ],
        "inputs": [
            "meta",
            "intervals1",
            "intervals2"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::bedtools=2.30.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bedtools:2.30.0--hc088bd4_0' : 'quay.io/biocontainers/bedtools:2.30.0--hc088bd4_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "SAMTOOLS_SORT": {
        "name_process": "SAMTOOLS_SORT",
        "string_process": "process SAMTOOLS_SORT {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::samtools=1.15.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/samtools:1.15.1--h1170115_0' :\n        'quay.io/biocontainers/samtools:1.15.1--h1170115_0' }\"\n\n    input:\n    tuple val(meta), path(bam)\n\n    output:\n    tuple val(meta), path(\"*.bam\"), emit: bam\n    path  \"versions.yml\"          , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (\"$bam\" == \"${prefix}.bam\") error \"Input and output names are the same, use \\\"task.ext.prefix\\\" to disambiguate!\"\n    \"\"\"\n    samtools sort $args -@ $task.cpus -o ${prefix}.bam -T $prefix $bam\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.bam\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 40,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (\"$bam\" == \"${prefix}.bam\") error \"Input and output names are the same, use \\\"task.ext.prefix\\\" to disambiguate!\"\n    \"\"\"\n    samtools sort $args -@ $task.cpus -o ${prefix}.bam -T $prefix $bam\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "bam"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::samtools=1.15.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/samtools:1.15.1--h1170115_0' : 'quay.io/biocontainers/samtools:1.15.1--h1170115_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.bam\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\""
    },
    "FILTLONG": {
        "name_process": "FILTLONG",
        "string_process": "process FILTLONG {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::filtlong=0.2.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/filtlong:0.2.1--h9a82719_0' :\n        'quay.io/biocontainers/filtlong:0.2.1--h9a82719_0' }\"\n\n    input:\n    tuple val(meta), path(shortreads), path(longreads)\n\n    output:\n    tuple val(meta), path(\"${meta.id}_lr_filtlong.fastq.gz\"), emit: reads\n    path \"versions.yml\"                                     , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def short_reads = meta.single_end ? \"-1 $shortreads\" : \"-1 ${shortreads[0]} -2 ${shortreads[1]}\"\n    \"\"\"\n    filtlong \\\\\n        $short_reads \\\\\n        $args \\\\\n        $longreads \\\\\n        | gzip -n > ${prefix}_lr_filtlong.fastq.gz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        filtlong: \\$( filtlong --version | sed -e \"s/Filtlong v//g\" )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def short_reads = meta.single_end ? \"-1 $shortreads\" : \"-1 ${shortreads[0]} -2 ${shortreads[1]}\"\n    \"\"\"\n    filtlong \\\\\n        $short_reads \\\\\n        $args \\\\\n        $longreads \\\\\n        | gzip -n > ${prefix}_lr_filtlong.fastq.gz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        filtlong: \\$( filtlong --version | sed -e \"s/Filtlong v//g\" )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "Filtlong"
        ],
        "tools_url": [
            "https://bio.tools/Filtlong"
        ],
        "tools_dico": [
            {
                "name": "Filtlong",
                "uri": "https://bio.tools/Filtlong",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0749",
                            "term": "Transcription factors and regulatory sites"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0798",
                            "term": "Mobile genetic elements"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Whole genome sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "WGS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0310",
                                    "term": "Sequence assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Sequence trimming"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3482",
                                    "term": "Antimicrobial resistance prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3472",
                                    "term": "k-mer counting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3359",
                                    "term": "Splitting"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Trimming"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3359",
                                    "term": "File splitting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Complete hybrid genome assembly of clinical multidrug-resistant Bacteroides fragilis isolates enables comprehensive identification of antimicrobial-resistance genes and plasmids.\n\nquality filtering tool for long reads.\n\nFiltlong is a tool for filtering long reads by quality. It can take a set of long reads and produce a smaller, better subset. It uses both read length (longer is better) and read identity (higher is better) when choosing which reads pass the filter.\n\n||| CORRECT NAME OF TOOL COULD ALSO BE 'Unicycler' (bio.tools/unicycler), 'Canu-corrected ONT', 'AMR', 'fragilis'",
                "homepage": "https://github.com/rrwick/Filtlong"
            }
        ],
        "inputs": [
            "meta",
            "shortreads",
            "longreads"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::filtlong=0.2.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/filtlong:0.2.1--h9a82719_0' : 'quay.io/biocontainers/filtlong:0.2.1--h9a82719_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "STRANGER": {
        "name_process": "STRANGER",
        "string_process": "process STRANGER {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::stranger=0.8.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/stranger:0.8.1--pyh5e36f6f_0':\n        'quay.io/biocontainers/stranger:0.8.1--pyh5e36f6f_0' }\"\n\n    input:\n    tuple val(meta), path(vcf)\n    path variant_catalog\n\n    output:\n    tuple val(meta), path(\"*.gz\"), emit: vcf\n    path \"versions.yml\"          , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def options_variant_catalog = variant_catalog ? \"--repeats-file $variant_catalog\" : \"\"\n    \"\"\"\n    stranger \\\\\n        $args \\\\\n        $vcf \\\\\n        $options_variant_catalog | gzip --no-name > ${prefix}.vcf.gz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        stranger: \\$( stranger --version )\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.vcf.gz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        stranger: \\$( stranger --version )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 45,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def options_variant_catalog = variant_catalog ? \"--repeats-file $variant_catalog\" : \"\"\n    \"\"\"\n    stranger \\\\\n        $args \\\\\n        $vcf \\\\\n        $options_variant_catalog | gzip --no-name > ${prefix}.vcf.gz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        stranger: \\$( stranger --version )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "vcf",
            "variant_catalog"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::stranger=0.8.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/stranger:0.8.1--pyh5e36f6f_0': 'quay.io/biocontainers/stranger:0.8.1--pyh5e36f6f_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.vcf.gz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        stranger: \\$( stranger --version )\n    END_VERSIONS\n    \"\"\""
    },
    "ABACAS": {
        "name_process": "ABACAS",
        "string_process": "process ABACAS {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::abacas=1.3.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/abacas:1.3.1--pl526_0' :\n        'quay.io/biocontainers/abacas:1.3.1--pl526_0' }\"\n\n    input:\n    tuple val(meta), path(scaffold)\n    path  fasta\n\n    output:\n    tuple val(meta), path('*.abacas*'), emit: results\n    path \"versions.yml\"               , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    abacas.pl \\\\\n        -r $fasta \\\\\n        -q $scaffold \\\\\n        $args \\\\\n        -o ${prefix}.abacas\n\n    mv nucmer.delta ${prefix}.abacas.nucmer.delta\n    mv nucmer.filtered.delta ${prefix}.abacas.nucmer.filtered.delta\n    mv nucmer.tiling ${prefix}.abacas.nucmer.tiling\n    mv unused_contigs.out ${prefix}.abacas.unused.contigs.out\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        abacas: \\$(echo \\$(abacas.pl -v 2>&1) | sed 's/^.*ABACAS.//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 38,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    abacas.pl \\\\\n        -r $fasta \\\\\n        -q $scaffold \\\\\n        $args \\\\\n        -o ${prefix}.abacas\n\n    mv nucmer.delta ${prefix}.abacas.nucmer.delta\n    mv nucmer.filtered.delta ${prefix}.abacas.nucmer.filtered.delta\n    mv nucmer.tiling ${prefix}.abacas.nucmer.tiling\n    mv unused_contigs.out ${prefix}.abacas.unused.contigs.out\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        abacas: \\$(echo \\$(abacas.pl -v 2>&1) | sed 's/^.*ABACAS.//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 17,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "scaffold",
            "fasta"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::abacas=1.3.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/abacas:1.3.1--pl526_0' : 'quay.io/biocontainers/abacas:1.3.1--pl526_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "BISCUIT_BSCONV": {
        "name_process": "BISCUIT_BSCONV",
        "string_process": "process BISCUIT_BSCONV {\n    tag \"$meta.id\"\n    label 'process_long'\n\n    conda (params.enable_conda ? \"bioconda::biscuit=1.0.2.20220113\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/biscuit:1.0.2.20220113--h81a5ba2_0':\n        'quay.io/biocontainers/biscuit:1.0.2.20220113--h81a5ba2_0' }\"\n\n    input:\n    tuple val(meta), path(bam), path(bai)\n    path(index)\n\n    output:\n    tuple val(meta), path(\"*.bam\"), emit: bsconv_bam\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (\"$bam\" == \"${prefix}.bam\") error \"Input and output names are the same, set prefix in module configuration to disambiguate!\"\n    \"\"\"\n    INDEX=`find -L ./ -name \"*.bis.amb\" | sed 's/.bis.amb//'`\n\n    biscuit bsconv \\\\\n        $args \\\\\n        \\$INDEX \\\\\n        $bam \\\\\n        ${prefix}.bam\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        biscuit: \\$( biscuit version |& sed '1!d; s/^.*BISCUIT Version: //' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 37,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (\"$bam\" == \"${prefix}.bam\") error \"Input and output names are the same, set prefix in module configuration to disambiguate!\"\n    \"\"\"\n    INDEX=`find -L ./ -name \"*.bis.amb\" | sed 's/.bis.amb//'`\n\n    biscuit bsconv \\\\\n        $args \\\\\n        \\$INDEX \\\\\n        $bam \\\\\n        ${prefix}.bam\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        biscuit: \\$( biscuit version |& sed '1!d; s/^.*BISCUIT Version: //' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "bam",
            "bai",
            "index"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_long'",
            "conda (params.enable_conda ? \"bioconda::biscuit=1.0.2.20220113\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/biscuit:1.0.2.20220113--h81a5ba2_0': 'quay.io/biocontainers/biscuit:1.0.2.20220113--h81a5ba2_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "FASTQC": {
        "name_process": "FASTQC",
        "string_process": "process FASTQC {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::fastqc=0.11.9\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/fastqc:0.11.9--0' :\n        'quay.io/biocontainers/fastqc:0.11.9--0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path(\"*.html\"), emit: html\n    tuple val(meta), path(\"*.zip\") , emit: zip\n    path  \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n                                                                          \n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (meta.single_end) {\n        \"\"\"\n        [ ! -f  ${prefix}.fastq.gz ] && ln -s $reads ${prefix}.fastq.gz\n        fastqc $args --threads $task.cpus ${prefix}.fastq.gz\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            fastqc: \\$( fastqc --version | sed -e \"s/FastQC v//g\" )\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        [ ! -f  ${prefix}_1.fastq.gz ] && ln -s ${reads[0]} ${prefix}_1.fastq.gz\n        [ ! -f  ${prefix}_2.fastq.gz ] && ln -s ${reads[1]} ${prefix}_2.fastq.gz\n        fastqc $args --threads $task.cpus ${prefix}_1.fastq.gz ${prefix}_2.fastq.gz\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            fastqc: \\$( fastqc --version | sed -e \"s/FastQC v//g\" )\n        END_VERSIONS\n        \"\"\"\n    }\n\n    stub:\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.html\n    touch ${prefix}.zip\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        fastqc: \\$( fastqc --version | sed -e \"s/FastQC v//g\" )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 57,
        "string_script": "    def args = task.ext.args ?: ''\n                                                                          \n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (meta.single_end) {\n        \"\"\"\n        [ ! -f  ${prefix}.fastq.gz ] && ln -s $reads ${prefix}.fastq.gz\n        fastqc $args --threads $task.cpus ${prefix}.fastq.gz\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            fastqc: \\$( fastqc --version | sed -e \"s/FastQC v//g\" )\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        [ ! -f  ${prefix}_1.fastq.gz ] && ln -s ${reads[0]} ${prefix}_1.fastq.gz\n        [ ! -f  ${prefix}_2.fastq.gz ] && ln -s ${reads[1]} ${prefix}_2.fastq.gz\n        fastqc $args --threads $task.cpus ${prefix}_1.fastq.gz ${prefix}_2.fastq.gz\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            fastqc: \\$( fastqc --version | sed -e \"s/FastQC v//g\" )\n        END_VERSIONS\n        \"\"\"\n    }",
        "nb_lignes_script": 24,
        "language_script": "bash",
        "tools": [
            "FastQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            }
        ],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::fastqc=0.11.9\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/fastqc:0.11.9--0' : 'quay.io/biocontainers/fastqc:0.11.9--0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.html\n    touch ${prefix}.zip\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        fastqc: \\$( fastqc --version | sed -e \"s/FastQC v//g\" )\n    END_VERSIONS\n    \"\"\""
    },
    "LEEHOM": {
        "name_process": "LEEHOM",
        "string_process": "\nprocess LEEHOM {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::leehom=1.2.15\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/leehom:1.2.15--h29e30f7_1' :\n        'quay.io/biocontainers/leehom:1.2.15--h29e30f7_1' }\"\n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path(\"${prefix}.bam\")          , optional: true, emit: bam\n    tuple val(meta), path(\"${prefix}.fq.gz\")        , optional: true, emit: fq_pass\n    tuple val(meta), path(\"${prefix}.fail.fq.gz\")   , optional: true, emit: fq_fail\n    tuple val(meta), path(\"${prefix}_r1.fq.gz\")     , optional: true, emit: unmerged_r1_fq_pass\n    tuple val(meta), path(\"${prefix}_r1.fail.fq.gz\"), optional: true, emit: unmerged_r1_fq_fail\n    tuple val(meta), path(\"${prefix}_r2.fq.gz\")     , optional: true, emit: unmerged_r2_fq_pass\n    tuple val(meta), path(\"${prefix}_r2.fail.fq.gz\"), optional: true, emit: unmerged_r2_fq_fail\n    tuple val(meta), path(\"*.log\")                                  , emit: log\n    path \"versions.yml\"                                             , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args   ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n\n    if (reads.toString().endsWith('.bam')) {\n        \"\"\"\n        leeHom \\\\\n            $args \\\\\n            -t $task.cpus \\\\\n            -o ${prefix}.bam \\\\\n            --log ${prefix}.log \\\\\n            $reads\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            leehom: $VERSION\n        END_VERSIONS\n        \"\"\"\n    } else if (meta.single_end) {\n        \"\"\"\n        leeHom \\\\\n            $args \\\\\n            -t $task.cpus \\\\\n            -fq1 $reads \\\\\n            -fqo $prefix \\\\\n            --log ${prefix}.log\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            leehom: $VERSION\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        leeHom \\\\\n            $args \\\\\n            -t $task.cpus \\\\\n            -fq1 ${reads[0]} \\\\\n            -fq2 ${reads[1]} \\\\\n            -fqo $prefix \\\\\n            --log ${prefix}.log\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            leehom: $VERSION\n        END_VERSIONS\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 74,
        "string_script": "    def args = task.ext.args   ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n\n    if (reads.toString().endsWith('.bam')) {\n        \"\"\"\n        leeHom \\\\\n            $args \\\\\n            -t $task.cpus \\\\\n            -o ${prefix}.bam \\\\\n            --log ${prefix}.log \\\\\n            $reads\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            leehom: $VERSION\n        END_VERSIONS\n        \"\"\"\n    } else if (meta.single_end) {\n        \"\"\"\n        leeHom \\\\\n            $args \\\\\n            -t $task.cpus \\\\\n            -fq1 $reads \\\\\n            -fqo $prefix \\\\\n            --log ${prefix}.log\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            leehom: $VERSION\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        leeHom \\\\\n            $args \\\\\n            -t $task.cpus \\\\\n            -fq1 ${reads[0]} \\\\\n            -fq2 ${reads[1]} \\\\\n            -fqo $prefix \\\\\n            --log ${prefix}.log\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            leehom: $VERSION\n        END_VERSIONS\n        \"\"\"\n    }",
        "nb_lignes_script": 46,
        "language_script": "bash",
        "tools": [
            "LeeHom"
        ],
        "tools_url": [
            "https://bio.tools/leehom"
        ],
        "tools_dico": [
            {
                "name": "LeeHom",
                "uri": "https://bio.tools/leehom",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3299",
                            "term": "Evolutionary biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2269",
                            "term": "Statistics and probability"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3299",
                            "term": "Evolution"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3745",
                                    "term": "Ancestral reconstruction"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3745",
                                    "term": "Ancestral sequence reconstruction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3745",
                                    "term": "Character optimisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3745",
                                    "term": "Character mapping"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Program for the Bayesian reconstruction of ancient DNA.",
                "homepage": "https://bioinf.eva.mpg.de/leehom/"
            }
        ],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::leehom=1.2.15\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/leehom:1.2.15--h29e30f7_1' : 'quay.io/biocontainers/leehom:1.2.15--h29e30f7_1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "BCFTOOLS_FILTER": {
        "name_process": "BCFTOOLS_FILTER",
        "string_process": "process BCFTOOLS_FILTER {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? 'bioconda::bcftools=1.14' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bcftools:1.14--h88f3f91_0' :\n        'quay.io/biocontainers/bcftools:1.14--h88f3f91_0' }\"\n\n    input:\n    tuple val(meta), path(vcf)\n\n    output:\n    tuple val(meta), path(\"*.gz\"), emit: vcf\n    path  \"versions.yml\"         , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    bcftools filter \\\\\n        --output ${prefix}.vcf.gz \\\\\n        $args \\\\\n        $vcf\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bcftools: \\$(bcftools --version 2>&1 | head -n1 | sed 's/^.*bcftools //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    bcftools filter \\\\\n        --output ${prefix}.vcf.gz \\\\\n        $args \\\\\n        $vcf\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bcftools: \\$(bcftools --version 2>&1 | head -n1 | sed 's/^.*bcftools //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [
            "BCFtools"
        ],
        "tools_url": [
            "https://bio.tools/bcftools"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "vcf"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? 'bioconda::bcftools=1.14' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bcftools:1.14--h88f3f91_0' : 'quay.io/biocontainers/bcftools:1.14--h88f3f91_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "DASTOOL_DASTOOL": {
        "name_process": "DASTOOL_DASTOOL",
        "string_process": "process DASTOOL_DASTOOL {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::das_tool=1.1.4\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/das_tool:1.1.4--r41hdfd78af_1' :\n        'quay.io/biocontainers/das_tool:1.1.4--r41hdfd78af_1' }\"\n\n    input:\n    tuple val(meta), path(contigs), path(bins)\n    path(proteins)\n    path(db_directory)\n\n    output:\n    tuple val(meta), path(\"*.log\")                                      , emit: log\n    tuple val(meta), path(\"*_summary.tsv\")              , optional: true, emit: summary\n    tuple val(meta), path(\"*_DASTool_contig2bin.tsv\")   , optional: true, emit: contig2bin\n    tuple val(meta), path(\"*.eval\")                     , optional: true, emit: eval\n    tuple val(meta), path(\"*_DASTool_bins/*.fa\")        , optional: true, emit: bins\n    tuple val(meta), path(\"*.pdf\")                      , optional: true, emit: pdfs\n    tuple val(meta), path(\"*.candidates.faa\")           , optional: true, emit: fasta_proteins\n    tuple val(meta), path(\"*.faa\")                      , optional: true, emit: candidates_faa\n    tuple val(meta), path(\"*.archaea.scg\")              , optional: true, emit: fasta_archaea_scg\n    tuple val(meta), path(\"*.bacteria.scg\")             , optional: true, emit: fasta_bacteria_scg\n    tuple val(meta), path(\"*.b6\")                       , optional: true, emit: b6\n    tuple val(meta), path(\"*.seqlength\")                , optional: true, emit: seqlength\n    path \"versions.yml\"                                 , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def bin_list = bins instanceof List ? bins.join(\",\") : \"$bins\"\n    def db_dir = db_directory ? \"--db_directory $db_directory\" : \"\"\n    def clean_contigs = contigs.toString() - \".gz\"\n    def decompress_contigs = contigs.toString() == clean_contigs ? \"\" : \"gunzip -q -f $contigs\"\n    def clean_proteins = proteins ? proteins.toString() - \".gz\" : \"\"\n    def decompress_proteins = proteins ? \"gunzip -f $proteins\" : \"\"\n    def proteins_pred = proteins ? \"-p $clean_proteins\" : \"\"\n\n    \"\"\"\n    $decompress_proteins\n    $decompress_contigs\n\n    DAS_Tool \\\\\n        $args \\\\\n        $proteins_pred \\\\\n        $db_dir \\\\\n        -t $task.cpus \\\\\n        -i $bin_list \\\\\n        -c $clean_contigs \\\\\n        -o $prefix\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        dastool: \\$( DAS_Tool --version 2>&1 | grep \"DAS Tool\" | sed 's/DAS Tool //' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 60,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def bin_list = bins instanceof List ? bins.join(\",\") : \"$bins\"\n    def db_dir = db_directory ? \"--db_directory $db_directory\" : \"\"\n    def clean_contigs = contigs.toString() - \".gz\"\n    def decompress_contigs = contigs.toString() == clean_contigs ? \"\" : \"gunzip -q -f $contigs\"\n    def clean_proteins = proteins ? proteins.toString() - \".gz\" : \"\"\n    def decompress_proteins = proteins ? \"gunzip -f $proteins\" : \"\"\n    def proteins_pred = proteins ? \"-p $clean_proteins\" : \"\"\n\n    \"\"\"\n    $decompress_proteins\n    $decompress_contigs\n\n    DAS_Tool \\\\\n        $args \\\\\n        $proteins_pred \\\\\n        $db_dir \\\\\n        -t $task.cpus \\\\\n        -i $bin_list \\\\\n        -c $clean_contigs \\\\\n        -o $prefix\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        dastool: \\$( DAS_Tool --version 2>&1 | grep \"DAS Tool\" | sed 's/DAS Tool //' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 27,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "contigs",
            "bins",
            "proteins",
            "db_directory"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::das_tool=1.1.4\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/das_tool:1.1.4--r41hdfd78af_1' : 'quay.io/biocontainers/das_tool:1.1.4--r41hdfd78af_1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "HMMCOPY_MAPCOUNTER": {
        "name_process": "HMMCOPY_MAPCOUNTER",
        "string_process": "\nprocess HMMCOPY_MAPCOUNTER {\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::hmmcopy=0.1.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/hmmcopy:0.1.1--h2e03b76_7':\n        'quay.io/biocontainers/hmmcopy:0.1.1--h2e03b76_7' }\"\n\n    input:\n    path bigwig\n\n    output:\n    path \"*.map.wig\"              , emit: wig\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n\n    \"\"\"\n    mapCounter \\\\\n        $args \\\\\n        $bigwig > ${bigwig.baseName}.map.wig\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        hmmcopy: \\$(echo $VERSION)\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "    def args = task.ext.args ?: ''\n\n    \"\"\"\n    mapCounter \\\\\n        $args \\\\\n        $bigwig > ${bigwig.baseName}.map.wig\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        hmmcopy: \\$(echo $VERSION)\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bigwig"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::hmmcopy=0.1.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/hmmcopy:0.1.1--h2e03b76_7': 'quay.io/biocontainers/hmmcopy:0.1.1--h2e03b76_7' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "SAMTOOLS_BAM2FQ": {
        "name_process": "SAMTOOLS_BAM2FQ",
        "string_process": "process SAMTOOLS_BAM2FQ {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::samtools=1.15.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/samtools:1.15.1--h1170115_0' :\n        'quay.io/biocontainers/samtools:1.15.1--h1170115_0' }\"\n\n    input:\n    tuple val(meta), path(inputbam)\n    val split\n\n    output:\n    tuple val(meta), path(\"*.fq.gz\"), emit: reads\n    path \"versions.yml\"             , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n    if (split){\n        \"\"\"\n        samtools \\\\\n            bam2fq \\\\\n            $args \\\\\n            -@ $task.cpus \\\\\n            -1 ${prefix}_1.fq.gz \\\\\n            -2 ${prefix}_2.fq.gz \\\\\n            -0 ${prefix}_other.fq.gz \\\\\n            -s ${prefix}_singleton.fq.gz \\\\\n            $inputbam\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        samtools \\\\\n            bam2fq \\\\\n            $args \\\\\n            -@ $task.cpus \\\\\n            $inputbam | gzip --no-name > ${prefix}_interleaved.fq.gz\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n        END_VERSIONS\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 54,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n    if (split){\n        \"\"\"\n        samtools \\\\\n            bam2fq \\\\\n            $args \\\\\n            -@ $task.cpus \\\\\n            -1 ${prefix}_1.fq.gz \\\\\n            -2 ${prefix}_2.fq.gz \\\\\n            -0 ${prefix}_other.fq.gz \\\\\n            -s ${prefix}_singleton.fq.gz \\\\\n            $inputbam\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        samtools \\\\\n            bam2fq \\\\\n            $args \\\\\n            -@ $task.cpus \\\\\n            $inputbam | gzip --no-name > ${prefix}_interleaved.fq.gz\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n        END_VERSIONS\n        \"\"\"\n    }",
        "nb_lignes_script": 33,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "inputbam",
            "split"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::samtools=1.15.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/samtools:1.15.1--h1170115_0' : 'quay.io/biocontainers/samtools:1.15.1--h1170115_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "ALLELECOUNTER": {
        "name_process": "ALLELECOUNTER",
        "string_process": "process ALLELECOUNTER {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? 'bioconda::cancerit-allelecount=4.3.0' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/cancerit-allelecount:4.3.0--h41abebc_0' :\n        'quay.io/biocontainers/cancerit-allelecount:4.3.0--h41abebc_0' }\"\n\n    input:\n    tuple val(meta), path(input), path(input_index)\n    path loci\n    path fasta\n\n    output:\n    tuple val(meta), path(\"*.alleleCount\"), emit: allelecount\n    path \"versions.yml\"                   , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def reference_options = fasta ? \"-r $fasta\": \"\"\n\n    \"\"\"\n    alleleCounter \\\\\n        $args \\\\\n        -l $loci \\\\\n        -b $input \\\\\n        $reference_options \\\\\n        -o ${prefix}.alleleCount\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        allelecounter: \\$(alleleCounter --version)\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 38,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def reference_options = fasta ? \"-r $fasta\": \"\"\n\n    \"\"\"\n    alleleCounter \\\\\n        $args \\\\\n        -l $loci \\\\\n        -b $input \\\\\n        $reference_options \\\\\n        -o ${prefix}.alleleCount\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        allelecounter: \\$(alleleCounter --version)\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "input",
            "input_index",
            "loci",
            "fasta"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? 'bioconda::cancerit-allelecount=4.3.0' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/cancerit-allelecount:4.3.0--h41abebc_0' : 'quay.io/biocontainers/cancerit-allelecount:4.3.0--h41abebc_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "GATK4_VARIANTRECALIBRATOR": {
        "name_process": "GATK4_VARIANTRECALIBRATOR",
        "string_process": "process GATK4_VARIANTRECALIBRATOR {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::gatk4=4.2.6.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/gatk4:4.2.6.1--hdfd78af_0':\n        'quay.io/biocontainers/gatk4:4.2.6.1--hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(vcf), path(tbi)\n    tuple path(vcfs), path(tbis), val(labels)\n    path  fasta\n    path  fai\n    path  dict\n\n    output:\n    tuple val(meta), path(\"*.recal\")   , emit: recal\n    tuple val(meta), path(\"*.idx\")     , emit: idx\n    tuple val(meta), path(\"*.tranches\"), emit: tranches\n    tuple val(meta), path(\"*plots.R\")  , emit: plots, optional:true\n    path \"versions.yml\"                , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def reference_command = fasta ? \"--reference $fasta \" : ''\n    def resource_command = labels.collect{\"--resource:$it\"}.join(' ')\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[GATK VariantRecalibrator] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    gatk --java-options \"-Xmx${avail_mem}g\" VariantRecalibrator \\\\\n        --variant $vcf \\\\\n        --output ${prefix}.recal \\\\\n        --tranches-file ${prefix}.tranches \\\\\n        $reference_command \\\\\n        $resource_command \\\\\n        --tmp-dir . \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 52,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def reference_command = fasta ? \"--reference $fasta \" : ''\n    def resource_command = labels.collect{\"--resource:$it\"}.join(' ')\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[GATK VariantRecalibrator] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    gatk --java-options \"-Xmx${avail_mem}g\" VariantRecalibrator \\\\\n        --variant $vcf \\\\\n        --output ${prefix}.recal \\\\\n        --tranches-file ${prefix}.tranches \\\\\n        $reference_command \\\\\n        $resource_command \\\\\n        --tmp-dir . \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 25,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "meta",
            "vcf",
            "tbi",
            "labels",
            "vcfs",
            "tbis",
            "fasta",
            "fai",
            "dict"
        ],
        "nb_inputs": 9,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::gatk4=4.2.6.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/gatk4:4.2.6.1--hdfd78af_0': 'quay.io/biocontainers/gatk4:4.2.6.1--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "RAVEN": {
        "name_process": "RAVEN",
        "string_process": "process RAVEN {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::raven-assembler=1.6.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/raven-assembler:1.6.1--h2e03b76_0' :\n        'quay.io/biocontainers/raven-assembler:1.6.1--h2e03b76_0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path(\"*.fasta.gz\"), emit: fasta\n    tuple val(meta), path(\"*.gfa.gz\")  , emit: gfa\n    path \"versions.yml\"                , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    # run tool\n    raven \\\\\n        -t $task.cpus \\\\\n        --graphical-fragment-assembly ${prefix}.gfa \\\\\n        $args \\\\\n        $reads | \\\\\n        gzip -c > ${prefix}.fasta.gz\n\n    # compress assembly graph\n    gzip -c ${prefix}.gfa > ${prefix}.gfa.gz\n\n    # get tool version\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        raven: \\$( raven --version )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 40,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    # run tool\n    raven \\\\\n        -t $task.cpus \\\\\n        --graphical-fragment-assembly ${prefix}.gfa \\\\\n        $args \\\\\n        $reads | \\\\\n        gzip -c > ${prefix}.fasta.gz\n\n    # compress assembly graph\n    gzip -c ${prefix}.gfa > ${prefix}.gfa.gz\n\n    # get tool version\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        raven: \\$( raven --version )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::raven-assembler=1.6.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/raven-assembler:1.6.1--h2e03b76_0' : 'quay.io/biocontainers/raven-assembler:1.6.1--h2e03b76_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "BAMCMP": {
        "name_process": "BAMCMP",
        "string_process": "\nprocess BAMCMP {\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::bamcmp=2.2\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bamcmp:2.2--h05f6578_0' :\n        'quay.io/biocontainers/bamcmp:2.2--h05f6578_0' }\"\n\n    input:\n    tuple val(meta), path(sample), path(contaminant)\n\n    output:\n    tuple val(meta), path(\"*primary.bam\")      , emit: bam\n    tuple val(meta), path(\"*contamination.bam\"), emit: contamination_bam\n    path \"versions.yml\"                        , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    bamcmp \\\\\n        -1 $sample \\\\\n        -2 $contaminant \\\\\n        -A ${prefix}_primary.bam \\\\\n        -B ${prefix}_contamination.bam \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bamcmp: $VERSION\n    END_VERSIONS\n    \"\"\"\n\n}",
        "nb_lignes_process": 36,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    bamcmp \\\\\n        -1 $sample \\\\\n        -2 $contaminant \\\\\n        -A ${prefix}_primary.bam \\\\\n        -B ${prefix}_contamination.bam \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bamcmp: $VERSION\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "sample",
            "contaminant"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::bamcmp=2.2\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bamcmp:2.2--h05f6578_0' : 'quay.io/biocontainers/bamcmp:2.2--h05f6578_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "GSTAMA_MERGE": {
        "name_process": "GSTAMA_MERGE",
        "string_process": "process GSTAMA_MERGE {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::gs-tama=1.0.2\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/gs-tama:1.0.2--hdfd78af_0' :\n        'quay.io/biocontainers/gs-tama:1.0.2--hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(bed)\n    path filelist\n\n    output:\n    tuple val(meta), path(\"*.bed\")             , emit: bed\n    tuple val(meta), path(\"*_gene_report.txt\") , emit: gene_report\n    tuple val(meta), path(\"*_merge.txt\")       , emit: merge\n    tuple val(meta), path(\"*_trans_report.txt\"), emit: trans_report\n    path \"versions.yml\"                        , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    tama_merge.py \\\\\n        -f $filelist \\\\\n        -d merge_dup \\\\\n        -p ${prefix} \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gstama: \\$( tama_merge.py -version | head -n1 )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 37,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    tama_merge.py \\\\\n        -f $filelist \\\\\n        -d merge_dup \\\\\n        -p ${prefix} \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gstama: \\$( tama_merge.py -version | head -n1 )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "bed",
            "filelist"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::gs-tama=1.0.2\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/gs-tama:1.0.2--hdfd78af_0' : 'quay.io/biocontainers/gs-tama:1.0.2--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "RSEQC_READDISTRIBUTION": {
        "name_process": "RSEQC_READDISTRIBUTION",
        "string_process": "process RSEQC_READDISTRIBUTION {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::rseqc=3.0.1 'conda-forge::r-base>=3.5'\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/rseqc:3.0.1--py37h516909a_1' :\n        'quay.io/biocontainers/rseqc:3.0.1--py37h516909a_1' }\"\n\n    input:\n    tuple val(meta), path(bam)\n    path  bed\n\n    output:\n    tuple val(meta), path(\"*.read_distribution.txt\"), emit: txt\n    path  \"versions.yml\"                            , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    read_distribution.py \\\\\n        -i $bam \\\\\n        -r $bed \\\\\n        > ${prefix}.read_distribution.txt\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        rseqc: \\$(read_distribution.py --version | sed -e \"s/read_distribution.py //g\")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    read_distribution.py \\\\\n        -i $bam \\\\\n        -r $bed \\\\\n        > ${prefix}.read_distribution.txt\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        rseqc: \\$(read_distribution.py --version | sed -e \"s/read_distribution.py //g\")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "bam",
            "bed"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::rseqc=3.0.1 'conda-forge::r-base>=3.5'\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/rseqc:3.0.1--py37h516909a_1' : 'quay.io/biocontainers/rseqc:3.0.1--py37h516909a_1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "FGBIO_FASTQTOBAM": {
        "name_process": "FGBIO_FASTQTOBAM",
        "string_process": "process FGBIO_FASTQTOBAM {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::fgbio=1.4.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/fgbio:1.4.0--hdfd78af_0' :\n        'quay.io/biocontainers/fgbio:1.4.0--hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n    val read_structure\n\n    output:\n    tuple val(meta), path(\"*_umi_converted.bam\"), emit: umibam\n    path \"versions.yml\"                         , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    mkdir tmp\n\n    fgbio \\\\\n        --tmp-dir=${PWD}/tmp \\\\\n        FastqToBam \\\\\n        -i $reads \\\\\n        -o \"${prefix}_umi_converted.bam\" \\\\\n        --read-structures $read_structure \\\\\n        --sample $meta.id \\\\\n        --library $meta.id \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        fgbio: \\$( echo \\$(fgbio --version 2>&1 | tr -d '[:cntrl:]' ) | sed -e 's/^.*Version: //;s/\\\\[.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 40,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    mkdir tmp\n\n    fgbio \\\\\n        --tmp-dir=${PWD}/tmp \\\\\n        FastqToBam \\\\\n        -i $reads \\\\\n        -o \"${prefix}_umi_converted.bam\" \\\\\n        --read-structures $read_structure \\\\\n        --sample $meta.id \\\\\n        --library $meta.id \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        fgbio: \\$( echo \\$(fgbio --version 2>&1 | tr -d '[:cntrl:]' ) | sed -e 's/^.*Version: //;s/\\\\[.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [
            "TMPD"
        ],
        "tools_url": [
            "https://bio.tools/tmpd"
        ],
        "tools_dico": [
            {
                "name": "TMPD",
                "uri": "https://bio.tools/tmpd",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0780",
                            "term": "Plant biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0160",
                            "term": "Sequence sites, features and motifs"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0780",
                            "term": "Plant science"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0780",
                            "term": "Plants"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0780",
                            "term": "Botany"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0780",
                            "term": "Plant"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Tobacco Markers & Primers Database.",
                "homepage": "http://biodb.sdau.edu.cn/tmpd/index.html"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "read_structure"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::fgbio=1.4.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/fgbio:1.4.0--hdfd78af_0' : 'quay.io/biocontainers/fgbio:1.4.0--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "LAST_MAFSWAP": {
        "name_process": "LAST_MAFSWAP",
        "string_process": "process LAST_MAFSWAP {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? 'bioconda::last=1250' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/last:1250--h2e03b76_0' :\n        'quay.io/biocontainers/last:1250--h2e03b76_0' }\"\n\n    input:\n    tuple val(meta), path(maf)\n\n    output:\n    tuple val(meta), path(\"*.maf.gz\"), emit: maf\n    path \"versions.yml\"              , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    maf-swap $args $maf | gzip --no-name > ${prefix}.swapped.maf.gz\n\n    # maf-swap has no --version option but lastdb, part of the same package, has.\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        last: \\$(lastdb --version 2>&1 | sed 's/lastdb //')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    maf-swap $args $maf | gzip --no-name > ${prefix}.swapped.maf.gz\n\n    # maf-swap has no --version option but lastdb, part of the same package, has.\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        last: \\$(lastdb --version 2>&1 | sed 's/lastdb //')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "maf"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? 'bioconda::last=1250' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/last:1250--h2e03b76_0' : 'quay.io/biocontainers/last:1250--h2e03b76_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "QUAST": {
        "name_process": "QUAST",
        "string_process": "process QUAST {\n    label 'process_medium'\n\n    conda (params.enable_conda ? 'bioconda::quast=5.0.2' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/quast:5.0.2--py37pl526hb5aa323_2' :\n        'quay.io/biocontainers/quast:5.0.2--py37pl526hb5aa323_2' }\"\n\n    input:\n    path consensus\n    path fasta\n    path gff\n    val use_fasta\n    val use_gff\n\n    output:\n    path \"${prefix}\"    , emit: results\n    path '*.tsv'        , emit: tsv\n    path \"versions.yml\" , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args   ?: ''\n    prefix   = task.ext.prefix ?: 'quast'\n    def features  = use_gff ? \"--features $gff\" : ''\n    def reference = use_fasta ? \"-r $fasta\" : ''\n    \"\"\"\n    quast.py \\\\\n        --output-dir $prefix \\\\\n        $reference \\\\\n        $features \\\\\n        --threads $task.cpus \\\\\n        $args \\\\\n        ${consensus.join(' ')}\n\n    ln -s ${prefix}/report.tsv\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        quast: \\$(quast.py --version 2>&1 | sed 's/^.*QUAST v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 43,
        "string_script": "    def args = task.ext.args   ?: ''\n    prefix   = task.ext.prefix ?: 'quast'\n    def features  = use_gff ? \"--features $gff\" : ''\n    def reference = use_fasta ? \"-r $fasta\" : ''\n    \"\"\"\n    quast.py \\\\\n        --output-dir $prefix \\\\\n        $reference \\\\\n        $features \\\\\n        --threads $task.cpus \\\\\n        $args \\\\\n        ${consensus.join(' ')}\n\n    ln -s ${prefix}/report.tsv\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        quast: \\$(quast.py --version 2>&1 | sed 's/^.*QUAST v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "consensus",
            "fasta",
            "gff",
            "use_fasta",
            "use_gff"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "label 'process_medium'",
            "conda (params.enable_conda ? 'bioconda::quast=5.0.2' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/quast:5.0.2--py37pl526hb5aa323_2' : 'quay.io/biocontainers/quast:5.0.2--py37pl526hb5aa323_2' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "ECTYPER": {
        "name_process": "ECTYPER",
        "string_process": "process ECTYPER {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::ectyper=1.0.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/ectyper:1.0.0--pyhdfd78af_1' :\n        'quay.io/biocontainers/ectyper:1.0.0--pyhdfd78af_1' }\"\n\n    input:\n    tuple val(meta), path(fasta)\n\n    output:\n    tuple val(meta), path(\"*.log\"), emit: log\n    tuple val(meta), path(\"*.tsv\"), emit: tsv\n    tuple val(meta), path(\"*.txt\"), emit: txt\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def is_compressed = fasta.getName().endsWith(\".gz\") ? true : false\n    def fasta_name = fasta.getName().replace(\".gz\", \"\")\n    \"\"\"\n    if [ \"$is_compressed\" == \"true\" ]; then\n        gzip -c -d $fasta > $fasta_name\n    fi\n\n    ectyper \\\\\n        $args \\\\\n        --cores $task.cpus \\\\\n        --output ./ \\\\\n        --input $fasta_name\n\n    mv output.tsv ${prefix}.tsv\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        ectyper: \\$(echo \\$(ectyper --version 2>&1)  | sed 's/.*ectyper //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 43,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def is_compressed = fasta.getName().endsWith(\".gz\") ? true : false\n    def fasta_name = fasta.getName().replace(\".gz\", \"\")\n    \"\"\"\n    if [ \"$is_compressed\" == \"true\" ]; then\n        gzip -c -d $fasta > $fasta_name\n    fi\n\n    ectyper \\\\\n        $args \\\\\n        --cores $task.cpus \\\\\n        --output ./ \\\\\n        --input $fasta_name\n\n    mv output.tsv ${prefix}.tsv\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        ectyper: \\$(echo \\$(ectyper --version 2>&1)  | sed 's/.*ectyper //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 21,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "fasta"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::ectyper=1.0.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/ectyper:1.0.0--pyhdfd78af_1' : 'quay.io/biocontainers/ectyper:1.0.0--pyhdfd78af_1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "IVAR_TRIM": {
        "name_process": "IVAR_TRIM",
        "string_process": "process IVAR_TRIM {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::ivar=1.3.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/ivar:1.3.1--h089eab3_0' :\n        'quay.io/biocontainers/ivar:1.3.1--h089eab3_0' }\"\n\n    input:\n    tuple val(meta), path(bam), path(bai)\n    path bed\n\n    output:\n    tuple val(meta), path(\"*.bam\"), emit: bam\n    tuple val(meta), path('*.log'), emit: log\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    ivar trim \\\\\n        $args \\\\\n        -i $bam \\\\\n        -b $bed \\\\\n        -p $prefix \\\\\n        > ${prefix}.ivar.log\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        ivar: \\$(echo \\$(ivar version 2>&1) | sed 's/^.*iVar version //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 36,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    ivar trim \\\\\n        $args \\\\\n        -i $bam \\\\\n        -b $bed \\\\\n        -p $prefix \\\\\n        > ${prefix}.ivar.log\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        ivar: \\$(echo \\$(ivar version 2>&1) | sed 's/^.*iVar version //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "AIVAR"
        ],
        "tools_url": [
            "https://bio.tools/AIVAR"
        ],
        "tools_dico": [
            {
                "name": "AIVAR",
                "uri": "https://bio.tools/AIVAR",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3474",
                            "term": "Machine learning"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Exome sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Targeted exome capture"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Exome analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "WES"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Exome"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Whole exome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Exome capture"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3461",
                                    "term": "Virulence prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Deposition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3225",
                                    "term": "Variant classification"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3461",
                                    "term": "Pathogenicity prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Data submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Database deposition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Database submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Data deposition"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Assessing concordance among human, in silico predictions and functional assays on genetic variant classification.",
                "homepage": "https://github.com/TopGene/AIvar"
            }
        ],
        "inputs": [
            "meta",
            "bam",
            "bai",
            "bed"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::ivar=1.3.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/ivar:1.3.1--h089eab3_0' : 'quay.io/biocontainers/ivar:1.3.1--h089eab3_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "LOFREQ_CALLPARALLEL": {
        "name_process": "LOFREQ_CALLPARALLEL",
        "string_process": "process LOFREQ_CALLPARALLEL {\n    tag \"$meta.id\"\n    label 'process_high'\n\n    conda (params.enable_conda ? \"bioconda::lofreq=2.1.5\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/lofreq:2.1.5--py38h588ecb2_4' :\n        'quay.io/biocontainers/lofreq:2.1.5--py38h588ecb2_4' }\"\n\n    input:\n    tuple val(meta), path(bam), path(bai)\n    path fasta\n    path fai\n\n    output:\n    tuple val(meta), path(\"*.vcf.gz\"), emit: vcf\n    path \"versions.yml\"              , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    lofreq \\\\\n        call-parallel \\\\\n        --pp-threads $task.cpus \\\\\n        $args \\\\\n        -f $fasta \\\\\n        -o ${prefix}.vcf.gz \\\\\n        $bam\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        lofreq: \\$(echo \\$(lofreq version 2>&1) | sed 's/^version: //; s/ *commit.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 37,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    lofreq \\\\\n        call-parallel \\\\\n        --pp-threads $task.cpus \\\\\n        $args \\\\\n        -f $fasta \\\\\n        -o ${prefix}.vcf.gz \\\\\n        $bam\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        lofreq: \\$(echo \\$(lofreq version 2>&1) | sed 's/^version: //; s/ *commit.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "bam",
            "bai",
            "fasta",
            "fai"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "conda (params.enable_conda ? \"bioconda::lofreq=2.1.5\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/lofreq:2.1.5--py38h588ecb2_4' : 'quay.io/biocontainers/lofreq:2.1.5--py38h588ecb2_4' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "DEEPARG_DOWNLOADDATA": {
        "name_process": "DEEPARG_DOWNLOADDATA",
        "string_process": "\nprocess DEEPARG_DOWNLOADDATA {\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::deeparg=1.0.2\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/deeparg:1.0.2--pyhdfd78af_1' :\n        'quay.io/biocontainers/deeparg:1.0.2--pyhdfd78af_1' }\"\n      \n                                                                                                                                                              \n                                                                  \n      \n    containerOptions { \"${workflow.containerEngine}\" == 'singularity' ? '-B $(which bash):/usr/local/lib/python2.7/site-packages/Theano-0.8.2-py2.7.egg-info/PKG-INFO' : '' }\n\n\n    input:\n\n    output:\n    path \"db/\"          , emit: db\n    path \"versions.yml\" , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    deeparg \\\\\n        download_data \\\\\n        $args \\\\\n        -o db/\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        deeparg: $VERSION\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 36,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    deeparg \\\\\n        download_data \\\\\n        $args \\\\\n        -o db/\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        deeparg: $VERSION\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::deeparg=1.0.2\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/deeparg:1.0.2--pyhdfd78af_1' : 'quay.io/biocontainers/deeparg:1.0.2--pyhdfd78af_1' }\"",
            "containerOptions { \"${workflow.containerEngine}\" == 'singularity' ? '-B $(which bash):/usr/local/lib/python2.7/site-packages/Theano-0.8.2-py2.7.egg-info/PKG-INFO' : '' }"
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "BEDTOOLS_GETFASTA": {
        "name_process": "BEDTOOLS_GETFASTA",
        "string_process": "process BEDTOOLS_GETFASTA {\n    tag \"$bed\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::bedtools=2.30.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bedtools:2.30.0--hc088bd4_0' :\n        'quay.io/biocontainers/bedtools:2.30.0--hc088bd4_0' }\"\n\n    input:\n    path bed\n    path fasta\n\n    output:\n    path \"*.fa\"         , emit: fasta\n    path \"versions.yml\" , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args   = task.ext.args   ?: ''\n    def prefix = task.ext.prefix ?: \"${bed.baseName}\"\n    \"\"\"\n    bedtools \\\\\n        getfasta \\\\\n        $args \\\\\n        -fi $fasta \\\\\n        -bed $bed \\\\\n        -fo ${prefix}.fa\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bedtools: \\$(bedtools --version | sed -e \"s/bedtools v//g\")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "    def args   = task.ext.args   ?: ''\n    def prefix = task.ext.prefix ?: \"${bed.baseName}\"\n    \"\"\"\n    bedtools \\\\\n        getfasta \\\\\n        $args \\\\\n        -fi $fasta \\\\\n        -bed $bed \\\\\n        -fo ${prefix}.fa\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bedtools: \\$(bedtools --version | sed -e \"s/bedtools v//g\")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "BEDTools"
        ],
        "tools_url": [
            "https://bio.tools/bedtools"
        ],
        "tools_dico": [
            {
                "name": "BEDTools",
                "uri": "https://bio.tools/bedtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "BEDTools is an extensive suite of utilities for comparing genomic features in BED format.",
                "homepage": "https://github.com/arq5x/bedtools2"
            }
        ],
        "inputs": [
            "bed",
            "fasta"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$bed\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::bedtools=2.30.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bedtools:2.30.0--hc088bd4_0' : 'quay.io/biocontainers/bedtools:2.30.0--hc088bd4_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "FGBIO_SORTBAM": {
        "name_process": "FGBIO_SORTBAM",
        "string_process": "process FGBIO_SORTBAM {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::fgbio=1.3.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/fgbio:1.3.0--0' :\n        'quay.io/biocontainers/fgbio:1.3.0--0' }\"\n\n    input:\n    tuple val(meta), path(bam)\n\n    output:\n    tuple val(meta), path(\"*.bam\"), emit: bam\n    path  \"versions.yml\"          , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    fgbio \\\\\n        SortBam \\\\\n        -i $bam \\\\\n        $args \\\\\n        -o ${prefix}.bam\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        fgbio: \\$( echo \\$(fgbio --version 2>&1 | tr -d '[:cntrl:]' ) | sed -e 's/^.*Version: //;s/\\\\[.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    fgbio \\\\\n        SortBam \\\\\n        -i $bam \\\\\n        $args \\\\\n        -o ${prefix}.bam\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        fgbio: \\$( echo \\$(fgbio --version 2>&1 | tr -d '[:cntrl:]' ) | sed -e 's/^.*Version: //;s/\\\\[.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "bam"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::fgbio=1.3.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/fgbio:1.3.0--0' : 'quay.io/biocontainers/fgbio:1.3.0--0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "METABAT2_METABAT2": {
        "name_process": "METABAT2_METABAT2",
        "string_process": "process METABAT2_METABAT2 {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::metabat2=2.15\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/metabat2:2.15--h986a166_1' :\n        'quay.io/biocontainers/metabat2:2.15--h986a166_1' }\"\n\n    input:\n    tuple val(meta), path(fasta), path(depth)\n\n    output:\n    tuple val(meta), path(\"*.tooShort.fa.gz\")       , optional:true , emit: tooshort\n    tuple val(meta), path(\"*.lowDepth.fa.gz\")       , optional:true , emit: lowdepth\n    tuple val(meta), path(\"*.unbinned.fa.gz\")       , optional:true , emit: unbinned\n    tuple val(meta), path(\"*.tsv.gz\")               , optional:true , emit: membership\n    tuple val(meta), path(\"bins/*.fa.gz\")           , optional:true , emit: fasta\n    path \"versions.yml\"                                             , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def decompress_depth = depth ? \"gzip -d -f $depth\" : \"\"\n    def depth_file = depth ? \"-a ${depth.baseName}\" : \"\"\n    \"\"\"\n    $decompress_depth\n\n    metabat2 \\\\\n        $args \\\\\n        -i $fasta \\\\\n        $depth_file \\\\\n        -t $task.cpus \\\\\n        --saveCls \\\\\n        -o metabat2/${prefix}\n\n    mv metabat2/${prefix} ${prefix}.tsv\n    mv metabat2 bins\n\n    gzip ${prefix}.tsv\n    find ./bins/ -name \"*.fa\" -type f | xargs -t -n 1 bgzip -@ ${task.cpus}\n    find ./bins/ -name \"*[lowDepth,tooShort,unbinned].fa.gz\" -type f -exec mv {} . \\\\;\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        metabat2: \\$( metabat2 --help 2>&1 | head -n 2 | tail -n 1| sed 's/.*\\\\:\\\\([0-9]*\\\\.[0-9]*\\\\).*/\\\\1/' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 50,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def decompress_depth = depth ? \"gzip -d -f $depth\" : \"\"\n    def depth_file = depth ? \"-a ${depth.baseName}\" : \"\"\n    \"\"\"\n    $decompress_depth\n\n    metabat2 \\\\\n        $args \\\\\n        -i $fasta \\\\\n        $depth_file \\\\\n        -t $task.cpus \\\\\n        --saveCls \\\\\n        -o metabat2/${prefix}\n\n    mv metabat2/${prefix} ${prefix}.tsv\n    mv metabat2 bins\n\n    gzip ${prefix}.tsv\n    find ./bins/ -name \"*.fa\" -type f | xargs -t -n 1 bgzip -@ ${task.cpus}\n    find ./bins/ -name \"*[lowDepth,tooShort,unbinned].fa.gz\" -type f -exec mv {} . \\\\;\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        metabat2: \\$( metabat2 --help 2>&1 | head -n 2 | tail -n 1| sed 's/.*\\\\:\\\\([0-9]*\\\\.[0-9]*\\\\).*/\\\\1/' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 26,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "fasta",
            "depth"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::metabat2=2.15\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/metabat2:2.15--h986a166_1' : 'quay.io/biocontainers/metabat2:2.15--h986a166_1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "PAIRTOOLS_RESTRICT": {
        "name_process": "PAIRTOOLS_RESTRICT",
        "string_process": "process PAIRTOOLS_RESTRICT {\n    tag \"$meta.id\"\n    label 'process_high'\n\n    conda (params.enable_conda ? \"bioconda::pairtools=0.3.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/pairtools:0.3.0--py37hb9c2fc3_5' :\n        'quay.io/biocontainers/pairtools:0.3.0--py37hb9c2fc3_5' }\"\n\n    input:\n    tuple val(meta), path(pairs)\n    path frag\n\n    output:\n    tuple val(meta), path(\"*.pairs.gz\"), emit: restrict\n    path \"versions.yml\"                , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    pairtools \\\\\n        restrict \\\\\n        -f $frag \\\\\n        $args \\\\\n        -o ${prefix}.pairs.gz \\\\\n        $pairs\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        pairtools: \\$(pairtools --version 2>&1 | sed 's/pairtools.*version //')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    pairtools \\\\\n        restrict \\\\\n        -f $frag \\\\\n        $args \\\\\n        -o ${prefix}.pairs.gz \\\\\n        $pairs\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        pairtools: \\$(pairtools --version 2>&1 | sed 's/pairtools.*version //')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "restrict"
        ],
        "tools_url": [
            "https://bio.tools/restrict"
        ],
        "tools_dico": [
            {
                "name": "restrict",
                "uri": "https://bio.tools/restrict",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3511",
                            "term": "Nucleic acid sites, features and motifs"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0431",
                                    "term": "Restriction site recognition"
                                }
                            ],
                            []
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2887",
                                "term": "Nucleic acid sequence record"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_1276",
                                "term": "Nucleic acid features"
                            }
                        ]
                    }
                ],
                "description": "Report restriction enzyme cleavage sites in a nucleotide sequence.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/restrict.html"
            }
        ],
        "inputs": [
            "meta",
            "pairs",
            "frag"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "conda (params.enable_conda ? \"bioconda::pairtools=0.3.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/pairtools:0.3.0--py37hb9c2fc3_5' : 'quay.io/biocontainers/pairtools:0.3.0--py37hb9c2fc3_5' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "RSEQC_JUNCTIONSATURATION": {
        "name_process": "RSEQC_JUNCTIONSATURATION",
        "string_process": "process RSEQC_JUNCTIONSATURATION {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::rseqc=3.0.1 'conda-forge::r-base>=3.5'\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/rseqc:3.0.1--py37h516909a_1' :\n        'quay.io/biocontainers/rseqc:3.0.1--py37h516909a_1' }\"\n\n    input:\n    tuple val(meta), path(bam)\n    path  bed\n\n    output:\n    tuple val(meta), path(\"*.pdf\"), emit: pdf\n    tuple val(meta), path(\"*.r\")  , emit: rscript\n    path  \"versions.yml\"          , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    junction_saturation.py \\\\\n        -i $bam \\\\\n        -r $bed \\\\\n        -o $prefix \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        rseqc: \\$(junction_saturation.py --version | sed -e \"s/junction_saturation.py //g\")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    junction_saturation.py \\\\\n        -i $bam \\\\\n        -r $bed \\\\\n        -o $prefix \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        rseqc: \\$(junction_saturation.py --version | sed -e \"s/junction_saturation.py //g\")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "bam",
            "bed"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::rseqc=3.0.1 'conda-forge::r-base>=3.5'\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/rseqc:3.0.1--py37h516909a_1' : 'quay.io/biocontainers/rseqc:3.0.1--py37h516909a_1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "GATK4_GETPILEUPSUMMARIES": {
        "name_process": "GATK4_GETPILEUPSUMMARIES",
        "string_process": "process GATK4_GETPILEUPSUMMARIES {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::gatk4=4.2.6.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/gatk4:4.2.6.1--hdfd78af_0':\n        'quay.io/biocontainers/gatk4:4.2.6.1--hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(input), path(index), path(intervals)\n    path  fasta\n    path  fai\n    path  dict\n    path  variants\n    path  variants_tbi\n\n    output:\n    tuple val(meta), path('*.pileups.table'), emit: table\n    path \"versions.yml\"                     , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def interval_command = intervals ? \"--intervals $intervals\" : \"\"\n    def reference_command = fasta ? \"--reference $fasta\" : ''\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[GATK GetPileupSummaries] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    gatk --java-options \"-Xmx${avail_mem}g\" GetPileupSummaries \\\\\n        --input $input \\\\\n        --variant $variants \\\\\n        --output ${prefix}.pileups.table \\\\\n        $reference_command \\\\\n        $interval_command \\\\\n        --tmp-dir . \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 50,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def interval_command = intervals ? \"--intervals $intervals\" : \"\"\n    def reference_command = fasta ? \"--reference $fasta\" : ''\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[GATK GetPileupSummaries] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    gatk --java-options \"-Xmx${avail_mem}g\" GetPileupSummaries \\\\\n        --input $input \\\\\n        --variant $variants \\\\\n        --output ${prefix}.pileups.table \\\\\n        $reference_command \\\\\n        $interval_command \\\\\n        --tmp-dir . \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 25,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "meta",
            "input",
            "index",
            "intervals",
            "fasta",
            "fai",
            "dict",
            "variants",
            "variants_tbi"
        ],
        "nb_inputs": 9,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::gatk4=4.2.6.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/gatk4:4.2.6.1--hdfd78af_0': 'quay.io/biocontainers/gatk4:4.2.6.1--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "GUBBINS": {
        "name_process": "GUBBINS",
        "string_process": "process GUBBINS {\n    label 'process_medium'\n\n    conda (params.enable_conda ? 'bioconda::gubbins=3.0.0' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/gubbins:3.0.0--py39h5bf99c6_0' :\n        'quay.io/biocontainers/gubbins:3.0.0--py39h5bf99c6_0' }\"\n\n    input:\n    path alignment\n\n    output:\n    path \"*.fasta\"                          , emit: fasta\n    path \"*.gff\"                            , emit: gff\n    path \"*.vcf\"                            , emit: vcf\n    path \"*.csv\"                            , emit: stats\n    path \"*.phylip\"                         , emit: phylip\n    path \"*.recombination_predictions.embl\" , emit: embl_predicted\n    path \"*.branch_base_reconstruction.embl\", emit: embl_branch\n    path \"*.final_tree.tre\"                 , emit: tree\n    path \"*.node_labelled.final_tree.tre\"   , emit: tree_labelled\n    path \"versions.yml\"                     , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    run_gubbins.py \\\\\n        --threads $task.cpus \\\\\n        $args \\\\\n        $alignment\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gubbins: \\$(run_gubbins.py --version 2>&1)\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 37,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    run_gubbins.py \\\\\n        --threads $task.cpus \\\\\n        $args \\\\\n        $alignment\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gubbins: \\$(run_gubbins.py --version 2>&1)\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "alignment"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "label 'process_medium'",
            "conda (params.enable_conda ? 'bioconda::gubbins=3.0.0' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/gubbins:3.0.0--py39h5bf99c6_0' : 'quay.io/biocontainers/gubbins:3.0.0--py39h5bf99c6_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "SEQTK_SUBSEQ": {
        "name_process": "SEQTK_SUBSEQ",
        "string_process": "process SEQTK_SUBSEQ {\n    tag '$sequences'\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::seqtk=1.3\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/seqtk:1.3--h5bf99c6_3' :\n        'quay.io/biocontainers/seqtk:1.3--h5bf99c6_3' }\"\n\n    input:\n    path sequences\n    path filter_list\n\n    output:\n    path \"*.gz\"         , emit: sequences\n    path \"versions.yml\" , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args   = task.ext.args   ?: ''\n    def prefix = task.ext.prefix ?: ''\n    def ext = \"fa\"\n    if (\"$sequences\" ==~ /.+\\.fq|.+\\.fq.gz|.+\\.fastq|.+\\.fastq.gz/) {\n        ext = \"fq\"\n    }\n    \"\"\"\n    seqtk \\\\\n        subseq \\\\\n        $args \\\\\n        $sequences \\\\\n        $filter_list | \\\\\n        gzip --no-name > ${sequences}${prefix}.${ext}.gz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        seqtk: \\$(echo \\$(seqtk 2>&1) | sed 's/^.*Version: //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 39,
        "string_script": "    def args   = task.ext.args   ?: ''\n    def prefix = task.ext.prefix ?: ''\n    def ext = \"fa\"\n    if (\"$sequences\" ==~ /.+\\.fq|.+\\.fq.gz|.+\\.fastq|.+\\.fastq.gz/) {\n        ext = \"fq\"\n    }\n    \"\"\"\n    seqtk \\\\\n        subseq \\\\\n        $args \\\\\n        $sequences \\\\\n        $filter_list | \\\\\n        gzip --no-name > ${sequences}${prefix}.${ext}.gz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        seqtk: \\$(echo \\$(seqtk 2>&1) | sed 's/^.*Version: //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [
            "drtext",
            "seqtk",
            "subSeq"
        ],
        "tools_url": [
            "https://bio.tools/drtext",
            "https://bio.tools/seqtk",
            "https://bio.tools/subseq"
        ],
        "tools_dico": [
            {
                "name": "drtext",
                "uri": "https://bio.tools/drtext",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0224",
                                    "term": "Query and retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0224",
                                    "term": "Database retrieval"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0957",
                                "term": "Database metadata"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0957",
                                "term": "Database metadata"
                            }
                        ]
                    }
                ],
                "description": "Get data resource entries complete text.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/drtext.html"
            },
            {
                "name": "seqtk",
                "uri": "https://bio.tools/seqtk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2121",
                                    "term": "Sequence file editing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A tool for processing sequences in the FASTA or FASTQ format. It parses both FASTA and FASTQ files which can also be optionally compressed by gzip.",
                "homepage": "https://github.com/lh3/seqtk"
            },
            {
                "name": "subSeq",
                "uri": "https://bio.tools/subseq",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Subsampling of high throughput sequencing count data for use in experiment design and analysis.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/subSeq.html"
            }
        ],
        "inputs": [
            "sequences",
            "filter_list"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag '$sequences'",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::seqtk=1.3\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/seqtk:1.3--h5bf99c6_3' : 'quay.io/biocontainers/seqtk:1.3--h5bf99c6_3' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "BWAMETH_ALIGN": {
        "name_process": "BWAMETH_ALIGN",
        "string_process": "process BWAMETH_ALIGN {\n    tag \"$meta.id\"\n    label 'process_high'\n\n    conda (params.enable_conda ? \"bioconda::bwameth=0.2.2\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bwameth:0.2.2--py_1' :\n        'quay.io/biocontainers/bwameth:0.2.2--py_1' }\"\n\n    input:\n    tuple val(meta), path(reads)\n    path index\n\n    output:\n    tuple val(meta), path(\"*.bam\"), emit: bam\n    path  \"versions.yml\"          , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def read_group = meta.read_group ? \"-R ${meta.read_group}\" : \"\"\n    \"\"\"\n    INDEX=`find -L ${index} -name \"*.bwameth.c2t\" | sed 's/.bwameth.c2t//'`\n\n    # Modify the timestamps so that bwameth doesn't complain about building the index\n    # See https://github.com/nf-core/methylseq/pull/217\n    touch -c -- *\n\n    bwameth.py \\\\\n        $args \\\\\n        $read_group \\\\\n        -t $task.cpus \\\\\n        --reference \\$INDEX \\\\\n        $reads \\\\\n        | samtools view $args2 -@ $task.cpus -bhS -o ${prefix}.bam -\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bwameth: \\$(echo \\$(bwameth.py --version 2>&1) | cut -f2 -d\" \")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 44,
        "string_script": "    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def read_group = meta.read_group ? \"-R ${meta.read_group}\" : \"\"\n    \"\"\"\n    INDEX=`find -L ${index} -name \"*.bwameth.c2t\" | sed 's/.bwameth.c2t//'`\n\n    # Modify the timestamps so that bwameth doesn't complain about building the index\n    # See https://github.com/nf-core/methylseq/pull/217\n    touch -c -- *\n\n    bwameth.py \\\\\n        $args \\\\\n        $read_group \\\\\n        -t $task.cpus \\\\\n        --reference \\$INDEX \\\\\n        $reads \\\\\n        | samtools view $args2 -@ $task.cpus -bhS -o ${prefix}.bam -\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bwameth: \\$(echo \\$(bwameth.py --version 2>&1) | cut -f2 -d\" \")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 23,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "index"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "conda (params.enable_conda ? \"bioconda::bwameth=0.2.2\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bwameth:0.2.2--py_1' : 'quay.io/biocontainers/bwameth:0.2.2--py_1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "SAMTOOLS_IDXSTATS": {
        "name_process": "SAMTOOLS_IDXSTATS",
        "string_process": "process SAMTOOLS_IDXSTATS {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::samtools=1.15.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/samtools:1.15.1--h1170115_0' :\n        'quay.io/biocontainers/samtools:1.15.1--h1170115_0' }\"\n\n    input:\n    tuple val(meta), path(bam), path(bai)\n\n    output:\n    tuple val(meta), path(\"*.idxstats\"), emit: idxstats\n    path  \"versions.yml\"               , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    samtools \\\\\n        idxstats \\\\\n        $bam \\\\\n        > ${bam}.idxstats\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    samtools \\\\\n        idxstats \\\\\n        $bam \\\\\n        > ${bam}.idxstats\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "bam",
            "bai"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::samtools=1.15.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/samtools:1.15.1--h1170115_0' : 'quay.io/biocontainers/samtools:1.15.1--h1170115_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "UMITOOLS_DEDUP": {
        "name_process": "UMITOOLS_DEDUP",
        "string_process": "process UMITOOLS_DEDUP {\n    tag \"$meta.id\"\n    label \"process_medium\"\n\n    conda (params.enable_conda ? \"bioconda::umi_tools=1.1.2\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/umi_tools:1.1.2--py38h4a8c8d9_0' :\n        'quay.io/biocontainers/umi_tools:1.1.2--py38h4a8c8d9_0' }\"\n\n    input:\n    tuple val(meta), path(bam), path(bai)\n\n    output:\n    tuple val(meta), path(\"*.bam\")             , emit: bam\n    tuple val(meta), path(\"*edit_distance.tsv\"), emit: tsv_edit_distance\n    tuple val(meta), path(\"*per_umi.tsv\")      , emit: tsv_per_umi\n    tuple val(meta), path(\"*per_position.tsv\") , emit: tsv_umi_per_position\n    path  \"versions.yml\"                       , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def paired = meta.single_end ? \"\" : \"--paired\"\n    \"\"\"\n    umi_tools \\\\\n        dedup \\\\\n        -I $bam \\\\\n        -S ${prefix}.bam \\\\\n        --output-stats $prefix \\\\\n        $paired \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        umitools: \\$(umi_tools --version 2>&1 | sed 's/^.*UMI-tools version://; s/ *\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 39,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def paired = meta.single_end ? \"\" : \"--paired\"\n    \"\"\"\n    umi_tools \\\\\n        dedup \\\\\n        -I $bam \\\\\n        -S ${prefix}.bam \\\\\n        --output-stats $prefix \\\\\n        $paired \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        umitools: \\$(umi_tools --version 2>&1 | sed 's/^.*UMI-tools version://; s/ *\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "bam",
            "bai"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label \"process_medium\"",
            "conda (params.enable_conda ? \"bioconda::umi_tools=1.1.2\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/umi_tools:1.1.2--py38h4a8c8d9_0' : 'quay.io/biocontainers/umi_tools:1.1.2--py38h4a8c8d9_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "CSVTK_CONCAT": {
        "name_process": "CSVTK_CONCAT",
        "string_process": "process CSVTK_CONCAT {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::csvtk=0.23.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/csvtk:0.23.0--h9ee0642_0' :\n        'quay.io/biocontainers/csvtk:0.23.0--h9ee0642_0' }\"\n\n    input:\n    tuple val(meta), path(csv)\n    val in_format\n    val out_format\n\n    output:\n    tuple val(meta), path(\"${prefix}.${out_extension}\"), emit: csv\n    path \"versions.yml\"                                , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args   ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n    def delimiter = in_format == \"tsv\" ? \"\\t\" : (in_format == \"csv\" ? \",\" : in_format)\n    def out_delimiter = out_format == \"tsv\" ? \"\\t\" : (out_format == \"csv\" ? \",\" : out_format)\n    out_extension = out_format == \"tsv\" ? 'tsv' : 'csv'\n    \"\"\"\n    csvtk \\\\\n        concat \\\\\n        $args \\\\\n        --num-cpus $task.cpus \\\\\n        --delimiter \"${delimiter}\" \\\\\n        --out-delimiter \"${out_delimiter}\" \\\\\n        --out-file ${prefix}.${out_extension} \\\\\n        $csv\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        csvtk: \\$(echo \\$( csvtk version | sed -e \"s/csvtk v//g\" ))\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 41,
        "string_script": "    def args = task.ext.args   ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n    def delimiter = in_format == \"tsv\" ? \"\\t\" : (in_format == \"csv\" ? \",\" : in_format)\n    def out_delimiter = out_format == \"tsv\" ? \"\\t\" : (out_format == \"csv\" ? \",\" : out_format)\n    out_extension = out_format == \"tsv\" ? 'tsv' : 'csv'\n    \"\"\"\n    csvtk \\\\\n        concat \\\\\n        $args \\\\\n        --num-cpus $task.cpus \\\\\n        --delimiter \"${delimiter}\" \\\\\n        --out-delimiter \"${out_delimiter}\" \\\\\n        --out-file ${prefix}.${out_extension} \\\\\n        $csv\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        csvtk: \\$(echo \\$( csvtk version | sed -e \"s/csvtk v//g\" ))\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "csv",
            "in_format",
            "out_format"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::csvtk=0.23.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/csvtk:0.23.0--h9ee0642_0' : 'quay.io/biocontainers/csvtk:0.23.0--h9ee0642_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "BEDTOOLS_INTERSECT": {
        "name_process": "BEDTOOLS_INTERSECT",
        "string_process": "process BEDTOOLS_INTERSECT {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::bedtools=2.30.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bedtools:2.30.0--hc088bd4_0' :\n        'quay.io/biocontainers/bedtools:2.30.0--hc088bd4_0' }\"\n\n    input:\n    tuple val(meta), path(intervals1), path(intervals2)\n    val extension\n\n    output:\n    tuple val(meta), path(\"*.${extension}\"), emit: intersect\n    path  \"versions.yml\"                   , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    bedtools \\\\\n        intersect \\\\\n        -a $intervals1 \\\\\n        -b $intervals2 \\\\\n        $args \\\\\n        > ${prefix}.${extension}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bedtools: \\$(bedtools --version | sed -e \"s/bedtools v//g\")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    bedtools \\\\\n        intersect \\\\\n        -a $intervals1 \\\\\n        -b $intervals2 \\\\\n        $args \\\\\n        > ${prefix}.${extension}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bedtools: \\$(bedtools --version | sed -e \"s/bedtools v//g\")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "BEDTools",
            "vcf_intersect"
        ],
        "tools_url": [
            "https://bio.tools/bedtools",
            "https://bio.tools/vcf_intersect"
        ],
        "tools_dico": [
            {
                "name": "BEDTools",
                "uri": "https://bio.tools/bedtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "BEDTools is an extensive suite of utilities for comparing genomic features in BED format.",
                "homepage": "https://github.com/arq5x/bedtools2"
            },
            {
                "name": "vcf_intersect",
                "uri": "https://bio.tools/vcf_intersect",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            },
                            {
                                "uri": "http://edamontology.org/data_3002",
                                "term": "Annotation track"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Generate the intersection of two VCF files.",
                "homepage": "https://galaxy.pasteur.fr/tool_runner?tool_id=vcf_intersect"
            }
        ],
        "inputs": [
            "meta",
            "intervals1",
            "intervals2",
            "extension"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::bedtools=2.30.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bedtools:2.30.0--hc088bd4_0' : 'quay.io/biocontainers/bedtools:2.30.0--hc088bd4_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "DEEPTOOLS_PLOTFINGERPRINT": {
        "name_process": "DEEPTOOLS_PLOTFINGERPRINT",
        "string_process": "process DEEPTOOLS_PLOTFINGERPRINT {\n    tag \"$meta.id\"\n    label 'process_high'\n\n    conda (params.enable_conda ? 'bioconda::deeptools=3.5.1' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/deeptools:3.5.1--py_0' :\n        'quay.io/biocontainers/deeptools:3.5.1--py_0' }\"\n\n    input:\n    tuple val(meta), path(bams), path(bais)\n\n    output:\n    tuple val(meta), path(\"*.pdf\")          , emit: pdf\n    tuple val(meta), path(\"*.raw.txt\")      , emit: matrix\n    tuple val(meta), path(\"*.qcmetrics.txt\"), emit: metrics\n    path  \"versions.yml\"                    , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def extend   = (meta.single_end && params.fragment_size > 0) ? \"--extendReads ${params.fragment_size}\" : ''\n    \"\"\"\n    plotFingerprint \\\\\n        $args \\\\\n        $extend \\\\\n        --bamfiles ${bams.join(' ')} \\\\\n        --plotFile ${prefix}.plotFingerprint.pdf \\\\\n        --outRawCounts ${prefix}.plotFingerprint.raw.txt \\\\\n        --outQualityMetrics ${prefix}.plotFingerprint.qcmetrics.txt \\\\\n        --numberOfProcessors $task.cpus\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        deeptools: \\$(plotFingerprint --version | sed -e \"s/plotFingerprint //g\")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 39,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def extend   = (meta.single_end && params.fragment_size > 0) ? \"--extendReads ${params.fragment_size}\" : ''\n    \"\"\"\n    plotFingerprint \\\\\n        $args \\\\\n        $extend \\\\\n        --bamfiles ${bams.join(' ')} \\\\\n        --plotFile ${prefix}.plotFingerprint.pdf \\\\\n        --outRawCounts ${prefix}.plotFingerprint.raw.txt \\\\\n        --outQualityMetrics ${prefix}.plotFingerprint.qcmetrics.txt \\\\\n        --numberOfProcessors $task.cpus\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        deeptools: \\$(plotFingerprint --version | sed -e \"s/plotFingerprint //g\")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 17,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "bams",
            "bais"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "conda (params.enable_conda ? 'bioconda::deeptools=3.5.1' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/deeptools:3.5.1--py_0' : 'quay.io/biocontainers/deeptools:3.5.1--py_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "SPADES": {
        "name_process": "SPADES",
        "string_process": "process SPADES {\n    tag \"$meta.id\"\n    label 'process_high'\n\n    conda (params.enable_conda ? 'bioconda::spades=3.15.3' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/spades:3.15.3--h95f258a_0' :\n        'quay.io/biocontainers/spades:3.15.3--h95f258a_0' }\"\n\n    input:\n    tuple val(meta), path(illumina), path(pacbio), path(nanopore)\n    path  hmm\n\n    output:\n    tuple val(meta), path('*.scaffolds.fa.gz')    , optional:true, emit: scaffolds\n    tuple val(meta), path('*.contigs.fa.gz')      , optional:true, emit: contigs\n    tuple val(meta), path('*.transcripts.fa.gz')  , optional:true, emit: transcripts\n    tuple val(meta), path('*.gene_clusters.fa.gz'), optional:true, emit: gene_clusters\n    tuple val(meta), path('*.assembly.gfa.gz')    , optional:true, emit: gfa\n    tuple val(meta), path('*.log')                , emit: log\n    path  \"versions.yml\"                          , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def maxmem = task.memory.toGiga()\n    def illumina_reads = illumina ? ( meta.single_end ? \"-s $illumina\" : \"-1 ${illumina[0]} -2 ${illumina[1]}\" ) : \"\"\n    def pacbio_reads = pacbio ? \"--pacbio $pacbio\" : \"\"\n    def nanopore_reads = nanopore ? \"--nanopore $nanopore\" : \"\"\n    def custom_hmms = hmm ? \"--custom-hmms $hmm\" : \"\"\n    \"\"\"\n    spades.py \\\\\n        $args \\\\\n        --threads $task.cpus \\\\\n        --memory $maxmem \\\\\n        $custom_hmms \\\\\n        $illumina_reads \\\\\n        $pacbio_reads \\\\\n        $nanopore_reads \\\\\n        -o ./\n    mv spades.log ${prefix}.spades.log\n\n    if [ -f scaffolds.fasta ]; then\n        mv scaffolds.fasta ${prefix}.scaffolds.fa\n        gzip -n ${prefix}.scaffolds.fa\n    fi\n    if [ -f contigs.fasta ]; then\n        mv contigs.fasta ${prefix}.contigs.fa\n        gzip -n ${prefix}.contigs.fa\n    fi\n    if [ -f transcripts.fasta ]; then\n        mv transcripts.fasta ${prefix}.transcripts.fa\n        gzip -n ${prefix}.transcripts.fa\n    fi\n    if [ -f assembly_graph_with_scaffolds.gfa ]; then\n        mv assembly_graph_with_scaffolds.gfa ${prefix}.assembly.gfa\n        gzip -n ${prefix}.assembly.gfa\n    fi\n\n    if [ -f gene_clusters.fasta ]; then\n        mv gene_clusters.fasta ${prefix}.gene_clusters.fa\n        gzip -n ${prefix}.gene_clusters.fa\n    fi\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        spades: \\$(spades.py --version 2>&1 | sed 's/^.*SPAdes genome assembler v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 71,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def maxmem = task.memory.toGiga()\n    def illumina_reads = illumina ? ( meta.single_end ? \"-s $illumina\" : \"-1 ${illumina[0]} -2 ${illumina[1]}\" ) : \"\"\n    def pacbio_reads = pacbio ? \"--pacbio $pacbio\" : \"\"\n    def nanopore_reads = nanopore ? \"--nanopore $nanopore\" : \"\"\n    def custom_hmms = hmm ? \"--custom-hmms $hmm\" : \"\"\n    \"\"\"\n    spades.py \\\\\n        $args \\\\\n        --threads $task.cpus \\\\\n        --memory $maxmem \\\\\n        $custom_hmms \\\\\n        $illumina_reads \\\\\n        $pacbio_reads \\\\\n        $nanopore_reads \\\\\n        -o ./\n    mv spades.log ${prefix}.spades.log\n\n    if [ -f scaffolds.fasta ]; then\n        mv scaffolds.fasta ${prefix}.scaffolds.fa\n        gzip -n ${prefix}.scaffolds.fa\n    fi\n    if [ -f contigs.fasta ]; then\n        mv contigs.fasta ${prefix}.contigs.fa\n        gzip -n ${prefix}.contigs.fa\n    fi\n    if [ -f transcripts.fasta ]; then\n        mv transcripts.fasta ${prefix}.transcripts.fa\n        gzip -n ${prefix}.transcripts.fa\n    fi\n    if [ -f assembly_graph_with_scaffolds.gfa ]; then\n        mv assembly_graph_with_scaffolds.gfa ${prefix}.assembly.gfa\n        gzip -n ${prefix}.assembly.gfa\n    fi\n\n    if [ -f gene_clusters.fasta ]; then\n        mv gene_clusters.fasta ${prefix}.gene_clusters.fa\n        gzip -n ${prefix}.gene_clusters.fa\n    fi\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        spades: \\$(spades.py --version 2>&1 | sed 's/^.*SPAdes genome assembler v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 45,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "illumina",
            "pacbio",
            "nanopore",
            "hmm"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "conda (params.enable_conda ? 'bioconda::spades=3.15.3' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/spades:3.15.3--h95f258a_0' : 'quay.io/biocontainers/spades:3.15.3--h95f258a_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "BISCUIT_BLASTER": {
        "name_process": "BISCUIT_BLASTER",
        "string_process": "process BISCUIT_BLASTER {\n    tag \"$meta.id\"\n    label 'process_high'\n\n    conda (params.enable_conda ? \"bioconda::biscuit=1.0.2.20220113 bioconda::samblaster=0.1.26 bioconda::samtools=1.15\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mulled-v2-db16f1c237a26ea9245cf9924f858974ff321d6e:17fa66297f088a1bc7560b7b90dc273bf23f2d8c-0':\n        'quay.io/biocontainers/mulled-v2-db16f1c237a26ea9245cf9924f858974ff321d6e:17fa66297f088a1bc7560b7b90dc273bf23f2d8c-0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n    path index\n\n    output:\n    tuple val(meta), path(\"*.bam\"), emit: bam\n    tuple val(meta), path(\"*.bai\"), emit: bai\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    def args3 = task.ext.args3 ?: ''\n    def biscuit_cpus = (int) Math.max(Math.floor(task.cpus*0.95),1)\n    def samtools_cpus = task.cpus-biscuit_cpus\n    \"\"\"\n    INDEX=`find -L ./ -name \"*.bis.amb\" | sed 's/.bis.amb//'`\n\n    biscuit align \\\\\n        -@ $biscuit_cpus \\\\\n        $args \\\\\n        \\$INDEX \\\\\n        $reads | \\\\\n    samblaster \\\\\n        $args2 | \\\\\n    samtools sort \\\\\n        -@ $samtools_cpus \\\\\n        $args3 \\\\\n        --write-index \\\\\n        -o ${prefix}.bam##idx##${prefix}.bam.bai\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        biscuit: \\$( biscuit version |& sed '1!d; s/^.*BISCUIT Version: //' )\n        samtools: \\$( samtools --version |& sed '1!d; s/^.*samtools //' )\n        samblaster: \\$( samblaster --version |& sed 's/^.*samblaster: Version //' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 50,
        "string_script": "    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    def args3 = task.ext.args3 ?: ''\n    def biscuit_cpus = (int) Math.max(Math.floor(task.cpus*0.95),1)\n    def samtools_cpus = task.cpus-biscuit_cpus\n    \"\"\"\n    INDEX=`find -L ./ -name \"*.bis.amb\" | sed 's/.bis.amb//'`\n\n    biscuit align \\\\\n        -@ $biscuit_cpus \\\\\n        $args \\\\\n        \\$INDEX \\\\\n        $reads | \\\\\n    samblaster \\\\\n        $args2 | \\\\\n    samtools sort \\\\\n        -@ $samtools_cpus \\\\\n        $args3 \\\\\n        --write-index \\\\\n        -o ${prefix}.bam##idx##${prefix}.bam.bai\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        biscuit: \\$( biscuit version |& sed '1!d; s/^.*BISCUIT Version: //' )\n        samtools: \\$( samtools --version |& sed '1!d; s/^.*samtools //' )\n        samblaster: \\$( samblaster --version |& sed 's/^.*samblaster: Version //' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 28,
        "language_script": "bash",
        "tools": [
            "SAMBLASTER",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samblaster",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMBLASTER",
                "uri": "https://bio.tools/samblaster",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3199",
                                    "term": "Split read mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3199",
                                    "term": "Split-read mapping"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A tool to mark duplicates and extract discordant and split reads from SAM files.",
                "homepage": "https://github.com/GregoryFaust/samblaster"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "index"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "conda (params.enable_conda ? \"bioconda::biscuit=1.0.2.20220113 bioconda::samblaster=0.1.26 bioconda::samtools=1.15\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mulled-v2-db16f1c237a26ea9245cf9924f858974ff321d6e:17fa66297f088a1bc7560b7b90dc273bf23f2d8c-0': 'quay.io/biocontainers/mulled-v2-db16f1c237a26ea9245cf9924f858974ff321d6e:17fa66297f088a1bc7560b7b90dc273bf23f2d8c-0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "RMARKDOWNNOTEBOOK": {
        "name_process": "RMARKDOWNNOTEBOOK",
        "string_process": "\nprocess RMARKDOWNNOTEBOOK {\n    tag \"$meta.id\"\n    label 'process_low'\n\n                                                                                   \n                                                                                 \n                                    \n    conda (params.enable_conda ? \"r-base=4.1.0 r-rmarkdown=2.9 r-yaml=2.2.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mulled-v2-31ad840d814d356e5f98030a4ee308a16db64ec5:0e852a1e4063fdcbe3f254ac2c7469747a60e361-0' :\n        'quay.io/biocontainers/mulled-v2-31ad840d814d356e5f98030a4ee308a16db64ec5:0e852a1e4063fdcbe3f254ac2c7469747a60e361-0' }\"\n\n    input:\n    tuple val(meta), path(notebook)\n    val parameters\n    path input_files\n\n    output:\n    tuple val(meta), path(\"*.html\")           , emit: report\n    tuple val(meta), path (\"artifacts/*\")     , emit: artifacts, optional: true\n    tuple val(meta), path (\"session_info.log\"), emit: session_info\n    path  \"versions.yml\"                      , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def parametrize = (task.ext.parametrize == null) ?  true : task.ext.parametrize\n    def implicit_params = (task.ext.implicit_params == null) ? true : task.ext.implicit_params\n    def meta_params = (task.ext.meta_params == null) ? true : task.ext.meta_params\n\n                                    \n                                                          \n                                \n                                                                  \n    def params_cmd = \"\"\n    def render_cmd = \"\"\n    if (parametrize) {\n        nb_params = [:]\n        if (implicit_params) {\n            nb_params[\"cpus\"] = task.cpus\n            nb_params[\"artifact_dir\"] = \"artifacts\"\n            nb_params[\"input_dir\"] = \"./\"\n        }\n        if (meta_params) {\n            nb_params[\"meta\"] = meta\n        }\n        nb_params += parameters\n        params_cmd = dump_params_yml(nb_params)\n        render_cmd = \"\"\"\\\n            params = yaml::read_yaml('.params.yml')\n            rmarkdown::render('${prefix}.Rmd', params=params, envir=new.env())\n        \"\"\"\n    } else {\n        render_cmd = \"rmarkdown::render('${prefix}.Rmd')\"\n    }\n\n    \"\"\"\n    # Dump .params.yml heredoc (section will be empty if parametrization is disabled)\n    ${indent_code_block(params_cmd, 4)}\n\n    # Create output directory\n    mkdir artifacts\n\n    # Set parallelism for BLAS/MKL etc. to avoid over-booking of resources\n    export MKL_NUM_THREADS=\"$task.cpus\"\n    export OPENBLAS_NUM_THREADS=\"$task.cpus\"\n    export OMP_NUM_THREADS=\"$task.cpus\"\n\n    # Work around  https://github.com/rstudio/rmarkdown/issues/1508\n    # If the symbolic link is not replaced by a physical file\n    # output- and temporary files will be written to the original directory.\n    mv \"${notebook}\" \"${notebook}.orig\"\n    cp -L \"${notebook}.orig\" \"${prefix}.Rmd\"\n\n    # Render notebook\n    Rscript - <<EOF\n        ${indent_code_block(render_cmd, 8)}\n        writeLines(capture.output(sessionInfo()), \"session_info.log\")\n    EOF\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        rmarkdown: \\$(Rscript -e \"cat(paste(packageVersion('rmarkdown'), collapse='.'))\")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 88,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def parametrize = (task.ext.parametrize == null) ?  true : task.ext.parametrize\n    def implicit_params = (task.ext.implicit_params == null) ? true : task.ext.implicit_params\n    def meta_params = (task.ext.meta_params == null) ? true : task.ext.meta_params\n\n                                    \n                                                          \n                                \n                                                                  \n    def params_cmd = \"\"\n    def render_cmd = \"\"\n    if (parametrize) {\n        nb_params = [:]\n        if (implicit_params) {\n            nb_params[\"cpus\"] = task.cpus\n            nb_params[\"artifact_dir\"] = \"artifacts\"\n            nb_params[\"input_dir\"] = \"./\"\n        }\n        if (meta_params) {\n            nb_params[\"meta\"] = meta\n        }\n        nb_params += parameters\n        params_cmd = dump_params_yml(nb_params)\n        render_cmd = \"\"\"\\\n            params = yaml::read_yaml('.params.yml')\n            rmarkdown::render('${prefix}.Rmd', params=params, envir=new.env())\n        \"\"\"\n    } else {\n        render_cmd = \"rmarkdown::render('${prefix}.Rmd')\"\n    }\n\n    \"\"\"\n    # Dump .params.yml heredoc (section will be empty if parametrization is disabled)\n    ${indent_code_block(params_cmd, 4)}\n\n    # Create output directory\n    mkdir artifacts\n\n    # Set parallelism for BLAS/MKL etc. to avoid over-booking of resources\n    export MKL_NUM_THREADS=\"$task.cpus\"\n    export OPENBLAS_NUM_THREADS=\"$task.cpus\"\n    export OMP_NUM_THREADS=\"$task.cpus\"\n\n    # Work around  https://github.com/rstudio/rmarkdown/issues/1508\n    # If the symbolic link is not replaced by a physical file\n    # output- and temporary files will be written to the original directory.\n    mv \"${notebook}\" \"${notebook}.orig\"\n    cp -L \"${notebook}.orig\" \"${prefix}.Rmd\"\n\n    # Render notebook\n    Rscript - <<EOF\n        ${indent_code_block(render_cmd, 8)}\n        writeLines(capture.output(sessionInfo()), \"session_info.log\")\n    EOF\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        rmarkdown: \\$(Rscript -e \"cat(paste(packageVersion('rmarkdown'), collapse='.'))\")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 60,
        "language_script": "bash",
        "tools": [
            "PDEparams",
            "NeoFuse"
        ],
        "tools_url": [
            "https://bio.tools/PDEparams",
            "https://bio.tools/NeoFuse"
        ],
        "tools_dico": [
            {
                "name": "PDEparams",
                "uri": "https://bio.tools/PDEparams",
                "topic": [
                    [],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Parameter fitting toolbox for partial differential equations in Python.",
                "homepage": "http://github.com/systemsmedicine/PDE_params"
            },
            {
                "name": "NeoFuse",
                "uri": "https://bio.tools/NeoFuse",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2830",
                            "term": "Immunoproteins and antigens"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0154",
                            "term": "Small molecules"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2640",
                            "term": "Oncology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "Gene transcripts"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2640",
                            "term": "Cancer biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2640",
                            "term": "https://en.wikipedia.org/wiki/Oncology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "mRNA features"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0310",
                                    "term": "Sequence assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0252",
                                    "term": "Peptide immunogenicity prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3799",
                                    "term": "Quantification"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0252",
                                    "term": "Immunogenicity prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0252",
                                    "term": "Antigenicity prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3799",
                                    "term": "Quantitation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Predicting fusion neoantigens from RNA sequencing data.\n\nThe Section for Bioinformatrics at the Biocenter of Innsbruck Medical University is commited to the generation, management, integration, and leveraging data from genomics studies.\n\nQuantification of the tumor immune contexture.\n\nZlatko Trajanoski awarded with ERC Advanced Grant.",
                "homepage": "https://icbi.i-med.ac.at/NeoFuse/"
            }
        ],
        "inputs": [
            "meta",
            "notebook",
            "parameters",
            "input_files"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"r-base=4.1.0 r-rmarkdown=2.9 r-yaml=2.2.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mulled-v2-31ad840d814d356e5f98030a4ee308a16db64ec5:0e852a1e4063fdcbe3f254ac2c7469747a60e361-0' : 'quay.io/biocontainers/mulled-v2-31ad840d814d356e5f98030a4ee308a16db64ec5:0e852a1e4063fdcbe3f254ac2c7469747a60e361-0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "BLAST_MAKEBLASTDB": {
        "name_process": "BLAST_MAKEBLASTDB",
        "string_process": "process BLAST_MAKEBLASTDB {\n    tag \"$fasta\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? 'bioconda::blast=2.12.0' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/blast:2.12.0--pl5262h3289130_0' :\n        'quay.io/biocontainers/blast:2.12.0--pl5262h3289130_0' }\"\n\n    input:\n    path fasta\n\n    output:\n    path 'blast_db'     , emit: db\n    path \"versions.yml\" , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    makeblastdb \\\\\n        -in $fasta \\\\\n        $args\n    mkdir blast_db\n    mv ${fasta}* blast_db\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        blast: \\$(blastn -version 2>&1 | sed 's/^.*blastn: //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    makeblastdb \\\\\n        -in $fasta \\\\\n        $args\n    mkdir blast_db\n    mv ${fasta}* blast_db\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        blast: \\$(blastn -version 2>&1 | sed 's/^.*blastn: //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fasta"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$fasta\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? 'bioconda::blast=2.12.0' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/blast:2.12.0--pl5262h3289130_0' : 'quay.io/biocontainers/blast:2.12.0--pl5262h3289130_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "TBPROFILER_PROFILE": {
        "name_process": "TBPROFILER_PROFILE",
        "string_process": "process TBPROFILER_PROFILE {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::tb-profiler=3.0.8\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/tb-profiler:3.0.8--pypyh5e36f6f_0' :\n        'quay.io/biocontainers/tb-profiler:3.0.8--pypyh5e36f6f_0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path(\"bam/*.bam\")     , emit: bam\n    tuple val(meta), path(\"results/*.csv\") , emit: csv, optional: true\n    tuple val(meta), path(\"results/*.json\"), emit: json\n    tuple val(meta), path(\"results/*.txt\") , emit: txt, optional: true\n    tuple val(meta), path(\"vcf/*.vcf.gz\")  , emit: vcf\n    path \"versions.yml\"                    , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args   ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n    def input_reads = meta.single_end ? \"--read1 $reads\" : \"--read1 ${reads[0]} --read2 ${reads[1]}\"\n    \"\"\"\n    tb-profiler \\\\\n        profile \\\\\n        $args \\\\\n        --prefix ${prefix} \\\\\n        --threads $task.cpus \\\\\n        $input_reads\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        tbprofiler:  \\$( echo \\$(tb-profiler --version 2>&1) | sed 's/TBProfiler version //')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 39,
        "string_script": "    def args = task.ext.args   ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n    def input_reads = meta.single_end ? \"--read1 $reads\" : \"--read1 ${reads[0]} --read2 ${reads[1]}\"\n    \"\"\"\n    tb-profiler \\\\\n        profile \\\\\n        $args \\\\\n        --prefix ${prefix} \\\\\n        --threads $task.cpus \\\\\n        $input_reads\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        tbprofiler:  \\$( echo \\$(tb-profiler --version 2>&1) | sed 's/TBProfiler version //')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [
            "gProfileR"
        ],
        "tools_url": [
            "https://bio.tools/gprofile_r"
        ],
        "tools_dico": [
            {
                "name": "gProfileR",
                "uri": "https://bio.tools/gprofile_r",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0602",
                            "term": "Molecular interactions, pathways and networks"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_1775",
                            "term": "Function analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0089",
                            "term": "Ontology and terminology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_1775",
                            "term": "Functional analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3672",
                                    "term": "Gene functional annotation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2436",
                                    "term": "Gene-set enrichment analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2497",
                                    "term": "Pathway or network analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3672",
                                    "term": "Sequence functional annotation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2436",
                                    "term": "GSEA"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2436",
                                    "term": "Functional enrichment analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2436",
                                    "term": "Gene-set over-represenation analysis"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2295",
                                "term": "Gene ID"
                            },
                            {
                                "uri": "http://edamontology.org/data_3021",
                                "term": "UniProt accession"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2600",
                                "term": "Pathway or network"
                            }
                        ]
                    }
                ],
                "description": "gProfileR performs functional enrichment analysis, gene identifier conversion and mapping homologous genes across related organisms via the 'g:Profiler' toolkit. The tool performs statistical enrichment analysis to find over-representation of information like Gene Ontology terms, biological pathways, regulatory DNA elements, human disease gene annotations, and protein-protein interaction networks. The basic input is a list of genes.",
                "homepage": "https://cran.r-project.org/web/packages/gProfileR/index.html"
            }
        ],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::tb-profiler=3.0.8\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/tb-profiler:3.0.8--pypyh5e36f6f_0' : 'quay.io/biocontainers/tb-profiler:3.0.8--pypyh5e36f6f_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "MAFFT": {
        "name_process": "MAFFT",
        "string_process": "process MAFFT {\n    tag \"$meta.id\"\n    label 'process_high'\n\n    conda (params.enable_conda ? \"bioconda::mafft=7.490\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mafft:7.490--h779adbc_0':\n        'quay.io/biocontainers/mafft:7.490--h779adbc_0' }\"\n\n    input:\n    tuple val(meta), path(fasta)\n\n    output:\n    tuple val(meta), path(\"*.fas\"), emit: fas\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    mafft \\\\\n        --thread ${task.cpus} \\\\\n        ${args} \\\\\n        ${fasta} \\\\\n        > ${prefix}.fas\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        mafft: \\$(mafft --version 2>&1 | sed 's/^v//' | sed 's/ (.*)//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    mafft \\\\\n        --thread ${task.cpus} \\\\\n        ${args} \\\\\n        ${fasta} \\\\\n        > ${prefix}.fas\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        mafft: \\$(mafft --version 2>&1 | sed 's/^v//' | sed 's/ (.*)//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [
            "MAFFT"
        ],
        "tools_url": [
            "https://bio.tools/MAFFT"
        ],
        "tools_dico": [
            {
                "name": "MAFFT",
                "uri": "https://bio.tools/MAFFT",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0492",
                                    "term": "Multiple sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0492",
                                    "term": "Multiple alignment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            }
                        ]
                    }
                ],
                "description": "MAFFT (Multiple Alignment using Fast Fourier Transform) is a high speed multiple sequence alignment program.",
                "homepage": "http://mafft.cbrc.jp/alignment/server/index.html"
            }
        ],
        "inputs": [
            "meta",
            "fasta"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "conda (params.enable_conda ? \"bioconda::mafft=7.490\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mafft:7.490--h779adbc_0': 'quay.io/biocontainers/mafft:7.490--h779adbc_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "VARIANTBAM": {
        "name_process": "VARIANTBAM",
        "string_process": "\nprocess VARIANTBAM {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::variantbam=1.4.4a\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/variantbam:1.4.4a--h7d7f7ad_5' :\n        'quay.io/biocontainers/variantbam:1.4.4a--h7d7f7ad_5' }\"\n\n    input:\n    tuple val(meta), path(bam)\n\n    output:\n    tuple val(meta), path(\"*.bam\"), emit: bam\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    variant \\\\\n        $bam \\\\\n        -o ${prefix}.bam \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        variantbam: $VERSION\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    variant \\\\\n        $bam \\\\\n        -o ${prefix}.bam \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        variantbam: $VERSION\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [
            "VARIANT"
        ],
        "tools_url": [
            "https://bio.tools/variant"
        ],
        "tools_dico": [
            {
                "name": "VARIANT",
                "uri": "https://bio.tools/variant",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0226",
                                    "term": "Annotation"
                                }
                            ],
                            []
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2044",
                                "term": "Sequence"
                            }
                        ],
                        "output": []
                    }
                ],
                "description": "Command line, web service, and web interface for fast and accurate functional characterization of variants found by Next Generation Sequencing.",
                "homepage": "http://variant.bioinfo.cipf.es/"
            }
        ],
        "inputs": [
            "meta",
            "bam"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::variantbam=1.4.4a\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/variantbam:1.4.4a--h7d7f7ad_5' : 'quay.io/biocontainers/variantbam:1.4.4a--h7d7f7ad_5' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "HISAT2_EXTRACTSPLICESITES": {
        "name_process": "HISAT2_EXTRACTSPLICESITES",
        "string_process": "\nprocess HISAT2_EXTRACTSPLICESITES {\n    tag \"$gtf\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? 'bioconda::hisat2=2.2.1' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/hisat2:2.2.1--h1b792b2_3' :\n        'quay.io/biocontainers/hisat2:2.2.1--h1b792b2_3' }\"\n\n    input:\n    path gtf\n\n    output:\n    path \"*.splice_sites.txt\", emit: txt\n    path \"versions.yml\"      , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    hisat2_extract_splice_sites.py $gtf > ${gtf.baseName}.splice_sites.txt\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        hisat2: $VERSION\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    hisat2_extract_splice_sites.py $gtf > ${gtf.baseName}.splice_sites.txt\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        hisat2: $VERSION\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "gtf"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$gtf\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? 'bioconda::hisat2=2.2.1' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/hisat2:2.2.1--h1b792b2_3' : 'quay.io/biocontainers/hisat2:2.2.1--h1b792b2_3' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "RAPIDNJ": {
        "name_process": "RAPIDNJ",
        "string_process": "\nprocess RAPIDNJ {\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::rapidnj=2.3.2 conda-forge::biopython=1.78\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mulled-v2-805c6e0f138f952f9c61cdd57c632a1a263ea990:3c52e4c8da6b3e4d69b9ca83fa4d366168898179-0' :\n        'quay.io/biocontainers/mulled-v2-805c6e0f138f952f9c61cdd57c632a1a263ea990:3c52e4c8da6b3e4d69b9ca83fa4d366168898179-0' }\"\n\n    input:\n    path alignment\n\n    output:\n    path \"*.sth\"       , emit: stockholm_alignment\n    path \"*.tre\"       , emit: phylogeny\n    path \"versions.yml\", emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    python \\\\\n        -c 'from Bio import SeqIO; SeqIO.convert(\"$alignment\", \"fasta\", \"alignment.sth\", \"stockholm\")'\n\n    rapidnj \\\\\n        alignment.sth \\\\\n        $args \\\\\n        -i sth \\\\\n        -c $task.cpus \\\\\n        -x rapidnj_phylogeny.tre\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        rapidnj: $VERSION\n        biopython: \\$(python -c \"import Bio; print(Bio.__version__)\")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 38,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    python \\\\\n        -c 'from Bio import SeqIO; SeqIO.convert(\"$alignment\", \"fasta\", \"alignment.sth\", \"stockholm\")'\n\n    rapidnj \\\\\n        alignment.sth \\\\\n        $args \\\\\n        -i sth \\\\\n        -c $task.cpus \\\\\n        -x rapidnj_phylogeny.tre\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        rapidnj: $VERSION\n        biopython: \\$(python -c \"import Bio; print(Bio.__version__)\")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 17,
        "language_script": "bash",
        "tools": [
            "RapidNJ"
        ],
        "tools_url": [
            "https://bio.tools/rapidnj"
        ],
        "tools_dico": [
            {
                "name": "RapidNJ",
                "uri": "https://bio.tools/rapidnj",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0084",
                            "term": "Phylogeny"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0323",
                                    "term": "Phylogenetic inference"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0323",
                                    "term": "Phlyogenetic tree construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0323",
                                    "term": "Phylogenetic reconstruction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0323",
                                    "term": "Phylogenetic tree generation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A tool for fast canonical neighbor-joining tree construction.",
                "homepage": "http://birc.au.dk/software/rapidnj/"
            }
        ],
        "inputs": [
            "alignment"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::rapidnj=2.3.2 conda-forge::biopython=1.78\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mulled-v2-805c6e0f138f952f9c61cdd57c632a1a263ea990:3c52e4c8da6b3e4d69b9ca83fa4d366168898179-0' : 'quay.io/biocontainers/mulled-v2-805c6e0f138f952f9c61cdd57c632a1a263ea990:3c52e4c8da6b3e4d69b9ca83fa4d366168898179-0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "MSISENSOR_SCAN": {
        "name_process": "MSISENSOR_SCAN",
        "string_process": "process MSISENSOR_SCAN {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::msisensor=0.5\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/msisensor:0.5--hb3646a4_2' :\n        'quay.io/biocontainers/msisensor:0.5--hb3646a4_2' }\"\n\n    input:\n    tuple val(meta), path(fasta)\n\n    output:\n    tuple val(meta), path(\"*.tab\"), emit: txt\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    msisensor \\\\\n        scan \\\\\n        -d $fasta \\\\\n        -o ${prefix}.msisensor_scan.tab \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        msisensor: \\$(msisensor 2>&1 | sed -nE 's/Version:\\\\sv([0-9]\\\\.[0-9])/\\\\1/ p')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    msisensor \\\\\n        scan \\\\\n        -d $fasta \\\\\n        -o ${prefix}.msisensor_scan.tab \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        msisensor: \\$(msisensor 2>&1 | sed -nE 's/Version:\\\\sv([0-9]\\\\.[0-9])/\\\\1/ p')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [
            "MSIsensor",
            "IScan"
        ],
        "tools_url": [
            "https://bio.tools/msisensor",
            "https://bio.tools/iscan"
        ],
        "tools_dico": [
            {
                "name": "MSIsensor",
                "uri": "https://bio.tools/msisensor",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2640",
                            "term": "Oncology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_2640",
                            "term": "Cancer biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2640",
                            "term": "https://en.wikipedia.org/wiki/Oncology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0415",
                                    "term": "Nucleic acid feature detection"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0415",
                                    "term": "Sequence feature detection (nucleic acid)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "C++ program for automatically detecting somatic and germline variants at microsatellite regions. It computes length distributions of microsatellites per site in paired tumor and normal sequence data, subsequently using these to statistically compare observed distributions in both samples.",
                "homepage": "https://github.com/ding-lab/msisensor"
            },
            {
                "name": "IScan",
                "uri": "https://bio.tools/iscan",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0226",
                                    "term": "Annotation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A package to identify insertion sequences and similar transposable elements, their inverted repeats, and the direct target repeats they generate in entire genomes.",
                "homepage": "http://www.ieu.uzh.ch/wagner/software/IScan/index.html"
            }
        ],
        "inputs": [
            "meta",
            "fasta"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::msisensor=0.5\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/msisensor:0.5--hb3646a4_2' : 'quay.io/biocontainers/msisensor:0.5--hb3646a4_2' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "PORECHOP": {
        "name_process": "PORECHOP",
        "string_process": "process PORECHOP {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::porechop=0.2.4\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/porechop:0.2.4--py39h7cff6ad_2' :\n        'quay.io/biocontainers/porechop:0.2.4--py39h7cff6ad_2' }\"\n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path(\"*.fastq.gz\"), emit: reads\n    path \"versions.yml\"                , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    porechop \\\\\n        -i $reads \\\\\n        -t $task.cpus \\\\\n        $args \\\\\n        -o ${prefix}.fastq.gz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        porechop: \\$( porechop --version )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    porechop \\\\\n        -i $reads \\\\\n        -t $task.cpus \\\\\n        $args \\\\\n        -o ${prefix}.fastq.gz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        porechop: \\$( porechop --version )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::porechop=0.2.4\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/porechop:0.2.4--py39h7cff6ad_2' : 'quay.io/biocontainers/porechop:0.2.4--py39h7cff6ad_2' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "FASTANI": {
        "name_process": "FASTANI",
        "string_process": "process FASTANI {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::fastani=1.32\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/fastani:1.32--he1c1bb9_0' :\n        'quay.io/biocontainers/fastani:1.32--he1c1bb9_0' }\"\n\n    input:\n    tuple val(meta), path(query)\n    path reference\n\n    output:\n    tuple val(meta), path(\"*.ani.txt\"), emit: ani\n    path \"versions.yml\"               , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n    if (meta.batch_input) {\n        \"\"\"\n        fastANI \\\\\n            -ql $query \\\\\n            -rl $reference \\\\\n            -o ${prefix}.ani.txt\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            fastani: \\$(fastANI --version 2>&1 | sed 's/version//;')\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        fastANI \\\\\n            -q $query \\\\\n            -r $reference \\\\\n            -o ${prefix}.ani.txt\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            fastani: \\$(fastANI --version 2>&1 | sed 's/version//;')\n        END_VERSIONS\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 48,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n    if (meta.batch_input) {\n        \"\"\"\n        fastANI \\\\\n            -ql $query \\\\\n            -rl $reference \\\\\n            -o ${prefix}.ani.txt\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            fastani: \\$(fastANI --version 2>&1 | sed 's/version//;')\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        fastANI \\\\\n            -q $query \\\\\n            -r $reference \\\\\n            -o ${prefix}.ani.txt\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            fastani: \\$(fastANI --version 2>&1 | sed 's/version//;')\n        END_VERSIONS\n        \"\"\"\n    }",
        "nb_lignes_script": 27,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "query",
            "reference"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::fastani=1.32\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/fastani:1.32--he1c1bb9_0' : 'quay.io/biocontainers/fastani:1.32--he1c1bb9_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "BISMARK_ALIGN": {
        "name_process": "BISMARK_ALIGN",
        "string_process": "process BISMARK_ALIGN {\n    tag \"$meta.id\"\n    label 'process_high'\n\n    conda (params.enable_conda ? \"bioconda::bismark=0.23.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bismark:0.23.0--0' :\n        'quay.io/biocontainers/bismark:0.23.0--0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n    path index\n\n    output:\n    tuple val(meta), path(\"*bam\")       , emit: bam\n    tuple val(meta), path(\"*report.txt\"), emit: report\n    tuple val(meta), path(\"*fq.gz\")     , optional:true, emit: unmapped\n    path \"versions.yml\"                 , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def fastq      = meta.single_end ? reads : \"-1 ${reads[0]} -2 ${reads[1]}\"\n    \"\"\"\n    bismark \\\\\n        $fastq \\\\\n        $args \\\\\n        --genome $index \\\\\n        --bam\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bismark: \\$(echo \\$(bismark -v 2>&1) | sed 's/^.*Bismark Version: v//; s/Copyright.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 37,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def fastq      = meta.single_end ? reads : \"-1 ${reads[0]} -2 ${reads[1]}\"\n    \"\"\"\n    bismark \\\\\n        $fastq \\\\\n        $args \\\\\n        --genome $index \\\\\n        --bam\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bismark: \\$(echo \\$(bismark -v 2>&1) | sed 's/^.*Bismark Version: v//; s/Copyright.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "Bismark"
        ],
        "tools_url": [
            "https://bio.tools/bismark"
        ],
        "tools_dico": [
            {
                "name": "Bismark",
                "uri": "https://bio.tools/bismark",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3295",
                            "term": "Epigenetics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3173",
                            "term": "Epigenomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3186",
                                    "term": "Bisulfite mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3204",
                                    "term": "Methylation analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3186",
                                    "term": "Bisulfite sequence mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3186",
                                    "term": "Bisulfite sequence alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3186",
                                    "term": "Bisulfite read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3204",
                                    "term": "Methylation profile analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Bismark is a tool to map bisulfite treated sequencing reads and perform methylation calling in a quick and easy-to-use fashion.",
                "homepage": "https://github.com/FelixKrueger/Bismark"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "index"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "conda (params.enable_conda ? \"bioconda::bismark=0.23.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bismark:0.23.0--0' : 'quay.io/biocontainers/bismark:0.23.0--0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "GATK4_GENOMICSDBIMPORT": {
        "name_process": "GATK4_GENOMICSDBIMPORT",
        "string_process": "process GATK4_GENOMICSDBIMPORT {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::gatk4=4.2.6.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/gatk4:4.2.6.1--hdfd78af_0':\n        'quay.io/biocontainers/gatk4:4.2.6.1--hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(vcf), path(tbi), path(interval_file), val(interval_value), path(wspace)\n    val   run_intlist\n    val   run_updatewspace\n    val   input_map\n\n    output:\n    tuple val(meta), path(\"$prefix\")        , optional:true, emit: genomicsdb\n    tuple val(meta), path(\"$updated_db\")    , optional:true, emit: updatedb\n    tuple val(meta), path(\"*.interval_list\"), optional:true, emit: intervallist\n    path \"versions.yml\"                                    , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args   ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n\n                                                     \n    input_command = input_map ? \"--sample-name-map ${vcf[0]}\" : vcf.collect(){\"--variant $it\"}.join(' ')\n\n    genomicsdb_command = \"--genomicsdb-workspace-path ${prefix}\"\n    interval_command = interval_file ? \"--intervals ${interval_file}\" : \"--intervals ${interval_value}\"\n\n                                                                                  \n    if (run_intlist) {\n        genomicsdb_command = \"--genomicsdb-update-workspace-path ${wspace}\"\n        interval_command = \"--output-interval-list-to-file ${prefix}.interval_list\"\n    }\n\n                                                                                                                                       \n    if (run_updatewspace) {\n        genomicsdb_command = \"--genomicsdb-update-workspace-path ${wspace}\"\n        interval_command = ''\n        updated_db = \"${wspace}\"\n    }\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[GATK GenomicsDBImport] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    gatk --java-options \"-Xmx${avail_mem}g\" GenomicsDBImport \\\\\n        $input_command \\\\\n        $genomicsdb_command \\\\\n        $interval_command \\\\\n        --tmp-dir . \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 65,
        "string_script": "    def args = task.ext.args   ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n\n                                                     \n    input_command = input_map ? \"--sample-name-map ${vcf[0]}\" : vcf.collect(){\"--variant $it\"}.join(' ')\n\n    genomicsdb_command = \"--genomicsdb-workspace-path ${prefix}\"\n    interval_command = interval_file ? \"--intervals ${interval_file}\" : \"--intervals ${interval_value}\"\n\n                                                                                  \n    if (run_intlist) {\n        genomicsdb_command = \"--genomicsdb-update-workspace-path ${wspace}\"\n        interval_command = \"--output-interval-list-to-file ${prefix}.interval_list\"\n    }\n\n                                                                                                                                       \n    if (run_updatewspace) {\n        genomicsdb_command = \"--genomicsdb-update-workspace-path ${wspace}\"\n        interval_command = ''\n        updated_db = \"${wspace}\"\n    }\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[GATK GenomicsDBImport] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    gatk --java-options \"-Xmx${avail_mem}g\" GenomicsDBImport \\\\\n        $input_command \\\\\n        $genomicsdb_command \\\\\n        $interval_command \\\\\n        --tmp-dir . \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 40,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "meta",
            "interval_value",
            "vcf",
            "tbi",
            "interval_file",
            "wspace",
            "run_intlist",
            "run_updatewspace",
            "input_map"
        ],
        "nb_inputs": 9,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::gatk4=4.2.6.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/gatk4:4.2.6.1--hdfd78af_0': 'quay.io/biocontainers/gatk4:4.2.6.1--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "GATK4_CREATESEQUENCEDICTIONARY": {
        "name_process": "GATK4_CREATESEQUENCEDICTIONARY",
        "string_process": "process GATK4_CREATESEQUENCEDICTIONARY {\n    tag \"$fasta\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::gatk4=4.2.6.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/gatk4:4.2.6.1--hdfd78af_0':\n        'quay.io/biocontainers/gatk4:4.2.6.1--hdfd78af_0' }\"\n\n    input:\n    path fasta\n\n    output:\n    path \"*.dict\"       , emit: dict\n    path \"versions.yml\" , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n\n    def avail_mem = 6\n    if (!task.memory) {\n        log.info '[GATK CreateSequenceDictionary] Available memory not known - defaulting to 6GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    gatk --java-options \"-Xmx${avail_mem}g\" CreateSequenceDictionary \\\\\n        --REFERENCE $fasta \\\\\n        --URI $fasta \\\\\n        --TMP_DIR . \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    \"\"\"\n    touch test.dict\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 49,
        "string_script": "    def args = task.ext.args ?: ''\n\n    def avail_mem = 6\n    if (!task.memory) {\n        log.info '[GATK CreateSequenceDictionary] Available memory not known - defaulting to 6GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    gatk --java-options \"-Xmx${avail_mem}g\" CreateSequenceDictionary \\\\\n        --REFERENCE $fasta \\\\\n        --URI $fasta \\\\\n        --TMP_DIR . \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "fasta"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$fasta\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::gatk4=4.2.6.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/gatk4:4.2.6.1--hdfd78af_0': 'quay.io/biocontainers/gatk4:4.2.6.1--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    \"\"\"\n    touch test.dict\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\""
    },
    "SEQTK_RENAME": {
        "name_process": "SEQTK_RENAME",
        "string_process": "process SEQTK_RENAME {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::seqtk=1.3\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/seqtk:1.3--h5bf99c6_3' :\n        'quay.io/biocontainers/seqtk:1.3--h5bf99c6_3' }\"\n\n    input:\n    tuple val(meta), path(sequences)\n\n    output:\n    tuple val(meta), path(\"*.gz\")     , emit: sequences\n    path \"versions.yml\"               , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def extension = \"fasta\"\n    if (\"$sequences\" ==~ /.+\\.fq|.+\\.fq.gz|.+\\.fastq|.+\\.fastq.gz/) {\n        extension = \"fastq\"\n    }\n    \"\"\"\n    seqtk \\\\\n        rename \\\\\n        $args \\\\\n        $sequences \\\\\n        $prefix | \\\\\n        gzip -c --no-name > ${prefix}.renamed.${extension}.gz\n\n    cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            seqtk: \\$(echo \\$(seqtk 2>&1) | sed 's/^.*Version: //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 38,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def extension = \"fasta\"\n    if (\"$sequences\" ==~ /.+\\.fq|.+\\.fq.gz|.+\\.fastq|.+\\.fastq.gz/) {\n        extension = \"fastq\"\n    }\n    \"\"\"\n    seqtk \\\\\n        rename \\\\\n        $args \\\\\n        $sequences \\\\\n        $prefix | \\\\\n        gzip -c --no-name > ${prefix}.renamed.${extension}.gz\n\n    cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            seqtk: \\$(echo \\$(seqtk 2>&1) | sed 's/^.*Version: //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [
            "seqtk"
        ],
        "tools_url": [
            "https://bio.tools/seqtk"
        ],
        "tools_dico": [
            {
                "name": "seqtk",
                "uri": "https://bio.tools/seqtk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2121",
                                    "term": "Sequence file editing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A tool for processing sequences in the FASTA or FASTQ format. It parses both FASTA and FASTQ files which can also be optionally compressed by gzip.",
                "homepage": "https://github.com/lh3/seqtk"
            }
        ],
        "inputs": [
            "meta",
            "sequences"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::seqtk=1.3\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/seqtk:1.3--h5bf99c6_3' : 'quay.io/biocontainers/seqtk:1.3--h5bf99c6_3' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "MAXBIN2": {
        "name_process": "MAXBIN2",
        "string_process": "process MAXBIN2 {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::maxbin2=2.2.7\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/maxbin2:2.2.7--he1b5a44_2' :\n        'quay.io/biocontainers/maxbin2:2.2.7--he1b5a44_2' }\"\n\n    input:\n    tuple val(meta), path(contigs), path(reads), path(abund)\n\n    output:\n    tuple val(meta), path(\"*.fasta.gz\")   , emit: binned_fastas\n    tuple val(meta), path(\"*.summary\")    , emit: summary\n    tuple val(meta), path(\"*.log.gz\")     , emit: log\n    tuple val(meta), path(\"*.marker.gz\")  , emit: marker_counts\n    tuple val(meta), path(\"*.noclass.gz\") , emit: unbinned_fasta\n    tuple val(meta), path(\"*.tooshort.gz\"), emit: tooshort_fasta\n    tuple val(meta), path(\"*_bin.tar.gz\") , emit: marker_bins , optional: true\n    tuple val(meta), path(\"*_gene.tar.gz\"), emit: marker_genes, optional: true\n    path \"versions.yml\"                   , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def associate_files = reads ? \"-reads $reads\" : \"-abund $abund\"\n    \"\"\"\n    mkdir input/ && mv $contigs input/\n    run_MaxBin.pl \\\\\n        -contig input/$contigs \\\\\n        $associate_files \\\\\n        -thread $task.cpus \\\\\n        $args \\\\\n        -out $prefix\n\n    gzip *.fasta *.noclass *.tooshort *log *.marker\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        maxbin2: \\$( run_MaxBin.pl -v | head -n 1 | sed 's/MaxBin //' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 45,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def associate_files = reads ? \"-reads $reads\" : \"-abund $abund\"\n    \"\"\"\n    mkdir input/ && mv $contigs input/\n    run_MaxBin.pl \\\\\n        -contig input/$contigs \\\\\n        $associate_files \\\\\n        -thread $task.cpus \\\\\n        $args \\\\\n        -out $prefix\n\n    gzip *.fasta *.noclass *.tooshort *log *.marker\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        maxbin2: \\$( run_MaxBin.pl -v | head -n 1 | sed 's/MaxBin //' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "contigs",
            "reads",
            "abund"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::maxbin2=2.2.7\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/maxbin2:2.2.7--he1b5a44_2' : 'quay.io/biocontainers/maxbin2:2.2.7--he1b5a44_2' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "BCFTOOLS_INDEX": {
        "name_process": "BCFTOOLS_INDEX",
        "string_process": "process BCFTOOLS_INDEX {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? 'bioconda::bcftools=1.14' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bcftools:1.14--h88f3f91_0' :\n        'quay.io/biocontainers/bcftools:1.14--h88f3f91_0' }\"\n\n    input:\n    tuple val(meta), path(vcf)\n\n    output:\n    tuple val(meta), path(\"*.csi\"), optional:true, emit: csi\n    tuple val(meta), path(\"*.tbi\"), optional:true, emit: tbi\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n    \"\"\"\n    bcftools \\\\\n        index \\\\\n        $args \\\\\n        --threads $task.cpus \\\\\n        $vcf\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bcftools: \\$(bcftools --version 2>&1 | head -n1 | sed 's/^.*bcftools //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n    \"\"\"\n    bcftools \\\\\n        index \\\\\n        $args \\\\\n        --threads $task.cpus \\\\\n        $vcf\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bcftools: \\$(bcftools --version 2>&1 | head -n1 | sed 's/^.*bcftools //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "BCFtools",
            "CINdex"
        ],
        "tools_url": [
            "https://bio.tools/bcftools",
            "https://bio.tools/cindex"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "CINdex",
                "uri": "https://bio.tools/cindex",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3233",
                                    "term": "Copy number estimation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3233",
                                    "term": "Transcript copy number estimation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The package addresses important area of high-throughput genomic analysis. It allows the automated processing and analysis of the experimental DNA copy number data generated by Affymetrix SNP 6.0 arrays or similar. It calculates the chromosome instability index to quantitatively characterize genome-wide DNA copy number alterations. This package calculates not only overall genomic instability, but also instability in terms of copy number gains and losses at the chromosome and cytoband level.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/CINdex.html"
            }
        ],
        "inputs": [
            "meta",
            "vcf"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? 'bioconda::bcftools=1.14' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bcftools:1.14--h88f3f91_0' : 'quay.io/biocontainers/bcftools:1.14--h88f3f91_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "DEEPTOOLS_PLOTPROFILE": {
        "name_process": "DEEPTOOLS_PLOTPROFILE",
        "string_process": "process DEEPTOOLS_PLOTPROFILE {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? 'bioconda::deeptools=3.5.1' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/deeptools:3.5.1--py_0' :\n        'quay.io/biocontainers/deeptools:3.5.1--py_0' }\"\n\n    input:\n    tuple val(meta), path(matrix)\n\n    output:\n    tuple val(meta), path(\"*.pdf\"), emit: pdf\n    tuple val(meta), path(\"*.tab\"), emit: table\n    path  \"versions.yml\"          , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    plotProfile \\\\\n        $args \\\\\n        --matrixFile $matrix \\\\\n        --outFileName ${prefix}.plotProfile.pdf \\\\\n        --outFileNameData ${prefix}.plotProfile.tab\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        deeptools: \\$(plotProfile --version | sed -e \"s/plotProfile //g\")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    plotProfile \\\\\n        $args \\\\\n        --matrixFile $matrix \\\\\n        --outFileName ${prefix}.plotProfile.pdf \\\\\n        --outFileNameData ${prefix}.plotProfile.tab\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        deeptools: \\$(plotProfile --version | sed -e \"s/plotProfile //g\")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "matrix"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? 'bioconda::deeptools=3.5.1' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/deeptools:3.5.1--py_0' : 'quay.io/biocontainers/deeptools:3.5.1--py_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "FLASH": {
        "name_process": "FLASH",
        "string_process": "process FLASH {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/flash:1.2.11--hed695b0_5' :\n        'quay.io/biocontainers/flash:1.2.11--hed695b0_5' }\"\n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path(\"*.fastq.gz\"), emit: reads\n    path \"versions.yml\"                , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    flash \\\\\n        $args \\\\\n        -o ${prefix} \\\\\n        -z \\\\\n        ${reads[0]} \\\\\n        ${reads[1]}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        flash: \\$(echo \\$(flash --version 2>&1) | sed 's/^.*FLASH v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    flash \\\\\n        $args \\\\\n        -o ${prefix} \\\\\n        -z \\\\\n        ${reads[0]} \\\\\n        ${reads[1]}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        flash: \\$(echo \\$(flash --version 2>&1) | sed 's/^.*FLASH v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "FLASH"
        ],
        "tools_url": [
            "https://bio.tools/flash"
        ],
        "tools_dico": [
            {
                "name": "FLASH",
                "uri": "https://bio.tools/flash",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3219",
                                    "term": "Read pre-processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0310",
                                    "term": "Sequence assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0232",
                                    "term": "Sequence merging"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3219",
                                    "term": "Sequence read pre-processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0232",
                                    "term": "Sequence splicing"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Identifies paired-end reads which overlap in the middle, converting them to single long reads",
                "homepage": "http://ccb.jhu.edu/software/FLASH/"
            }
        ],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/flash:1.2.11--hed695b0_5' : 'quay.io/biocontainers/flash:1.2.11--hed695b0_5' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "MALT_BUILD": {
        "name_process": "MALT_BUILD",
        "string_process": "process MALT_BUILD {\n\n    label 'process_high'\n\n    conda (params.enable_conda ? \"bioconda::malt=0.53\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/malt:0.53--hdfd78af_0' :\n        'quay.io/biocontainers/malt:0.53--hdfd78af_0' }\"\n\n    input:\n    path fastas\n    val seq_type\n    path gff\n    path map_db\n\n    output:\n    path \"malt_index/\"   , emit: index\n    path \"versions.yml\"  , emit: versions\n    path \"malt-build.log\", emit: log\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def avail_mem = 6\n    if (!task.memory) {\n        log.info '[MALT_BUILD] Available memory not known - defaulting to 6GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    def igff = gff ? \"-igff ${gff}\" : \"\"\n\n    \"\"\"\n    malt-build \\\\\n        -J-Xmx${avail_mem}g \\\\\n        -v \\\\\n        --input ${fastas.join(' ')} \\\\\n        -s $seq_type \\\\\n        $igff \\\\\n        -d 'malt_index/' \\\\\n        -t $task.cpus \\\\\n        $args \\\\\n        -mdb ${map_db}/*.db |&tee malt-build.log\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        malt: \\$(malt-build --help |& tail -n 3 | head -n 1 | cut -f 2 -d'(' | cut -f 1 -d ',' | cut -d ' ' -f 2)\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 49,
        "string_script": "    def args = task.ext.args ?: ''\n    def avail_mem = 6\n    if (!task.memory) {\n        log.info '[MALT_BUILD] Available memory not known - defaulting to 6GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    def igff = gff ? \"-igff ${gff}\" : \"\"\n\n    \"\"\"\n    malt-build \\\\\n        -J-Xmx${avail_mem}g \\\\\n        -v \\\\\n        --input ${fastas.join(' ')} \\\\\n        -s $seq_type \\\\\n        $igff \\\\\n        -d 'malt_index/' \\\\\n        -t $task.cpus \\\\\n        $args \\\\\n        -mdb ${map_db}/*.db |&tee malt-build.log\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        malt: \\$(malt-build --help |& tail -n 3 | head -n 1 | cut -f 2 -d'(' | cut -f 1 -d ',' | cut -d ' ' -f 2)\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 25,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fastas",
            "seq_type",
            "gff",
            "map_db"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "label 'process_high'",
            "conda (params.enable_conda ? \"bioconda::malt=0.53\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/malt:0.53--hdfd78af_0' : 'quay.io/biocontainers/malt:0.53--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "SEQKIT_PAIR": {
        "name_process": "SEQKIT_PAIR",
        "string_process": "process SEQKIT_PAIR {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::seqkit=2.1.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/seqkit:2.1.0--h9ee0642_0':\n        'quay.io/biocontainers/seqkit:2.1.0--h9ee0642_0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path(\"*.paired.fastq.gz\")                  , emit: reads\n    tuple val(meta), path(\"*.unpaired.fastq.gz\"), optional: true, emit: unpaired_reads\n    path \"versions.yml\"                                         , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    seqkit \\\\\n        pair \\\\\n        -1 ${reads[0]} \\\\\n        -2 ${reads[1]} \\\\\n        $args \\\\\n        --threads $task.cpus\n\n    # gzip fastq\n    find . -maxdepth 1 -name \"*.fastq\" -exec gzip {} \\;\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        seqkit: \\$( seqkit | sed '3!d; s/Version: //' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 38,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    seqkit \\\\\n        pair \\\\\n        -1 ${reads[0]} \\\\\n        -2 ${reads[1]} \\\\\n        $args \\\\\n        --threads $task.cpus\n\n    # gzip fastq\n    find . -maxdepth 1 -name \"*.fastq\" -exec gzip {} \\;\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        seqkit: \\$( seqkit | sed '3!d; s/Version: //' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 17,
        "language_script": "bash",
        "tools": [
            "PAIR"
        ],
        "tools_url": [
            "https://bio.tools/pair"
        ],
        "tools_dico": [
            {
                "name": "PAIR",
                "uri": "https://bio.tools/pair",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0128",
                            "term": "Protein interactions"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Model organisms"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3293",
                            "term": "Phylogenetics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0602",
                            "term": "Molecular interactions, pathways and networks"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Organisms"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3083",
                                    "term": "Pathway or network visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3439",
                                    "term": "Pathway or network prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0277",
                                    "term": "Pathway or network comparison"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2492",
                                    "term": "Protein interaction prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0276",
                                    "term": "Protein interaction network analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2492",
                                    "term": "Protein-protein interaction detection"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Experimentally reported molecular interactions and predicted interactions in A. thaliana. It predicts interactions by a fine-tuned support vector machine model that integrates indirect evidences for interaction, such as gene co-expressions, domain interactions, shared GO annotations, co-localizations, phylogenetic profile similarities and homologous interactions in other organisms. It features a user-friendly query interface, providing rich annotation on the relationships between two proteins.",
                "homepage": "http://www.cls.zju.edu.cn/pair/"
            }
        ],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::seqkit=2.1.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/seqkit:2.1.0--h9ee0642_0': 'quay.io/biocontainers/seqkit:2.1.0--h9ee0642_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "HOMER_MAKETAGDIRECTORY": {
        "name_process": "HOMER_MAKETAGDIRECTORY",
        "string_process": "\nprocess HOMER_MAKETAGDIRECTORY {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::homer=4.11 bioconda::samtools=1.11 conda-forge::r-base=4.0.2 bioconda::bioconductor-deseq2=1.30.0 bioconda::bioconductor-edger=3.32.0 anaconda::perl=5.26.2\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mulled-v2-29293b111ffe5b4c1d1e14c711264aaed6b97b4a:594338b771cacf1623bd27772b5e12825f8835f2-0' :\n        'quay.io/biocontainers/mulled-v2-29293b111ffe5b4c1d1e14c711264aaed6b97b4a:594338b771cacf1623bd27772b5e12825f8835f2-0' }\"\n\n    input:\n    tuple val(meta), path(bam)\n    path fasta\n\n    output:\n    tuple val(meta), path(\"*_tagdir\")            , emit: tagdir\n    tuple val(meta), path(\"*_tagdir/tagInfo.txt\"), emit: taginfo\n    path  \"versions.yml\"                         , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    makeTagDirectory \\\\\n        ${prefix}_tagdir \\\\\n        -genome $fasta \\\\\n        $args \\\\\n        $bam\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        homer: $VERSION\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 37,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    makeTagDirectory \\\\\n        ${prefix}_tagdir \\\\\n        -genome $fasta \\\\\n        $args \\\\\n        $bam\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        homer: $VERSION\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "bam",
            "fasta"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::homer=4.11 bioconda::samtools=1.11 conda-forge::r-base=4.0.2 bioconda::bioconductor-deseq2=1.30.0 bioconda::bioconductor-edger=3.32.0 anaconda::perl=5.26.2\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mulled-v2-29293b111ffe5b4c1d1e14c711264aaed6b97b4a:594338b771cacf1623bd27772b5e12825f8835f2-0' : 'quay.io/biocontainers/mulled-v2-29293b111ffe5b4c1d1e14c711264aaed6b97b4a:594338b771cacf1623bd27772b5e12825f8835f2-0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "YARA_INDEX": {
        "name_process": "YARA_INDEX",
        "string_process": "process YARA_INDEX {\n    tag \"$fasta\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::yara=1.0.2\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/yara:1.0.2--2' :\n        'quay.io/biocontainers/yara:1.0.2--2' }\"\n\n    input:\n    path fasta\n\n    output:\n    path \"yara\"        , emit: index\n    path \"versions.yml\", emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n\n    \"\"\"\n    mkdir yara\n\n    yara_indexer \\\\\n        $fasta \\\\\n        -o \"yara\"\n\n    mv *.{lf,rid,sa,txt}.* yara\n    cp $fasta yara/yara.fasta\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        yara: \\$(echo \\$(yara_indexer --version 2>&1) | sed 's/^.*yara_indexer version: //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 36,
        "string_script": "    def args = task.ext.args ?: ''\n\n    \"\"\"\n    mkdir yara\n\n    yara_indexer \\\\\n        $fasta \\\\\n        -o \"yara\"\n\n    mv *.{lf,rid,sa,txt}.* yara\n    cp $fasta yara/yara.fasta\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        yara: \\$(echo \\$(yara_indexer --version 2>&1) | sed 's/^.*yara_indexer version: //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fasta"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$fasta\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::yara=1.0.2\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/yara:1.0.2--2' : 'quay.io/biocontainers/yara:1.0.2--2' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "SCOARY": {
        "name_process": "SCOARY",
        "string_process": "process SCOARY {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::scoary=1.6.16\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/scoary:1.6.16--py_2' :\n        'quay.io/biocontainers/scoary:1.6.16--py_2' }\"\n\n    input:\n    tuple val(meta), path(genes), path(traits)\n    path(tree)\n\n    output:\n    tuple val(meta), path(\"*.csv\"), emit: csv\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def newick_tree = tree ? \"-n ${tree}\" : \"\"\n    \"\"\"\n    scoary \\\\\n        $args \\\\\n        --no-time \\\\\n        --threads $task.cpus \\\\\n        --traits $traits \\\\\n        --genes $genes\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        scoary: \\$( scoary --version 2>&1 )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 36,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def newick_tree = tree ? \"-n ${tree}\" : \"\"\n    \"\"\"\n    scoary \\\\\n        $args \\\\\n        --no-time \\\\\n        --threads $task.cpus \\\\\n        --traits $traits \\\\\n        --genes $genes\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        scoary: \\$( scoary --version 2>&1 )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [
            "Scoary"
        ],
        "tools_url": [
            "https://bio.tools/scoary"
        ],
        "tools_dico": [
            {
                "name": "Scoary",
                "uri": "https://bio.tools/scoary",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype and phenotype"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0085",
                            "term": "Functional genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Model organisms"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype and phenotype resources"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype-phenotype analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype-phenotype"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Organisms"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2945",
                                    "term": "Analysis"
                                }
                            ],
                            []
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0916",
                                "term": "Gene report"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_1669",
                                "term": "P-value"
                            }
                        ]
                    }
                ],
                "description": "Pan-genome wide association studies and  is designed to take the gene_presence_absence.csv file from Roary as well as a traits file created by the user and calculate the assocations between all genes in the accessory genome (all genes that are present in i genomes where 1 < i < N) and the traits. It reports a list of genes sorted by strength of association per trait.",
                "homepage": "https://github.com/AdmiralenOla/Scoary"
            }
        ],
        "inputs": [
            "meta",
            "genes",
            "traits",
            "tree"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::scoary=1.6.16\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/scoary:1.6.16--py_2' : 'quay.io/biocontainers/scoary:1.6.16--py_2' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "BAMUTIL_TRIMBAM": {
        "name_process": "BAMUTIL_TRIMBAM",
        "string_process": "process BAMUTIL_TRIMBAM {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::bamutil=1.0.15\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bamutil:1.0.15--h2e03b76_1' :\n        'quay.io/biocontainers/bamutil:1.0.15--h2e03b76_1' }\"\n\n    input:\n    tuple val(meta), path(bam), val(trim_left), val(trim_right)\n\n    output:\n    tuple val(meta), path(\"*.bam\"), emit: bam\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    bam \\\\\n        trimBam \\\\\n        $bam \\\\\n        ${prefix}.bam \\\\\n        $args \\\\\n        -L $trim_left \\\\\n        -R $trim_right\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bamutil: \\$( echo \\$( bam trimBam 2>&1 ) | sed 's/^Version: //;s/;.*//' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    bam \\\\\n        trimBam \\\\\n        $bam \\\\\n        ${prefix}.bam \\\\\n        $args \\\\\n        -L $trim_left \\\\\n        -R $trim_right\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bamutil: \\$( echo \\$( bam trimBam 2>&1 ) | sed 's/^Version: //;s/;.*//' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [
            "BaMM"
        ],
        "tools_url": [
            "https://bio.tools/bamm"
        ],
        "tools_dico": [
            {
                "name": "BaMM",
                "uri": "https://bio.tools/bamm",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3169",
                            "term": "ChIP-seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0160",
                            "term": "Sequence sites, features and motifs"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3169",
                            "term": "Chip-sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3169",
                            "term": "Chip Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3169",
                            "term": "ChIP-sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3169",
                            "term": "Chip sequencing"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0239",
                                    "term": "Sequence motif recognition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3501",
                                    "term": "Enrichment analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0238",
                                    "term": "Sequence motif discovery"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0239",
                                    "term": "Motif scanning"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0239",
                                    "term": "Sequence signature recognition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0239",
                                    "term": "Sequence signature detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3501",
                                    "term": "Enrichment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3501",
                                    "term": "Over-representation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0238",
                                    "term": "Motif discovery"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "de-novo motif discovery and regulatory sequence analysis.\nDiscovery of regulatory motifs with higher-order Bayesian Markov Models (BaMMs)",
                "homepage": "https://bammmotif.mpibpc.mpg.de"
            }
        ],
        "inputs": [
            "meta",
            "trim_left",
            "trim_right",
            "bam"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::bamutil=1.0.15\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bamutil:1.0.15--h2e03b76_1' : 'quay.io/biocontainers/bamutil:1.0.15--h2e03b76_1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "TABIX_BGZIP": {
        "name_process": "TABIX_BGZIP",
        "string_process": "process TABIX_BGZIP {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? 'bioconda::tabix=1.11' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/tabix:1.11--hdfd78af_0' :\n        'quay.io/biocontainers/tabix:1.11--hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(input)\n\n    output:\n    tuple val(meta), path(\"${prefix}*\"), emit: output\n    path  \"versions.yml\"               , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n    in_bgzip = input.toString().endsWith(\".gz\")\n    command1 = in_bgzip ? '-d' : '-c'\n    command2 = in_bgzip ? ''   : \" > ${prefix}.${input.getExtension()}.gz\"\n    \"\"\"\n    bgzip $command1 $args -@${task.cpus} $input $command2\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        tabix: \\$(echo \\$(tabix -h 2>&1) | sed 's/^.*Version: //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "    def args = task.ext.args ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n    in_bgzip = input.toString().endsWith(\".gz\")\n    command1 = in_bgzip ? '-d' : '-c'\n    command2 = in_bgzip ? ''   : \" > ${prefix}.${input.getExtension()}.gz\"\n    \"\"\"\n    bgzip $command1 $args -@${task.cpus} $input $command2\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        tabix: \\$(echo \\$(tabix -h 2>&1) | sed 's/^.*Version: //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "input"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? 'bioconda::tabix=1.11' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/tabix:1.11--hdfd78af_0' : 'quay.io/biocontainers/tabix:1.11--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "ENSEMBLVEP": {
        "name_process": "ENSEMBLVEP",
        "string_process": "process ENSEMBLVEP {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::ensembl-vep=104.3\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/ensembl-vep:104.3--pl5262h4a94de4_0' :\n        'quay.io/biocontainers/ensembl-vep:104.3--pl5262h4a94de4_0' }\"\n\n    input:\n    tuple val(meta), path(vcf)\n    val   genome\n    val   species\n    val   cache_version\n    path  cache\n    path  extra_files\n\n    output:\n    tuple val(meta), path(\"*.ann.vcf\"), emit: vcf\n    path \"*.summary.html\"             , emit: report\n    path \"versions.yml\"               , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def dir_cache = cache ? \"\\${PWD}/${cache}\" : \"/.vep\"\n    \"\"\"\n    mkdir $prefix\n\n    vep \\\\\n        -i $vcf \\\\\n        -o ${prefix}.ann.vcf \\\\\n        $args \\\\\n        --assembly $genome \\\\\n        --species $species \\\\\n        --cache \\\\\n        --cache_version $cache_version \\\\\n        --dir_cache $dir_cache \\\\\n        --fork $task.cpus \\\\\n        --vcf \\\\\n        --stats_file ${prefix}.summary.html\n\n    rm -rf $prefix\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        ensemblvep: \\$( echo \\$(vep --help 2>&1) | sed 's/^.*Versions:.*ensembl-vep : //;s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 51,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def dir_cache = cache ? \"\\${PWD}/${cache}\" : \"/.vep\"\n    \"\"\"\n    mkdir $prefix\n\n    vep \\\\\n        -i $vcf \\\\\n        -o ${prefix}.ann.vcf \\\\\n        $args \\\\\n        --assembly $genome \\\\\n        --species $species \\\\\n        --cache \\\\\n        --cache_version $cache_version \\\\\n        --dir_cache $dir_cache \\\\\n        --fork $task.cpus \\\\\n        --vcf \\\\\n        --stats_file ${prefix}.summary.html\n\n    rm -rf $prefix\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        ensemblvep: \\$( echo \\$(vep --help 2>&1) | sed 's/^.*Versions:.*ensembl-vep : //;s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 25,
        "language_script": "bash",
        "tools": [
            "fivepseq"
        ],
        "tools_url": [
            "https://bio.tools/fivepseq"
        ],
        "tools_dico": [
            {
                "name": "fivepseq",
                "uri": "https://bio.tools/fivepseq",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "Gene transcripts"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "mRNA features"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3563",
                                    "term": "RNA-seq read count analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantitation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Fivepseq is a software package for analysis of 5prime endpoints distribution in RNA sequencing datasets. This is particularly useful for techniques that capture 5prime  monophosphorylated RNAs, such as 5PSeq, PARE-seq or GMUC. It may also be useful for ribosome profiling datasets and alike.",
                "homepage": "http://pelechanolab.com/software/fivepseq"
            }
        ],
        "inputs": [
            "meta",
            "vcf",
            "genome",
            "species",
            "cache_version",
            "cache",
            "extra_files"
        ],
        "nb_inputs": 7,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::ensembl-vep=104.3\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/ensembl-vep:104.3--pl5262h4a94de4_0' : 'quay.io/biocontainers/ensembl-vep:104.3--pl5262h4a94de4_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "HAMRONIZATION_DEEPARG": {
        "name_process": "HAMRONIZATION_DEEPARG",
        "string_process": "process HAMRONIZATION_DEEPARG {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::hamronization=1.0.3\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/hamronization:1.0.3--py_0':\n        'quay.io/biocontainers/hamronization:1.0.3--py_0' }\"\n\n    input:\n    tuple val(meta), path(report)\n    val(format)\n    val(software_version)\n    val(reference_db_version)\n\n    output:\n    tuple val(meta), path(\"*.json\"), optional: true, emit: json\n    tuple val(meta), path(\"*.tsv\") , optional: true, emit: tsv\n    path \"versions.yml\"            , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    hamronize \\\\\n        deeparg \\\\\n        ${report} \\\\\n        $args \\\\\n        --format ${format} \\\\\n        --analysis_software_version ${software_version} \\\\\n        --reference_database_version ${reference_db_version} \\\\\n        --input_file_name ${prefix} \\\\\n        > ${prefix}.${format}\n\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        hamronization: \\$(echo \\$(hamronize --version 2>&1) | cut -f 2 -d ' ' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 42,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    hamronize \\\\\n        deeparg \\\\\n        ${report} \\\\\n        $args \\\\\n        --format ${format} \\\\\n        --analysis_software_version ${software_version} \\\\\n        --reference_database_version ${reference_db_version} \\\\\n        --input_file_name ${prefix} \\\\\n        > ${prefix}.${format}\n\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        hamronization: \\$(echo \\$(hamronize --version 2>&1) | cut -f 2 -d ' ' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "report",
            "format",
            "software_version",
            "reference_db_version"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::hamronization=1.0.3\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/hamronization:1.0.3--py_0': 'quay.io/biocontainers/hamronization:1.0.3--py_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "STRINGTIE_STRINGTIE": {
        "name_process": "STRINGTIE_STRINGTIE",
        "string_process": "process STRINGTIE_STRINGTIE {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::stringtie=2.2.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/stringtie:2.2.1--hecb563c_2' :\n        'quay.io/biocontainers/stringtie:2.2.1--hecb563c_2' }\"\n\n    input:\n    tuple val(meta), path(bam)\n    path  gtf\n\n    output:\n    tuple val(meta), path(\"*.coverage.gtf\")   , emit: coverage_gtf\n    tuple val(meta), path(\"*.transcripts.gtf\"), emit: transcript_gtf\n    tuple val(meta), path(\"*.abundance.txt\")  , emit: abundance\n    tuple val(meta), path(\"*.ballgown\")       , emit: ballgown\n    path  \"versions.yml\"                      , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n    def strandedness = ''\n    if (meta.strandedness == 'forward') {\n        strandedness = '--fr'\n    } else if (meta.strandedness == 'reverse') {\n        strandedness = '--rf'\n    }\n    \"\"\"\n    stringtie \\\\\n        $bam \\\\\n        $strandedness \\\\\n        -G $gtf \\\\\n        -o ${prefix}.transcripts.gtf \\\\\n        -A ${prefix}.gene.abundance.txt \\\\\n        -C ${prefix}.coverage.gtf \\\\\n        -b ${prefix}.ballgown \\\\\n        -p $task.cpus \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        stringtie: \\$(stringtie --version 2>&1)\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 49,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n    def strandedness = ''\n    if (meta.strandedness == 'forward') {\n        strandedness = '--fr'\n    } else if (meta.strandedness == 'reverse') {\n        strandedness = '--rf'\n    }\n    \"\"\"\n    stringtie \\\\\n        $bam \\\\\n        $strandedness \\\\\n        -G $gtf \\\\\n        -o ${prefix}.transcripts.gtf \\\\\n        -A ${prefix}.gene.abundance.txt \\\\\n        -C ${prefix}.coverage.gtf \\\\\n        -b ${prefix}.ballgown \\\\\n        -p $task.cpus \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        stringtie: \\$(stringtie --version 2>&1)\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 25,
        "language_script": "bash",
        "tools": [
            "StringTie"
        ],
        "tools_url": [
            "https://bio.tools/stringtie"
        ],
        "tools_dico": [
            {
                "name": "StringTie",
                "uri": "https://bio.tools/stringtie",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3680",
                                    "term": "RNA-Seq analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3258",
                                    "term": "Transcriptome assembly"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Fast and highly efficient assembler of RNA-Seq alignments into potential transcripts. It uses a novel network flow algorithm as well as an optional de novo assembly step to assemble and quantitate full-length transcripts representing multiple splice variants for each gene locus.",
                "homepage": "https://ccb.jhu.edu/software/stringtie/"
            }
        ],
        "inputs": [
            "meta",
            "bam",
            "gtf"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::stringtie=2.2.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/stringtie:2.2.1--hecb563c_2' : 'quay.io/biocontainers/stringtie:2.2.1--hecb563c_2' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "GRAPHMAP2_ALIGN": {
        "name_process": "GRAPHMAP2_ALIGN",
        "string_process": "process GRAPHMAP2_ALIGN {\n    tag \"$meta.id\"\n    label 'process_medium'\n    tag \"$meta.id\"\n\n    conda (params.enable_conda ? \"bioconda::graphmap=0.6.3\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/graphmap:0.6.3--he513fc3_0' :\n        'quay.io/biocontainers/graphmap:0.6.3--he513fc3_0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n    path  fasta\n    path  index\n\n    output:\n    tuple val(meta), path(\"*.sam\"), emit: sam\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    graphmap2 \\\\\n        align \\\\\n        -t $task.cpus \\\\\n        -r $fasta \\\\\n        -i $index \\\\\n        -d $reads \\\\\n        -o ${prefix}.sam \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        graphmap2: \\$(echo \\$(graphmap2 align 2>&1) | sed 's/^.*Version: v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 39,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    graphmap2 \\\\\n        align \\\\\n        -t $task.cpus \\\\\n        -r $fasta \\\\\n        -i $index \\\\\n        -d $reads \\\\\n        -o ${prefix}.sam \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        graphmap2: \\$(echo \\$(graphmap2 align 2>&1) | sed 's/^.*Version: v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [
            "Graphmap2",
            "ALIGN"
        ],
        "tools_url": [
            "https://bio.tools/Graphmap2",
            "https://bio.tools/align"
        ],
        "tools_dico": [
            {
                "name": "Graphmap2",
                "uri": "https://bio.tools/Graphmap2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3320",
                            "term": "RNA splicing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "Gene transcripts"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3320",
                            "term": "Alternative splicing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "mRNA features"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Sequence trimming"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0526",
                                    "term": "EST assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Trimming"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0526",
                                    "term": "Sequence assembly (EST assembly)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Splice-aware RNA-seq mapper for long reads | GraphMap - A highly sensitive and accurate mapper for long, error-prone reads http://www.nature.com/ncomms/2016/160415/ncomms11307/full/ncomms11307.html https://www.biorxiv.org/content/10.1101/720458v1 | GraphMap2 - A highly sensitive and accurate mapper for long, error-prone reads | GMAP: A Genomic Mapping and Alignment Program for mRNA and EST Sequences, and | GSNAP: Genomic Short-read Nucleotide Alignment Program | Links are provided below in parentheses for users who wish to download the files with a command-line tool, like wget",
                "homepage": "https://github.com/lbcb-sci/graphmap2"
            },
            {
                "name": "ALIGN",
                "uri": "https://bio.tools/align",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0300",
                                    "term": "Sequence profile alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0495",
                                    "term": "Local alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0496",
                                    "term": "Global alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0495",
                                    "term": "Local sequence alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0495",
                                    "term": "Sequence alignment (local)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0496",
                                    "term": "Global sequence alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0496",
                                    "term": "Sequence alignment (global)"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_1460",
                                "term": "Protein structure"
                            },
                            {
                                "uri": "http://edamontology.org/data_2976",
                                "term": "Protein sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_1384",
                                "term": "Protein sequence alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_0869",
                                "term": "Sequence-profile alignment"
                            }
                        ]
                    }
                ],
                "description": "Pairwise alignment tool.",
                "homepage": "http://protein.bio.unipd.it/align2"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "fasta",
            "index"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "tag \"$meta.id\"",
            "conda (params.enable_conda ? \"bioconda::graphmap=0.6.3\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/graphmap:0.6.3--he513fc3_0' : 'quay.io/biocontainers/graphmap:0.6.3--he513fc3_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "RSEQC_READDUPLICATION": {
        "name_process": "RSEQC_READDUPLICATION",
        "string_process": "process RSEQC_READDUPLICATION {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::rseqc=3.0.1 'conda-forge::r-base>=3.5'\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/rseqc:3.0.1--py37h516909a_1' :\n        'quay.io/biocontainers/rseqc:3.0.1--py37h516909a_1' }\"\n\n    input:\n    tuple val(meta), path(bam)\n\n    output:\n    tuple val(meta), path(\"*seq.DupRate.xls\"), emit: seq_xls\n    tuple val(meta), path(\"*pos.DupRate.xls\"), emit: pos_xls\n    tuple val(meta), path(\"*.pdf\")           , emit: pdf\n    tuple val(meta), path(\"*.r\")             , emit: rscript\n    path  \"versions.yml\"                     , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    read_duplication.py \\\\\n        -i $bam \\\\\n        -o $prefix \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        rseqc: \\$(read_duplication.py --version | sed -e \"s/read_duplication.py //g\")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    read_duplication.py \\\\\n        -i $bam \\\\\n        -o $prefix \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        rseqc: \\$(read_duplication.py --version | sed -e \"s/read_duplication.py //g\")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "bam"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::rseqc=3.0.1 'conda-forge::r-base>=3.5'\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/rseqc:3.0.1--py37h516909a_1' : 'quay.io/biocontainers/rseqc:3.0.1--py37h516909a_1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "BBMAP_ALIGN": {
        "name_process": "BBMAP_ALIGN",
        "string_process": "process BBMAP_ALIGN {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::bbmap=38.92 bioconda::samtools=1.15.1 pigz=2.6\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mulled-v2-008daec56b7aaf3f162d7866758142b9f889d690:2fee0e0facec1dfe32a1ee4aa516aef7d0296ebf-0' :\n        'quay.io/biocontainers/mulled-v2-008daec56b7aaf3f162d7866758142b9f889d690:2fee0e0facec1dfe32a1ee4aa516aef7d0296ebf-0' }\"\n\n    input:\n    tuple val(meta), path(fastq)\n    path ref\n\n    output:\n    tuple val(meta), path(\"*.bam\"), emit: bam\n    tuple val(meta), path(\"*.log\"), emit: log\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n    input = meta.single_end ? \"in=${fastq}\" : \"in=${fastq[0]} in2=${fastq[1]}\"\n\n                                                                                               \n                                                                                                \n                           \n    if ( ref.isDirectory() ) {\n        if ( ref ==~ /(.\\/)?ref\\/?/ ) {\n            db = ''\n        } else {\n            db = \"path=${ref}\"\n        }\n    } else {\n        db = \"ref=${ref}\"\n    }\n\n    \"\"\"\n    bbmap.sh \\\\\n        $db \\\\\n        $input \\\\\n        out=${prefix}.bam \\\\\n        $args \\\\\n        threads=$task.cpus \\\\\n        -Xmx${task.memory.toGiga()}g \\\\\n        &> ${prefix}.bbmap.log\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bbmap: \\$(bbversion.sh)\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n        pigz: \\$( pigz --version 2>&1 | sed 's/pigz //g' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 56,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n    input = meta.single_end ? \"in=${fastq}\" : \"in=${fastq[0]} in2=${fastq[1]}\"\n\n                                                                                               \n                                                                                                \n                           \n    if ( ref.isDirectory() ) {\n        if ( ref ==~ /(.\\/)?ref\\/?/ ) {\n            db = ''\n        } else {\n            db = \"path=${ref}\"\n        }\n    } else {\n        db = \"ref=${ref}\"\n    }\n\n    \"\"\"\n    bbmap.sh \\\\\n        $db \\\\\n        $input \\\\\n        out=${prefix}.bam \\\\\n        $args \\\\\n        threads=$task.cpus \\\\\n        -Xmx${task.memory.toGiga()}g \\\\\n        &> ${prefix}.bbmap.log\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bbmap: \\$(bbversion.sh)\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n        pigz: \\$( pigz --version 2>&1 | sed 's/pigz //g' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 34,
        "language_script": "bash",
        "tools": [
            "wossinput",
            "ODB"
        ],
        "tools_url": [
            "https://bio.tools/wossinput",
            "https://bio.tools/odb"
        ],
        "tools_dico": [
            {
                "name": "wossinput",
                "uri": "https://bio.tools/wossinput",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0219",
                            "term": "Data submission, annotation and curation"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0958",
                                "term": "Tool metadata"
                            }
                        ]
                    }
                ],
                "description": "Find programs by EDAM input data.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/wossinput.html"
            },
            {
                "name": "ODB",
                "uri": "https://bio.tools/odb",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0114",
                            "term": "Gene structure"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Model organisms"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3489",
                            "term": "Database management"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0114",
                            "term": "Gene features"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Organisms"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3489",
                            "term": "Database administration"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0435",
                                    "term": "Operon prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3501",
                                    "term": "Enrichment analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3432",
                                    "term": "Clustering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0579",
                                    "term": "Operon drawing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0308",
                                    "term": "PCR primer design"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3501",
                                    "term": "Enrichment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3501",
                                    "term": "Over-representation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0579",
                                    "term": "Operon rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0308",
                                    "term": "PCR primer prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0308",
                                    "term": "Primer design"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Contains all known and conserved operons in completely sequenced genomes.",
                "homepage": "http://operondb.jp/"
            }
        ],
        "inputs": [
            "meta",
            "fastq",
            "ref"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::bbmap=38.92 bioconda::samtools=1.15.1 pigz=2.6\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mulled-v2-008daec56b7aaf3f162d7866758142b9f889d690:2fee0e0facec1dfe32a1ee4aa516aef7d0296ebf-0' : 'quay.io/biocontainers/mulled-v2-008daec56b7aaf3f162d7866758142b9f889d690:2fee0e0facec1dfe32a1ee4aa516aef7d0296ebf-0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "LAST_LASTAL": {
        "name_process": "LAST_LASTAL",
        "string_process": "process LAST_LASTAL {\n    tag \"$meta.id\"\n    label 'process_high'\n\n    conda (params.enable_conda ? 'bioconda::last=1250' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/last:1250--h2e03b76_0' :\n        'quay.io/biocontainers/last:1250--h2e03b76_0' }\"\n\n    input:\n    tuple val(meta), path(fastx), path (param_file)\n    path index\n\n    output:\n    tuple val(meta), path(\"*.maf.gz\"), emit: maf\n    path \"versions.yml\"              , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def trained_params = param_file ? \"-p ${param_file}\"  : ''\n    \"\"\"\n    INDEX_NAME=\\$(basename \\$(ls $index/*.des) .des)\n    lastal \\\\\n        $trained_params \\\\\n        $args \\\\\n        -P $task.cpus \\\\\n        ${index}/\\$INDEX_NAME \\\\\n        $fastx \\\\\n        | gzip --no-name > ${prefix}.\\$INDEX_NAME.maf.gz\n    # gzip needs --no-name otherwise it puts a timestamp in the file,\n    # which makes its checksum non-reproducible.\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        last: \\$(lastal --version 2>&1 | sed 's/lastal //')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 40,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def trained_params = param_file ? \"-p ${param_file}\"  : ''\n    \"\"\"\n    INDEX_NAME=\\$(basename \\$(ls $index/*.des) .des)\n    lastal \\\\\n        $trained_params \\\\\n        $args \\\\\n        -P $task.cpus \\\\\n        ${index}/\\$INDEX_NAME \\\\\n        $fastx \\\\\n        | gzip --no-name > ${prefix}.\\$INDEX_NAME.maf.gz\n    # gzip needs --no-name otherwise it puts a timestamp in the file,\n    # which makes its checksum non-reproducible.\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        last: \\$(lastal --version 2>&1 | sed 's/lastal //')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [
            "mblastall"
        ],
        "tools_url": [
            "https://bio.tools/mblastall"
        ],
        "tools_dico": [
            {
                "name": "mblastall",
                "uri": "https://bio.tools/mblastall",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0338",
                                    "term": "Sequence database search"
                                }
                            ],
                            []
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0857",
                                "term": "Sequence search results"
                            }
                        ]
                    }
                ],
                "description": "Search nucleotide database with nucleotide query sequence(s).",
                "homepage": "https://bioweb.pasteur.fr/packages/pack@ptools@0.99d"
            }
        ],
        "inputs": [
            "meta",
            "fastx",
            "param_file",
            "index"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "conda (params.enable_conda ? 'bioconda::last=1250' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/last:1250--h2e03b76_0' : 'quay.io/biocontainers/last:1250--h2e03b76_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "TIDDIT_COV": {
        "name_process": "TIDDIT_COV",
        "string_process": "process TIDDIT_COV {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::tiddit=2.12.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/tiddit:2.12.1--py38h1773678_0' :\n        'quay.io/biocontainers/tiddit:2.12.1--py38h1773678_0' }\"\n\n    input:\n    tuple val(meta), path(bam)\n    path  fasta\n\n    output:\n    tuple val(meta), path(\"*.tab\"), optional: true, emit: cov\n    tuple val(meta), path(\"*.wig\"), optional: true, emit: wig\n    path  \"versions.yml\"          , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def reference = fasta ? \"--ref $fasta\" : \"\"\n    \"\"\"\n    tiddit \\\\\n        --cov \\\\\n        -o $prefix \\\\\n        $args \\\\\n        --bam $bam \\\\\n        $reference\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        tiddit: \\$(echo \\$(tiddit 2>&1) | sed 's/^.*TIDDIT-//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.wig\n    touch ${prefix}.tab\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        tiddit: \\$(echo \\$(tiddit 2>&1) | sed 's/^.*TIDDIT-//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 49,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def reference = fasta ? \"--ref $fasta\" : \"\"\n    \"\"\"\n    tiddit \\\\\n        --cov \\\\\n        -o $prefix \\\\\n        $args \\\\\n        --bam $bam \\\\\n        $reference\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        tiddit: \\$(echo \\$(tiddit 2>&1) | sed 's/^.*TIDDIT-//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [
            "TIDDIT"
        ],
        "tools_url": [
            "https://bio.tools/tiddit"
        ],
        "tools_dico": [
            {
                "name": "TIDDIT",
                "uri": "https://bio.tools/tiddit",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "Structural variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Exome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Whole genome sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "Genomic structural variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "DNA structural variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Targeted exome capture"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Exome analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "WES"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Exome"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Whole exome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Exome capture"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "WGS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3228",
                                    "term": "Structural variation detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3225",
                                    "term": "Variant classification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3228",
                                    "term": "Structural variation discovery"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_1383",
                                "term": "Nucleic acid sequence alignment"
                            }
                        ],
                        "output": []
                    }
                ],
                "description": "Efficient and comprehensive structural variant caller for massive parallel sequencing data. Identify chromosomal rearrangements using Mate Pair or Paired End sequencing data. It allows identification of intra and inter-chromosomal translocations, deletions, tandem-duplications and inversions, using supplementary alignments as well as discordant pairs.",
                "homepage": "https://github.com/J35P312/TIDDIT"
            }
        ],
        "inputs": [
            "meta",
            "bam",
            "fasta"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::tiddit=2.12.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/tiddit:2.12.1--py38h1773678_0' : 'quay.io/biocontainers/tiddit:2.12.1--py38h1773678_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.wig\n    touch ${prefix}.tab\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        tiddit: \\$(echo \\$(tiddit 2>&1) | sed 's/^.*TIDDIT-//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\""
    },
    "BCFTOOLS_ISEC": {
        "name_process": "BCFTOOLS_ISEC",
        "string_process": "process BCFTOOLS_ISEC {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? 'bioconda::bcftools=1.14' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bcftools:1.14--h88f3f91_0' :\n        'quay.io/biocontainers/bcftools:1.14--h88f3f91_0' }\"\n\n    input:\n    tuple val(meta), path(vcfs), path(tbis)\n\n    output:\n    tuple val(meta), path(\"${prefix}\"), emit: results\n    path  \"versions.yml\"              , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args   ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    bcftools isec  \\\\\n        $args \\\\\n        -p $prefix \\\\\n        *.vcf.gz\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bcftools: \\$(bcftools --version 2>&1 | head -n1 | sed 's/^.*bcftools //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "    def args = task.ext.args   ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    bcftools isec  \\\\\n        $args \\\\\n        -p $prefix \\\\\n        *.vcf.gz\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bcftools: \\$(bcftools --version 2>&1 | head -n1 | sed 's/^.*bcftools //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "BCFtools"
        ],
        "tools_url": [
            "https://bio.tools/bcftools"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "vcfs",
            "tbis"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? 'bioconda::bcftools=1.14' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bcftools:1.14--h88f3f91_0' : 'quay.io/biocontainers/bcftools:1.14--h88f3f91_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "SEQTK_SEQ": {
        "name_process": "SEQTK_SEQ",
        "string_process": "process SEQTK_SEQ {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::seqtk=1.3\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/seqtk:1.3--h5bf99c6_3' :\n        'quay.io/biocontainers/seqtk:1.3--h5bf99c6_3' }\"\n\n    input:\n    tuple val(meta), path(fastx)\n\n    output:\n    tuple val(meta), path(\"*.gz\")     , emit: fastx\n    path \"versions.yml\"               , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n    def extension = \"fastq\"\n    if (\"$fastx\" ==~ /.+\\.fasta|.+\\.fasta.gz|.+\\.fa|.+\\.fa.gz|.+\\.fas|.+\\.fas.gz|.+\\.fna|.+\\.fna.gz/ || \"$args\" ==~ /\\-[aA]/ ) {\n        extension = \"fasta\"\n    }\n    \"\"\"\n    seqtk \\\\\n        seq \\\\\n        $args \\\\\n        $fastx | \\\\\n        gzip -c > ${prefix}.seqtk-seq.${extension}.gz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        seqtk: \\$(echo \\$(seqtk 2>&1) | sed 's/^.*Version: //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 38,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n    def extension = \"fastq\"\n    if (\"$fastx\" ==~ /.+\\.fasta|.+\\.fasta.gz|.+\\.fa|.+\\.fa.gz|.+\\.fas|.+\\.fas.gz|.+\\.fna|.+\\.fna.gz/ || \"$args\" ==~ /\\-[aA]/ ) {\n        extension = \"fasta\"\n    }\n    \"\"\"\n    seqtk \\\\\n        seq \\\\\n        $args \\\\\n        $fastx | \\\\\n        gzip -c > ${prefix}.seqtk-seq.${extension}.gz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        seqtk: \\$(echo \\$(seqtk 2>&1) | sed 's/^.*Version: //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [
            "seqtk",
            "rSeq"
        ],
        "tools_url": [
            "https://bio.tools/seqtk",
            "https://bio.tools/rseq"
        ],
        "tools_dico": [
            {
                "name": "seqtk",
                "uri": "https://bio.tools/seqtk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2121",
                                    "term": "Sequence file editing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A tool for processing sequences in the FASTA or FASTQ format. It parses both FASTA and FASTQ files which can also be optionally compressed by gzip.",
                "homepage": "https://github.com/lh3/seqtk"
            },
            {
                "name": "rSeq",
                "uri": "https://bio.tools/rseq",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0099",
                            "term": "RNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3680",
                                    "term": "RNA-Seq analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2871",
                                    "term": "Sequence tagged site (STS) mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0230",
                                    "term": "Sequence generation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2871",
                                    "term": "Sequence mapping"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Set of tools for RNA-Seq data analysis. It consists of programs that deal with many aspects of RNA-Seq data analysis, such as reference sequence generation, sequence mapping, gene and isoform expressions (RPKMs) computation, etc.",
                "homepage": "http://www-personal.umich.edu/~jianghui/rseq/"
            }
        ],
        "inputs": [
            "meta",
            "fastx"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::seqtk=1.3\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/seqtk:1.3--h5bf99c6_3' : 'quay.io/biocontainers/seqtk:1.3--h5bf99c6_3' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "STAGE_FASTQ_DIR": {
        "name_process": "STAGE_FASTQ_DIR",
        "string_process": "\nprocess STAGE_FASTQ_DIR {\n    input:\n    tuple val(meta), path(fastq_file)\n\n    output:\n    tuple val(meta), path('fastq'), emit: fastq_dir\n\n    script:\n    \"\"\"\n    mkdir fastq\n    mv ${fastq_file} fastq\n    \"\"\"\n}",
        "nb_lignes_process": 12,
        "string_script": "    \"\"\"\n    mkdir fastq\n    mv ${fastq_file} fastq\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "fastq_file"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "KALLISTOBUSTOOLS_REF": {
        "name_process": "KALLISTOBUSTOOLS_REF",
        "string_process": "process KALLISTOBUSTOOLS_REF {\n    tag \"$fasta\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? 'bioconda::kb-python=0.26.3' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/kb-python:0.26.3--pyhdfd78af_0' :\n        'quay.io/biocontainers/kb-python:0.26.3--pyhdfd78af_0' }\"\n\n    input:\n    path fasta\n    path gtf\n    val  workflow_mode\n\n    output:\n    path \"versions.yml\"   , emit: versions\n    path \"kb_ref_out.idx\" , emit: index\n    path \"t2g.txt\"        , emit: t2g\n    path \"cdna.fa\"        , emit: cdna\n    path \"intron.fa\"      , optional:true, emit: intron\n    path \"cdna_t2c.txt\"   , optional:true, emit: cdna_t2c\n    path \"intron_t2c.txt\" , optional:true, emit: intron_t2c\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    if (workflow_mode == \"standard\") {\n        \"\"\"\n        kb \\\\\n            ref \\\\\n            -i kb_ref_out.idx \\\\\n            -g t2g.txt \\\\\n            -f1 cdna.fa \\\\\n            --workflow $workflow_mode \\\\\n            $fasta \\\\\n            $gtf\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            kallistobustools: \\$(echo \\$(kb --version 2>&1) | sed 's/^.*kb_python //;s/positional arguments.*\\$//')\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        kb \\\\\n            ref \\\\\n            -i kb_ref_out.idx \\\\\n            -g t2g.txt \\\\\n            -f1 cdna.fa \\\\\n            -f2 intron.fa \\\\\n            -c1 cdna_t2c.txt \\\\\n            -c2 intron_t2c.txt \\\\\n            --workflow $workflow_mode \\\\\n            $fasta \\\\\n            $gtf\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            kallistobustools: \\$(echo \\$(kb --version 2>&1) | sed 's/^.*kb_python //;s/positional arguments.*\\$//')\n        END_VERSIONS\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 63,
        "string_script": "    def args = task.ext.args ?: ''\n    if (workflow_mode == \"standard\") {\n        \"\"\"\n        kb \\\\\n            ref \\\\\n            -i kb_ref_out.idx \\\\\n            -g t2g.txt \\\\\n            -f1 cdna.fa \\\\\n            --workflow $workflow_mode \\\\\n            $fasta \\\\\n            $gtf\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            kallistobustools: \\$(echo \\$(kb --version 2>&1) | sed 's/^.*kb_python //;s/positional arguments.*\\$//')\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        kb \\\\\n            ref \\\\\n            -i kb_ref_out.idx \\\\\n            -g t2g.txt \\\\\n            -f1 cdna.fa \\\\\n            -f2 intron.fa \\\\\n            -c1 cdna_t2c.txt \\\\\n            -c2 intron_t2c.txt \\\\\n            --workflow $workflow_mode \\\\\n            $fasta \\\\\n            $gtf\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            kallistobustools: \\$(echo \\$(kb --version 2>&1) | sed 's/^.*kb_python //;s/positional arguments.*\\$//')\n        END_VERSIONS\n        \"\"\"\n    }",
        "nb_lignes_script": 36,
        "language_script": "bash",
        "tools": [
            "gfkb",
            "KOREF"
        ],
        "tools_url": [
            "https://bio.tools/gfkb",
            "https://bio.tools/KOREF"
        ],
        "tools_dico": [
            {
                "name": "gfkb",
                "uri": "https://bio.tools/gfkb",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0637",
                            "term": "Taxonomy"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3697",
                            "term": "Microbial ecology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3697",
                            "term": "Environmental microbiology"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0362",
                                    "term": "Genome annotation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomic classification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0310",
                                    "term": "Sequence assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomy assignment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Baseline human gut microbiota profile in healthy people and standard reporting template | High-performance Integrated Virtual Environment | We have developed a proof-of-concept gut microbiome monitoring system using a sequencing and analysis pipeline implemented during our previous I-Corps award (see below) | We have collected from the individuals enrolled in our study the following: three separate fecal samples for metagenomic sequencing, anthropometric measurements, a diet history questionnaire, gastrointestinal symptoms questionnaires, perceived stress questionnaires, physical activity questionnaires, and sleep questionnaires | We would like to thank the following individuals for their significant work in curation and annotation of the GFKB:",
                "homepage": "https://hive.biochemistry.gwu.edu/gfkb"
            },
            {
                "name": "KOREF",
                "uri": "https://bio.tools/KOREF",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Whole genome sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "WGS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0523",
                                    "term": "Mapping assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De-novo assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3216",
                                    "term": "Scaffolding"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3228",
                                    "term": "Structural variation detection"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0523",
                                    "term": "Sequence assembly (mapping assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De Bruijn graph"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "Sequence assembly (de-novo assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3216",
                                    "term": "Scaffold construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3216",
                                    "term": "Scaffold generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3228",
                                    "term": "Structural variation discovery"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Chromosome-scale assembly comparison of the Korean Reference Genome KOREF from PromethION and PacBio with Hi-C mapping information.\n\nThe first Korean Reference Genome. KOREF_S means KOREF_Single.",
                "homepage": "http://koref.net"
            }
        ],
        "inputs": [
            "fasta",
            "gtf",
            "workflow_mode"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$fasta\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? 'bioconda::kb-python=0.26.3' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/kb-python:0.26.3--pyhdfd78af_0' : 'quay.io/biocontainers/kb-python:0.26.3--pyhdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "UNZIP": {
        "name_process": "UNZIP",
        "string_process": "process UNZIP {\n    tag \"$archive\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::p7zip=15.09\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/p7zip:15.09--h2d50403_4' :\n        'quay.io/biocontainers/p7zip:15.09--h2d50403_4' }\"\n\n    input:\n    tuple val(meta), path(archive)\n\n    output:\n    tuple val(meta), path(\"${archive.baseName}/\"), emit: unzipped_archive\n    path \"versions.yml\"                          , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    if ( archive instanceof List && archive.name.size > 1 ) { exit 1, \"[UNZIP] error: 7za only accepts a single archive as input. Please check module input.\" }\n    \"\"\"\n    7za \\\\\n        e \\\\\n        -o\"${archive.baseName}\"/ \\\\\n        $args \\\\\n        $archive\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        7za: \\$(echo \\$(7za --help) | sed 's/.*p7zip Version //; s/(.*//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    def args = task.ext.args ?: ''\n    if ( archive instanceof List && archive.name.size > 1 ) { exit 1, \"[UNZIP] error: 7za only accepts a single archive as input. Please check module input.\" }\n    \"\"\"\n    7za \\\\\n        e \\\\\n        -o\"${archive.baseName}\"/ \\\\\n        $args \\\\\n        $archive\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        7za: \\$(echo \\$(7za --help) | sed 's/.*p7zip Version //; s/(.*//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "archive"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$archive\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::p7zip=15.09\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/p7zip:15.09--h2d50403_4' : 'quay.io/biocontainers/p7zip:15.09--h2d50403_4' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "MULTIQC": {
        "name_process": "MULTIQC",
        "string_process": "process MULTIQC {\n    label 'process_medium'\n\n    conda (params.enable_conda ? 'bioconda::multiqc=1.12' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/multiqc:1.12--pyhdfd78af_0' :\n        'quay.io/biocontainers/multiqc:1.12--pyhdfd78af_0' }\"\n\n    input:\n    path multiqc_files\n\n    output:\n    path \"*multiqc_report.html\", emit: report\n    path \"*_data\"              , emit: data\n    path \"*_plots\"             , optional:true, emit: plots\n    path \"versions.yml\"        , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    multiqc -f $args .\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        multiqc: \\$( multiqc --version | sed -e \"s/multiqc, version //g\" )\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    \"\"\"\n    touch multiqc_data\n    touch multiqc_plots\n    touch multiqc_report.html\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        multiqc: \\$( multiqc --version | sed -e \"s/multiqc, version //g\" )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 41,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    multiqc -f $args .\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        multiqc: \\$( multiqc --version | sed -e \"s/multiqc, version //g\" )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "MultiQC"
        ],
        "tools_url": [
            "https://bio.tools/multiqc"
        ],
        "tools_dico": [
            {
                "name": "MultiQC",
                "uri": "https://bio.tools/multiqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "MultiQC aggregates results from multiple bioinformatics analyses across many samples into a single report. It searches a given directory for analysis logs and compiles a HTML report. It's a general use tool, perfect for summarising the output from numerous bioinformatics tools.",
                "homepage": "http://multiqc.info/"
            }
        ],
        "inputs": [
            "multiqc_files"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "label 'process_medium'",
            "conda (params.enable_conda ? 'bioconda::multiqc=1.12' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/multiqc:1.12--pyhdfd78af_0' : 'quay.io/biocontainers/multiqc:1.12--pyhdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    \"\"\"\n    touch multiqc_data\n    touch multiqc_plots\n    touch multiqc_report.html\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        multiqc: \\$( multiqc --version | sed -e \"s/multiqc, version //g\" )\n    END_VERSIONS\n    \"\"\""
    },
    "COOLER_CLOAD": {
        "name_process": "COOLER_CLOAD",
        "string_process": "process COOLER_CLOAD {\n    tag \"$meta.id\"\n    label 'process_high'\n\n    conda (params.enable_conda ? \"bioconda::cooler=0.8.11\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/cooler:0.8.11--pyh3252c3a_0' :\n        'quay.io/biocontainers/cooler:0.8.11--pyh3252c3a_0' }\"\n\n    input:\n    tuple val(meta), path(pairs), path(index)\n    val cool_bin\n    path chromsizes\n\n    output:\n    tuple val(meta), val(cool_bin), path(\"*.cool\"), emit: cool\n    path \"versions.yml\"                           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def nproc  = args.contains('pairix') || args.contains('tabix')? \"--nproc $task.cpus\" : ''\n\n    \"\"\"\n    cooler cload \\\\\n        $args \\\\\n        $nproc \\\\\n        ${chromsizes}:${cool_bin} \\\\\n        $pairs \\\\\n        ${prefix}.${cool_bin}.cool\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        cooler: \\$(cooler --version 2>&1 | sed 's/cooler, version //')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 38,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def nproc  = args.contains('pairix') || args.contains('tabix')? \"--nproc $task.cpus\" : ''\n\n    \"\"\"\n    cooler cload \\\\\n        $args \\\\\n        $nproc \\\\\n        ${chromsizes}:${cool_bin} \\\\\n        $pairs \\\\\n        ${prefix}.${cool_bin}.cool\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        cooler: \\$(cooler --version 2>&1 | sed 's/cooler, version //')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "pairs",
            "index",
            "cool_bin",
            "chromsizes"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "conda (params.enable_conda ? \"bioconda::cooler=0.8.11\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/cooler:0.8.11--pyh3252c3a_0' : 'quay.io/biocontainers/cooler:0.8.11--pyh3252c3a_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "HMMCOPY_READCOUNTER": {
        "name_process": "HMMCOPY_READCOUNTER",
        "string_process": "\nprocess HMMCOPY_READCOUNTER {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::hmmcopy=0.1.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/hmmcopy:0.1.1--h2e03b76_7' :\n        'quay.io/biocontainers/hmmcopy:0.1.1--h2e03b76_7' }\"\n\n    input:\n    tuple val(meta), path(bam), path(bai)\n\n    output:\n    tuple val(meta), path(\"*.wig\"), emit: wig\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    readCounter \\\\\n        $args \\\\\n        ${bam} > ${prefix}.wig\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        hmmcopy: $VERSION\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    readCounter \\\\\n        $args \\\\\n        ${bam} > ${prefix}.wig\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        hmmcopy: $VERSION\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "bam",
            "bai"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::hmmcopy=0.1.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/hmmcopy:0.1.1--h2e03b76_7' : 'quay.io/biocontainers/hmmcopy:0.1.1--h2e03b76_7' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "BISMARK_METHYLATIONEXTRACTOR": {
        "name_process": "BISMARK_METHYLATIONEXTRACTOR",
        "string_process": "process BISMARK_METHYLATIONEXTRACTOR {\n    tag \"$meta.id\"\n    label 'process_high'\n\n    conda (params.enable_conda ? \"bioconda::bismark=0.23.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bismark:0.23.0--0' :\n        'quay.io/biocontainers/bismark:0.23.0--0' }\"\n\n    input:\n    tuple val(meta), path(bam)\n    path index\n\n    output:\n    tuple val(meta), path(\"*.bedGraph.gz\")         , emit: bedgraph\n    tuple val(meta), path(\"*.txt.gz\")              , emit: methylation_calls\n    tuple val(meta), path(\"*.cov.gz\")              , emit: coverage\n    tuple val(meta), path(\"*_splitting_report.txt\"), emit: report\n    tuple val(meta), path(\"*.M-bias.txt\")          , emit: mbias\n    path \"versions.yml\"                            , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def seqtype  = meta.single_end ? '-s' : '-p'\n    \"\"\"\n    bismark_methylation_extractor \\\\\n        --bedGraph \\\\\n        --counts \\\\\n        --gzip \\\\\n        --report \\\\\n        $seqtype \\\\\n        $args \\\\\n        $bam\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bismark: \\$(echo \\$(bismark -v 2>&1) | sed 's/^.*Bismark Version: v//; s/Copyright.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 41,
        "string_script": "    def args = task.ext.args ?: ''\n    def seqtype  = meta.single_end ? '-s' : '-p'\n    \"\"\"\n    bismark_methylation_extractor \\\\\n        --bedGraph \\\\\n        --counts \\\\\n        --gzip \\\\\n        --report \\\\\n        $seqtype \\\\\n        $args \\\\\n        $bam\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bismark: \\$(echo \\$(bismark -v 2>&1) | sed 's/^.*Bismark Version: v//; s/Copyright.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "bam",
            "index"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "conda (params.enable_conda ? \"bioconda::bismark=0.23.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bismark:0.23.0--0' : 'quay.io/biocontainers/bismark:0.23.0--0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "HPSUISSERO": {
        "name_process": "HPSUISSERO",
        "string_process": "\nprocess HPSUISSERO {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::hpsuissero=1.0.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/hpsuissero%3A1.0.1--hdfd78af_0':\n        'quay.io/biocontainers/hpsuissero:1.0.1--hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(fasta)\n\n    output:\n    tuple val(meta), path(\"*.tsv\"), emit: tsv\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def is_compressed = fasta.getName().endsWith(\".gz\") ? true : false\n    def fasta_name = fasta.getName().replace(\".gz\", \"\")\n    \"\"\"\n    if [ \"$is_compressed\" == \"true\" ]; then\n        gzip -c -d $fasta > $fasta_name\n    fi\n\n    HpsuisSero.sh \\\\\n        -i $fasta_name \\\\\n        -o ./ \\\\\n        -s $prefix \\\\\n        -x fasta \\\\\n        -t $task.cpus\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        hpsuissero: $VERSION\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 41,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def is_compressed = fasta.getName().endsWith(\".gz\") ? true : false\n    def fasta_name = fasta.getName().replace(\".gz\", \"\")\n    \"\"\"\n    if [ \"$is_compressed\" == \"true\" ]; then\n        gzip -c -d $fasta > $fasta_name\n    fi\n\n    HpsuisSero.sh \\\\\n        -i $fasta_name \\\\\n        -o ./ \\\\\n        -s $prefix \\\\\n        -x fasta \\\\\n        -t $task.cpus\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        hpsuissero: $VERSION\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 20,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "fasta"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::hpsuissero=1.0.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/hpsuissero%3A1.0.1--hdfd78af_0': 'quay.io/biocontainers/hpsuissero:1.0.1--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "NGMASTER": {
        "name_process": "NGMASTER",
        "string_process": "process NGMASTER {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::ngmaster=0.5.8\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/ngmaster:0.5.8--pyhdfd78af_1' :\n        'quay.io/biocontainers/ngmaster:0.5.8--pyhdfd78af_1' }\"\n\n    input:\n    tuple val(meta), path(fasta)\n\n    output:\n    tuple val(meta), path(\"*.tsv\"), emit: tsv\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    ngmaster \\\\\n        $args \\\\\n        $fasta \\\\\n        > ${prefix}.tsv\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        ngmaster: \\$( echo \\$(ngmaster --version 2>&1) | sed 's/^.*ngmaster //' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    ngmaster \\\\\n        $args \\\\\n        $fasta \\\\\n        > ${prefix}.tsv\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        ngmaster: \\$( echo \\$(ngmaster --version 2>&1) | sed 's/^.*ngmaster //' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "fasta"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::ngmaster=0.5.8\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/ngmaster:0.5.8--pyhdfd78af_1' : 'quay.io/biocontainers/ngmaster:0.5.8--pyhdfd78af_1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "NEXTCLADE_DATASETGET": {
        "name_process": "NEXTCLADE_DATASETGET",
        "string_process": "process NEXTCLADE_DATASETGET {\n    tag \"$dataset\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::nextclade=1.10.2\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/nextclade:1.10.2--h9ee0642_0' :\n        'quay.io/biocontainers/nextclade:1.10.2--h9ee0642_0' }\"\n\n    input:\n    val dataset\n    val reference\n    val tag\n\n    output:\n    path \"$prefix\"     , emit: dataset\n    path \"versions.yml\", emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    prefix = task.ext.prefix ?: \"${dataset}\"\n    def fasta = reference ? \"--reference ${reference}\" : ''\n    def version = tag ? \"--tag ${tag}\" : ''\n    \"\"\"\n    nextclade \\\\\n        dataset \\\\\n        get \\\\\n        $args \\\\\n        --name $dataset \\\\\n        $fasta \\\\\n        $version \\\\\n        --output-dir $prefix\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        nextclade: \\$(nextclade --version 2>&1)\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 40,
        "string_script": "    def args = task.ext.args ?: ''\n    prefix = task.ext.prefix ?: \"${dataset}\"\n    def fasta = reference ? \"--reference ${reference}\" : ''\n    def version = tag ? \"--tag ${tag}\" : ''\n    \"\"\"\n    nextclade \\\\\n        dataset \\\\\n        get \\\\\n        $args \\\\\n        --name $dataset \\\\\n        $fasta \\\\\n        $version \\\\\n        --output-dir $prefix\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        nextclade: \\$(nextclade --version 2>&1)\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [
            "MultiDataSet",
            "WeGet"
        ],
        "tools_url": [
            "https://bio.tools/multidataset",
            "https://bio.tools/weget"
        ],
        "tools_dico": [
            {
                "name": "MultiDataSet",
                "uri": "https://bio.tools/multidataset",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3295",
                            "term": "Epigenetics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3391",
                            "term": "Omics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3204",
                                    "term": "Methylation analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3204",
                                    "term": "Methylation profile analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Implementation of the BRGE's (Bioinformatic Research Group in Epidemiology from Center for Research in Environmental Epidemiology) dataset and MethylationSet. It is designed for integrating multi omics data sets and MethylationSet to contain normalized methylation data. These package contains base classes for MEAL and rexposome packages.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/MultiDataSet.html"
            },
            {
                "name": "WeGet",
                "uri": "https://bio.tools/weget",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0224",
                                    "term": "Query and retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression data analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0224",
                                    "term": "Database retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "WeGET is a computational tool to find mammalian genes that strongly co-express with a human query gene set of interest.",
                "homepage": "http://weget.cmbi.umcn.nl/"
            }
        ],
        "inputs": [
            "dataset",
            "reference",
            "tag"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$dataset\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::nextclade=1.10.2\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/nextclade:1.10.2--h9ee0642_0' : 'quay.io/biocontainers/nextclade:1.10.2--h9ee0642_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "BEDTOOLS_MASKFASTA": {
        "name_process": "BEDTOOLS_MASKFASTA",
        "string_process": "process BEDTOOLS_MASKFASTA {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::bedtools=2.30.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bedtools:2.30.0--hc088bd4_0' :\n        'quay.io/biocontainers/bedtools:2.30.0--hc088bd4_0' }\"\n\n    input:\n    tuple val(meta), path(bed)\n    path  fasta\n\n    output:\n    tuple val(meta), path(\"*.fa\"), emit: fasta\n    path \"versions.yml\"          , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    bedtools \\\\\n        maskfasta \\\\\n        $args \\\\\n        -fi $fasta \\\\\n        -bed $bed \\\\\n        -fo ${prefix}.fa\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bedtools: \\$(bedtools --version | sed -e \"s/bedtools v//g\")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    bedtools \\\\\n        maskfasta \\\\\n        $args \\\\\n        -fi $fasta \\\\\n        -bed $bed \\\\\n        -fo ${prefix}.fa\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bedtools: \\$(bedtools --version | sed -e \"s/bedtools v//g\")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [
            "BEDTools"
        ],
        "tools_url": [
            "https://bio.tools/bedtools"
        ],
        "tools_dico": [
            {
                "name": "BEDTools",
                "uri": "https://bio.tools/bedtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "BEDTools is an extensive suite of utilities for comparing genomic features in BED format.",
                "homepage": "https://github.com/arq5x/bedtools2"
            }
        ],
        "inputs": [
            "meta",
            "bed",
            "fasta"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::bedtools=2.30.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bedtools:2.30.0--hc088bd4_0' : 'quay.io/biocontainers/bedtools:2.30.0--hc088bd4_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "GUNC_DOWNLOADDB": {
        "name_process": "GUNC_DOWNLOADDB",
        "string_process": "process GUNC_DOWNLOADDB {\n    tag '$db_name'\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::gunc=1.0.5\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/gunc:1.0.5--pyhdfd78af_0' :\n        'quay.io/biocontainers/gunc:1.0.5--pyhdfd78af_0' }\"\n\n    input:\n    val db_name\n\n    output:\n    path \"*.dmnd\"       , emit: db\n    path \"versions.yml\" , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    gunc download_db . -db $db_name $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gunc: \\$( gunc --version )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    gunc download_db . -db $db_name $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gunc: \\$( gunc --version )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "db_name"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag '$db_name'",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::gunc=1.0.5\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/gunc:1.0.5--pyhdfd78af_0' : 'quay.io/biocontainers/gunc:1.0.5--pyhdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "HISAT2_ALIGN": {
        "name_process": "HISAT2_ALIGN",
        "string_process": "\nprocess HISAT2_ALIGN {\n    tag \"$meta.id\"\n    label 'process_high'\n\n    conda (params.enable_conda ? \"bioconda::hisat2=2.2.0 bioconda::samtools=1.15.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mulled-v2-a97e90b3b802d1da3d6958e0867610c718cb5eb1:0e773bb207600fcb4d38202226eb20a33c7909b6-0' :\n        'quay.io/biocontainers/mulled-v2-a97e90b3b802d1da3d6958e0867610c718cb5eb1:0e773bb207600fcb4d38202226eb20a33c7909b6-0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n    path  index\n    path  splicesites\n\n    output:\n    tuple val(meta), path(\"*.bam\")                   , emit: bam\n    tuple val(meta), path(\"*.log\")                   , emit: summary\n    tuple val(meta), path(\"*fastq.gz\"), optional:true, emit: fastq\n    path  \"versions.yml\"                             , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n    def strandedness = ''\n    if (meta.strandedness == 'forward') {\n        strandedness = meta.single_end ? '--rna-strandness F' : '--rna-strandness FR'\n    } else if (meta.strandedness == 'reverse') {\n        strandedness = meta.single_end ? '--rna-strandness R' : '--rna-strandness RF'\n    }\n    def seq_center = params.seq_center ? \"--rg-id ${prefix} --rg SM:$prefix --rg CN:${params.seq_center.replaceAll('\\\\s','_')}\" : \"--rg-id ${prefix} --rg SM:$prefix\"\n    if (meta.single_end) {\n        def unaligned = params.save_unaligned ? \"--un-gz ${prefix}.unmapped.fastq.gz\" : ''\n        \"\"\"\n        INDEX=`find -L ./ -name \"*.1.ht2\" | sed 's/.1.ht2//'`\n        hisat2 \\\\\n            -x \\$INDEX \\\\\n            -U $reads \\\\\n            $strandedness \\\\\n            --known-splicesite-infile $splicesites \\\\\n            --summary-file ${prefix}.hisat2.summary.log \\\\\n            --threads $task.cpus \\\\\n            $seq_center \\\\\n            $unaligned \\\\\n            $args \\\\\n            | samtools view -bS -F 4 -F 256 - > ${prefix}.bam\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            hisat2: $VERSION\n            samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n        END_VERSIONS\n        \"\"\"\n    } else {\n        def unaligned = params.save_unaligned ? \"--un-conc-gz ${prefix}.unmapped.fastq.gz\" : ''\n        \"\"\"\n        INDEX=`find -L ./ -name \"*.1.ht2\" | sed 's/.1.ht2//'`\n        hisat2 \\\\\n            -x \\$INDEX \\\\\n            -1 ${reads[0]} \\\\\n            -2 ${reads[1]} \\\\\n            $strandedness \\\\\n            --known-splicesite-infile $splicesites \\\\\n            --summary-file ${prefix}.hisat2.summary.log \\\\\n            --threads $task.cpus \\\\\n            $seq_center \\\\\n            $unaligned \\\\\n            --no-mixed \\\\\n            --no-discordant \\\\\n            $args \\\\\n            | samtools view -bS -F 4 -F 8 -F 256 - > ${prefix}.bam\n\n        if [ -f ${prefix}.unmapped.fastq.1.gz ]; then\n            mv ${prefix}.unmapped.fastq.1.gz ${prefix}.unmapped_1.fastq.gz\n        fi\n        if [ -f ${prefix}.unmapped.fastq.2.gz ]; then\n            mv ${prefix}.unmapped.fastq.2.gz ${prefix}.unmapped_2.fastq.gz\n        fi\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            hisat2: $VERSION\n            samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n        END_VERSIONS\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 89,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n    def strandedness = ''\n    if (meta.strandedness == 'forward') {\n        strandedness = meta.single_end ? '--rna-strandness F' : '--rna-strandness FR'\n    } else if (meta.strandedness == 'reverse') {\n        strandedness = meta.single_end ? '--rna-strandness R' : '--rna-strandness RF'\n    }\n    def seq_center = params.seq_center ? \"--rg-id ${prefix} --rg SM:$prefix --rg CN:${params.seq_center.replaceAll('\\\\s','_')}\" : \"--rg-id ${prefix} --rg SM:$prefix\"\n    if (meta.single_end) {\n        def unaligned = params.save_unaligned ? \"--un-gz ${prefix}.unmapped.fastq.gz\" : ''\n        \"\"\"\n        INDEX=`find -L ./ -name \"*.1.ht2\" | sed 's/.1.ht2//'`\n        hisat2 \\\\\n            -x \\$INDEX \\\\\n            -U $reads \\\\\n            $strandedness \\\\\n            --known-splicesite-infile $splicesites \\\\\n            --summary-file ${prefix}.hisat2.summary.log \\\\\n            --threads $task.cpus \\\\\n            $seq_center \\\\\n            $unaligned \\\\\n            $args \\\\\n            | samtools view -bS -F 4 -F 256 - > ${prefix}.bam\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            hisat2: $VERSION\n            samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n        END_VERSIONS\n        \"\"\"\n    } else {\n        def unaligned = params.save_unaligned ? \"--un-conc-gz ${prefix}.unmapped.fastq.gz\" : ''\n        \"\"\"\n        INDEX=`find -L ./ -name \"*.1.ht2\" | sed 's/.1.ht2//'`\n        hisat2 \\\\\n            -x \\$INDEX \\\\\n            -1 ${reads[0]} \\\\\n            -2 ${reads[1]} \\\\\n            $strandedness \\\\\n            --known-splicesite-infile $splicesites \\\\\n            --summary-file ${prefix}.hisat2.summary.log \\\\\n            --threads $task.cpus \\\\\n            $seq_center \\\\\n            $unaligned \\\\\n            --no-mixed \\\\\n            --no-discordant \\\\\n            $args \\\\\n            | samtools view -bS -F 4 -F 8 -F 256 - > ${prefix}.bam\n\n        if [ -f ${prefix}.unmapped.fastq.1.gz ]; then\n            mv ${prefix}.unmapped.fastq.1.gz ${prefix}.unmapped_1.fastq.gz\n        fi\n        if [ -f ${prefix}.unmapped.fastq.2.gz ]; then\n            mv ${prefix}.unmapped.fastq.2.gz ${prefix}.unmapped_2.fastq.gz\n        fi\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            hisat2: $VERSION\n            samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n        END_VERSIONS\n        \"\"\"\n    }",
        "nb_lignes_script": 64,
        "language_script": "bash",
        "tools": [
            "HISAT2",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/hisat2",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "HISAT2",
                "uri": "https://bio.tools/hisat2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Alignment program for mapping next-generation sequencing reads (both DNA and RNA) to a population of human genomes (as well as to a single reference genome).",
                "homepage": "https://ccb.jhu.edu/software/hisat2/index.shtml"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "index",
            "splicesites"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "conda (params.enable_conda ? \"bioconda::hisat2=2.2.0 bioconda::samtools=1.15.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mulled-v2-a97e90b3b802d1da3d6958e0867610c718cb5eb1:0e773bb207600fcb4d38202226eb20a33c7909b6-0' : 'quay.io/biocontainers/mulled-v2-a97e90b3b802d1da3d6958e0867610c718cb5eb1:0e773bb207600fcb4d38202226eb20a33c7909b6-0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "GATK4_INTERVALLISTTOOLS": {
        "name_process": "GATK4_INTERVALLISTTOOLS",
        "string_process": "process GATK4_INTERVALLISTTOOLS {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::gatk4=4.2.6.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/gatk4:4.2.6.1--hdfd78af_0':\n        'quay.io/biocontainers/gatk4:4.2.6.1--hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(intervals)\n\n    output:\n    tuple val(meta), path(\"*_split/*/*.interval_list\"), emit: interval_list\n    path \"versions.yml\"                               , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[GATK IntervalListTools] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n\n    mkdir ${prefix}_split\n\n    gatk --java-options \"-Xmx${avail_mem}g\" IntervalListTools \\\\\n        --INPUT $intervals \\\\\n        --OUTPUT ${prefix}_split \\\\\n        --TMP_DIR . \\\\\n        $args\n\n    python3 <<CODE\n    import glob, os\n    # The following python code snippet rename the output files into different name to avoid overwriting or name conflict\n    intervals = sorted(glob.glob(\"*_split/*/*.interval_list\"))\n    for i, interval in enumerate(intervals):\n        (directory, filename) = os.path.split(interval)\n        newName = os.path.join(directory, str(i + 1) + filename)\n        os.rename(interval, newName)\n    CODE\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    mkdir -p ${prefix}_split/temp_0001_of_6\n    mkdir -p ${prefix}_split/temp_0002_of_6\n    mkdir -p ${prefix}_split/temp_0003_of_6\n    mkdir -p ${prefix}_split/temp_0004_of_6\n    touch ${prefix}_split/temp_0001_of_6/1scattered.interval_list\n    touch ${prefix}_split/temp_0002_of_6/2scattered.interval_list\n    touch ${prefix}_split/temp_0003_of_6/3scattered.interval_list\n    touch ${prefix}_split/temp_0004_of_6/4scattered.interval_list\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 71,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[GATK IntervalListTools] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n\n    mkdir ${prefix}_split\n\n    gatk --java-options \"-Xmx${avail_mem}g\" IntervalListTools \\\\\n        --INPUT $intervals \\\\\n        --OUTPUT ${prefix}_split \\\\\n        --TMP_DIR . \\\\\n        $args\n\n    python3 <<CODE\n    import glob, os\n    # The following python code snippet rename the output files into different name to avoid overwriting or name conflict\n    intervals = sorted(glob.glob(\"*_split/*/*.interval_list\"))\n    for i, interval in enumerate(intervals):\n        (directory, filename) = os.path.split(interval)\n        newName = os.path.join(directory, str(i + 1) + filename)\n        os.rename(interval, newName)\n    CODE\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 33,
        "language_script": "bash",
        "tools": [
            "GATK",
            "tximport",
            "tcode"
        ],
        "tools_url": [
            "https://bio.tools/gatk",
            "https://bio.tools/tximport",
            "https://bio.tools/tcode"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            },
            {
                "name": "tximport",
                "uri": "https://bio.tools/tximport",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "Gene transcripts"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "mRNA features"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3680",
                                    "term": "RNA-Seq analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2497",
                                    "term": "Pathway or network analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "An R/Bioconductor package that imports transcript-level abundance, estimated counts and transcript lengths, and summarizes into matrices for use with downstream gene-level analysis packages.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/tximport.html"
            },
            {
                "name": "tcode",
                "uri": "https://bio.tools/tcode",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0623",
                            "term": "Gene and protein families"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0623",
                            "term": "Genes, gene family or system"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "Coding region prediction"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "ORF prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "ORF finding"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0914",
                                "term": "Codon usage data"
                            },
                            {
                                "uri": "http://edamontology.org/data_2887",
                                "term": "Nucleic acid sequence record"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2160",
                                "term": "Fickett testcode plot"
                            },
                            {
                                "uri": "http://edamontology.org/data_1276",
                                "term": "Nucleic acid features"
                            }
                        ]
                    }
                ],
                "description": "Identify protein-coding regions using Fickett TESTCODE statistic.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/tcode.html"
            }
        ],
        "inputs": [
            "meta",
            "intervals"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::gatk4=4.2.6.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/gatk4:4.2.6.1--hdfd78af_0': 'quay.io/biocontainers/gatk4:4.2.6.1--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    mkdir -p ${prefix}_split/temp_0001_of_6\n    mkdir -p ${prefix}_split/temp_0002_of_6\n    mkdir -p ${prefix}_split/temp_0003_of_6\n    mkdir -p ${prefix}_split/temp_0004_of_6\n    touch ${prefix}_split/temp_0001_of_6/1scattered.interval_list\n    touch ${prefix}_split/temp_0002_of_6/2scattered.interval_list\n    touch ${prefix}_split/temp_0003_of_6/3scattered.interval_list\n    touch ${prefix}_split/temp_0004_of_6/4scattered.interval_list\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\""
    },
    "PICARD_CLEANSAM": {
        "name_process": "PICARD_CLEANSAM",
        "string_process": "process PICARD_CLEANSAM {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::picard=2.27.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/picard:2.27.1--hdfd78af_0' :\n        'quay.io/biocontainers/picard:2.27.1--hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(bam)\n\n    output:\n    tuple val(meta), path(\"*.bam\"), emit: bam\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[Picard CleanSam] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    picard \\\\\n        -Xmx${avail_mem}g \\\\\n        CleanSam  \\\\\n        ${args} \\\\\n        --INPUT ${bam} \\\\\n        --OUTPUT ${prefix}.bam\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        picard: \\$(picard CleanSam --version 2>&1 | grep -o 'Version:.*' | cut -f2- -d:)\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 40,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[Picard CleanSam] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    picard \\\\\n        -Xmx${avail_mem}g \\\\\n        CleanSam  \\\\\n        ${args} \\\\\n        --INPUT ${bam} \\\\\n        --OUTPUT ${prefix}.bam\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        picard: \\$(picard CleanSam --version 2>&1 | grep -o 'Version:.*' | cut -f2- -d:)\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 20,
        "language_script": "bash",
        "tools": [
            "Picard"
        ],
        "tools_url": [
            "https://bio.tools/picard_tools"
        ],
        "tools_dico": [
            {
                "name": "Picard",
                "uri": "https://bio.tools/picard_tools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Sequence variation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Variant analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation annotation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A set of command line tools for manipulating high-throughput sequencing (HTS) data in formats such as SAM/BAM/CRAM and VCF. Available as a standalone program or within the GATK4 program.",
                "homepage": "https://github.com/broadinstitute/picard"
            }
        ],
        "inputs": [
            "meta",
            "bam"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::picard=2.27.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/picard:2.27.1--hdfd78af_0' : 'quay.io/biocontainers/picard:2.27.1--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "AMRFINDERPLUS_RUN": {
        "name_process": "AMRFINDERPLUS_RUN",
        "string_process": "process AMRFINDERPLUS_RUN {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::ncbi-amrfinderplus=3.10.23\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/ncbi-amrfinderplus%3A3.10.23--h17dc2d4_0':\n        'quay.io/biocontainers/ncbi-amrfinderplus:3.10.23--h17dc2d4_0' }\"\n\n    input:\n    tuple val(meta), path(fasta)\n    path db\n\n    output:\n    tuple val(meta), path(\"${prefix}.tsv\")          , emit: report\n    tuple val(meta), path(\"${prefix}-mutations.tsv\"), emit: mutation_report, optional: true\n    path \"versions.yml\"                             , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def is_compressed = fasta.getName().endsWith(\".gz\") ? true : false\n    prefix = task.ext.prefix ?: \"${meta.id}\"\n    organism_param = meta.containsKey(\"organism\") ? \"--organism ${meta.organism} --mutation_all ${prefix}-mutations.tsv\" : \"\"\n    fasta_name = fasta.getName().replace(\".gz\", \"\")\n    fasta_param = \"-n\"\n    if (meta.containsKey(\"is_proteins\")) {\n        if (meta.is_proteins) {\n            fasta_param = \"-p\"\n        }\n    }\n    \"\"\"\n    if [ \"$is_compressed\" == \"true\" ]; then\n        gzip -c -d $fasta > $fasta_name\n    fi\n\n    mkdir amrfinderdb\n    tar xzvf $db -C amrfinderdb\n\n    amrfinder \\\\\n        $fasta_param $fasta_name \\\\\n        $organism_param \\\\\n        $args \\\\\n        --database amrfinderdb \\\\\n        --threads $task.cpus > ${prefix}.tsv\n\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        amrfinderplus: \\$(amrfinder --version)\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 53,
        "string_script": "    def args = task.ext.args ?: ''\n    def is_compressed = fasta.getName().endsWith(\".gz\") ? true : false\n    prefix = task.ext.prefix ?: \"${meta.id}\"\n    organism_param = meta.containsKey(\"organism\") ? \"--organism ${meta.organism} --mutation_all ${prefix}-mutations.tsv\" : \"\"\n    fasta_name = fasta.getName().replace(\".gz\", \"\")\n    fasta_param = \"-n\"\n    if (meta.containsKey(\"is_proteins\")) {\n        if (meta.is_proteins) {\n            fasta_param = \"-p\"\n        }\n    }\n    \"\"\"\n    if [ \"$is_compressed\" == \"true\" ]; then\n        gzip -c -d $fasta > $fasta_name\n    fi\n\n    mkdir amrfinderdb\n    tar xzvf $db -C amrfinderdb\n\n    amrfinder \\\\\n        $fasta_param $fasta_name \\\\\n        $organism_param \\\\\n        $args \\\\\n        --database amrfinderdb \\\\\n        --threads $task.cpus > ${prefix}.tsv\n\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        amrfinderplus: \\$(amrfinder --version)\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 31,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "fasta",
            "db"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::ncbi-amrfinderplus=3.10.23\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/ncbi-amrfinderplus%3A3.10.23--h17dc2d4_0': 'quay.io/biocontainers/ncbi-amrfinderplus:3.10.23--h17dc2d4_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "MSISENSOR_MSI": {
        "name_process": "MSISENSOR_MSI",
        "string_process": "process MSISENSOR_MSI {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::msisensor=0.5\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/msisensor:0.5--hb3646a4_2' :\n        'quay.io/biocontainers/msisensor:0.5--hb3646a4_2' }\"\n\n    input:\n    tuple val(meta), path(normal_bam), path(normal_bai), path(tumor_bam), path(tumor_bai), val(metascan), path(homopolymers)\n\n    output:\n    tuple val(meta), path(\"${prefix}\")         , emit: output\n    tuple val(meta), path(\"${prefix}_dis\")     , emit: output_dis\n    tuple val(meta), path(\"${prefix}_germline\"), emit: output_germline\n    tuple val(meta), path(\"${prefix}_somatic\") , emit: output_somatic\n    path \"versions.yml\"                        , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args   ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    msisensor \\\\\n        msi \\\\\n        -d $homopolymers \\\\\n        -n $normal_bam \\\\\n        -t $tumor_bam \\\\\n        -o $prefix \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        msisensor: \\$(msisensor 2>&1 | sed -nE 's/Version:\\\\sv([0-9]\\\\.[0-9])/\\\\1/ p')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 38,
        "string_script": "    def args = task.ext.args   ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    msisensor \\\\\n        msi \\\\\n        -d $homopolymers \\\\\n        -n $normal_bam \\\\\n        -t $tumor_bam \\\\\n        -o $prefix \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        msisensor: \\$(msisensor 2>&1 | sed -nE 's/Version:\\\\sv([0-9]\\\\.[0-9])/\\\\1/ p')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [
            "MSIsensor",
            "MSI"
        ],
        "tools_url": [
            "https://bio.tools/msisensor",
            "https://bio.tools/msi"
        ],
        "tools_dico": [
            {
                "name": "MSIsensor",
                "uri": "https://bio.tools/msisensor",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2640",
                            "term": "Oncology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_2640",
                            "term": "Cancer biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2640",
                            "term": "https://en.wikipedia.org/wiki/Oncology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0415",
                                    "term": "Nucleic acid feature detection"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0415",
                                    "term": "Sequence feature detection (nucleic acid)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "C++ program for automatically detecting somatic and germline variants at microsatellite regions. It computes length distributions of microsatellites per site in paired tumor and normal sequence data, subsequently using these to statistically compare observed distributions in both samples.",
                "homepage": "https://github.com/ding-lab/msisensor"
            },
            {
                "name": "MSI",
                "uri": "https://bio.tools/msi",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2229",
                            "term": "Cell biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2259",
                            "term": "Systems biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0804",
                            "term": "Immunology"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2426",
                                    "term": "Modelling and simulation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Ongoing project aimed at the development of software for the computational simulation of spatial processes in immunity. The software is an open source development project; there are several options for acquiring the program, including the complete source code, or just pre-built binaries.",
                "homepage": "http://www.cs.duke.edu/~emonson/MSI_Site/index.html"
            }
        ],
        "inputs": [
            "meta",
            "metascan",
            "normal_bam",
            "normal_bai",
            "tumor_bam",
            "tumor_bai",
            "homopolymers"
        ],
        "nb_inputs": 7,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::msisensor=0.5\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/msisensor:0.5--hb3646a4_2' : 'quay.io/biocontainers/msisensor:0.5--hb3646a4_2' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "MASH_SKETCH": {
        "name_process": "MASH_SKETCH",
        "string_process": "process MASH_SKETCH {\n    tag \"$meta.id\"\n    label 'process_medium'\n    conda (params.enable_conda ? \"bioconda::mash=2.3\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mash:2.3--he348c14_1' :\n        'quay.io/biocontainers/mash:2.3--he348c14_1' }\"\n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path(\"*.msh\")        , emit: mash\n    tuple val(meta), path(\"*.mash_stats\") , emit: stats\n    path \"versions.yml\"                   , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    mash \\\\\n        sketch \\\\\n        $args \\\\\n        -p $task.cpus \\\\\n        -o ${prefix} \\\\\n        -r $reads \\\\\n        2> ${prefix}.mash_stats\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        mash: \\$(mash --version 2>&1)\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    mash \\\\\n        sketch \\\\\n        $args \\\\\n        -p $task.cpus \\\\\n        -o ${prefix} \\\\\n        -r $reads \\\\\n        2> ${prefix}.mash_stats\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        mash: \\$(mash --version 2>&1)\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [
            "Mash"
        ],
        "tools_url": [
            "https://bio.tools/mash"
        ],
        "tools_dico": [
            {
                "name": "Mash",
                "uri": "https://bio.tools/mash",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2533",
                            "term": "DNA mutation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2269",
                            "term": "Statistics and probability"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0289",
                                    "term": "Sequence distance matrix generation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0289",
                                    "term": "Sequence distance calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0289",
                                    "term": "Phylogenetic distance matrix generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0289",
                                    "term": "Sequence distance matrix construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Fast genome and metagenome distance estimation using MinHash.",
                "homepage": "https://github.com/marbl/mash"
            }
        ],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::mash=2.3\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mash:2.3--he348c14_1' : 'quay.io/biocontainers/mash:2.3--he348c14_1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "JUPYTERNOTEBOOK": {
        "name_process": "JUPYTERNOTEBOOK",
        "string_process": "\nprocess JUPYTERNOTEBOOK {\n    tag \"$meta.id\"\n    label 'process_low'\n\n                                                                                   \n                                                                                 \n                                                                   \n    conda (params.enable_conda ? \"ipykernel=6.0.3 jupytext=1.11.4 nbconvert=6.1.0 papermill=2.3.3 matplotlib=3.4.2\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mulled-v2-514b1a5d280c7043110b2a8d0a87b57ba392a963:879972fc8bdc81ee92f2bce3b4805d89a772bf84-0' :\n        'quay.io/biocontainers/mulled-v2-514b1a5d280c7043110b2a8d0a87b57ba392a963:879972fc8bdc81ee92f2bce3b4805d89a772bf84-0' }\"\n\n    input:\n    tuple val(meta), path(notebook)\n    val parameters\n    path input_files\n\n    output:\n    tuple val(meta), path(\"*.html\"), emit: report\n    tuple val(meta), path(\"artifacts/\"), emit: artifacts, optional: true\n    path \"versions.yml\"            , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def parametrize = (task.ext.parametrize == null) ?  true : task.ext.parametrize\n    def implicit_params = (task.ext.implicit_params == null) ? true : task.ext.implicit_params\n    def meta_params = (task.ext.meta_params == null) ? true : task.ext.meta_params\n\n                                    \n                                                          \n                                \n                                                                  \n    def params_cmd = \"\"\n    def render_cmd = \"\"\n    if (parametrize) {\n        nb_params = [:]\n        if (implicit_params) {\n            nb_params[\"cpus\"] = task.cpus\n            nb_params[\"artifact_dir\"] = \"artifacts\"\n            nb_params[\"input_dir\"] = \"./\"\n        }\n        if (meta_params) {\n            nb_params[\"meta\"] = meta\n        }\n        nb_params += parameters\n        params_cmd = dump_params_yml(nb_params)\n        render_cmd = \"papermill -f .params.yml\"\n    } else {\n        render_cmd = \"papermill\"\n    }\n\n    \"\"\"\n    set -o pipefail\n\n    # Dump .params.yml heredoc (section will be empty if parametrization is disabled)\n    ${indent_code_block(params_cmd, 4)}\n\n    # Create output directory\n    mkdir artifacts\n\n    # Set parallelism for BLAS/MKL etc. to avoid over-booking of resources\n    export MKL_NUM_THREADS=\"$task.cpus\"\n    export OPENBLAS_NUM_THREADS=\"$task.cpus\"\n    export OMP_NUM_THREADS=\"$task.cpus\"\n    export NUMBA_NUM_THREADS=\"$task.cpus\"\n\n    # Convert notebook to ipynb using jupytext, execute using papermill, convert using nbconvert\n    jupytext --to notebook --output - --set-kernel - ${notebook}  \\\\\n        | ${render_cmd} \\\\\n        | jupyter nbconvert --stdin --to html --output ${prefix}.html\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        jupytext: \\$(jupytext --version)\n        ipykernel: \\$(python -c \"import ipykernel; print(ipykernel.__version__)\")\n        nbconvert: \\$(jupyter nbconvert --version)\n        papermill: \\$(papermill --version | cut -f1 -d' ')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 83,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def parametrize = (task.ext.parametrize == null) ?  true : task.ext.parametrize\n    def implicit_params = (task.ext.implicit_params == null) ? true : task.ext.implicit_params\n    def meta_params = (task.ext.meta_params == null) ? true : task.ext.meta_params\n\n                                    \n                                                          \n                                \n                                                                  \n    def params_cmd = \"\"\n    def render_cmd = \"\"\n    if (parametrize) {\n        nb_params = [:]\n        if (implicit_params) {\n            nb_params[\"cpus\"] = task.cpus\n            nb_params[\"artifact_dir\"] = \"artifacts\"\n            nb_params[\"input_dir\"] = \"./\"\n        }\n        if (meta_params) {\n            nb_params[\"meta\"] = meta\n        }\n        nb_params += parameters\n        params_cmd = dump_params_yml(nb_params)\n        render_cmd = \"papermill -f .params.yml\"\n    } else {\n        render_cmd = \"papermill\"\n    }\n\n    \"\"\"\n    set -o pipefail\n\n    # Dump .params.yml heredoc (section will be empty if parametrization is disabled)\n    ${indent_code_block(params_cmd, 4)}\n\n    # Create output directory\n    mkdir artifacts\n\n    # Set parallelism for BLAS/MKL etc. to avoid over-booking of resources\n    export MKL_NUM_THREADS=\"$task.cpus\"\n    export OPENBLAS_NUM_THREADS=\"$task.cpus\"\n    export OMP_NUM_THREADS=\"$task.cpus\"\n    export NUMBA_NUM_THREADS=\"$task.cpus\"\n\n    # Convert notebook to ipynb using jupytext, execute using papermill, convert using nbconvert\n    jupytext --to notebook --output - --set-kernel - ${notebook}  \\\\\n        | ${render_cmd} \\\\\n        | jupyter nbconvert --stdin --to html --output ${prefix}.html\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        jupytext: \\$(jupytext --version)\n        ipykernel: \\$(python -c \"import ipykernel; print(ipykernel.__version__)\")\n        nbconvert: \\$(jupyter nbconvert --version)\n        papermill: \\$(papermill --version | cut -f1 -d' ')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 56,
        "language_script": "bash",
        "tools": [
            "Jupyterhub"
        ],
        "tools_url": [
            "https://bio.tools/Jupyterhub"
        ],
        "tools_dico": [
            {
                "name": "Jupyterhub",
                "uri": "https://bio.tools/Jupyterhub",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Software engineering"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Computer programming"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Software development"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Jupyter notebooks in science gateways.\n\nJupyter Notebooks empower scientists to create executable documents that include text, equations, code and figures. Notebooks are a simple way to create reproducible and shareable workflows. The Jupyter developers have also released a multi-user notebook environment: Jupyterhub. Jupyterhub provides an extensible platform for handling user authentication and spawning the Notebook application to each user. I developed a plugin for Jupyterhub to spawn notebooks on a Supercomputer and integrated the authentication with CILogon and XSEDE. Scientists can authenticate on their browser and connect to a Jupyter Notebook instance running on the computing node of a Supercomputer, in my test deployment SDSC Comet. Jupyterhub can benefit Science Gateways by providing an expressive interface to a centralized environment with many software tools pre-installed and allow scientists to access Gateway functionality via web API.\n\n||| HOMEPAGE MISSING!",
                "homepage": "https://doi.org/10.7287/PEERJ.PREPRINTS.2577V2"
            }
        ],
        "inputs": [
            "meta",
            "notebook",
            "parameters",
            "input_files"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"ipykernel=6.0.3 jupytext=1.11.4 nbconvert=6.1.0 papermill=2.3.3 matplotlib=3.4.2\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mulled-v2-514b1a5d280c7043110b2a8d0a87b57ba392a963:879972fc8bdc81ee92f2bce3b4805d89a772bf84-0' : 'quay.io/biocontainers/mulled-v2-514b1a5d280c7043110b2a8d0a87b57ba392a963:879972fc8bdc81ee92f2bce3b4805d89a772bf84-0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "KHMER_NORMALIZEBYMEDIAN": {
        "name_process": "KHMER_NORMALIZEBYMEDIAN",
        "string_process": "process KHMER_NORMALIZEBYMEDIAN {\n    tag \"${name}\"\n    label 'process_long'\n\n    conda (params.enable_conda ? \"bioconda::khmer=3.0.0a3\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/khmer:3.0.0a3--py37haa7609a_2' :\n        'quay.io/biocontainers/khmer:3.0.0a3--py37haa7609a_2' }\"\n\n    input:\n    path pe_reads\n    path se_reads\n    val  name\n\n    output:\n    path \"${name}.fastq.gz\", emit: reads\n    path \"versions.yml\"    , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    pe_args = pe_reads ? \"--paired\" : \"\"\n    se_args = se_reads ? \"--unpaired-reads ${se_reads}\" : \"\"\n    files   = pe_reads ? pe_reads : se_reads\n    \"\"\"\n    normalize-by-median.py \\\\\n        -M ${task.memory.toGiga()}e9 \\\\\n        --gzip $args \\\\\n        -o ${name}.fastq.gz \\\\\n        $pe_args \\\\\n        $se_args \\\\\n        $files\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        khmer: \\$( normalize-by-median.py --version 2>&1 | grep ^khmer | sed 's/^khmer //' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 39,
        "string_script": "    def args = task.ext.args ?: ''\n    pe_args = pe_reads ? \"--paired\" : \"\"\n    se_args = se_reads ? \"--unpaired-reads ${se_reads}\" : \"\"\n    files   = pe_reads ? pe_reads : se_reads\n    \"\"\"\n    normalize-by-median.py \\\\\n        -M ${task.memory.toGiga()}e9 \\\\\n        --gzip $args \\\\\n        -o ${name}.fastq.gz \\\\\n        $pe_args \\\\\n        $se_args \\\\\n        $files\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        khmer: \\$( normalize-by-median.py --version 2>&1 | grep ^khmer | sed 's/^khmer //' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 17,
        "language_script": "bash",
        "tools": [
            "goProfiles"
        ],
        "tools_url": [
            "https://bio.tools/goprofiles"
        ],
        "tools_dico": [
            {
                "name": "goProfiles",
                "uri": "https://bio.tools/goprofiles",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0315",
                                    "term": "Expression profile comparison"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The package implements methods to compare lists of genes based on comparing the corresponding 'functional profiles'.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/goProfiles.html"
            }
        ],
        "inputs": [
            "pe_reads",
            "se_reads",
            "name"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"${name}\"",
            "label 'process_long'",
            "conda (params.enable_conda ? \"bioconda::khmer=3.0.0a3\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/khmer:3.0.0a3--py37haa7609a_2' : 'quay.io/biocontainers/khmer:3.0.0a3--py37haa7609a_2' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "BISCUIT_QC": {
        "name_process": "BISCUIT_QC",
        "string_process": "process BISCUIT_QC {\n    tag \"$meta.id\"\n    label 'process_long'\n\n    conda (params.enable_conda ? \"bioconda::biscuit=1.0.2.20220113\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/biscuit:1.0.2.20220113--h81a5ba2_0':\n        'quay.io/biocontainers/biscuit:1.0.2.20220113--h81a5ba2_0' }\"\n\n    input:\n    tuple val(meta), path(bam)\n    path(index)\n\n    output:\n    tuple val(meta), path(\"*.txt\"), emit: biscuit_qc_reports\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def se = meta.single_end ? \"-s\" : \"\"\n    \"\"\"\n    INDEX=`find -L ./ -name \"*.bis.amb\" | sed 's/.bis.amb//'`\n\n    biscuit qc \\\\\n        $args \\\\\n        $se \\\\\n        \\$INDEX \\\\\n        $bam \\\\\n        $prefix\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        biscuit: \\$( biscuit version |& sed '1!d; s/^.*BISCUIT Version: //' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 38,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def se = meta.single_end ? \"-s\" : \"\"\n    \"\"\"\n    INDEX=`find -L ./ -name \"*.bis.amb\" | sed 's/.bis.amb//'`\n\n    biscuit qc \\\\\n        $args \\\\\n        $se \\\\\n        \\$INDEX \\\\\n        $bam \\\\\n        $prefix\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        biscuit: \\$( biscuit version |& sed '1!d; s/^.*BISCUIT Version: //' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 17,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "bam",
            "index"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_long'",
            "conda (params.enable_conda ? \"bioconda::biscuit=1.0.2.20220113\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/biscuit:1.0.2.20220113--h81a5ba2_0': 'quay.io/biocontainers/biscuit:1.0.2.20220113--h81a5ba2_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "MASH_DIST": {
        "name_process": "MASH_DIST",
        "string_process": "process MASH_DIST {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::mash=2.3\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mash:2.3--he348c14_1' :\n        'quay.io/biocontainers/mash:2.3--he348c14_1' }\"\n\n    input:\n    tuple val(meta), path(query)\n    path reference\n\n    output:\n    tuple val(meta), path(\"*.txt\"), emit: dist\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    mash \\\\\n        dist \\\\\n        -p $task.cpus \\\\\n        $args \\\\\n        $reference \\\\\n        $query > ${prefix}.txt\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        mash: \\$(mash --version 2>&1)\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    mash \\\\\n        dist \\\\\n        -p $task.cpus \\\\\n        $args \\\\\n        $reference \\\\\n        $query > ${prefix}.txt\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        mash: \\$(mash --version 2>&1)\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "Mash",
            "tqDist"
        ],
        "tools_url": [
            "https://bio.tools/mash",
            "https://bio.tools/tqdist"
        ],
        "tools_dico": [
            {
                "name": "Mash",
                "uri": "https://bio.tools/mash",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2533",
                            "term": "DNA mutation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2269",
                            "term": "Statistics and probability"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0289",
                                    "term": "Sequence distance matrix generation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0289",
                                    "term": "Sequence distance calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0289",
                                    "term": "Phylogenetic distance matrix generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0289",
                                    "term": "Sequence distance matrix construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Fast genome and metagenome distance estimation using MinHash.",
                "homepage": "https://github.com/marbl/mash"
            },
            {
                "name": "tqDist",
                "uri": "https://bio.tools/tqdist",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0084",
                            "term": "Phylogeny"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0325",
                                    "term": "Phylogenetic tree comparison"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Computation of the triplet- and Quartet-distance between evolutionary trees.",
                "homepage": "http://users-cs.au.dk/cstorm/software/tqdist/"
            }
        ],
        "inputs": [
            "meta",
            "query",
            "reference"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::mash=2.3\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mash:2.3--he348c14_1' : 'quay.io/biocontainers/mash:2.3--he348c14_1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "NANOPLOT": {
        "name_process": "NANOPLOT",
        "string_process": "process NANOPLOT {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? 'bioconda::nanoplot=1.39.0' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/nanoplot:1.39.0--pyhdfd78af_0' :\n        'quay.io/biocontainers/nanoplot:1.39.0--pyhdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(ontfile)\n\n    output:\n    tuple val(meta), path(\"*.html\"), emit: html\n    tuple val(meta), path(\"*.png\") , emit: png\n    tuple val(meta), path(\"*.txt\") , emit: txt\n    tuple val(meta), path(\"*.log\") , emit: log\n    path  \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def input_file = (\"$ontfile\".endsWith(\".fastq.gz\")) ? \"--fastq ${ontfile}\" :\n        (\"$ontfile\".endsWith(\".txt\")) ? \"--summary ${ontfile}\" : ''\n    \"\"\"\n    NanoPlot \\\\\n        $args \\\\\n        -t $task.cpus \\\\\n        $input_file\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        nanoplot: \\$(echo \\$(NanoPlot --version 2>&1) | sed 's/^.*NanoPlot //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "    def args = task.ext.args ?: ''\n    def input_file = (\"$ontfile\".endsWith(\".fastq.gz\")) ? \"--fastq ${ontfile}\" :\n        (\"$ontfile\".endsWith(\".txt\")) ? \"--summary ${ontfile}\" : ''\n    \"\"\"\n    NanoPlot \\\\\n        $args \\\\\n        -t $task.cpus \\\\\n        $input_file\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        nanoplot: \\$(echo \\$(NanoPlot --version 2>&1) | sed 's/^.*NanoPlot //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "ontfile"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? 'bioconda::nanoplot=1.39.0' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/nanoplot:1.39.0--pyhdfd78af_0' : 'quay.io/biocontainers/nanoplot:1.39.0--pyhdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "PICARD_MARKDUPLICATES": {
        "name_process": "PICARD_MARKDUPLICATES",
        "string_process": "process PICARD_MARKDUPLICATES {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::picard=2.27.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/picard:2.27.1--hdfd78af_0' :\n        'quay.io/biocontainers/picard:2.27.1--hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(bam)\n\n    output:\n    tuple val(meta), path(\"*.bam\")        , emit: bam\n    tuple val(meta), path(\"*.bai\")        , optional:true, emit: bai\n    tuple val(meta), path(\"*.metrics.txt\"), emit: metrics\n    path  \"versions.yml\"                  , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[Picard MarkDuplicates] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    picard \\\\\n        -Xmx${avail_mem}g \\\\\n        MarkDuplicates \\\\\n        $args \\\\\n        --INPUT $bam \\\\\n        --OUTPUT ${prefix}.bam \\\\\n        --METRICS_FILE ${prefix}.MarkDuplicates.metrics.txt\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        picard: \\$(echo \\$(picard MarkDuplicates --version 2>&1) | grep -o 'Version:.*' | cut -f2- -d:)\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.bam\n    touch ${prefix}.bam.bai\n    touch ${prefix}.MarkDuplicates.metrics.txt\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        picard: \\$(echo \\$(picard MarkDuplicates --version 2>&1) | grep -o 'Version:.*' | cut -f2- -d:)\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 56,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[Picard MarkDuplicates] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    picard \\\\\n        -Xmx${avail_mem}g \\\\\n        MarkDuplicates \\\\\n        $args \\\\\n        --INPUT $bam \\\\\n        --OUTPUT ${prefix}.bam \\\\\n        --METRICS_FILE ${prefix}.MarkDuplicates.metrics.txt\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        picard: \\$(echo \\$(picard MarkDuplicates --version 2>&1) | grep -o 'Version:.*' | cut -f2- -d:)\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 21,
        "language_script": "bash",
        "tools": [
            "Picard",
            "MarkDuplicates (IP)"
        ],
        "tools_url": [
            "https://bio.tools/picard_tools",
            "https://bio.tools/markduplicates_ip"
        ],
        "tools_dico": [
            {
                "name": "Picard",
                "uri": "https://bio.tools/picard_tools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Sequence variation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Variant analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation annotation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A set of command line tools for manipulating high-throughput sequencing (HTS) data in formats such as SAM/BAM/CRAM and VCF. Available as a standalone program or within the GATK4 program.",
                "homepage": "https://github.com/broadinstitute/picard"
            },
            {
                "name": "MarkDuplicates (IP)",
                "uri": "https://bio.tools/markduplicates_ip",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0253",
                                    "term": "Sequence feature detection"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0253",
                                    "term": "Sequence feature recognition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0253",
                                    "term": "Sequence feature prediction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            },
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "Marks all duplicate reads in a provided SAM or BAM file and either removes them or flags them.",
                "homepage": "https://galaxy.pasteur.fr/tool_runner?tool_id=toolshed.pasteur.fr/repos/fmareuil/picard_pasteur_wrapper/rgPicardMarkDups/1.56.0"
            }
        ],
        "inputs": [
            "meta",
            "bam"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::picard=2.27.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/picard:2.27.1--hdfd78af_0' : 'quay.io/biocontainers/picard:2.27.1--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.bam\n    touch ${prefix}.bam.bai\n    touch ${prefix}.MarkDuplicates.metrics.txt\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        picard: \\$(echo \\$(picard MarkDuplicates --version 2>&1) | grep -o 'Version:.*' | cut -f2- -d:)\n    END_VERSIONS\n    \"\"\""
    },
    "MOSDEPTH": {
        "name_process": "MOSDEPTH",
        "string_process": "process MOSDEPTH {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? 'bioconda::mosdepth=0.3.3' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mosdepth:0.3.3--hdfd78af_1' :\n        'quay.io/biocontainers/mosdepth:0.3.3--hdfd78af_1'}\"\n\n    input:\n    tuple val(meta), path(bam), path(bai)\n    path  bed\n    val   window_size\n\n    output:\n    tuple val(meta), path('*.global.dist.txt')    , emit: global_txt\n    tuple val(meta), path('*.region.dist.txt')    , emit: regions_txt , optional:true\n    tuple val(meta), path('*.summary.txt')        , emit: summary_txt\n    tuple val(meta), path('*.per-base.d4')        , emit: d4          , optional:true\n    tuple val(meta), path('*.per-base.bed.gz')    , emit: per_base_bed, optional:true\n    tuple val(meta), path('*.per-base.bed.gz.csi'), emit: per_base_csi, optional:true\n    tuple val(meta), path('*.regions.bed.gz')     , emit: regions_bed , optional:true\n    tuple val(meta), path('*.regions.bed.gz.csi') , emit: regions_csi , optional:true\n    path  \"versions.yml\"                          , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (window_size) {\n        interval = \"--by ${window_size}\"\n    } else if ( bed ) {\n        interval = \"--by ${bed}\"\n    } else {\n        interval = \"\"\n    }\n    \"\"\"\n    mosdepth \\\\\n        $interval \\\\\n        $args \\\\\n        $prefix \\\\\n        $bam\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        mosdepth: \\$(mosdepth --version 2>&1 | sed 's/^.*mosdepth //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.global.dist.txt\n    touch ${prefix}.region.dist.txt\n    touch ${prefix}.summary.txt\n    touch ${prefix}.per-base.d4\n    touch ${prefix}.per-base.bed.gz\n    touch ${prefix}.per-base.bed.gz.csi\n    touch ${prefix}.regions.bed.gz\n    touch ${prefix}.regions.bed.gz.csi\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        mosdepth: \\$(mosdepth --version 2>&1 | sed 's/^.*mosdepth //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 66,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (window_size) {\n        interval = \"--by ${window_size}\"\n    } else if ( bed ) {\n        interval = \"--by ${bed}\"\n    } else {\n        interval = \"\"\n    }\n    \"\"\"\n    mosdepth \\\\\n        $interval \\\\\n        $args \\\\\n        $prefix \\\\\n        $bam\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        mosdepth: \\$(mosdepth --version 2>&1 | sed 's/^.*mosdepth //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [
            "mosdepth"
        ],
        "tools_url": [
            "https://bio.tools/mosdepth"
        ],
        "tools_dico": [
            {
                "name": "mosdepth",
                "uri": "https://bio.tools/mosdepth",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2269",
                            "term": "Statistics and probability"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2478",
                                    "term": "Nucleic acid sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3230",
                                    "term": "Read depth analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2478",
                                    "term": "Sequence analysis (nucleic acid)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Fast BAM/CRAM depth calculation for WGS, exome, or targeted sequencing.",
                "homepage": "https://github.com/brentp/mosdepth"
            }
        ],
        "inputs": [
            "meta",
            "bam",
            "bai",
            "bed",
            "window_size"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? 'bioconda::mosdepth=0.3.3' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mosdepth:0.3.3--hdfd78af_1' : 'quay.io/biocontainers/mosdepth:0.3.3--hdfd78af_1'}\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.global.dist.txt\n    touch ${prefix}.region.dist.txt\n    touch ${prefix}.summary.txt\n    touch ${prefix}.per-base.d4\n    touch ${prefix}.per-base.bed.gz\n    touch ${prefix}.per-base.bed.gz.csi\n    touch ${prefix}.regions.bed.gz\n    touch ${prefix}.regions.bed.gz.csi\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        mosdepth: \\$(mosdepth --version 2>&1 | sed 's/^.*mosdepth //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\""
    },
    "ISMAPPER": {
        "name_process": "ISMAPPER",
        "string_process": "process ISMAPPER {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::ismapper=2.0.2\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/ismapper:2.0.2--pyhdfd78af_1' :\n        'quay.io/biocontainers/ismapper:2.0.2--pyhdfd78af_1' }\"\n\n    input:\n    tuple val(meta), path(reads), path(reference), path(query)\n\n    output:\n    tuple val(meta), path(\"results/*\"), emit: results\n    path \"versions.yml\"               , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    ismap \\\\\n        $args \\\\\n        --t $task.cpus \\\\\n        --output_dir results \\\\\n        --queries $query \\\\\n        --reference $reference \\\\\n        --reads $reads\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        ismapper: \\$( echo \\$( ismap --version 2>&1 ) | sed 's/^.*ismap //' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    ismap \\\\\n        $args \\\\\n        --t $task.cpus \\\\\n        --output_dir results \\\\\n        --queries $query \\\\\n        --reference $reference \\\\\n        --reads $reads\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        ismapper: \\$( echo \\$( ismap --version 2>&1 ) | sed 's/^.*ismap //' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [
            "VISMapper"
        ],
        "tools_url": [
            "https://bio.tools/vismapper"
        ],
        "tools_dico": [
            {
                "name": "VISMapper",
                "uri": "https://bio.tools/vismapper",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0092",
                            "term": "Data visualisation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0781",
                            "term": "Virology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3303",
                            "term": "Medicine"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0092",
                            "term": "Data rendering"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3303",
                            "term": "Experimental medicine"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3303",
                            "term": "Clinical medicine"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3303",
                            "term": "Biomedical research"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0564",
                                    "term": "Sequence visualisation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0564",
                                    "term": "Sequence rendering"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Ultra-fast exhaustive cartography of viral insertion sites for gene therapy.",
                "homepage": "http://vismapper.babelomics.org/"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "reference",
            "query"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::ismapper=2.0.2\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/ismapper:2.0.2--pyhdfd78af_1' : 'quay.io/biocontainers/ismapper:2.0.2--pyhdfd78af_1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "ARTIC_MINION": {
        "name_process": "ARTIC_MINION",
        "string_process": "process ARTIC_MINION {\n    tag \"$meta.id\"\n    label 'process_high'\n\n    conda (params.enable_conda ? \"bioconda::artic=1.2.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/artic:1.2.1--py_0' :\n        'quay.io/biocontainers/artic:1.2.1--py_0' }\"\n\n    input:\n    tuple val(meta), path(fastq)\n    path  fast5_dir\n    path  sequencing_summary\n    path  (\"primer-schemes/${scheme}/V${scheme_version}/${scheme}.reference.fasta\")\n    path  (\"primer-schemes/${scheme}/V${scheme_version}/${scheme}.scheme.bed\")\n    path  medaka_model_file\n    val   medaka_model_string\n    val   scheme\n    val   scheme_version\n\n    output:\n    tuple val(meta), path(\"${prefix}.*\")                              , emit: results\n    tuple val(meta), path(\"${prefix}.sorted.bam\")                     , emit: bam\n    tuple val(meta), path(\"${prefix}.sorted.bam.bai\")                 , emit: bai\n    tuple val(meta), path(\"${prefix}.trimmed.rg.sorted.bam\")          , emit: bam_trimmed\n    tuple val(meta), path(\"${prefix}.trimmed.rg.sorted.bam.bai\")      , emit: bai_trimmed\n    tuple val(meta), path(\"${prefix}.primertrimmed.rg.sorted.bam\")    , emit: bam_primertrimmed\n    tuple val(meta), path(\"${prefix}.primertrimmed.rg.sorted.bam.bai\"), emit: bai_primertrimmed\n    tuple val(meta), path(\"${prefix}.consensus.fasta\")                , emit: fasta\n    tuple val(meta), path(\"${prefix}.pass.vcf.gz\")                    , emit: vcf\n    tuple val(meta), path(\"${prefix}.pass.vcf.gz.tbi\")                , emit: tbi\n    tuple val(meta), path(\"*.json\"), optional:true                    , emit: json\n    path  \"versions.yml\"                                              , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args   ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n    def version  = scheme_version.toString().toLowerCase().replaceAll('v','')\n    def fast5    = fast5_dir ? \"--fast5-directory $fast5_dir\"             : \"\"\n    def summary  = sequencing_summary ? \"--sequencing-summary $sequencing_summary\" : \"\"\n    def model    = \"\"\n    if (args.tokenize().contains('--medaka')) {\n        fast5   = \"\"\n        summary = \"\"\n        model   = medaka_model_file ? \"--medaka-model ./$medaka_model_file\" : \"--medaka-model $medaka_model_string\"\n    }\n    def hd5_plugin_path = task.ext.hd5_plugin_path ? \"export HDF5_PLUGIN_PATH=\" + task.ext.hd5_plugin_path : \"export HDF5_PLUGIN_PATH=/usr/local/lib/python3.6/site-packages/ont_fast5_api/vbz_plugin\"\n    \"\"\"\n    $hd5_plugin_path\n\n    artic \\\\\n        minion \\\\\n        $args \\\\\n        --threads $task.cpus \\\\\n        --read-file $fastq \\\\\n        --scheme-directory ./primer-schemes \\\\\n        --scheme-version $version \\\\\n        $model \\\\\n        $fast5 \\\\\n        $summary \\\\\n        $scheme \\\\\n        $prefix\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        artic: \\$(artic --version 2>&1 | sed 's/^.*artic //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 70,
        "string_script": "    def args = task.ext.args   ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n    def version  = scheme_version.toString().toLowerCase().replaceAll('v','')\n    def fast5    = fast5_dir ? \"--fast5-directory $fast5_dir\"             : \"\"\n    def summary  = sequencing_summary ? \"--sequencing-summary $sequencing_summary\" : \"\"\n    def model    = \"\"\n    if (args.tokenize().contains('--medaka')) {\n        fast5   = \"\"\n        summary = \"\"\n        model   = medaka_model_file ? \"--medaka-model ./$medaka_model_file\" : \"--medaka-model $medaka_model_string\"\n    }\n    def hd5_plugin_path = task.ext.hd5_plugin_path ? \"export HDF5_PLUGIN_PATH=\" + task.ext.hd5_plugin_path : \"export HDF5_PLUGIN_PATH=/usr/local/lib/python3.6/site-packages/ont_fast5_api/vbz_plugin\"\n    \"\"\"\n    $hd5_plugin_path\n\n    artic \\\\\n        minion \\\\\n        $args \\\\\n        --threads $task.cpus \\\\\n        --read-file $fastq \\\\\n        --scheme-directory ./primer-schemes \\\\\n        --scheme-version $version \\\\\n        $model \\\\\n        $fast5 \\\\\n        $summary \\\\\n        $scheme \\\\\n        $prefix\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        artic: \\$(artic --version 2>&1 | sed 's/^.*artic //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 32,
        "language_script": "bash",
        "tools": [
            "SummaryAUC",
            "MoDEL",
            "ARTIC",
            "MinION"
        ],
        "tools_url": [
            "https://bio.tools/SummaryAUC",
            "https://bio.tools/model",
            "https://bio.tools/artic",
            "https://bio.tools/MinION"
        ],
        "tools_dico": [
            {
                "name": "SummaryAUC",
                "uri": "https://bio.tools/SummaryAUC",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype and phenotype"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype and phenotype resources"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype-phenotype analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype-phenotype"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Imputation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0484",
                                    "term": "SNP detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Data imputation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0484",
                                    "term": "Single nucleotide polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0484",
                                    "term": "SNP discovery"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0484",
                                    "term": "SNP calling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Tool for evaluating the performance of polygenic risk prediction models in validation datasets with only summary level statistics.",
                "homepage": "https://github.com/lsncibb/SummaryAUC"
            },
            {
                "name": "MoDEL",
                "uri": "https://bio.tools/model",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0176",
                            "term": "Molecular dynamics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2426",
                                    "term": "Modelling and simulation"
                                }
                            ],
                            []
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0842",
                                "term": "Identifier"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2080",
                                "term": "Database search results"
                            }
                        ]
                    }
                ],
                "description": "Database of protein Molecular Dynamics simulations, with 1800 trajectories representing different structural clusters of the PDB.",
                "homepage": "http://mmb.irbbarcelona.org/MoDEL"
            },
            {
                "name": "ARTIC",
                "uri": "https://bio.tools/artic",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3494",
                                "term": "DNA sequence"
                            },
                            {
                                "uri": "http://edamontology.org/data_2012",
                                "term": "Sequence coordinates"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_1383",
                                "term": "Nucleic acid sequence alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "A bioinformatics pipeline for working with virus sequencing data sequenced with nanopore",
                "homepage": "https://github.com/artic-network/fieldbioinformatics"
            },
            {
                "name": "MinION",
                "uri": "https://bio.tools/MinION",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Whole genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "Public health and epidemiology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3301",
                            "term": "Microbiology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3293",
                            "term": "Phylogenetics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "WGS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Public_health"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Epidemiology"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3644",
                                    "term": "de Novo sequencing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0310",
                                    "term": "Sequence assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Sequence trimming"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Trimming"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Rapid, multiplexed, whole genome and plasmid sequencing of foodborne pathogens using long-read nanopore technology.\n\nWorkflow and supporting files for Taylor et al: \"Rapid, multiplexed, whole genome and plasmid sequencing of foodborne pathogens using long-read nanopore technology\".\n\nCompanion materials for the manuscript \"Taylor et al: Rapid, multiplexed, whole genome and plasmid sequencing of foodborne pathogens using long-read nanopore technology\".\n\nThis repository contains the primary Nextflow workflow (minion_bacterial.nf) for bacterial nanopore assembly described in the manuscript and accessory scripts for reproducing the results therein. Workflows for the phylogenetic analysis can be run separately from the phylogenetics directory. The time series analysis can be reproduced using the following steps:.",
                "homepage": "https://github.com/jvolkening/minion_bacterial"
            }
        ],
        "inputs": [
            "meta",
            "fastq",
            "fast5_dir",
            "sequencing_summary",
            "medaka_model_file",
            "medaka_model_string",
            "scheme",
            "scheme_version"
        ],
        "nb_inputs": 8,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "conda (params.enable_conda ? \"bioconda::artic=1.2.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/artic:1.2.1--py_0' : 'quay.io/biocontainers/artic:1.2.1--py_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "LOFREQ_INDELQUAL": {
        "name_process": "LOFREQ_INDELQUAL",
        "string_process": "process LOFREQ_INDELQUAL {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::lofreq=2.1.5\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/lofreq:2.1.5--py38h588ecb2_4' :\n        'quay.io/biocontainers/lofreq:2.1.5--py38h588ecb2_4' }\"\n\n    input:\n    tuple val(meta), path(bam)\n    path fasta\n\n    output:\n    tuple val(meta), path(\"*.bam\"), emit: bam\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    lofreq indelqual \\\\\n        $args \\\\\n        -f $fasta \\\\\n        -o ${prefix}.bam \\\\\n        $bam\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        lofreq: \\$(echo \\$(lofreq version 2>&1) | sed 's/^version: //; s/ *commit.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    lofreq indelqual \\\\\n        $args \\\\\n        -f $fasta \\\\\n        -o ${prefix}.bam \\\\\n        $bam\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        lofreq: \\$(echo \\$(lofreq version 2>&1) | sed 's/^version: //; s/ *commit.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "bam",
            "fasta"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::lofreq=2.1.5\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/lofreq:2.1.5--py38h588ecb2_4' : 'quay.io/biocontainers/lofreq:2.1.5--py38h588ecb2_4' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "CELLRANGER_MKREF": {
        "name_process": "CELLRANGER_MKREF",
        "string_process": "process CELLRANGER_MKREF {\n    tag 'mkref'\n    label 'process_high'\n\n    if (params.enable_conda) {\n        exit 1, \"Conda environments cannot be used when using the Cell Ranger tool. Please use docker or singularity containers.\"\n    }\n    container \"nfcore/cellranger:6.1.2\"\n\n    input:\n    path fasta\n    path gtf\n    val reference_name\n\n    output:\n    path \"${reference_name}\", emit: reference\n    path \"versions.yml\"     , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    cellranger \\\\\n        mkref \\\\\n        --genome=$reference_name \\\\\n        --fasta=$fasta \\\\\n        --genes=$gtf\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        cellranger: \\$(echo \\$( cellranger --version 2>&1) | sed 's/^.*[^0-9]\\\\([0-9]*\\\\.[0-9]*\\\\.[0-9]*\\\\).*\\$/\\\\1/' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    cellranger \\\\\n        mkref \\\\\n        --genome=$reference_name \\\\\n        --fasta=$fasta \\\\\n        --genes=$gtf\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        cellranger: \\$(echo \\$( cellranger --version 2>&1) | sed 's/^.*[^0-9]\\\\([0-9]*\\\\.[0-9]*\\\\.[0-9]*\\\\).*\\$/\\\\1/' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fasta",
            "gtf",
            "reference_name"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag 'mkref'",
            "label 'process_high' if (params.enable_conda) { exit 1, \"Conda environments cannot be used when using the Cell Ranger tool. Please use docker or singularity containers.\" }",
            "container \"nfcore/cellranger:6.1.2\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "PLASMIDID": {
        "name_process": "PLASMIDID",
        "string_process": "process PLASMIDID {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? 'bioconda::plasmidid=1.6.5' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/plasmidid:1.6.5--hdfd78af_0' :\n        'quay.io/biocontainers/plasmidid:1.6.5--hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(scaffold)\n    path  fasta\n\n    output:\n    tuple val(meta), path(\"${prefix}/*final_results.html\"), emit: html\n    tuple val(meta), path(\"${prefix}/*final_results.tab\") , emit: tab\n    tuple val(meta), path(\"${prefix}/images/\")            , emit: images\n    tuple val(meta), path(\"${prefix}/logs/\")              , emit: logs\n    tuple val(meta), path(\"${prefix}/data/\")              , emit: data\n    tuple val(meta), path(\"${prefix}/database/\")          , emit: database\n    tuple val(meta), path(\"${prefix}/fasta_files/\")       , emit: fasta_files\n    tuple val(meta), path(\"${prefix}/kmer/\")              , emit: kmer\n    path \"versions.yml\"                                   , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args   ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    plasmidID \\\\\n        -d $fasta \\\\\n        -s $prefix \\\\\n        -c $scaffold \\\\\n        $args \\\\\n        -o .\n\n    mv NO_GROUP/$prefix ./$prefix\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        plasmidid: \\$(echo \\$(plasmidID --version 2>&1))\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 43,
        "string_script": "    def args = task.ext.args   ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    plasmidID \\\\\n        -d $fasta \\\\\n        -s $prefix \\\\\n        -c $scaffold \\\\\n        $args \\\\\n        -o .\n\n    mv NO_GROUP/$prefix ./$prefix\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        plasmidid: \\$(echo \\$(plasmidID --version 2>&1))\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "scaffold",
            "fasta"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? 'bioconda::plasmidid=1.6.5' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/plasmidid:1.6.5--hdfd78af_0' : 'quay.io/biocontainers/plasmidid:1.6.5--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "MUMMER": {
        "name_process": "MUMMER",
        "string_process": "\nprocess MUMMER {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::mummer=3.23\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mummer:3.23--pl5262h1b792b2_12' :\n        'quay.io/biocontainers/mummer:3.23--pl5262h1b792b2_12' }\"\n\n    input:\n    tuple val(meta), path(ref), path(query)\n\n    output:\n    tuple val(meta), path(\"*.coords\"), emit: coords\n    path \"versions.yml\"              , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def is_compressed_ref = ref.getName().endsWith(\".gz\") ? true : false\n    def fasta_name_ref = ref.getName().replace(\".gz\", \"\")\n\n    def is_compressed_query = query.getName().endsWith(\".gz\") ? true : false\n    def fasta_name_query = query.getName().replace(\".gz\", \"\")\n    \"\"\"\n    if [ \"$is_compressed_ref\" == \"true\" ]; then\n        gzip -c -d $ref > $fasta_name_ref\n    fi\n    if [ \"$is_compressed_query\" == \"true\" ]; then\n        gzip -c -d $query > $fasta_name_query\n    fi\n    mummer \\\\\n        $args \\\\\n        $fasta_name_ref \\\\\n        $fasta_name_query \\\\\n        > ${prefix}.coords\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        mummer: $VERSION\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 45,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def is_compressed_ref = ref.getName().endsWith(\".gz\") ? true : false\n    def fasta_name_ref = ref.getName().replace(\".gz\", \"\")\n\n    def is_compressed_query = query.getName().endsWith(\".gz\") ? true : false\n    def fasta_name_query = query.getName().replace(\".gz\", \"\")\n    \"\"\"\n    if [ \"$is_compressed_ref\" == \"true\" ]; then\n        gzip -c -d $ref > $fasta_name_ref\n    fi\n    if [ \"$is_compressed_query\" == \"true\" ]; then\n        gzip -c -d $query > $fasta_name_query\n    fi\n    mummer \\\\\n        $args \\\\\n        $fasta_name_ref \\\\\n        $fasta_name_query \\\\\n        > ${prefix}.coords\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        mummer: $VERSION\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 24,
        "language_script": "bash",
        "tools": [
            "MUMmer"
        ],
        "tools_url": [
            "https://bio.tools/mummer"
        ],
        "tools_dico": [
            {
                "name": "MUMmer",
                "uri": "https://bio.tools/mummer",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "MUMmer is a modular system for the rapid whole genome alignment of finished or draft sequence. Basically it is a ultra-fast alignment of large-scale DNA and protein sequences",
                "homepage": "http://mummer.sourceforge.net/"
            }
        ],
        "inputs": [
            "meta",
            "ref",
            "query"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::mummer=3.23\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mummer:3.23--pl5262h1b792b2_12' : 'quay.io/biocontainers/mummer:3.23--pl5262h1b792b2_12' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "PICARD_CREATESEQUENCEDICTIONARY": {
        "name_process": "PICARD_CREATESEQUENCEDICTIONARY",
        "string_process": "process PICARD_CREATESEQUENCEDICTIONARY {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::picard=2.27.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/picard:2.27.1--hdfd78af_0' :\n        'quay.io/biocontainers/picard:2.27.1--hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(fasta)\n\n    output:\n    tuple val(meta), path(\"*.dict\"), emit: reference_dict\n    path \"versions.yml\"            , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[Picard CreateSequenceDictionary] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    picard \\\\\n        -Xmx${avail_mem}g \\\\\n        CreateSequenceDictionary  \\\\\n        $args \\\\\n        --REFERENCE $fasta \\\\\n        --OUTPUT ${prefix}.dict\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        picard: \\$(picard CreateSequenceDictionary --version 2>&1 | grep -o 'Version:.*' | cut -f2- -d:)\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 40,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[Picard CreateSequenceDictionary] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    picard \\\\\n        -Xmx${avail_mem}g \\\\\n        CreateSequenceDictionary  \\\\\n        $args \\\\\n        --REFERENCE $fasta \\\\\n        --OUTPUT ${prefix}.dict\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        picard: \\$(picard CreateSequenceDictionary --version 2>&1 | grep -o 'Version:.*' | cut -f2- -d:)\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 20,
        "language_script": "bash",
        "tools": [
            "Picard"
        ],
        "tools_url": [
            "https://bio.tools/picard_tools"
        ],
        "tools_dico": [
            {
                "name": "Picard",
                "uri": "https://bio.tools/picard_tools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Sequence variation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Variant analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation annotation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A set of command line tools for manipulating high-throughput sequencing (HTS) data in formats such as SAM/BAM/CRAM and VCF. Available as a standalone program or within the GATK4 program.",
                "homepage": "https://github.com/broadinstitute/picard"
            }
        ],
        "inputs": [
            "meta",
            "fasta"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::picard=2.27.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/picard:2.27.1--hdfd78af_0' : 'quay.io/biocontainers/picard:2.27.1--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "MINIASM": {
        "name_process": "MINIASM",
        "string_process": "process MINIASM {\n    tag \"$meta.id\"\n    label 'process_high'\n\n    conda (params.enable_conda ? \"bioconda::miniasm=0.3_r179\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/miniasm:0.3_r179--h5bf99c6_2' :\n        'quay.io/biocontainers/miniasm:0.3_r179--h5bf99c6_2' }\"\n\n    input:\n    tuple val(meta), path(reads), path(paf)\n\n    output:\n    tuple val(meta), path(\"*.gfa.gz\")  , emit: gfa\n    tuple val(meta), path(\"*.fasta.gz\"), emit: assembly\n    path \"versions.yml\"                , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    miniasm \\\\\n        $args \\\\\n        -f $reads \\\\\n        $paf > \\\\\n        ${prefix}.gfa\n\n    awk '/^S/{print \">\"\\$2\"\\\\n\"\\$3}' \"${prefix}.gfa\" | fold > ${prefix}.fasta\n\n    gzip -n ${prefix}.gfa\n    gzip -n ${prefix}.fasta\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        miniasm: \\$( miniasm -V 2>&1 )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 39,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    miniasm \\\\\n        $args \\\\\n        -f $reads \\\\\n        $paf > \\\\\n        ${prefix}.gfa\n\n    awk '/^S/{print \">\"\\$2\"\\\\n\"\\$3}' \"${prefix}.gfa\" | fold > ${prefix}.fasta\n\n    gzip -n ${prefix}.gfa\n    gzip -n ${prefix}.fasta\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        miniasm: \\$( miniasm -V 2>&1 )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [
            "TFold"
        ],
        "tools_url": [
            "https://bio.tools/tfold"
        ],
        "tools_dico": [
            {
                "name": "TFold",
                "uri": "https://bio.tools/tfold",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0082",
                            "term": "Structure prediction"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0099",
                            "term": "RNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0659",
                            "term": "Functional, regulatory and non-coding RNA"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0278",
                                    "term": "RNA secondary structure prediction"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "An algorithm for predicting non-coding RNA secondary structures.",
                "homepage": "https://evryrna.ibisc.univ-evry.fr/evryrna/tfold"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "paf"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "conda (params.enable_conda ? \"bioconda::miniasm=0.3_r179\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/miniasm:0.3_r179--h5bf99c6_2' : 'quay.io/biocontainers/miniasm:0.3_r179--h5bf99c6_2' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "MALTEXTRACT": {
        "name_process": "MALTEXTRACT",
        "string_process": "process MALTEXTRACT {\n\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::hops=0.35\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/hops:0.35--hdfd78af_1' :\n        'quay.io/biocontainers/hops:0.35--hdfd78af_1' }\"\n\n    input:\n    path rma6\n    path taxon_list\n    path ncbi_dir\n\n    output:\n    path \"results\"      , emit: results\n    path \"versions.yml\" , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    MaltExtract \\\\\n        -Xmx${task.memory.toGiga()}g \\\\\n        -p $task.cpus \\\\\n        -i ${rma6.join(' ')} \\\\\n        -t $taxon_list \\\\\n        -r $ncbi_dir \\\\\n        -o results/ \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        maltextract: \\$(MaltExtract --help | head -n 2 | tail -n 1 | sed 's/MaltExtract version//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 37,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    MaltExtract \\\\\n        -Xmx${task.memory.toGiga()}g \\\\\n        -p $task.cpus \\\\\n        -i ${rma6.join(' ')} \\\\\n        -t $taxon_list \\\\\n        -r $ncbi_dir \\\\\n        -o results/ \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        maltextract: \\$(MaltExtract --help | head -n 2 | tail -n 1 | sed 's/MaltExtract version//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "rma6",
            "taxon_list",
            "ncbi_dir"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::hops=0.35\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/hops:0.35--hdfd78af_1' : 'quay.io/biocontainers/hops:0.35--hdfd78af_1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "DRAGMAP_HASHTABLE": {
        "name_process": "DRAGMAP_HASHTABLE",
        "string_process": "process DRAGMAP_HASHTABLE {\n    tag \"$fasta\"\n    label 'process_high'\n\n    conda (params.enable_conda ? \"bioconda::dragmap=1.2.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/dragmap:1.2.1--hd4ca14e_0':\n        'quay.io/biocontainers/dragmap:1.2.1--hd4ca14e_0' }\"\n\n    input:\n    path fasta\n\n    output:\n    path \"dragmap\"      , emit: hashmap\n    path \"versions.yml\" , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    mkdir dragmap\n    dragen-os \\\\\n        --build-hash-table true \\\\\n        --ht-reference $fasta \\\\\n        --output-directory dragmap \\\\\n        $args \\\\\n        --ht-num-threads $task.cpus\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        dragmap: \\$(echo \\$(dragen-os --version 2>&1))\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    mkdir dragmap\n    dragen-os \\\\\n        --build-hash-table true \\\\\n        --ht-reference $fasta \\\\\n        --output-directory dragmap \\\\\n        $args \\\\\n        --ht-num-threads $task.cpus\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        dragmap: \\$(echo \\$(dragen-os --version 2>&1))\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fasta"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$fasta\"",
            "label 'process_high'",
            "conda (params.enable_conda ? \"bioconda::dragmap=1.2.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/dragmap:1.2.1--hd4ca14e_0': 'quay.io/biocontainers/dragmap:1.2.1--hd4ca14e_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "PICARD_COLLECTMULTIPLEMETRICS": {
        "name_process": "PICARD_COLLECTMULTIPLEMETRICS",
        "string_process": "process PICARD_COLLECTMULTIPLEMETRICS {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::picard=2.27.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/picard:2.27.1--hdfd78af_0' :\n        'quay.io/biocontainers/picard:2.27.1--hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(bam)\n    path  fasta\n\n    output:\n    tuple val(meta), path(\"*_metrics\"), emit: metrics\n    tuple val(meta), path(\"*.pdf\")    , emit: pdf\n    path  \"versions.yml\"              , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[Picard CollectMultipleMetrics] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    picard \\\\\n        -Xmx${avail_mem}g \\\\\n        CollectMultipleMetrics \\\\\n        $args \\\\\n        --INPUT $bam \\\\\n        --OUTPUT ${prefix}.CollectMultipleMetrics \\\\\n        --REFERENCE_SEQUENCE $fasta\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        picard: \\$(picard CollectMultipleMetrics --version 2>&1 | grep -o 'Version.*' | cut -f2- -d:)\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.CollectMultipleMetrics.alignment_summary_metrics\n    touch ${prefix}.CollectMultipleMetrics.insert_size_metrics\n    touch ${prefix}.CollectMultipleMetrics.quality_distribution.pdf\n    touch ${prefix}.CollectMultipleMetrics.base_distribution_by_cycle_metrics\n    touch ${prefix}.CollectMultipleMetrics.quality_by_cycle_metrics\n    touch ${prefix}.CollectMultipleMetrics.read_length_histogram.pdf\n    touch ${prefix}.CollectMultipleMetrics.base_distribution_by_cycle.pdf\n    touch ${prefix}.CollectMultipleMetrics.quality_by_cycle.pdf\n    touch ${prefix}.CollectMultipleMetrics.insert_size_histogram.pdf\n    touch ${prefix}.CollectMultipleMetrics.quality_distribution_metrics\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        picard: \\$(echo \\$(picard CollectMultipleMetrics --version 2>&1) | grep -o 'Version:.*' | cut -f2- -d:)\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 63,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[Picard CollectMultipleMetrics] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    picard \\\\\n        -Xmx${avail_mem}g \\\\\n        CollectMultipleMetrics \\\\\n        $args \\\\\n        --INPUT $bam \\\\\n        --OUTPUT ${prefix}.CollectMultipleMetrics \\\\\n        --REFERENCE_SEQUENCE $fasta\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        picard: \\$(picard CollectMultipleMetrics --version 2>&1 | grep -o 'Version.*' | cut -f2- -d:)\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 21,
        "language_script": "bash",
        "tools": [
            "Picard"
        ],
        "tools_url": [
            "https://bio.tools/picard_tools"
        ],
        "tools_dico": [
            {
                "name": "Picard",
                "uri": "https://bio.tools/picard_tools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Sequence variation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Variant analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation annotation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A set of command line tools for manipulating high-throughput sequencing (HTS) data in formats such as SAM/BAM/CRAM and VCF. Available as a standalone program or within the GATK4 program.",
                "homepage": "https://github.com/broadinstitute/picard"
            }
        ],
        "inputs": [
            "meta",
            "bam",
            "fasta"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::picard=2.27.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/picard:2.27.1--hdfd78af_0' : 'quay.io/biocontainers/picard:2.27.1--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.CollectMultipleMetrics.alignment_summary_metrics\n    touch ${prefix}.CollectMultipleMetrics.insert_size_metrics\n    touch ${prefix}.CollectMultipleMetrics.quality_distribution.pdf\n    touch ${prefix}.CollectMultipleMetrics.base_distribution_by_cycle_metrics\n    touch ${prefix}.CollectMultipleMetrics.quality_by_cycle_metrics\n    touch ${prefix}.CollectMultipleMetrics.read_length_histogram.pdf\n    touch ${prefix}.CollectMultipleMetrics.base_distribution_by_cycle.pdf\n    touch ${prefix}.CollectMultipleMetrics.quality_by_cycle.pdf\n    touch ${prefix}.CollectMultipleMetrics.insert_size_histogram.pdf\n    touch ${prefix}.CollectMultipleMetrics.quality_distribution_metrics\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        picard: \\$(echo \\$(picard CollectMultipleMetrics --version 2>&1) | grep -o 'Version:.*' | cut -f2- -d:)\n    END_VERSIONS\n    \"\"\""
    },
    "BAKTA": {
        "name_process": "BAKTA",
        "string_process": "process BAKTA {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::bakta=1.4.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bakta:1.4.0--pyhdfd78af_1' :\n        'quay.io/biocontainers/bakta:1.4.0--pyhdfd78af_1' }\"\n\n    input:\n    tuple val(meta), path(fasta)\n    path db\n    path proteins\n    path prodigal_tf\n\n    output:\n    tuple val(meta), path(\"${prefix}.embl\")             , emit: embl\n    tuple val(meta), path(\"${prefix}.faa\")              , emit: faa\n    tuple val(meta), path(\"${prefix}.ffn\")              , emit: ffn\n    tuple val(meta), path(\"${prefix}.fna\")              , emit: fna\n    tuple val(meta), path(\"${prefix}.gbff\")             , emit: gbff\n    tuple val(meta), path(\"${prefix}.gff3\")             , emit: gff\n    tuple val(meta), path(\"${prefix}.hypotheticals.tsv\"), emit: hypotheticals_tsv\n    tuple val(meta), path(\"${prefix}.hypotheticals.faa\"), emit: hypotheticals_faa\n    tuple val(meta), path(\"${prefix}.tsv\")              , emit: tsv\n    tuple val(meta), path(\"${prefix}.txt\")              , emit: txt\n    path \"versions.yml\"                                 , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args   ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n    def proteins_opt = proteins ? \"--proteins ${proteins[0]}\" : \"\"\n    def prodigal_opt = prodigal_tf ? \"--prodigal-tf ${prodigal_tf[0]}\" : \"\"\n    \"\"\"\n    bakta \\\\\n        $args \\\\\n        --threads $task.cpus \\\\\n        --prefix $prefix \\\\\n        --db $db \\\\\n        $proteins_opt \\\\\n        $prodigal_tf \\\\\n        $fasta\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bakta: \\$( echo \\$(bakta --version 2>&1) | sed 's/^.*bakta //' )\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.embl\n    touch ${prefix}.faa\n    touch ${prefix}.ffn\n    touch ${prefix}.fna\n    touch ${prefix}.gbff\n    touch ${prefix}.gff3\n    touch ${prefix}.hypotheticals.tsv\n    touch ${prefix}.hypotheticals.faa\n    touch ${prefix}.tsv\n    touch ${prefix}.txt\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bakta: \\$( echo \\$(bakta --version 2>&1) | sed 's/^.*bakta //' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 70,
        "string_script": "    def args = task.ext.args   ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n    def proteins_opt = proteins ? \"--proteins ${proteins[0]}\" : \"\"\n    def prodigal_opt = prodigal_tf ? \"--prodigal-tf ${prodigal_tf[0]}\" : \"\"\n    \"\"\"\n    bakta \\\\\n        $args \\\\\n        --threads $task.cpus \\\\\n        --prefix $prefix \\\\\n        --db $db \\\\\n        $proteins_opt \\\\\n        $prodigal_tf \\\\\n        $fasta\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bakta: \\$( echo \\$(bakta --version 2>&1) | sed 's/^.*bakta //' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "fasta",
            "db",
            "proteins",
            "prodigal_tf"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::bakta=1.4.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bakta:1.4.0--pyhdfd78af_1' : 'quay.io/biocontainers/bakta:1.4.0--pyhdfd78af_1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.embl\n    touch ${prefix}.faa\n    touch ${prefix}.ffn\n    touch ${prefix}.fna\n    touch ${prefix}.gbff\n    touch ${prefix}.gff3\n    touch ${prefix}.hypotheticals.tsv\n    touch ${prefix}.hypotheticals.faa\n    touch ${prefix}.tsv\n    touch ${prefix}.txt\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bakta: \\$( echo \\$(bakta --version 2>&1) | sed 's/^.*bakta //' )\n    END_VERSIONS\n    \"\"\""
    },
    "BCFTOOLS_CONSENSUS": {
        "name_process": "BCFTOOLS_CONSENSUS",
        "string_process": "process BCFTOOLS_CONSENSUS {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? 'bioconda::bcftools=1.14' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bcftools:1.14--h88f3f91_0' :\n        'quay.io/biocontainers/bcftools:1.14--h88f3f91_0' }\"\n\n    input:\n    tuple val(meta), path(vcf), path(tbi), path(fasta)\n\n    output:\n    tuple val(meta), path('*.fa'), emit: fasta\n    path  \"versions.yml\"         , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    cat $fasta \\\\\n        | bcftools \\\\\n            consensus \\\\\n            $vcf \\\\\n            $args \\\\\n            > ${prefix}.fa\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bcftools: \\$(bcftools --version 2>&1 | head -n1 | sed 's/^.*bcftools //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    cat $fasta \\\\\n        | bcftools \\\\\n            consensus \\\\\n            $vcf \\\\\n            $args \\\\\n            > ${prefix}.fa\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bcftools: \\$(bcftools --version 2>&1 | head -n1 | sed 's/^.*bcftools //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "BCFtools",
            "Consensus"
        ],
        "tools_url": [
            "https://bio.tools/bcftools",
            "https://bio.tools/consensus"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "Consensus",
                "uri": "https://bio.tools/consensus",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0082",
                            "term": "Structure prediction"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2275",
                            "term": "Molecular modelling"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0447",
                                    "term": "Sequence alignment validation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0295",
                                    "term": "Structure alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0477",
                                    "term": "Protein modelling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0447",
                                    "term": "Sequence alignment quality evaluation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0295",
                                    "term": "Structural alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0477",
                                    "term": "Homology modelling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0477",
                                    "term": "Comparative modelling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0477",
                                    "term": "Protein structure comparative modelling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0477",
                                    "term": "Homology structure modelling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Consensus server aligns a sequence to a structural template using a consensus of 5 different alignment methods.  A measure of reliability is produced for each alignment position in order to predict the suitability of regions for comparative modelling.",
                "homepage": "http://stormo.wustl.edu/consensus/"
            }
        ],
        "inputs": [
            "meta",
            "vcf",
            "tbi",
            "fasta"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? 'bioconda::bcftools=1.14' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bcftools:1.14--h88f3f91_0' : 'quay.io/biocontainers/bcftools:1.14--h88f3f91_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "UCSC_BEDCLIP": {
        "name_process": "UCSC_BEDCLIP",
        "string_process": "\nprocess UCSC_BEDCLIP {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::ucsc-bedclip=377\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/ucsc-bedclip:377--h0b8a92a_2' :\n        'quay.io/biocontainers/ucsc-bedclip:377--h0b8a92a_2' }\"\n\n    input:\n    tuple val(meta), path(bedgraph)\n    path  sizes\n\n    output:\n    tuple val(meta), path(\"*.bedGraph\"), emit: bedgraph\n    path \"versions.yml\"                , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    bedClip \\\\\n        $bedgraph \\\\\n        $sizes \\\\\n        ${prefix}.bedGraph\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        ucsc: $VERSION\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    bedClip \\\\\n        $bedgraph \\\\\n        $sizes \\\\\n        ${prefix}.bedGraph\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        ucsc: $VERSION\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "bedgraph",
            "sizes"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::ucsc-bedclip=377\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/ucsc-bedclip:377--h0b8a92a_2' : 'quay.io/biocontainers/ucsc-bedclip:377--h0b8a92a_2' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "UCSC_BIGWIGAVERAGEOVERBED": {
        "name_process": "UCSC_BIGWIGAVERAGEOVERBED",
        "string_process": "\nprocess UCSC_BIGWIGAVERAGEOVERBED {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::ucsc-bigwigaverageoverbed=377\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/ucsc-bigwigaverageoverbed:377--h0b8a92a_2' :\n        'quay.io/biocontainers/ucsc-bigwigaverageoverbed:377--h0b8a92a_2' }\"\n\n    input:\n    tuple val(meta), path(bed)\n    path bigwig\n\n    output:\n    tuple val(meta), path(\"*.tab\"), emit: tab\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n                                                                      \n    \"\"\"\n    bigWigAverageOverBed \\\\\n        $args \\\\\n        $bigwig \\\\\n        $bed \\\\\n        ${prefix}.tab\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        ucsc: $VERSION\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 36,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n                                                                      \n    \"\"\"\n    bigWigAverageOverBed \\\\\n        $args \\\\\n        $bigwig \\\\\n        $bed \\\\\n        ${prefix}.tab\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        ucsc: $VERSION\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "bed",
            "bigwig"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::ucsc-bigwigaverageoverbed=377\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/ucsc-bigwigaverageoverbed:377--h0b8a92a_2' : 'quay.io/biocontainers/ucsc-bigwigaverageoverbed:377--h0b8a92a_2' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "SAMTOOLS_INDEX": {
        "name_process": "SAMTOOLS_INDEX",
        "string_process": "process SAMTOOLS_INDEX {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::samtools=1.15.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/samtools:1.15.1--h1170115_0' :\n        'quay.io/biocontainers/samtools:1.15.1--h1170115_0' }\"\n\n    input:\n    tuple val(meta), path(input)\n\n    output:\n    tuple val(meta), path(\"*.bai\") , optional:true, emit: bai\n    tuple val(meta), path(\"*.csi\") , optional:true, emit: csi\n    tuple val(meta), path(\"*.crai\"), optional:true, emit: crai\n    path  \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    samtools \\\\\n        index \\\\\n        -@ ${task.cpus-1} \\\\\n        $args \\\\\n        $input\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    \"\"\"\n    touch ${input}.bai\n    touch ${input}.crai\n    touch ${input}.csi\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 46,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    samtools \\\\\n        index \\\\\n        -@ ${task.cpus-1} \\\\\n        $args \\\\\n        $input\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [
            "SAMtools",
            "CINdex"
        ],
        "tools_url": [
            "https://bio.tools/samtools",
            "https://bio.tools/cindex"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "CINdex",
                "uri": "https://bio.tools/cindex",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3233",
                                    "term": "Copy number estimation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3233",
                                    "term": "Transcript copy number estimation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The package addresses important area of high-throughput genomic analysis. It allows the automated processing and analysis of the experimental DNA copy number data generated by Affymetrix SNP 6.0 arrays or similar. It calculates the chromosome instability index to quantitatively characterize genome-wide DNA copy number alterations. This package calculates not only overall genomic instability, but also instability in terms of copy number gains and losses at the chromosome and cytoband level.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/CINdex.html"
            }
        ],
        "inputs": [
            "meta",
            "input"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::samtools=1.15.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/samtools:1.15.1--h1170115_0' : 'quay.io/biocontainers/samtools:1.15.1--h1170115_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    \"\"\"\n    touch ${input}.bai\n    touch ${input}.crai\n    touch ${input}.csi\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\""
    },
    "ICHORCNA_CREATEPON": {
        "name_process": "ICHORCNA_CREATEPON",
        "string_process": "\nprocess ICHORCNA_CREATEPON {\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::r-ichorcna=0.3.2\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/r-ichorcna:0.3.2--r41hdfd78af_0' :\n        'quay.io/biocontainers/r-ichorcna:0.3.2--r41hdfd78af_0' }\"\n\n    input:\n    path wigs\n    path gc_wig\n    path map_wig\n    path centromere\n\n    output:\n    path \"*.rds\"        , emit: rds\n    path \"*.txt\"        , emit: txt\n    path \"versions.yml\" , emit: versions\n\n    when:\n        task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def centro = centromere ? \"--centromere ${centromere}\" : ''\n    def prefix = task.ext.prefix ?: \"PoN\"\n\n    \"\"\"\n    echo ${wigs} | tr \" \" \"\\\\n\" > wig_files.txt\n\n    createPanelOfNormals.R \\\\\n        --filelist wig_files.txt \\\\\n        --gcWig ${gc_wig} \\\\\n        --mapWig ${map_wig} \\\\\n        ${centro} \\\\\n        ${args} \\\\\n        --outfile ${prefix}\n\n    rm wig_files.txt\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        ichorcna: $VERSION\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 45,
        "string_script": "    def args = task.ext.args ?: ''\n    def centro = centromere ? \"--centromere ${centromere}\" : ''\n    def prefix = task.ext.prefix ?: \"PoN\"\n\n    \"\"\"\n    echo ${wigs} | tr \" \" \"\\\\n\" > wig_files.txt\n\n    createPanelOfNormals.R \\\\\n        --filelist wig_files.txt \\\\\n        --gcWig ${gc_wig} \\\\\n        --mapWig ${map_wig} \\\\\n        ${centro} \\\\\n        ${args} \\\\\n        --outfile ${prefix}\n\n    rm wig_files.txt\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        ichorcna: $VERSION\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 21,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "wigs",
            "gc_wig",
            "map_wig",
            "centromere"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::r-ichorcna=0.3.2\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/r-ichorcna:0.3.2--r41hdfd78af_0' : 'quay.io/biocontainers/r-ichorcna:0.3.2--r41hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "NEXTCLADE_RUN": {
        "name_process": "NEXTCLADE_RUN",
        "string_process": "process NEXTCLADE_RUN {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::nextclade=1.10.2\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/nextclade:1.10.2--h9ee0642_0' :\n        'quay.io/biocontainers/nextclade:1.10.2--h9ee0642_0' }\"\n\n    input:\n    tuple val(meta), path(fasta)\n    path dataset\n\n    output:\n    tuple val(meta), path(\"${prefix}.csv\")      , emit: csv\n    tuple val(meta), path(\"${prefix}.tsv\")      , emit: tsv\n    tuple val(meta), path(\"${prefix}.json\")     , emit: json\n    tuple val(meta), path(\"${prefix}.tree.json\"), emit: json_tree\n    path \"versions.yml\"                         , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    nextclade \\\\\n        run \\\\\n        $args \\\\\n        --jobs $task.cpus \\\\\n        --input-fasta $fasta \\\\\n        --input-dataset $dataset \\\\\n        --output-csv ${prefix}.csv \\\\\n        --output-tsv ${prefix}.tsv \\\\\n        --output-json ${prefix}.json \\\\\n        --output-tree ${prefix}.tree.json \\\\\n        --output-basename ${prefix}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        nextclade: \\$(nextclade --version 2>&1)\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 43,
        "string_script": "    def args = task.ext.args ?: ''\n    prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    nextclade \\\\\n        run \\\\\n        $args \\\\\n        --jobs $task.cpus \\\\\n        --input-fasta $fasta \\\\\n        --input-dataset $dataset \\\\\n        --output-csv ${prefix}.csv \\\\\n        --output-tsv ${prefix}.tsv \\\\\n        --output-json ${prefix}.json \\\\\n        --output-tree ${prefix}.tree.json \\\\\n        --output-basename ${prefix}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        nextclade: \\$(nextclade --version 2>&1)\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [
            "Faerun"
        ],
        "tools_url": [
            "https://bio.tools/Faerun"
        ],
        "tools_dico": [
            {
                "name": "Faerun",
                "uri": "https://bio.tools/Faerun",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0154",
                            "term": "Small molecules"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0218",
                            "term": "Natural language processing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3047",
                            "term": "Molecular biology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0218",
                            "term": "NLP"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "PubChem and ChEMBL Beyond Lipinski.",
                "homepage": "http://faerun.gdb.tools/"
            }
        ],
        "inputs": [
            "meta",
            "fasta",
            "dataset"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::nextclade=1.10.2\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/nextclade:1.10.2--h9ee0642_0' : 'quay.io/biocontainers/nextclade:1.10.2--h9ee0642_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "PYDAMAGE_ANALYZE": {
        "name_process": "PYDAMAGE_ANALYZE",
        "string_process": "process PYDAMAGE_ANALYZE {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::pydamage=0.70\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/pydamage:0.70--pyhdfd78af_0' :\n        'quay.io/biocontainers/pydamage:0.70--pyhdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(bam), path(bai)\n\n    output:\n    tuple val(meta), path(\"pydamage_results/pydamage_results.csv\"), emit: csv\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    pydamage \\\\\n        analyze \\\\\n        $args \\\\\n        -p $task.cpus \\\\\n        $bam\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        pydamage: \\$(echo \\$(pydamage --version 2>&1) | sed -e 's/pydamage, version //g')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    pydamage \\\\\n        analyze \\\\\n        $args \\\\\n        -p $task.cpus \\\\\n        $bam\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        pydamage: \\$(echo \\$(pydamage --version 2>&1) | sed -e 's/pydamage, version //g')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [
            "KAnalyze"
        ],
        "tools_url": [
            "https://bio.tools/kanalyze"
        ],
        "tools_dico": [
            {
                "name": "KAnalyze",
                "uri": "https://bio.tools/kanalyze",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0099",
                            "term": "RNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acids"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acid bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acid informatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2478",
                                    "term": "Nucleic acid sequence analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2478",
                                    "term": "Sequence analysis (nucleic acid)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Java toolkit designed to convert DNA and RNA sequences into k-mers.",
                "homepage": "http://vannberg.biology.gatech.edu:8080/VannbergLab/kanalyze.html"
            }
        ],
        "inputs": [
            "meta",
            "bam",
            "bai"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::pydamage=0.70\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/pydamage:0.70--pyhdfd78af_0' : 'quay.io/biocontainers/pydamage:0.70--pyhdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "BBMAP_BBDUK": {
        "name_process": "BBMAP_BBDUK",
        "string_process": "process BBMAP_BBDUK {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::bbmap=38.90\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bbmap:38.90--he522d1c_1' :\n        'quay.io/biocontainers/bbmap:38.90--he522d1c_1' }\"\n\n    input:\n    tuple val(meta), path(reads)\n    path contaminants\n\n    output:\n    tuple val(meta), path('*.fastq.gz'), emit: reads\n    tuple val(meta), path('*.log')     , emit: log\n    path \"versions.yml\"                , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def raw      = meta.single_end ? \"in=${reads[0]}\" : \"in1=${reads[0]} in2=${reads[1]}\"\n    def trimmed  = meta.single_end ? \"out=${prefix}.fastq.gz\" : \"out1=${prefix}_1.fastq.gz out2=${prefix}_2.fastq.gz\"\n    def contaminants_fa = contaminants ? \"ref=$contaminants\" : ''\n    \"\"\"\n    maxmem=\\$(echo \\\"$task.memory\\\"| sed 's/ GB/g/g')\n    bbduk.sh \\\\\n        -Xmx\\$maxmem \\\\\n        $raw \\\\\n        $trimmed \\\\\n        threads=$task.cpus \\\\\n        $args \\\\\n        $contaminants_fa \\\\\n        &> ${prefix}.bbduk.log\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bbmap: \\$(bbversion.sh)\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 41,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def raw      = meta.single_end ? \"in=${reads[0]}\" : \"in1=${reads[0]} in2=${reads[1]}\"\n    def trimmed  = meta.single_end ? \"out=${prefix}.fastq.gz\" : \"out1=${prefix}_1.fastq.gz out2=${prefix}_2.fastq.gz\"\n    def contaminants_fa = contaminants ? \"ref=$contaminants\" : ''\n    \"\"\"\n    maxmem=\\$(echo \\\"$task.memory\\\"| sed 's/ GB/g/g')\n    bbduk.sh \\\\\n        -Xmx\\$maxmem \\\\\n        $raw \\\\\n        $trimmed \\\\\n        threads=$task.cpus \\\\\n        $args \\\\\n        $contaminants_fa \\\\\n        &> ${prefix}.bbduk.log\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bbmap: \\$(bbversion.sh)\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "reads",
            "contaminants"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::bbmap=38.90\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bbmap:38.90--he522d1c_1' : 'quay.io/biocontainers/bbmap:38.90--he522d1c_1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "SEQSERO2": {
        "name_process": "SEQSERO2",
        "string_process": "process SEQSERO2 {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::seqsero2=1.2.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/seqsero2:1.2.1--py_0' :\n        'quay.io/biocontainers/seqsero2:1.2.1--py_0' }\"\n\n    input:\n    tuple val(meta), path(seqs)\n\n    output:\n    tuple val(meta), path(\"results/*_log.txt\")   , emit: log\n    tuple val(meta), path(\"results/*_result.tsv\"), emit: tsv\n    tuple val(meta), path(\"results/*_result.txt\"), emit: txt\n    path \"versions.yml\"                          , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    SeqSero2_package.py \\\\\n        $args \\\\\n        -d results/ \\\\\n        -n $prefix \\\\\n        -p $task.cpus \\\\\n        -i $seqs\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        seqsero2: \\$( echo \\$( SeqSero2_package.py --version 2>&1) | sed 's/^.*SeqSero2_package.py //' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 36,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    SeqSero2_package.py \\\\\n        $args \\\\\n        -d results/ \\\\\n        -n $prefix \\\\\n        -p $task.cpus \\\\\n        -i $seqs\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        seqsero2: \\$( echo \\$( SeqSero2_package.py --version 2>&1) | sed 's/^.*SeqSero2_package.py //' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "seqs"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::seqsero2=1.2.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/seqsero2:1.2.1--py_0' : 'quay.io/biocontainers/seqsero2:1.2.1--py_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "GENMAP_INDEX": {
        "name_process": "GENMAP_INDEX",
        "string_process": "process GENMAP_INDEX {\n    tag '$fasta'\n    label 'process_high'\n\n    conda (params.enable_conda ? \"bioconda::genmap=1.3.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/genmap:1.3.0--h1b792b2_1' :\n        'quay.io/biocontainers/genmap:1.3.0--h1b792b2_1' }\"\n\n    input:\n    path fasta\n\n    output:\n    path \"genmap\"       , emit: index\n    path \"versions.yml\" , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    genmap \\\\\n        index \\\\\n        -F $fasta \\\\\n        -I genmap\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        genmap: \\$(genmap --version 2>&1 | sed 's/GenMap version: //; s/SeqAn.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    genmap \\\\\n        index \\\\\n        -F $fasta \\\\\n        -I genmap\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        genmap: \\$(genmap --version 2>&1 | sed 's/GenMap version: //; s/SeqAn.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "GenMAPP",
            "CINdex"
        ],
        "tools_url": [
            "https://bio.tools/genmapp",
            "https://bio.tools/cindex"
        ],
        "tools_dico": [
            {
                "name": "GenMAPP",
                "uri": "https://bio.tools/genmapp",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Model organisms"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3518",
                            "term": "Microarray experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0602",
                            "term": "Molecular interactions, pathways and networks"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Organisms"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3518",
                            "term": "Microarrays"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0314",
                                    "term": "Gene expression profiling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0313",
                                    "term": "Expression profile clustering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0315",
                                    "term": "Expression profile comparison"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0314",
                                    "term": "Functional profiling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0314",
                                    "term": "Gene expression profile construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0314",
                                    "term": "Feature expression analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0314",
                                    "term": "Gene transcription profiling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0314",
                                    "term": "Gene expression quantification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0314",
                                    "term": "Gene expression profile generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression data analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Microarray expression data visualization tool, allowing data to be viewed on maps representing gene groupings and biological pathways.",
                "homepage": "http://www.genmapp.org/"
            },
            {
                "name": "CINdex",
                "uri": "https://bio.tools/cindex",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3233",
                                    "term": "Copy number estimation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3233",
                                    "term": "Transcript copy number estimation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The package addresses important area of high-throughput genomic analysis. It allows the automated processing and analysis of the experimental DNA copy number data generated by Affymetrix SNP 6.0 arrays or similar. It calculates the chromosome instability index to quantitatively characterize genome-wide DNA copy number alterations. This package calculates not only overall genomic instability, but also instability in terms of copy number gains and losses at the chromosome and cytoband level.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/CINdex.html"
            }
        ],
        "inputs": [
            "fasta"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag '$fasta'",
            "label 'process_high'",
            "conda (params.enable_conda ? \"bioconda::genmap=1.3.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/genmap:1.3.0--h1b792b2_1' : 'quay.io/biocontainers/genmap:1.3.0--h1b792b2_1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "GATK4_VARIANTFILTRATION": {
        "name_process": "GATK4_VARIANTFILTRATION",
        "string_process": "process GATK4_VARIANTFILTRATION {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::gatk4=4.2.6.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/gatk4:4.2.6.1--hdfd78af_0':\n        'quay.io/biocontainers/gatk4:4.2.6.1--hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(vcf), path(tbi)\n    path  fasta\n    path  fai\n    path  dict\n\n    output:\n    tuple val(meta), path(\"*.vcf.gz\"), emit: vcf\n    tuple val(meta), path(\"*.tbi\")   , emit: tbi\n    path \"versions.yml\"\t\t         , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[GATK VariantFiltration] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.toGiga()\n    }\n    \"\"\"\n    gatk --java-options \"-Xmx${avail_mem}G\" VariantFiltration \\\\\n        --variant $vcf \\\\\n        --output ${prefix}.vcf.gz \\\\\n        --reference $fasta \\\\\n        --tmp-dir . \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 45,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[GATK VariantFiltration] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.toGiga()\n    }\n    \"\"\"\n    gatk --java-options \"-Xmx${avail_mem}G\" VariantFiltration \\\\\n        --variant $vcf \\\\\n        --output ${prefix}.vcf.gz \\\\\n        --reference $fasta \\\\\n        --tmp-dir . \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 21,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "meta",
            "vcf",
            "tbi",
            "fasta",
            "fai",
            "dict"
        ],
        "nb_inputs": 6,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::gatk4=4.2.6.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/gatk4:4.2.6.1--hdfd78af_0': 'quay.io/biocontainers/gatk4:4.2.6.1--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "IVAR_VARIANTS": {
        "name_process": "IVAR_VARIANTS",
        "string_process": "process IVAR_VARIANTS {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::ivar=1.3.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/ivar:1.3.1--h089eab3_0' :\n        'quay.io/biocontainers/ivar:1.3.1--h089eab3_0' }\"\n\n    input:\n    tuple val(meta), path(bam)\n    path  fasta\n    path  fai\n    path  gff\n    val   save_mpileup\n\n    output:\n    tuple val(meta), path(\"*.tsv\")    , emit: tsv\n    tuple val(meta), path(\"*.mpileup\"), optional:true, emit: mpileup\n    path \"versions.yml\"               , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def features = gff ? \"-g $gff\" : \"\"\n    def mpileup = save_mpileup ? \"| tee ${prefix}.mpileup\" : \"\"\n    \"\"\"\n    samtools \\\\\n        mpileup \\\\\n        $args2 \\\\\n        --reference $fasta \\\\\n        $bam \\\\\n        $mpileup \\\\\n        | ivar \\\\\n            variants \\\\\n            $args \\\\\n            $features \\\\\n            -r $fasta \\\\\n            -p $prefix\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        ivar: \\$(echo \\$(ivar version 2>&1) | sed 's/^.*iVar version //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 48,
        "string_script": "    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def features = gff ? \"-g $gff\" : \"\"\n    def mpileup = save_mpileup ? \"| tee ${prefix}.mpileup\" : \"\"\n    \"\"\"\n    samtools \\\\\n        mpileup \\\\\n        $args2 \\\\\n        --reference $fasta \\\\\n        $bam \\\\\n        $mpileup \\\\\n        | ivar \\\\\n            variants \\\\\n            $args \\\\\n            $features \\\\\n            -r $fasta \\\\\n            -p $prefix\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        ivar: \\$(echo \\$(ivar version 2>&1) | sed 's/^.*iVar version //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 23,
        "language_script": "bash",
        "tools": [
            "SAMtools",
            "mpileup",
            "AIVAR",
            "VariantStore"
        ],
        "tools_url": [
            "https://bio.tools/samtools",
            "https://bio.tools/mpileup",
            "https://bio.tools/AIVAR",
            "https://bio.tools/VariantStore"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "mpileup",
                "uri": "https://bio.tools/mpileup",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3695",
                                    "term": "Filtering"
                                }
                            ],
                            []
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            },
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            },
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            },
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Filter bam file using mpileup on coverage and SNPs.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "AIVAR",
                "uri": "https://bio.tools/AIVAR",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3474",
                            "term": "Machine learning"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Exome sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Targeted exome capture"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Exome analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "WES"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Exome"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Whole exome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Exome capture"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3461",
                                    "term": "Virulence prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Deposition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3225",
                                    "term": "Variant classification"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3461",
                                    "term": "Pathogenicity prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Data submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Database deposition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Database submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Data deposition"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Assessing concordance among human, in silico predictions and functional assays on genetic variant classification.",
                "homepage": "https://github.com/TopGene/AIvar"
            },
            {
                "name": "VariantStore",
                "uri": "https://bio.tools/VariantStore",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3577",
                            "term": "Personalised medicine"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "Pathology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3577",
                            "term": "Precision medicine"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3577",
                            "term": "https://en.wikipedia.org/wiki/Personalized_medicine"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "Disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "https://en.wikipedia.org/wiki/Pathology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3211",
                                    "term": "Genome indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3226",
                                    "term": "Variant prioritisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Database search"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Search"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A Large-Scale Genomic Variant Search Index.",
                "homepage": "https://github.com/Kingsford-Group/variantstore"
            }
        ],
        "inputs": [
            "meta",
            "bam",
            "fasta",
            "fai",
            "gff",
            "save_mpileup"
        ],
        "nb_inputs": 6,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::ivar=1.3.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/ivar:1.3.1--h089eab3_0' : 'quay.io/biocontainers/ivar:1.3.1--h089eab3_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "METHYLDACKEL_EXTRACT": {
        "name_process": "METHYLDACKEL_EXTRACT",
        "string_process": "process METHYLDACKEL_EXTRACT {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? 'bioconda::methyldackel=0.6.0' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/methyldackel:0.6.0--h22771d5_0' :\n        'quay.io/biocontainers/methyldackel:0.6.0--h22771d5_0' }\"\n\n    input:\n    tuple val(meta), path(bam), path(bai)\n    path fasta\n    path fai\n\n    output:\n    tuple val(meta), path(\"*.bedGraph\"), emit: bedgraph\n    path  \"versions.yml\"               , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    MethylDackel extract \\\\\n        $args \\\\\n        $fasta \\\\\n        $bam\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        methyldackel: \\$(MethylDackel --version 2>&1 | cut -f1 -d\" \")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    MethylDackel extract \\\\\n        $args \\\\\n        $fasta \\\\\n        $bam\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        methyldackel: \\$(MethylDackel --version 2>&1 | cut -f1 -d\" \")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "bam",
            "bai",
            "fasta",
            "fai"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? 'bioconda::methyldackel=0.6.0' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/methyldackel:0.6.0--h22771d5_0' : 'quay.io/biocontainers/methyldackel:0.6.0--h22771d5_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "SAMBLASTER": {
        "name_process": "SAMBLASTER",
        "string_process": "process SAMBLASTER {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::samblaster=0.1.26 bioconda::samtools=1.15.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mulled-v2-19fa9f1a5c3966b63a24166365e81da35738c5ab:fff03944e664bbf9a139f7b174b9cb2d4163271a-0' :\n        'quay.io/biocontainers/mulled-v2-19fa9f1a5c3966b63a24166365e81da35738c5ab:fff03944e664bbf9a139f7b174b9cb2d4163271a-0' }\"\n\n    input:\n    tuple val(meta), path(bam)\n\n    output:\n    tuple val(meta), path(\"*.bam\"), emit: bam\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    def args3 = task.ext.args3 ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if( \"$bam\" == \"${prefix}.bam\" ) error \"Input and output names are the same, use \\\"task.ext.prefix\\\" to disambiguate!\"\n    \"\"\"\n    samtools view -h $args2 $bam | \\\\\n    samblaster $args | \\\\\n    samtools view $args3 -Sb - >${prefix}.bam\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samblaster: \\$( samblaster -h 2>&1 | head -n 1 | sed 's/^samblaster: Version //' )\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    def args3 = task.ext.args3 ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if( \"$bam\" == \"${prefix}.bam\" ) error \"Input and output names are the same, use \\\"task.ext.prefix\\\" to disambiguate!\"\n    \"\"\"\n    samtools view -h $args2 $bam | \\\\\n    samblaster $args | \\\\\n    samtools view $args3 -Sb - >${prefix}.bam\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samblaster: \\$( samblaster -h 2>&1 | head -n 1 | sed 's/^samblaster: Version //' )\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [
            "SAMtools",
            "SAMBLASTER"
        ],
        "tools_url": [
            "https://bio.tools/samtools",
            "https://bio.tools/samblaster"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "SAMBLASTER",
                "uri": "https://bio.tools/samblaster",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3199",
                                    "term": "Split read mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3199",
                                    "term": "Split-read mapping"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A tool to mark duplicates and extract discordant and split reads from SAM files.",
                "homepage": "https://github.com/GregoryFaust/samblaster"
            }
        ],
        "inputs": [
            "meta",
            "bam"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::samblaster=0.1.26 bioconda::samtools=1.15.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mulled-v2-19fa9f1a5c3966b63a24166365e81da35738c5ab:fff03944e664bbf9a139f7b174b9cb2d4163271a-0' : 'quay.io/biocontainers/mulled-v2-19fa9f1a5c3966b63a24166365e81da35738c5ab:fff03944e664bbf9a139f7b174b9cb2d4163271a-0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "STRELKA_SOMATIC": {
        "name_process": "STRELKA_SOMATIC",
        "string_process": "process STRELKA_SOMATIC {\n    tag \"$meta.id\"\n    label 'process_high'\n\n    conda (params.enable_conda ? \"bioconda::strelka=2.9.10\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/strelka:2.9.10--h9ee0642_1' :\n        'quay.io/biocontainers/strelka:2.9.10--h9ee0642_1' }\"\n\n    input:\n    tuple val(meta), path(input_normal), path(input_index_normal), path(input_tumor), path(input_index_tumor),  path(manta_candidate_small_indels), path(manta_candidate_small_indels_tbi), path(target_bed), path(target_bed_index)\n    path  fasta\n    path  fai\n\n    output:\n    tuple val(meta), path(\"*.somatic_indels.vcf.gz\")    , emit: vcf_indels\n    tuple val(meta), path(\"*.somatic_indels.vcf.gz.tbi\"), emit: vcf_indels_tbi\n    tuple val(meta), path(\"*.somatic_snvs.vcf.gz\")      , emit: vcf_snvs\n    tuple val(meta), path(\"*.somatic_snvs.vcf.gz.tbi\")  , emit: vcf_snvs_tbi\n    path \"versions.yml\"                                 , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def options_target_bed = target_bed ? \"--callRegions ${target_bed}\" : \"\"\n    def options_manta = manta_candidate_small_indels ? \"--indelCandidates ${manta_candidate_small_indels}\" : \"\"\n    \"\"\"\n\n    configureStrelkaSomaticWorkflow.py \\\\\n        --tumor $input_tumor \\\\\n        --normal $input_normal \\\\\n        --referenceFasta $fasta \\\\\n        ${options_target_bed} \\\\\n        ${options_manta} \\\\\n        $args \\\\\n        --runDir strelka\n\n    python strelka/runWorkflow.py -m local -j $task.cpus\n\n    mv strelka/results/variants/somatic.indels.vcf.gz     ${prefix}.somatic_indels.vcf.gz\n    mv strelka/results/variants/somatic.indels.vcf.gz.tbi ${prefix}.somatic_indels.vcf.gz.tbi\n    mv strelka/results/variants/somatic.snvs.vcf.gz       ${prefix}.somatic_snvs.vcf.gz\n    mv strelka/results/variants/somatic.snvs.vcf.gz.tbi   ${prefix}.somatic_snvs.vcf.gz.tbi\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        strelka: \\$( configureStrelkaSomaticWorkflow.py --version )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 51,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def options_target_bed = target_bed ? \"--callRegions ${target_bed}\" : \"\"\n    def options_manta = manta_candidate_small_indels ? \"--indelCandidates ${manta_candidate_small_indels}\" : \"\"\n    \"\"\"\n\n    configureStrelkaSomaticWorkflow.py \\\\\n        --tumor $input_tumor \\\\\n        --normal $input_normal \\\\\n        --referenceFasta $fasta \\\\\n        ${options_target_bed} \\\\\n        ${options_manta} \\\\\n        $args \\\\\n        --runDir strelka\n\n    python strelka/runWorkflow.py -m local -j $task.cpus\n\n    mv strelka/results/variants/somatic.indels.vcf.gz     ${prefix}.somatic_indels.vcf.gz\n    mv strelka/results/variants/somatic.indels.vcf.gz.tbi ${prefix}.somatic_indels.vcf.gz.tbi\n    mv strelka/results/variants/somatic.snvs.vcf.gz       ${prefix}.somatic_snvs.vcf.gz\n    mv strelka/results/variants/somatic.snvs.vcf.gz.tbi   ${prefix}.somatic_snvs.vcf.gz.tbi\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        strelka: \\$( configureStrelkaSomaticWorkflow.py --version )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 26,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "input_normal",
            "input_index_normal",
            "input_tumor",
            "input_index_tumor",
            "manta_candidate_small_indels",
            "manta_candidate_small_indels_tbi",
            "target_bed",
            "target_bed_index",
            "fasta",
            "fai"
        ],
        "nb_inputs": 11,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "conda (params.enable_conda ? \"bioconda::strelka=2.9.10\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/strelka:2.9.10--h9ee0642_1' : 'quay.io/biocontainers/strelka:2.9.10--h9ee0642_1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "RSEQC_JUNCTIONANNOTATION": {
        "name_process": "RSEQC_JUNCTIONANNOTATION",
        "string_process": "process RSEQC_JUNCTIONANNOTATION {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::rseqc=3.0.1 'conda-forge::r-base>=3.5'\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/rseqc:3.0.1--py37h516909a_1' :\n        'quay.io/biocontainers/rseqc:3.0.1--py37h516909a_1' }\"\n\n    input:\n    tuple val(meta), path(bam)\n    path  bed\n\n    output:\n    tuple val(meta), path(\"*.xls\")         , emit: xls\n    tuple val(meta), path(\"*.r\")           , emit: rscript\n    tuple val(meta), path(\"*.log\")         , emit: log\n    tuple val(meta), path(\"*.junction.bed\"), optional:true, emit: bed\n    tuple val(meta), path(\"*.Interact.bed\"), optional:true, emit: interact_bed\n    tuple val(meta), path(\"*junction.pdf\") , optional:true, emit: pdf\n    tuple val(meta), path(\"*events.pdf\")   , optional:true, emit: events_pdf\n    path  \"versions.yml\"                   , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    junction_annotation.py \\\\\n        -i $bam \\\\\n        -r $bed \\\\\n        -o $prefix \\\\\n        $args \\\\\n        2> ${prefix}.junction_annotation.log\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        rseqc: \\$(junction_annotation.py --version | sed -e \"s/junction_annotation.py //g\")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 41,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    junction_annotation.py \\\\\n        -i $bam \\\\\n        -r $bed \\\\\n        -o $prefix \\\\\n        $args \\\\\n        2> ${prefix}.junction_annotation.log\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        rseqc: \\$(junction_annotation.py --version | sed -e \"s/junction_annotation.py //g\")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "bam",
            "bed"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::rseqc=3.0.1 'conda-forge::r-base>=3.5'\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/rseqc:3.0.1--py37h516909a_1' : 'quay.io/biocontainers/rseqc:3.0.1--py37h516909a_1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "FASTTREE": {
        "name_process": "FASTTREE",
        "string_process": "process FASTTREE {\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::fasttree=2.1.10\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/fasttree:2.1.10--h516909a_4' :\n        'quay.io/biocontainers/fasttree:2.1.10--h516909a_4' }\"\n\n    input:\n    path alignment\n\n    output:\n    path \"*.tre\",         emit: phylogeny\n    path \"versions.yml\" , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    fasttree \\\\\n        $args \\\\\n        -log fasttree_phylogeny.tre.log \\\\\n        -nt $alignment \\\\\n        > fasttree_phylogeny.tre\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        fasttree: \\$(fasttree -help 2>&1 | head -1  | sed 's/^FastTree \\\\([0-9\\\\.]*\\\\) .*\\$/\\\\1/')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    fasttree \\\\\n        $args \\\\\n        -log fasttree_phylogeny.tre.log \\\\\n        -nt $alignment \\\\\n        > fasttree_phylogeny.tre\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        fasttree: \\$(fasttree -help 2>&1 | head -1  | sed 's/^FastTree \\\\([0-9\\\\.]*\\\\) .*\\$/\\\\1/')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [
            "FastTree"
        ],
        "tools_url": [
            "https://bio.tools/fasttree"
        ],
        "tools_dico": [
            {
                "name": "FastTree",
                "uri": "https://bio.tools/fasttree",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3293",
                            "term": "Phylogenetics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0547",
                                    "term": "Phylogenetic inference (maximum likelihood and Bayesian methods)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0540",
                                    "term": "Phylogenetic inference (from molecular sequences)"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0547",
                                    "term": "Phylogenetic tree construction (maximum likelihood and Bayesian methods)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0547",
                                    "term": "Phylogenetic tree generation (maximum likelihood and Bayesian methods)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0540",
                                    "term": "Phylogenetic tree construction (from molecular sequences)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0540",
                                    "term": "Phylogenetic tree generation (from molecular sequences)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Infers approximately-maximum-likelihood phylogenetic trees from alignments of nucleotide or protein sequences.",
                "homepage": "http://www.microbesonline.org/fasttree/"
            }
        ],
        "inputs": [
            "alignment"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::fasttree=2.1.10\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/fasttree:2.1.10--h516909a_4' : 'quay.io/biocontainers/fasttree:2.1.10--h516909a_4' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "MENINGOTYPE": {
        "name_process": "MENINGOTYPE",
        "string_process": "process MENINGOTYPE {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::meningotype=0.8.5\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/meningotype:0.8.5--pyhdfd78af_0' :\n        'quay.io/biocontainers/meningotype:0.8.5--pyhdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(fasta)\n\n    output:\n    tuple val(meta), path(\"*.tsv\"), emit: tsv\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    meningotype \\\\\n        $args \\\\\n        $fasta \\\\\n        > ${prefix}.tsv\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        meningotype: \\$( echo \\$(meningotype --version 2>&1) | sed 's/^.*meningotype v//' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    meningotype \\\\\n        $args \\\\\n        $fasta \\\\\n        > ${prefix}.tsv\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        meningotype: \\$( echo \\$(meningotype --version 2>&1) | sed 's/^.*meningotype v//' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "fasta"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::meningotype=0.8.5\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/meningotype:0.8.5--pyhdfd78af_0' : 'quay.io/biocontainers/meningotype:0.8.5--pyhdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "IVAR_CONSENSUS": {
        "name_process": "IVAR_CONSENSUS",
        "string_process": "process IVAR_CONSENSUS {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::ivar=1.3.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/ivar:1.3.1--h089eab3_0' :\n        'quay.io/biocontainers/ivar:1.3.1--h089eab3_0' }\"\n\n    input:\n    tuple val(meta), path(bam)\n    path fasta\n    val save_mpileup\n\n    output:\n    tuple val(meta), path(\"*.fa\")      , emit: fasta\n    tuple val(meta), path(\"*.qual.txt\"), emit: qual\n    tuple val(meta), path(\"*.mpileup\") , optional:true, emit: mpileup\n    path \"versions.yml\"                , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def mpileup = save_mpileup ? \"| tee ${prefix}.mpileup\" : \"\"\n    \"\"\"\n    samtools \\\\\n        mpileup \\\\\n        --reference $fasta \\\\\n        $args2 \\\\\n        $bam \\\\\n        $mpileup \\\\\n        | ivar \\\\\n            consensus \\\\\n            $args \\\\\n            -p $prefix\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        ivar: \\$(echo \\$(ivar version 2>&1) | sed 's/^.*iVar version //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 44,
        "string_script": "    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def mpileup = save_mpileup ? \"| tee ${prefix}.mpileup\" : \"\"\n    \"\"\"\n    samtools \\\\\n        mpileup \\\\\n        --reference $fasta \\\\\n        $args2 \\\\\n        $bam \\\\\n        $mpileup \\\\\n        | ivar \\\\\n            consensus \\\\\n            $args \\\\\n            -p $prefix\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        ivar: \\$(echo \\$(ivar version 2>&1) | sed 's/^.*iVar version //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 20,
        "language_script": "bash",
        "tools": [
            "SAMtools",
            "mpileup",
            "AIVAR",
            "Consensus"
        ],
        "tools_url": [
            "https://bio.tools/samtools",
            "https://bio.tools/mpileup",
            "https://bio.tools/AIVAR",
            "https://bio.tools/consensus"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "mpileup",
                "uri": "https://bio.tools/mpileup",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3695",
                                    "term": "Filtering"
                                }
                            ],
                            []
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            },
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            },
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            },
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Filter bam file using mpileup on coverage and SNPs.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "AIVAR",
                "uri": "https://bio.tools/AIVAR",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3474",
                            "term": "Machine learning"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Exome sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Targeted exome capture"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Exome analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "WES"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Exome"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Whole exome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Exome capture"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3461",
                                    "term": "Virulence prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Deposition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3225",
                                    "term": "Variant classification"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3461",
                                    "term": "Pathogenicity prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Data submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Database deposition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Database submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Data deposition"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Assessing concordance among human, in silico predictions and functional assays on genetic variant classification.",
                "homepage": "https://github.com/TopGene/AIvar"
            },
            {
                "name": "Consensus",
                "uri": "https://bio.tools/consensus",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0082",
                            "term": "Structure prediction"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2275",
                            "term": "Molecular modelling"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0447",
                                    "term": "Sequence alignment validation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0295",
                                    "term": "Structure alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0477",
                                    "term": "Protein modelling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0447",
                                    "term": "Sequence alignment quality evaluation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0295",
                                    "term": "Structural alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0477",
                                    "term": "Homology modelling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0477",
                                    "term": "Comparative modelling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0477",
                                    "term": "Protein structure comparative modelling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0477",
                                    "term": "Homology structure modelling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Consensus server aligns a sequence to a structural template using a consensus of 5 different alignment methods.  A measure of reliability is produced for each alignment position in order to predict the suitability of regions for comparative modelling.",
                "homepage": "http://stormo.wustl.edu/consensus/"
            }
        ],
        "inputs": [
            "meta",
            "bam",
            "fasta",
            "save_mpileup"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::ivar=1.3.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/ivar:1.3.1--h089eab3_0' : 'quay.io/biocontainers/ivar:1.3.1--h089eab3_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "LIMA": {
        "name_process": "LIMA",
        "string_process": "process LIMA {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::lima=2.2.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/lima:2.2.0--h9ee0642_0' :\n        'quay.io/biocontainers/lima:2.2.0--h9ee0642_0' }\"\n\n    input:\n    tuple val(meta), path(ccs)\n    path primers\n\n    output:\n    tuple val(meta), path(\"*.counts\") , emit: counts\n    tuple val(meta), path(\"*.report\") , emit: report\n    tuple val(meta), path(\"*.summary\"), emit: summary\n    path \"versions.yml\"               , emit: versions\n\n    tuple val(meta), path(\"*.bam\")              , optional: true, emit: bam\n    tuple val(meta), path(\"*.bam.pbi\")          , optional: true, emit: pbi\n    tuple val(meta), path(\"*.{fa, fasta}\")      , optional: true, emit: fasta\n    tuple val(meta), path(\"*.{fa.gz, fasta.gz}\"), optional: true, emit: fastagz\n    tuple val(meta), path(\"*.fastq\")            , optional: true, emit: fastq\n    tuple val(meta), path(\"*.fastq.gz\")         , optional: true, emit: fastqgz\n    tuple val(meta), path(\"*.xml\")              , optional: true, emit: xml\n    tuple val(meta), path(\"*.json\")             , optional: true, emit: json\n    tuple val(meta), path(\"*.clips\")            , optional: true, emit: clips\n    tuple val(meta), path(\"*.guess\")            , optional: true, emit: guess\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if( \"$ccs\" == \"${prefix}.bam\" )      error \"Input and output names are the same, set prefix in module configuration\"\n    if( \"$ccs\" == \"${prefix}.fasta\" )    error \"Input and output names are the same, set prefix in module configuration\"\n    if( \"$ccs\" == \"${prefix}.fasta.gz\" ) error \"Input and output names are the same, set prefix in module configuration\"\n    if( \"$ccs\" == \"${prefix}.fastq\" )    error \"Input and output names are the same, set prefix in module configuration\"\n    if( \"$ccs\" == \"${prefix}.fastq.gz\" ) error \"Input and output names are the same, set prefix in module configuration\"\n\n    \"\"\"\n    OUT_EXT=\"\"\n\n    if [[ $ccs =~ bam\\$ ]]; then\n        OUT_EXT=\"bam\"\n    elif [[ $ccs =~ fasta\\$ ]]; then\n        OUT_EXT=\"fasta\"\n    elif [[ $ccs =~ fasta.gz\\$ ]]; then\n        OUT_EXT=\"fasta.gz\"\n    elif [[ $ccs =~ fastq\\$ ]]; then\n        OUT_EXT=\"fastq\"\n    elif [[ $ccs =~ fastq.gz\\$ ]]; then\n        OUT_EXT=\"fastq.gz\"\n    fi\n\n    lima \\\\\n        $ccs \\\\\n        $primers \\\\\n        $prefix.\\$OUT_EXT \\\\\n        -j $task.cpus \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        lima: \\$( lima --version | sed 's/lima //g' | sed 's/ (.\\\\+//g' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 68,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if( \"$ccs\" == \"${prefix}.bam\" )      error \"Input and output names are the same, set prefix in module configuration\"\n    if( \"$ccs\" == \"${prefix}.fasta\" )    error \"Input and output names are the same, set prefix in module configuration\"\n    if( \"$ccs\" == \"${prefix}.fasta.gz\" ) error \"Input and output names are the same, set prefix in module configuration\"\n    if( \"$ccs\" == \"${prefix}.fastq\" )    error \"Input and output names are the same, set prefix in module configuration\"\n    if( \"$ccs\" == \"${prefix}.fastq.gz\" ) error \"Input and output names are the same, set prefix in module configuration\"\n\n    \"\"\"\n    OUT_EXT=\"\"\n\n    if [[ $ccs =~ bam\\$ ]]; then\n        OUT_EXT=\"bam\"\n    elif [[ $ccs =~ fasta\\$ ]]; then\n        OUT_EXT=\"fasta\"\n    elif [[ $ccs =~ fasta.gz\\$ ]]; then\n        OUT_EXT=\"fasta.gz\"\n    elif [[ $ccs =~ fastq\\$ ]]; then\n        OUT_EXT=\"fastq\"\n    elif [[ $ccs =~ fastq.gz\\$ ]]; then\n        OUT_EXT=\"fastq.gz\"\n    fi\n\n    lima \\\\\n        $ccs \\\\\n        $primers \\\\\n        $prefix.\\$OUT_EXT \\\\\n        -j $task.cpus \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        lima: \\$( lima --version | sed 's/lima //g' | sed 's/ (.\\\\+//g' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 34,
        "language_script": "bash",
        "tools": [
            "blima"
        ],
        "tools_url": [
            "https://bio.tools/blima"
        ],
        "tools_dico": [
            {
                "name": "blima",
                "uri": "https://bio.tools/blima",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3518",
                            "term": "Microarray experiment"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3518",
                            "term": "Microarrays"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression data analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Includes several algorithms for the preprocessing of Illumina microarray data. It focuses to the bead level analysis and provides novel approach to the quantile normalization of the vectors of unequal lengths. It provides variety of the methods for background correction including background subtraction, RMA like convolution and background outlier removal. It also implements variance stabilizing transformation on the bead level, methods for data summarization and t-test performance.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/blima.html"
            }
        ],
        "inputs": [
            "meta",
            "ccs",
            "primers"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::lima=2.2.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/lima:2.2.0--h9ee0642_0' : 'quay.io/biocontainers/lima:2.2.0--h9ee0642_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "TIDDIT_SV": {
        "name_process": "TIDDIT_SV",
        "string_process": "process TIDDIT_SV {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::tiddit=2.12.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/tiddit:2.12.1--py38h1773678_0' :\n        'quay.io/biocontainers/tiddit:2.12.1--py38h1773678_0' }\"\n\n    input:\n    tuple val(meta), path(bam)\n    path  fasta\n    path  fai\n\n    output:\n    tuple val(meta), path(\"*.vcf\")        , emit: vcf\n    tuple val(meta), path(\"*.ploidy.tab\") , emit: ploidy\n    tuple val(meta), path(\"*.signals.tab\"), emit: signals\n    path  \"versions.yml\"                  , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def reference = fasta ? \"--ref $fasta\" : \"\"\n    \"\"\"\n    tiddit \\\\\n        --sv \\\\\n        $args \\\\\n        --bam $bam \\\\\n        $reference \\\\\n        -o $prefix\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        tiddit: \\$(echo \\$(tiddit 2>&1) | sed 's/^.*TIDDIT-//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.vcf\n    touch ${prefix}.ploidy.tab\n    touch ${prefix}.signals.tab\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        tiddit: \\$(echo \\$(tiddit 2>&1) | sed 's/^.*TIDDIT-//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 52,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def reference = fasta ? \"--ref $fasta\" : \"\"\n    \"\"\"\n    tiddit \\\\\n        --sv \\\\\n        $args \\\\\n        --bam $bam \\\\\n        $reference \\\\\n        -o $prefix\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        tiddit: \\$(echo \\$(tiddit 2>&1) | sed 's/^.*TIDDIT-//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [
            "TIDDIT"
        ],
        "tools_url": [
            "https://bio.tools/tiddit"
        ],
        "tools_dico": [
            {
                "name": "TIDDIT",
                "uri": "https://bio.tools/tiddit",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "Structural variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Exome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Whole genome sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "Genomic structural variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "DNA structural variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Targeted exome capture"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Exome analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "WES"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Exome"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Whole exome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Exome capture"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "WGS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3228",
                                    "term": "Structural variation detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3225",
                                    "term": "Variant classification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3228",
                                    "term": "Structural variation discovery"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_1383",
                                "term": "Nucleic acid sequence alignment"
                            }
                        ],
                        "output": []
                    }
                ],
                "description": "Efficient and comprehensive structural variant caller for massive parallel sequencing data. Identify chromosomal rearrangements using Mate Pair or Paired End sequencing data. It allows identification of intra and inter-chromosomal translocations, deletions, tandem-duplications and inversions, using supplementary alignments as well as discordant pairs.",
                "homepage": "https://github.com/J35P312/TIDDIT"
            }
        ],
        "inputs": [
            "meta",
            "bam",
            "fasta",
            "fai"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::tiddit=2.12.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/tiddit:2.12.1--py38h1773678_0' : 'quay.io/biocontainers/tiddit:2.12.1--py38h1773678_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.vcf\n    touch ${prefix}.ploidy.tab\n    touch ${prefix}.signals.tab\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        tiddit: \\$(echo \\$(tiddit 2>&1) | sed 's/^.*TIDDIT-//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\""
    },
    "CAT_CAT": {
        "name_process": "CAT_CAT",
        "string_process": "process CAT_CAT {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"conda-forge::pigz=2.3.4\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/pigz:2.3.4' :\n        'quay.io/biocontainers/pigz:2.3.4' }\"\n\n    input:\n    tuple val(meta), path(files_in)\n\n    output:\n    tuple val(meta), path(\"${prefix}\"), emit: file_out\n    path \"versions.yml\"               , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    def file_list = files_in.collect { it.toString() }\n\n                                                       \n                                                       \n                                                       \n                                                       \n                                                       \n                                                       \n\n                                       \n    prefix   = task.ext.prefix ?: \"${meta.id}${file_list[0].substring(file_list[0].lastIndexOf('.'))}\"\n    out_zip  = prefix.endsWith('.gz')\n    in_zip   = file_list[0].endsWith('.gz')\n    command1 = (in_zip && !out_zip) ? 'zcat' : 'cat'\n    command2 = (!in_zip && out_zip) ? \"| pigz -c -p $task.cpus $args2\" : ''\n    \"\"\"\n    $command1 \\\\\n        $args \\\\\n        ${file_list.join(' ')} \\\\\n        $command2 \\\\\n        > ${prefix}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        pigz: \\$( pigz --version 2>&1 | sed 's/pigz //g' )\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    def file_list = files_in.collect { it.toString() }\n    prefix   = task.ext.prefix ?: \"${meta.id}${file_list[0].substring(file_list[0].lastIndexOf('.'))}\"\n    \"\"\"\n    touch $prefix\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        pigz: \\$( pigz --version 2>&1 | sed 's/pigz //g' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 60,
        "string_script": "    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    def file_list = files_in.collect { it.toString() }\n\n                                                       \n                                                       \n                                                       \n                                                       \n                                                       \n                                                       \n\n                                       \n    prefix   = task.ext.prefix ?: \"${meta.id}${file_list[0].substring(file_list[0].lastIndexOf('.'))}\"\n    out_zip  = prefix.endsWith('.gz')\n    in_zip   = file_list[0].endsWith('.gz')\n    command1 = (in_zip && !out_zip) ? 'zcat' : 'cat'\n    command2 = (!in_zip && out_zip) ? \"| pigz -c -p $task.cpus $args2\" : ''\n    \"\"\"\n    $command1 \\\\\n        $args \\\\\n        ${file_list.join(' ')} \\\\\n        $command2 \\\\\n        > ${prefix}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        pigz: \\$( pigz --version 2>&1 | sed 's/pigz //g' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 28,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "files_in"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"conda-forge::pigz=2.3.4\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/pigz:2.3.4' : 'quay.io/biocontainers/pigz:2.3.4' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    def file_list = files_in.collect { it.toString() }\n    prefix   = task.ext.prefix ?: \"${meta.id}${file_list[0].substring(file_list[0].lastIndexOf('.'))}\"\n    \"\"\"\n    touch $prefix\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        pigz: \\$( pigz --version 2>&1 | sed 's/pigz //g' )\n    END_VERSIONS\n    \"\"\""
    },
    "OPTITYPE": {
        "name_process": "OPTITYPE",
        "string_process": "process OPTITYPE {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::optitype=1.3.5\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/optitype:1.3.5--0' :\n        'quay.io/biocontainers/optitype:1.3.5--0' }\"\n\n    input:\n    tuple val(meta), path(bam), path(bai)\n\n    output:\n    tuple val(meta), path(\"${prefix}\"), emit: output\n    path \"versions.yml\"               , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args  = task.ext.args   ?: ''\n    def args2 = task.ext.args2  ?: ''\n    prefix    = task.ext.prefix ?: \"${meta.id}\"\n\n    \"\"\"\n    # Create a config for OptiType on a per sample basis with task.ext.args2\n\n    #Doing it old school now\n    echo \"[mapping]\" > config.ini\n    echo \"razers3=razers3\" >> config.ini\n    echo \"threads=$task.cpus\" >> config.ini\n    echo \"[ilp]\" >> config.ini\n    echo \"$args2\" >> config.ini\n    echo \"threads=1\" >> config.ini\n    echo \"[behavior]\" >> config.ini\n    echo \"deletebam=true\" >> config.ini\n    echo \"unpaired_weight=0\" >> config.ini\n    echo \"use_discordant=false\" >> config.ini\n\n    # Run the actual OptiType typing with args\n    OptiTypePipeline.py -i ${bam} -c config.ini --${meta.seq_type} $args --prefix $prefix --outdir $prefix\n\n    #Couldn't find a nicer way of doing this\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        optitype: \\$(cat \\$(which OptiTypePipeline.py) | grep -e \"Version:\" | sed -e \"s/Version: //g\")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 47,
        "string_script": "    def args  = task.ext.args   ?: ''\n    def args2 = task.ext.args2  ?: ''\n    prefix    = task.ext.prefix ?: \"${meta.id}\"\n\n    \"\"\"\n    # Create a config for OptiType on a per sample basis with task.ext.args2\n\n    #Doing it old school now\n    echo \"[mapping]\" > config.ini\n    echo \"razers3=razers3\" >> config.ini\n    echo \"threads=$task.cpus\" >> config.ini\n    echo \"[ilp]\" >> config.ini\n    echo \"$args2\" >> config.ini\n    echo \"threads=1\" >> config.ini\n    echo \"[behavior]\" >> config.ini\n    echo \"deletebam=true\" >> config.ini\n    echo \"unpaired_weight=0\" >> config.ini\n    echo \"use_discordant=false\" >> config.ini\n\n    # Run the actual OptiType typing with args\n    OptiTypePipeline.py -i ${bam} -c config.ini --${meta.seq_type} $args --prefix $prefix --outdir $prefix\n\n    #Couldn't find a nicer way of doing this\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        optitype: \\$(cat \\$(which OptiTypePipeline.py) | grep -e \"Version:\" | sed -e \"s/Version: //g\")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 27,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "bam",
            "bai"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::optitype=1.3.5\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/optitype:1.3.5--0' : 'quay.io/biocontainers/optitype:1.3.5--0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "BCFTOOLS_STATS": {
        "name_process": "BCFTOOLS_STATS",
        "string_process": "process BCFTOOLS_STATS {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? 'bioconda::bcftools=1.14' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bcftools:1.14--h88f3f91_0' :\n        'quay.io/biocontainers/bcftools:1.14--h88f3f91_0' }\"\n\n    input:\n    tuple val(meta), path(vcf)\n\n    output:\n    tuple val(meta), path(\"*stats.txt\"), emit: stats\n    path  \"versions.yml\"               , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    bcftools stats $args $vcf > ${prefix}.bcftools_stats.txt\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bcftools: \\$(bcftools --version 2>&1 | head -n1 | sed 's/^.*bcftools //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    bcftools stats $args $vcf > ${prefix}.bcftools_stats.txt\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bcftools: \\$(bcftools --version 2>&1 | head -n1 | sed 's/^.*bcftools //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "BCFtools"
        ],
        "tools_url": [
            "https://bio.tools/bcftools"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "vcf"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? 'bioconda::bcftools=1.14' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bcftools:1.14--h88f3f91_0' : 'quay.io/biocontainers/bcftools:1.14--h88f3f91_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "SEACR_CALLPEAK": {
        "name_process": "SEACR_CALLPEAK",
        "string_process": "\nprocess SEACR_CALLPEAK {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::seacr=1.3 conda-forge::r-base=4.0.2 bioconda::bedtools=2.30.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mulled-v2-03bfeb32fe80910c231f630d4262b83677c8c0f4:f4bb19b68e66de27e4c64306f951d5ff11919931-0' :\n        'quay.io/biocontainers/mulled-v2-03bfeb32fe80910c231f630d4262b83677c8c0f4:f4bb19b68e66de27e4c64306f951d5ff11919931-0' }\"\n\n    input:\n    tuple val(meta), path(bedgraph), path(ctrlbedgraph)\n    val (threshold)\n\n    output:\n    tuple val(meta), path(\"*.bed\"), emit: bed\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def function_switch = ctrlbedgraph ? \"$ctrlbedgraph\" : \"$threshold\"\n    \"\"\"\n    SEACR_1.3.sh \\\\\n        $bedgraph \\\\\n        $function_switch \\\\\n        $args \\\\\n        $prefix\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        seacr: $VERSION\n        bedtools: \\$(bedtools --version | sed -e \"s/bedtools v//g\")\n        r-base: \\$(echo \\$(R --version 2>&1) | sed 's/^.*R version //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 38,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def function_switch = ctrlbedgraph ? \"$ctrlbedgraph\" : \"$threshold\"\n    \"\"\"\n    SEACR_1.3.sh \\\\\n        $bedgraph \\\\\n        $function_switch \\\\\n        $args \\\\\n        $prefix\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        seacr: $VERSION\n        bedtools: \\$(bedtools --version | sed -e \"s/bedtools v//g\")\n        r-base: \\$(echo \\$(R --version 2>&1) | sed 's/^.*R version //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "bedgraph",
            "ctrlbedgraph",
            "threshold"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::seacr=1.3 conda-forge::r-base=4.0.2 bioconda::bedtools=2.30.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mulled-v2-03bfeb32fe80910c231f630d4262b83677c8c0f4:f4bb19b68e66de27e4c64306f951d5ff11919931-0' : 'quay.io/biocontainers/mulled-v2-03bfeb32fe80910c231f630d4262b83677c8c0f4:f4bb19b68e66de27e4c64306f951d5ff11919931-0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "LAST_POSTMASK": {
        "name_process": "LAST_POSTMASK",
        "string_process": "process LAST_POSTMASK {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? 'bioconda::last=1250' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/last:1250--h2e03b76_0' :\n        'quay.io/biocontainers/last:1250--h2e03b76_0' }\"\n\n    input:\n    tuple val(meta), path(maf)\n\n    output:\n    tuple val(meta), path(\"*.maf.gz\"), emit: maf\n    path \"versions.yml\"              , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if( \"$maf\" == \"${prefix}.maf.gz\" ) error \"Input and output names are the same, use \\\"task.ext.prefix\\\" to disambiguate!\"\n    \"\"\"\n    last-postmask $args $maf | gzip --no-name > ${prefix}.maf.gz\n\n    # last-postmask does not have a --version option\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        last: \\$(lastal --version 2>&1 | sed 's/lastal //')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if( \"$maf\" == \"${prefix}.maf.gz\" ) error \"Input and output names are the same, use \\\"task.ext.prefix\\\" to disambiguate!\"\n    \"\"\"\n    last-postmask $args $maf | gzip --no-name > ${prefix}.maf.gz\n\n    # last-postmask does not have a --version option\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        last: \\$(lastal --version 2>&1 | sed 's/lastal //')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "maf"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? 'bioconda::last=1250' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/last:1250--h2e03b76_0' : 'quay.io/biocontainers/last:1250--h2e03b76_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "GATK4_MARKDUPLICATES": {
        "name_process": "GATK4_MARKDUPLICATES",
        "string_process": "process GATK4_MARKDUPLICATES {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::gatk4=4.2.6.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/gatk4:4.2.6.1--hdfd78af_0':\n        'quay.io/biocontainers/gatk4:4.2.6.1--hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(bam)\n\n    output:\n    tuple val(meta), path(\"*.bam\")    , emit: bam\n    tuple val(meta), path(\"*.bai\")    , optional:true, emit: bai\n    tuple val(meta), path(\"*.metrics\"), emit: metrics\n    path \"versions.yml\"               , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def input_list = bam.collect{\"--INPUT $it\"}.join(' ')\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[GATK MarkDuplicates] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    gatk --java-options \"-Xmx${avail_mem}g\" MarkDuplicates \\\\\n        $input_list \\\\\n        --OUTPUT ${prefix}.bam \\\\\n        --METRICS_FILE ${prefix}.metrics \\\\\n        --TMP_DIR . \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 44,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def input_list = bam.collect{\"--INPUT $it\"}.join(' ')\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[GATK MarkDuplicates] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    gatk --java-options \"-Xmx${avail_mem}g\" MarkDuplicates \\\\\n        $input_list \\\\\n        --OUTPUT ${prefix}.bam \\\\\n        --METRICS_FILE ${prefix}.metrics \\\\\n        --TMP_DIR . \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 22,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "meta",
            "bam"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::gatk4=4.2.6.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/gatk4:4.2.6.1--hdfd78af_0': 'quay.io/biocontainers/gatk4:4.2.6.1--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "SEQUENZAUTILS_GCWIGGLE": {
        "name_process": "SEQUENZAUTILS_GCWIGGLE",
        "string_process": "process SEQUENZAUTILS_GCWIGGLE {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::sequenza-utils=3.0.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/sequenza-utils:3.0.0--py38h6ed170a_2' :\n        'quay.io/biocontainers/sequenza-utils:3.0.0--py38h6ed170a_2' }\"\n\n    input:\n    tuple val(meta), path(fasta)\n\n    output:\n    tuple val(meta), path(\"*.wig.gz\"), emit: wig\n    path \"versions.yml\"              , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    sequenza-utils \\\\\n        gc_wiggle \\\\\n        $args \\\\\n        --fasta $fasta \\\\\n        -o ${prefix}.wig.gz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        sequenzautils: \\$(echo \\$(sequenza-utils 2>&1) | sed 's/^.*is version //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    sequenza-utils \\\\\n        gc_wiggle \\\\\n        $args \\\\\n        --fasta $fasta \\\\\n        -o ${prefix}.wig.gz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        sequenzautils: \\$(echo \\$(sequenza-utils 2>&1) | sed 's/^.*is version //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "fasta"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::sequenza-utils=3.0.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/sequenza-utils:3.0.0--py38h6ed170a_2' : 'quay.io/biocontainers/sequenza-utils:3.0.0--py38h6ed170a_2' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "TABIX_TABIX": {
        "name_process": "TABIX_TABIX",
        "string_process": "process TABIX_TABIX {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? 'bioconda::tabix=1.11' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/tabix:1.11--hdfd78af_0' :\n        'quay.io/biocontainers/tabix:1.11--hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(tab)\n\n    output:\n    tuple val(meta), path(\"*.tbi\"), optional:true, emit: tbi\n    tuple val(meta), path(\"*.csi\"), optional:true, emit: csi\n    path  \"versions.yml\"          , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    tabix $args $tab\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        tabix: \\$(echo \\$(tabix -h 2>&1) | sed 's/^.*Version: //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${tab}.tbi\n    cat <<-END_VERSIONS > versions.yml\n\n    \"${task.process}\":\n        tabix: \\$(echo \\$(tabix -h 2>&1) | sed 's/^.*Version: //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 40,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    tabix $args $tab\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        tabix: \\$(echo \\$(tabix -h 2>&1) | sed 's/^.*Version: //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "tab"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? 'bioconda::tabix=1.11' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/tabix:1.11--hdfd78af_0' : 'quay.io/biocontainers/tabix:1.11--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${tab}.tbi\n    cat <<-END_VERSIONS > versions.yml\n\n    \"${task.process}\":\n        tabix: \\$(echo \\$(tabix -h 2>&1) | sed 's/^.*Version: //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\""
    },
    "LOFREQ_CALL": {
        "name_process": "LOFREQ_CALL",
        "string_process": "process LOFREQ_CALL {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::lofreq=2.1.5\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/lofreq:2.1.5--py38h588ecb2_4' :\n        'quay.io/biocontainers/lofreq:2.1.5--py38h588ecb2_4' }\"\n\n    input:\n    tuple val(meta), path(bam)\n    path fasta\n\n    output:\n    tuple val(meta), path(\"*.vcf.gz\"), emit: vcf\n    path \"versions.yml\"              , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    lofreq \\\\\n        call \\\\\n        $args \\\\\n        -f $fasta \\\\\n        -o ${prefix}.vcf.gz \\\\\n        $bam\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        lofreq: \\$(echo \\$(lofreq version 2>&1) | sed 's/^version: //; s/ *commit.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    lofreq \\\\\n        call \\\\\n        $args \\\\\n        -f $fasta \\\\\n        -o ${prefix}.vcf.gz \\\\\n        $bam\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        lofreq: \\$(echo \\$(lofreq version 2>&1) | sed 's/^version: //; s/ *commit.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "QCALL"
        ],
        "tools_url": [
            "https://bio.tools/qcall"
        ],
        "tools_dico": [
            {
                "name": "QCALL",
                "uri": "https://bio.tools/qcall",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0484",
                                    "term": "SNP detection"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Sequence variation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Variant analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation annotation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0484",
                                    "term": "Single nucleotide polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0484",
                                    "term": "SNP discovery"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0484",
                                    "term": "SNP calling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "SNP detection and genotyping from low-coverage sequencing data on multiple diploid samples.",
                "homepage": "http://www.sanger.ac.uk/"
            }
        ],
        "inputs": [
            "meta",
            "bam",
            "fasta"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::lofreq=2.1.5\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/lofreq:2.1.5--py38h588ecb2_4' : 'quay.io/biocontainers/lofreq:2.1.5--py38h588ecb2_4' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "PAIRIX": {
        "name_process": "PAIRIX",
        "string_process": "process PAIRIX {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::pairix=0.3.7\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/pairix:0.3.7--py36h30a8e3e_3' :\n        'quay.io/biocontainers/pairix:0.3.7--py36h30a8e3e_3' }\"\n\n    input:\n    tuple val(meta), path(pair)\n\n    output:\n    tuple val(meta), path(pair), path(\"*.px2\"), emit: index\n    path \"versions.yml\"                       , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    pairix \\\\\n        $args \\\\\n        $pair\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        pairix: \\$(echo \\$(pairix --help 2>&1) | sed 's/^.*Version: //; s/Usage.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    pairix \\\\\n        $args \\\\\n        $pair\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        pairix: \\$(echo \\$(pairix --help 2>&1) | sed 's/^.*Version: //; s/Usage.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "pair"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::pairix=0.3.7\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/pairix:0.3.7--py36h30a8e3e_3' : 'quay.io/biocontainers/pairix:0.3.7--py36h30a8e3e_3' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "ASCAT": {
        "name_process": "ASCAT",
        "string_process": "process ASCAT {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::ascat=3.0.0 bioconda::cancerit-allelecount-4.3.0\": null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mulled-v2-c278c7398beb73294d78639a864352abef2931ce:dfe5aaa885de434adb2b490b68972c5840c6d761-0':\n        'quay.io/biocontainers/mulled-v2-c278c7398beb73294d78639a864352abef2931ce:dfe5aaa885de434adb2b490b68972c5840c6d761-0' }\"\n\n    input:\n    tuple val(meta), path(input_normal), path(index_normal), path(input_tumor), path(index_tumor)\n    path(allele_files)\n    path(loci_files)\n\n    output:\n    tuple val(meta), path(\"*png\"),               emit: png\n    tuple val(meta), path(\"*cnvs.txt\"),          emit: cnvs\n    tuple val(meta), path(\"*purityploidy.txt\"),  emit: purityploidy\n    tuple val(meta), path(\"*segments.txt\"),      emit: segments\n    path \"versions.yml\",                         emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args           = task.ext.args        ?: ''\n    def prefix         = task.ext.prefix      ?: \"${meta.id}\"\n    def gender         = args.gender          ?  \"$args.gender\" :        \"NULL\"\n    def genomeVersion  = args.genomeVersion   ?  \"$args.genomeVersion\" : \"NULL\"\n    def purity         = args.purity          ?  \"$args.purity\" :        \"NULL\"\n    def ploidy         = args.ploidy          ?  \"$args.ploidy\" :        \"NULL\"\n    def gc_files       = args.gc_files        ?  \"$args.gc_files\" :      \"NULL\"\n\n    def minCounts_arg                    = args.minCounts                     ?  \",minCounts = $args.minCounts\" : \"\"\n    def chrom_names_arg                  = args.chrom_names                   ?  \",chrom_names = $args.chrom_names\" : \"\"\n    def min_base_qual_arg                = args.min_base_qual                 ?  \",min_base_qual = $args.min_base_qual\" : \"\"\n    def min_map_qual_arg                 = args.min_map_qual                  ?  \",min_map_qual = $args.min_map_qual\" : \"\"\n    def ref_fasta_arg                    = args.ref_fasta                     ?  \",ref.fasta = '$args.ref_fasta'\" : \"\"\n    def skip_allele_counting_tumour_arg  = args.skip_allele_counting_tumour   ?  \",skip_allele_counting_tumour = $args.skip_allele_counting_tumour\" : \"\"\n    def skip_allele_counting_normal_arg  = args.skip_allele_counting_normal   ?  \",skip_allele_counting_normal = $args.skip_allele_counting_normal\" : \"\"\n\n\n\n    \"\"\"\n    #!/usr/bin/env Rscript\n    library(RColorBrewer)\n    library(ASCAT)\n    options(bitmapType='cairo')\n\n\n    #prepare from BAM files\n    ascat.prepareHTS(\n        tumourseqfile = \"$input_tumor\",\n        normalseqfile = \"$input_normal\",\n        tumourname = \"Tumour\",\n        normalname = \"Normal\",\n        allelecounter_exe = \"alleleCounter\",\n        alleles.prefix = \"$allele_files\",\n        loci.prefix = \"$loci_files\",\n        gender = \"$gender\",\n        genomeVersion = \"$genomeVersion\",\n        nthreads = $task.cpus\n        $minCounts_arg\n        $chrom_names_arg\n        $min_base_qual_arg\n        $min_map_qual_arg\n        $ref_fasta_arg\n        $skip_allele_counting_tumour_arg\n        $skip_allele_counting_normal_arg\n    )\n\n\n    #Load the data\n    ascat.bc = ascat.loadData(\n        Tumor_LogR_file = \"Tumour_tumourLogR.txt\",\n        Tumor_BAF_file = \"Tumour_normalBAF.txt\",\n        Germline_LogR_file = \"Tumour_normalLogR.txt\",\n        Germline_BAF_file = \"Tumour_normalBAF.txt\",\n        genomeVersion = \"$genomeVersion\",\n        gender = \"$gender\"\n    )\n\n    #optional GC wave correction\n    if(!is.null($gc_files)){\n        ascat.bc = ascat.GCcorrect(ascat.bc, $gc_files)\n    }\n\n    #Plot the raw data\n    ascat.plotRawData(ascat.bc)\n\n    #Segment the data\n    ascat.bc = ascat.aspcf(ascat.bc)\n\n    #Plot the segmented data\n    ascat.plotSegmentedData(ascat.bc)\n\n    #Run ASCAT to fit every tumor to a model, inferring ploidy, normal cell contamination, and discrete copy numbers\n    #If psi and rho are manually set:\n    if (!is.null($purity) && !is.null($ploidy)){\n        ascat.output <- ascat.runAscat(ascat.bc, gamma=1, rho_manual=$purity, psi_manual=$ploidy)\n    } else if(!is.null($purity) && is.null($ploidy)){\n        ascat.output <- ascat.runAscat(ascat.bc, gamma=1, rho_manual=$purity)\n    } else if(!is.null($ploidy) && is.null($purity)){\n        ascat.output <- ascat.runAscat(ascat.bc, gamma=1, psi_manual=$ploidy)\n    } else {\n        ascat.output <- ascat.runAscat(ascat.bc, gamma=1)\n    }\n\n    #Write out segmented regions (including regions with one copy of each allele)\n    write.table(ascat.output[[\"segments\"]], file=paste0(\"$prefix\", \".segments.txt\"), sep=\"\\t\", quote=F, row.names=F)\n\n    #Write out CNVs in bed format\n    cnvs=ascat.output[[\"segments\"]][2:6]\n    write.table(cnvs, file=paste0(\"$prefix\",\".cnvs.txt\"), sep=\"\\t\", quote=F, row.names=F, col.names=T)\n\n    #Write out purity and ploidy info\n    summary <- tryCatch({\n            matrix(c(ascat.output[[\"aberrantcellfraction\"]], ascat.output[[\"ploidy\"]]), ncol=2, byrow=TRUE)}, error = function(err) {\n                # error handler picks up where error was generated\n                print(paste(\"Could not find optimal solution:  \",err))\n                return(matrix(c(0,0),nrow=1,ncol=2,byrow = TRUE))\n        }\n    )\n    colnames(summary) <- c(\"AberrantCellFraction\",\"Ploidy\")\n    write.table(summary, file=paste0(\"$prefix\",\".purityploidy.txt\"), sep=\"\\t\", quote=F, row.names=F, col.names=T)\n\n    #version export. Have to hardcode process name and software name because\n    #won't run inside an R-block\n    version_file_path=\"versions.yml\"\n    f <- file(version_file_path,\"w\")\n    writeLines(\"ASCAT:\", f)\n    writeLines(\" ascat: 3.0.0\",f)\n    close(f)\n    \"\"\"\n\n\n    stub:\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    echo stub > ${prefix}.cnvs.txt\n    echo stub > ${prefix}.purityploidy.txt\n    echo stub > ${prefix}.segments.txt\n    echo stub > Tumour.ASCATprofile.png\n    echo stub > Tumour.ASPCF.png\n    echo stub > Tumour.germline.png\n    echo stub > Tumour.rawprofile.png\n    echo stub > Tumour.sunrise.png\n    echo stub > Tumour.tumour.png\n\n    echo 'ASCAT:' > versions.yml\n    echo ' ascat: 3.0.0' >> versions.yml\n    \"\"\"\n\n\n}",
        "nb_lignes_process": 153,
        "string_script": "    def args           = task.ext.args        ?: ''\n    def prefix         = task.ext.prefix      ?: \"${meta.id}\"\n    def gender         = args.gender          ?  \"$args.gender\" :        \"NULL\"\n    def genomeVersion  = args.genomeVersion   ?  \"$args.genomeVersion\" : \"NULL\"\n    def purity         = args.purity          ?  \"$args.purity\" :        \"NULL\"\n    def ploidy         = args.ploidy          ?  \"$args.ploidy\" :        \"NULL\"\n    def gc_files       = args.gc_files        ?  \"$args.gc_files\" :      \"NULL\"\n\n    def minCounts_arg                    = args.minCounts                     ?  \",minCounts = $args.minCounts\" : \"\"\n    def chrom_names_arg                  = args.chrom_names                   ?  \",chrom_names = $args.chrom_names\" : \"\"\n    def min_base_qual_arg                = args.min_base_qual                 ?  \",min_base_qual = $args.min_base_qual\" : \"\"\n    def min_map_qual_arg                 = args.min_map_qual                  ?  \",min_map_qual = $args.min_map_qual\" : \"\"\n    def ref_fasta_arg                    = args.ref_fasta                     ?  \",ref.fasta = '$args.ref_fasta'\" : \"\"\n    def skip_allele_counting_tumour_arg  = args.skip_allele_counting_tumour   ?  \",skip_allele_counting_tumour = $args.skip_allele_counting_tumour\" : \"\"\n    def skip_allele_counting_normal_arg  = args.skip_allele_counting_normal   ?  \",skip_allele_counting_normal = $args.skip_allele_counting_normal\" : \"\"\n\n\n\n    \"\"\"\n    #!/usr/bin/env Rscript\n    library(RColorBrewer)\n    library(ASCAT)\n    options(bitmapType='cairo')\n\n\n    #prepare from BAM files\n    ascat.prepareHTS(\n        tumourseqfile = \"$input_tumor\",\n        normalseqfile = \"$input_normal\",\n        tumourname = \"Tumour\",\n        normalname = \"Normal\",\n        allelecounter_exe = \"alleleCounter\",\n        alleles.prefix = \"$allele_files\",\n        loci.prefix = \"$loci_files\",\n        gender = \"$gender\",\n        genomeVersion = \"$genomeVersion\",\n        nthreads = $task.cpus\n        $minCounts_arg\n        $chrom_names_arg\n        $min_base_qual_arg\n        $min_map_qual_arg\n        $ref_fasta_arg\n        $skip_allele_counting_tumour_arg\n        $skip_allele_counting_normal_arg\n    )\n\n\n    #Load the data\n    ascat.bc = ascat.loadData(\n        Tumor_LogR_file = \"Tumour_tumourLogR.txt\",\n        Tumor_BAF_file = \"Tumour_normalBAF.txt\",\n        Germline_LogR_file = \"Tumour_normalLogR.txt\",\n        Germline_BAF_file = \"Tumour_normalBAF.txt\",\n        genomeVersion = \"$genomeVersion\",\n        gender = \"$gender\"\n    )\n\n    #optional GC wave correction\n    if(!is.null($gc_files)){\n        ascat.bc = ascat.GCcorrect(ascat.bc, $gc_files)\n    }\n\n    #Plot the raw data\n    ascat.plotRawData(ascat.bc)\n\n    #Segment the data\n    ascat.bc = ascat.aspcf(ascat.bc)\n\n    #Plot the segmented data\n    ascat.plotSegmentedData(ascat.bc)\n\n    #Run ASCAT to fit every tumor to a model, inferring ploidy, normal cell contamination, and discrete copy numbers\n    #If psi and rho are manually set:\n    if (!is.null($purity) && !is.null($ploidy)){\n        ascat.output <- ascat.runAscat(ascat.bc, gamma=1, rho_manual=$purity, psi_manual=$ploidy)\n    } else if(!is.null($purity) && is.null($ploidy)){\n        ascat.output <- ascat.runAscat(ascat.bc, gamma=1, rho_manual=$purity)\n    } else if(!is.null($ploidy) && is.null($purity)){\n        ascat.output <- ascat.runAscat(ascat.bc, gamma=1, psi_manual=$ploidy)\n    } else {\n        ascat.output <- ascat.runAscat(ascat.bc, gamma=1)\n    }\n\n    #Write out segmented regions (including regions with one copy of each allele)\n    write.table(ascat.output[[\"segments\"]], file=paste0(\"$prefix\", \".segments.txt\"), sep=\"\\t\", quote=F, row.names=F)\n\n    #Write out CNVs in bed format\n    cnvs=ascat.output[[\"segments\"]][2:6]\n    write.table(cnvs, file=paste0(\"$prefix\",\".cnvs.txt\"), sep=\"\\t\", quote=F, row.names=F, col.names=T)\n\n    #Write out purity and ploidy info\n    summary <- tryCatch({\n            matrix(c(ascat.output[[\"aberrantcellfraction\"]], ascat.output[[\"ploidy\"]]), ncol=2, byrow=TRUE)}, error = function(err) {\n                # error handler picks up where error was generated\n                print(paste(\"Could not find optimal solution:  \",err))\n                return(matrix(c(0,0),nrow=1,ncol=2,byrow = TRUE))\n        }\n    )\n    colnames(summary) <- c(\"AberrantCellFraction\",\"Ploidy\")\n    write.table(summary, file=paste0(\"$prefix\",\".purityploidy.txt\"), sep=\"\\t\", quote=F, row.names=F, col.names=T)\n\n    #version export. Have to hardcode process name and software name because\n    #won't run inside an R-block\n    version_file_path=\"versions.yml\"\n    f <- file(version_file_path,\"w\")\n    writeLines(\"ASCAT:\", f)\n    writeLines(\" ascat: 3.0.0\",f)\n    close(f)\n    \"\"\"",
        "nb_lignes_script": 108,
        "language_script": "Rscript",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "input_normal",
            "index_normal",
            "input_tumor",
            "index_tumor",
            "allele_files",
            "loci_files"
        ],
        "nb_inputs": 7,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::ascat=3.0.0 bioconda::cancerit-allelecount-4.3.0\": null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mulled-v2-c278c7398beb73294d78639a864352abef2931ce:dfe5aaa885de434adb2b490b68972c5840c6d761-0': 'quay.io/biocontainers/mulled-v2-c278c7398beb73294d78639a864352abef2931ce:dfe5aaa885de434adb2b490b68972c5840c6d761-0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    echo stub > ${prefix}.cnvs.txt\n    echo stub > ${prefix}.purityploidy.txt\n    echo stub > ${prefix}.segments.txt\n    echo stub > Tumour.ASCATprofile.png\n    echo stub > Tumour.ASPCF.png\n    echo stub > Tumour.germline.png\n    echo stub > Tumour.rawprofile.png\n    echo stub > Tumour.sunrise.png\n    echo stub > Tumour.tumour.png\n\n    echo 'ASCAT:' > versions.yml\n    echo ' ascat: 3.0.0' >> versions.yml\n    \"\"\""
    },
    "STAR_ALIGN": {
        "name_process": "STAR_ALIGN",
        "string_process": "process STAR_ALIGN {\n    tag \"$meta.id\"\n    label 'process_high'\n\n                                                         \n    conda (params.enable_conda ? 'bioconda::star=2.7.9a' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/star:2.7.9a--h9ee0642_0' :\n        'quay.io/biocontainers/star:2.7.9a--h9ee0642_0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n    path  index\n    path  gtf\n    val star_ignore_sjdbgtf\n    val seq_platform\n    val seq_center\n\n    output:\n    tuple val(meta), path('*d.out.bam')       , emit: bam\n    tuple val(meta), path('*Log.final.out')   , emit: log_final\n    tuple val(meta), path('*Log.out')         , emit: log_out\n    tuple val(meta), path('*Log.progress.out'), emit: log_progress\n    path  \"versions.yml\"                      , emit: versions\n\n    tuple val(meta), path('*sortedByCoord.out.bam')  , optional:true, emit: bam_sorted\n    tuple val(meta), path('*toTranscriptome.out.bam'), optional:true, emit: bam_transcript\n    tuple val(meta), path('*Aligned.unsort.out.bam') , optional:true, emit: bam_unsorted\n    tuple val(meta), path('*fastq.gz')               , optional:true, emit: fastq\n    tuple val(meta), path('*.tab')                   , optional:true, emit: tab\n    tuple val(meta), path('*.out.junction')          , optional:true, emit: junction\n    tuple val(meta), path('*.out.sam')               , optional:true, emit: sam\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def ignore_gtf      = star_ignore_sjdbgtf ? '' : \"--sjdbGTFfile $gtf\"\n    def seq_platform    = seq_platform ? \"'PL:$seq_platform'\" : \"\"\n    def seq_center      = seq_center ? \"--outSAMattrRGline ID:$prefix 'CN:$seq_center' 'SM:$prefix' $seq_platform \" : \"--outSAMattrRGline ID:$prefix 'SM:$prefix' $seq_platform \"\n    def out_sam_type    = (args.contains('--outSAMtype')) ? '' : '--outSAMtype BAM Unsorted'\n    def mv_unsorted_bam = (args.contains('--outSAMtype BAM Unsorted SortedByCoordinate')) ? \"mv ${prefix}.Aligned.out.bam ${prefix}.Aligned.unsort.out.bam\" : ''\n    \"\"\"\n    STAR \\\\\n        --genomeDir $index \\\\\n        --readFilesIn $reads  \\\\\n        --runThreadN $task.cpus \\\\\n        --outFileNamePrefix $prefix. \\\\\n        $out_sam_type \\\\\n        $ignore_gtf \\\\\n        $seq_center \\\\\n        $args\n\n    $mv_unsorted_bam\n\n    if [ -f ${prefix}.Unmapped.out.mate1 ]; then\n        mv ${prefix}.Unmapped.out.mate1 ${prefix}.unmapped_1.fastq\n        gzip ${prefix}.unmapped_1.fastq\n    fi\n    if [ -f ${prefix}.Unmapped.out.mate2 ]; then\n        mv ${prefix}.Unmapped.out.mate2 ${prefix}.unmapped_2.fastq\n        gzip ${prefix}.unmapped_2.fastq\n    fi\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        star: \\$(STAR --version | sed -e \"s/STAR_//g\")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 70,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def ignore_gtf      = star_ignore_sjdbgtf ? '' : \"--sjdbGTFfile $gtf\"\n    def seq_platform    = seq_platform ? \"'PL:$seq_platform'\" : \"\"\n    def seq_center      = seq_center ? \"--outSAMattrRGline ID:$prefix 'CN:$seq_center' 'SM:$prefix' $seq_platform \" : \"--outSAMattrRGline ID:$prefix 'SM:$prefix' $seq_platform \"\n    def out_sam_type    = (args.contains('--outSAMtype')) ? '' : '--outSAMtype BAM Unsorted'\n    def mv_unsorted_bam = (args.contains('--outSAMtype BAM Unsorted SortedByCoordinate')) ? \"mv ${prefix}.Aligned.out.bam ${prefix}.Aligned.unsort.out.bam\" : ''\n    \"\"\"\n    STAR \\\\\n        --genomeDir $index \\\\\n        --readFilesIn $reads  \\\\\n        --runThreadN $task.cpus \\\\\n        --outFileNamePrefix $prefix. \\\\\n        $out_sam_type \\\\\n        $ignore_gtf \\\\\n        $seq_center \\\\\n        $args\n\n    $mv_unsorted_bam\n\n    if [ -f ${prefix}.Unmapped.out.mate1 ]; then\n        mv ${prefix}.Unmapped.out.mate1 ${prefix}.unmapped_1.fastq\n        gzip ${prefix}.unmapped_1.fastq\n    fi\n    if [ -f ${prefix}.Unmapped.out.mate2 ]; then\n        mv ${prefix}.Unmapped.out.mate2 ${prefix}.unmapped_2.fastq\n        gzip ${prefix}.unmapped_2.fastq\n    fi\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        star: \\$(STAR --version | sed -e \"s/STAR_//g\")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 33,
        "language_script": "bash",
        "tools": [
            "STAR"
        ],
        "tools_url": [
            "https://bio.tools/star"
        ],
        "tools_dico": [
            {
                "name": "STAR",
                "uri": "https://bio.tools/star",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Ultrafast universal RNA-seq aligner",
                "homepage": "http://code.google.com/p/rna-star/"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "index",
            "gtf",
            "star_ignore_sjdbgtf",
            "seq_platform",
            "seq_center"
        ],
        "nb_inputs": 7,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "conda (params.enable_conda ? 'bioconda::star=2.7.9a' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/star:2.7.9a--h9ee0642_0' : 'quay.io/biocontainers/star:2.7.9a--h9ee0642_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "SNPEFF": {
        "name_process": "SNPEFF",
        "string_process": "process SNPEFF {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::snpeff=5.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/snpeff:5.0--hdfd78af_1' :\n        'quay.io/biocontainers/snpeff:5.0--hdfd78af_1' }\"\n\n    input:\n    tuple val(meta), path(vcf)\n    val   db\n    path  cache\n\n    output:\n    tuple val(meta), path(\"*.ann.vcf\"), emit: vcf\n    path \"*.csv\"                      , emit: report\n    path \"versions.yml\"               , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def avail_mem = 6\n    if (!task.memory) {\n        log.info '[snpEff] Available memory not known - defaulting to 6GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def cache_command = cache ? \"-dataDir \\${PWD}/${cache}\" : \"\"\n    \"\"\"\n    snpEff \\\\\n        -Xmx${avail_mem}g \\\\\n        $db \\\\\n        $args \\\\\n        -csvStats ${prefix}.csv \\\\\n        $cache_command \\\\\n        $vcf \\\\\n        > ${prefix}.ann.vcf\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        snpeff: \\$(echo \\$(snpEff -version 2>&1) | cut -f 2 -d ' ')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 46,
        "string_script": "    def args = task.ext.args ?: ''\n    def avail_mem = 6\n    if (!task.memory) {\n        log.info '[snpEff] Available memory not known - defaulting to 6GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def cache_command = cache ? \"-dataDir \\${PWD}/${cache}\" : \"\"\n    \"\"\"\n    snpEff \\\\\n        -Xmx${avail_mem}g \\\\\n        $db \\\\\n        $args \\\\\n        -csvStats ${prefix}.csv \\\\\n        $cache_command \\\\\n        $vcf \\\\\n        > ${prefix}.ann.vcf\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        snpeff: \\$(echo \\$(snpEff -version 2>&1) | cut -f 2 -d ' ')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 23,
        "language_script": "bash",
        "tools": [
            "snpEff"
        ],
        "tools_url": [
            "https://bio.tools/snpeff"
        ],
        "tools_dico": [
            {
                "name": "snpEff",
                "uri": "https://bio.tools/snpeff",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3511",
                            "term": "Nucleic acid sites, features and motifs"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0484",
                                    "term": "SNP detection"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0484",
                                    "term": "Single nucleotide polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0484",
                                    "term": "SNP discovery"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0484",
                                    "term": "SNP calling"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            },
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            },
                            {
                                "uri": "http://edamontology.org/data_3002",
                                "term": "Annotation track"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            },
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "Variant annotation and effect prediction tool. It annotates and predicts the effects of variants on genes and proteins (such as amino acid changes).",
                "homepage": "http://snpeff.sourceforge.net/"
            }
        ],
        "inputs": [
            "meta",
            "vcf",
            "db",
            "cache"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::snpeff=5.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/snpeff:5.0--hdfd78af_1' : 'quay.io/biocontainers/snpeff:5.0--hdfd78af_1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "SEQTK_MERGEPE": {
        "name_process": "SEQTK_MERGEPE",
        "string_process": "process SEQTK_MERGEPE {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::seqtk=1.3\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/seqtk:1.3--h5bf99c6_3' :\n        'quay.io/biocontainers/seqtk:1.3--h5bf99c6_3' }\"\n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path(\"*.fastq.gz\"), emit: reads\n    path \"versions.yml\"          , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (meta.single_end) {\n        \"\"\"\n        ln -s ${reads} ${prefix}.fastq.gz\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            seqtk: \\$(echo \\$(seqtk 2>&1) | sed 's/^.*Version: //; s/ .*\\$//')\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        seqtk \\\\\n            mergepe \\\\\n            $args \\\\\n            ${reads} \\\\\n            | gzip -n >> ${prefix}.fastq.gz\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            seqtk: \\$(echo \\$(seqtk 2>&1) | sed 's/^.*Version: //; s/ .*\\$//')\n        END_VERSIONS\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 44,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (meta.single_end) {\n        \"\"\"\n        ln -s ${reads} ${prefix}.fastq.gz\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            seqtk: \\$(echo \\$(seqtk 2>&1) | sed 's/^.*Version: //; s/ .*\\$//')\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        seqtk \\\\\n            mergepe \\\\\n            $args \\\\\n            ${reads} \\\\\n            | gzip -n >> ${prefix}.fastq.gz\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            seqtk: \\$(echo \\$(seqtk 2>&1) | sed 's/^.*Version: //; s/ .*\\$//')\n        END_VERSIONS\n        \"\"\"\n    }",
        "nb_lignes_script": 24,
        "language_script": "bash",
        "tools": [
            "seqtk"
        ],
        "tools_url": [
            "https://bio.tools/seqtk"
        ],
        "tools_dico": [
            {
                "name": "seqtk",
                "uri": "https://bio.tools/seqtk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2121",
                                    "term": "Sequence file editing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A tool for processing sequences in the FASTA or FASTQ format. It parses both FASTA and FASTQ files which can also be optionally compressed by gzip.",
                "homepage": "https://github.com/lh3/seqtk"
            }
        ],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::seqtk=1.3\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/seqtk:1.3--h5bf99c6_3' : 'quay.io/biocontainers/seqtk:1.3--h5bf99c6_3' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "DSHBIO_SPLITBED": {
        "name_process": "DSHBIO_SPLITBED",
        "string_process": "process DSHBIO_SPLITBED {\n    tag \"${meta.id}\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::dsh-bio=2.0.8\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/dsh-bio:2.0.8--hdfd78af_0' :\n        'quay.io/biocontainers/dsh-bio:2.0.8--hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(bed)\n\n    output:\n    tuple val(meta), path(\"*.bed.gz\"), emit: bed\n    path \"versions.yml\"              , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    dsh-bio \\\\\n        split-bed \\\\\n        $args \\\\\n        -p $prefix \\\\\n        -s '.bed.gz' \\\\\n        -i $bed\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        dshbio: \\$(dsh-bio --version 2>&1 | grep -o 'dsh-bio-tools .*' | cut -f2 -d ' ')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    dsh-bio \\\\\n        split-bed \\\\\n        $args \\\\\n        -p $prefix \\\\\n        -s '.bed.gz' \\\\\n        -i $bed\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        dshbio: \\$(dsh-bio --version 2>&1 | grep -o 'dsh-bio-tools .*' | cut -f2 -d ' ')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "bed"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"${meta.id}\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::dsh-bio=2.0.8\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/dsh-bio:2.0.8--hdfd78af_0' : 'quay.io/biocontainers/dsh-bio:2.0.8--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "CNVPYTOR_CALLCNVS": {
        "name_process": "CNVPYTOR_CALLCNVS",
        "string_process": "process CNVPYTOR_CALLCNVS {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::cnvpytor=1.2.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/cnvpytor:1.2.1--pyhdfd78af_0':\n        'quay.io/biocontainers/cnvpytor:1.2.1--pyhdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(pytor)\n    val bin_sizes\n\n    output:\n    tuple val(meta), path(\"${pytor.baseName}.pytor\")\t, emit: pytor\n    path \"versions.yml\"                                 , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def bins = bin_sizes ?: '1000'\n    \"\"\"\n    cnvpytor \\\\\n        -root $pytor \\\\\n        -call $bin_sizes\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        cnvpytor: \\$(echo \\$(cnvpytor --version 2>&1) | sed 's/CNVpytor //' ))\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    \"\"\"\n    touch ${pytor.baseName}.pytor\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        cnvpytor: \\$(echo \\$(cnvpytor --version 2>&1) | sed 's/CNVpytor //' ))\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 41,
        "string_script": "    def bins = bin_sizes ?: '1000'\n    \"\"\"\n    cnvpytor \\\\\n        -root $pytor \\\\\n        -call $bin_sizes\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        cnvpytor: \\$(echo \\$(cnvpytor --version 2>&1) | sed 's/CNVpytor //' ))\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "pytor",
            "bin_sizes"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::cnvpytor=1.2.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/cnvpytor:1.2.1--pyhdfd78af_0': 'quay.io/biocontainers/cnvpytor:1.2.1--pyhdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    \"\"\"\n    touch ${pytor.baseName}.pytor\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        cnvpytor: \\$(echo \\$(cnvpytor --version 2>&1) | sed 's/CNVpytor //' ))\n    END_VERSIONS\n    \"\"\""
    },
    "RSEM_CALCULATEEXPRESSION": {
        "name_process": "RSEM_CALCULATEEXPRESSION",
        "string_process": "process RSEM_CALCULATEEXPRESSION {\n    tag \"$meta.id\"\n    label 'process_high'\n\n    conda (params.enable_conda ? \"bioconda::rsem=1.3.3 bioconda::star=2.7.10a\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mulled-v2-cf0123ef83b3c38c13e3b0696a3f285d3f20f15b:64aad4a4e144878400649e71f42105311be7ed87-0' :\n        'quay.io/biocontainers/mulled-v2-cf0123ef83b3c38c13e3b0696a3f285d3f20f15b:64aad4a4e144878400649e71f42105311be7ed87-0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n    path  index\n\n    output:\n    tuple val(meta), path(\"*.genes.results\")   , emit: counts_gene\n    tuple val(meta), path(\"*.isoforms.results\"), emit: counts_transcript\n    tuple val(meta), path(\"*.stat\")            , emit: stat\n    tuple val(meta), path(\"*.log\")             , emit: logs\n    path  \"versions.yml\"                       , emit: versions\n\n    tuple val(meta), path(\"*.STAR.genome.bam\")       , optional:true, emit: bam_star\n    tuple val(meta), path(\"${prefix}.genome.bam\")    , optional:true, emit: bam_genome\n    tuple val(meta), path(\"${prefix}.transcript.bam\"), optional:true, emit: bam_transcript\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args   ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n\n    def strandedness = ''\n    if (meta.strandedness == 'forward') {\n        strandedness = '--strandedness forward'\n    } else if (meta.strandedness == 'reverse') {\n        strandedness = '--strandedness reverse'\n    }\n    def paired_end = meta.single_end ? \"\" : \"--paired-end\"\n    \"\"\"\n    INDEX=`find -L ./ -name \"*.grp\" | sed 's/.grp//'`\n    rsem-calculate-expression \\\\\n        --num-threads $task.cpus \\\\\n        --temporary-folder ./tmp/ \\\\\n        $strandedness \\\\\n        $paired_end \\\\\n        $args \\\\\n        $reads \\\\\n        \\$INDEX \\\\\n        $prefix\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        rsem: \\$(rsem-calculate-expression --version | sed -e \"s/Current version: RSEM v//g\")\n        star: \\$(STAR --version | sed -e \"s/STAR_//g\")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 55,
        "string_script": "    def args = task.ext.args   ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n\n    def strandedness = ''\n    if (meta.strandedness == 'forward') {\n        strandedness = '--strandedness forward'\n    } else if (meta.strandedness == 'reverse') {\n        strandedness = '--strandedness reverse'\n    }\n    def paired_end = meta.single_end ? \"\" : \"--paired-end\"\n    \"\"\"\n    INDEX=`find -L ./ -name \"*.grp\" | sed 's/.grp//'`\n    rsem-calculate-expression \\\\\n        --num-threads $task.cpus \\\\\n        --temporary-folder ./tmp/ \\\\\n        $strandedness \\\\\n        $paired_end \\\\\n        $args \\\\\n        $reads \\\\\n        \\$INDEX \\\\\n        $prefix\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        rsem: \\$(rsem-calculate-expression --version | sed -e \"s/Current version: RSEM v//g\")\n        star: \\$(STAR --version | sed -e \"s/STAR_//g\")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 27,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "reads",
            "index"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "conda (params.enable_conda ? \"bioconda::rsem=1.3.3 bioconda::star=2.7.10a\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mulled-v2-cf0123ef83b3c38c13e3b0696a3f285d3f20f15b:64aad4a4e144878400649e71f42105311be7ed87-0' : 'quay.io/biocontainers/mulled-v2-cf0123ef83b3c38c13e3b0696a3f285d3f20f15b:64aad4a4e144878400649e71f42105311be7ed87-0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "CNVPYTOR_HISTOGRAM": {
        "name_process": "CNVPYTOR_HISTOGRAM",
        "string_process": "process CNVPYTOR_HISTOGRAM {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::cnvpytor=1.2.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/cnvpytor:1.2.1--pyhdfd78af_0':\n        'quay.io/biocontainers/cnvpytor:1.2.1--pyhdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(pytor)\n    val bin_sizes\n\n\n    output:\n    tuple val(meta), path(\"${pytor.baseName}.pytor\")\t, emit: pytor\n    path \"versions.yml\"                                 , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def bins = bin_sizes ?: '1000'\n    \"\"\"\n    cnvpytor \\\\\n        -root $pytor \\\\\n        -his $bins\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        cnvpytor: \\$(echo \\$(cnvpytor --version 2>&1) | sed 's/CNVpytor //' ))\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    \"\"\"\n    touch ${pytor.baseName}.pytor\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        cnvpytor: \\$(echo \\$(cnvpytor --version 2>&1) | sed 's/CNVpytor //' ))\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 42,
        "string_script": "    def bins = bin_sizes ?: '1000'\n    \"\"\"\n    cnvpytor \\\\\n        -root $pytor \\\\\n        -his $bins\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        cnvpytor: \\$(echo \\$(cnvpytor --version 2>&1) | sed 's/CNVpytor //' ))\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "pytor",
            "bin_sizes"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::cnvpytor=1.2.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/cnvpytor:1.2.1--pyhdfd78af_0': 'quay.io/biocontainers/cnvpytor:1.2.1--pyhdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    \"\"\"\n    touch ${pytor.baseName}.pytor\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        cnvpytor: \\$(echo \\$(cnvpytor --version 2>&1) | sed 's/CNVpytor //' ))\n    END_VERSIONS\n    \"\"\""
    },
    "UMITOOLS_EXTRACT": {
        "name_process": "UMITOOLS_EXTRACT",
        "string_process": "process UMITOOLS_EXTRACT {\n    tag \"$meta.id\"\n    label \"process_low\"\n\n    conda (params.enable_conda ? \"bioconda::umi_tools=1.1.2\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/umi_tools:1.1.2--py38h4a8c8d9_0' :\n        'quay.io/biocontainers/umi_tools:1.1.2--py38h4a8c8d9_0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path(\"*.fastq.gz\"), emit: reads\n    tuple val(meta), path(\"*.log\")     , emit: log\n    path  \"versions.yml\"               , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (meta.single_end) {\n        \"\"\"\n        umi_tools \\\\\n            extract \\\\\n            -I $reads \\\\\n            -S ${prefix}.umi_extract.fastq.gz \\\\\n            $args \\\\\n            > ${prefix}.umi_extract.log\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            umitools: \\$(umi_tools --version 2>&1 | sed 's/^.*UMI-tools version://; s/ *\\$//')\n        END_VERSIONS\n        \"\"\"\n    }  else {\n        \"\"\"\n        umi_tools \\\\\n            extract \\\\\n            -I ${reads[0]} \\\\\n            --read2-in=${reads[1]} \\\\\n            -S ${prefix}.umi_extract_1.fastq.gz \\\\\n            --read2-out=${prefix}.umi_extract_2.fastq.gz \\\\\n            $args \\\\\n            > ${prefix}.umi_extract.log\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            umitools: \\$(umi_tools --version 2>&1 | sed 's/^.*UMI-tools version://; s/ *\\$//')\n        END_VERSIONS\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 53,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (meta.single_end) {\n        \"\"\"\n        umi_tools \\\\\n            extract \\\\\n            -I $reads \\\\\n            -S ${prefix}.umi_extract.fastq.gz \\\\\n            $args \\\\\n            > ${prefix}.umi_extract.log\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            umitools: \\$(umi_tools --version 2>&1 | sed 's/^.*UMI-tools version://; s/ *\\$//')\n        END_VERSIONS\n        \"\"\"\n    }  else {\n        \"\"\"\n        umi_tools \\\\\n            extract \\\\\n            -I ${reads[0]} \\\\\n            --read2-in=${reads[1]} \\\\\n            -S ${prefix}.umi_extract_1.fastq.gz \\\\\n            --read2-out=${prefix}.umi_extract_2.fastq.gz \\\\\n            $args \\\\\n            > ${prefix}.umi_extract.log\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            umitools: \\$(umi_tools --version 2>&1 | sed 's/^.*UMI-tools version://; s/ *\\$//')\n        END_VERSIONS\n        \"\"\"\n    }",
        "nb_lignes_script": 32,
        "language_script": "bash",
        "tools": [
            "EXTRACT"
        ],
        "tools_url": [
            "https://bio.tools/extract"
        ],
        "tools_dico": [
            {
                "name": "EXTRACT",
                "uri": "https://bio.tools/extract",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0218",
                            "term": "Natural language processing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0218",
                            "term": "NLP"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3778",
                                    "term": "Text annotation"
                                }
                            ],
                            []
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3671",
                                "term": "Text"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3779",
                                "term": "Annotated text"
                            }
                        ]
                    }
                ],
                "description": "EXTRACT identifies genes/proteins, chemical compounds, organisms, environments, tissues, diseases, phenotypes and Gene Ontology terms mentioned in a given piece of text and maps them to their corresponding ontology/taxonomy entries.",
                "homepage": "https://extract.jensenlab.org/"
            }
        ],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label \"process_low\"",
            "conda (params.enable_conda ? \"bioconda::umi_tools=1.1.2\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/umi_tools:1.1.2--py38h4a8c8d9_0' : 'quay.io/biocontainers/umi_tools:1.1.2--py38h4a8c8d9_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "BCFTOOLS_MERGE": {
        "name_process": "BCFTOOLS_MERGE",
        "string_process": "process BCFTOOLS_MERGE {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? 'bioconda::bcftools=1.14' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bcftools:1.14--h88f3f91_0' :\n        'quay.io/biocontainers/bcftools:1.14--h88f3f91_0' }\"\n\n    input:\n    tuple val(meta), path(vcfs), path(tbis)\n\n    output:\n    tuple val(meta), path(\"*.gz\"), emit: vcf\n    path  \"versions.yml\"         , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args   ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    bcftools merge -Oz \\\\\n        --output ${prefix}.vcf.gz \\\\\n        $args \\\\\n        *.vcf.gz\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bcftools: \\$(bcftools --version 2>&1 | head -n1 | sed 's/^.*bcftools //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "    def args = task.ext.args   ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    bcftools merge -Oz \\\\\n        --output ${prefix}.vcf.gz \\\\\n        $args \\\\\n        *.vcf.gz\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bcftools: \\$(bcftools --version 2>&1 | head -n1 | sed 's/^.*bcftools //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "BCFtools"
        ],
        "tools_url": [
            "https://bio.tools/bcftools"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "vcfs",
            "tbis"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? 'bioconda::bcftools=1.14' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bcftools:1.14--h88f3f91_0' : 'quay.io/biocontainers/bcftools:1.14--h88f3f91_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "PICARD_ADDORREPLACEREADGROUPS": {
        "name_process": "PICARD_ADDORREPLACEREADGROUPS",
        "string_process": "process PICARD_ADDORREPLACEREADGROUPS {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::picard=2.27.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/picard:2.27.1--hdfd78af_0' :\n        'quay.io/biocontainers/picard:2.27.1--hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(bam)\n\n    output:\n    tuple val(meta), path(\"*.bam\"), emit: bam\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args        ?: ''\n    def prefix = task.ext.prefix    ?: \"${meta.id}\"\n    def ID = task.ext.id            ?: \"id\"\n    def LIBRARY= task.ext.library   ?: \"library\"\n    def PLATFORM= task.ext.platform ?: \"illumina\"\n    def BARCODE= task.ext.barcode   ?: \"barcode\"\n    def SAMPLE= task.ext.sample     ?: \"sample\"\n    def INDEX= task.ext.index       ?: \"index\"\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[Picard AddOrReplaceReadGroups] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    picard \\\\\n        AddOrReplaceReadGroups \\\\\n        -Xmx${avail_mem}g \\\\\n        --INPUT ${bam} \\\\\n        --OUTPUT ${prefix}.bam \\\\\n        --RGID ${ID} \\\\\n        --RGLB ${LIBRARY} \\\\\n        --RGPL ${PLATFORM} \\\\\n        --RGPU ${BARCODE} \\\\\n        --RGSM ${SAMPLE} \\\\\n        --CREATE_INDEX true\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        picard: \\$(picard AddOrReplaceReadGroups --version 2>&1 | grep -o 'Version:.*' | cut -f2- -d:)\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 51,
        "string_script": "    def args = task.ext.args        ?: ''\n    def prefix = task.ext.prefix    ?: \"${meta.id}\"\n    def ID = task.ext.id            ?: \"id\"\n    def LIBRARY= task.ext.library   ?: \"library\"\n    def PLATFORM= task.ext.platform ?: \"illumina\"\n    def BARCODE= task.ext.barcode   ?: \"barcode\"\n    def SAMPLE= task.ext.sample     ?: \"sample\"\n    def INDEX= task.ext.index       ?: \"index\"\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[Picard AddOrReplaceReadGroups] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    picard \\\\\n        AddOrReplaceReadGroups \\\\\n        -Xmx${avail_mem}g \\\\\n        --INPUT ${bam} \\\\\n        --OUTPUT ${prefix}.bam \\\\\n        --RGID ${ID} \\\\\n        --RGLB ${LIBRARY} \\\\\n        --RGPL ${PLATFORM} \\\\\n        --RGPU ${BARCODE} \\\\\n        --RGSM ${SAMPLE} \\\\\n        --CREATE_INDEX true\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        picard: \\$(picard AddOrReplaceReadGroups --version 2>&1 | grep -o 'Version:.*' | cut -f2- -d:)\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 31,
        "language_script": "bash",
        "tools": [
            "Picard"
        ],
        "tools_url": [
            "https://bio.tools/picard_tools"
        ],
        "tools_dico": [
            {
                "name": "Picard",
                "uri": "https://bio.tools/picard_tools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Sequence variation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Variant analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation annotation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A set of command line tools for manipulating high-throughput sequencing (HTS) data in formats such as SAM/BAM/CRAM and VCF. Available as a standalone program or within the GATK4 program.",
                "homepage": "https://github.com/broadinstitute/picard"
            }
        ],
        "inputs": [
            "meta",
            "bam"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::picard=2.27.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/picard:2.27.1--hdfd78af_0' : 'quay.io/biocontainers/picard:2.27.1--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "DEEPTOOLS_BAMCOVERAGE": {
        "name_process": "DEEPTOOLS_BAMCOVERAGE",
        "string_process": "process DEEPTOOLS_BAMCOVERAGE {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::deeptools=3.5.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/deeptools:3.5.1--py_0':\n        'quay.io/biocontainers/deeptools:3.5.1--py_0' }\"\n\n    input:\n    tuple val(meta), path(input), path(input_index)\n\n    output:\n    tuple val(meta), path(\"*.bigWig\")   , emit: bigwig, optional: true\n    tuple val(meta), path(\"*.bedgraph\") , emit: bedgraph, optional: true\n    path \"versions.yml\"                 , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}.bigWig\"\n\n    \"\"\"\n    bamCoverage \\\\\n        --bam $input \\\\\n        $args \\\\\n        --numberOfProcessors ${task.cpus} \\\\\n        --outFileName ${prefix}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        deeptools: \\$(bamCoverage --version | sed -e \"s/bamCoverage //g\")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}.bigWig\"\n\n    \"\"\"\n    bamCoverage \\\\\n        --bam $input \\\\\n        $args \\\\\n        --numberOfProcessors ${task.cpus} \\\\\n        --outFileName ${prefix}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        deeptools: \\$(bamCoverage --version | sed -e \"s/bamCoverage //g\")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "input",
            "input_index"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::deeptools=3.5.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/deeptools:3.5.1--py_0': 'quay.io/biocontainers/deeptools:3.5.1--py_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "PLINK2_SCORE": {
        "name_process": "PLINK2_SCORE",
        "string_process": "process PLINK2_SCORE {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::plink2=2.00a2.3\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/plink2:2.00a2.3--h712d239_1' :\n        'quay.io/biocontainers/plink2:2.00a2.3--h712d239_1' }\"\n\n    input:\n    tuple val(meta), path(pgen), path(psam), path(pvar)\n    path(scorefile)\n\n    output:\n    tuple val(meta), path(\"*.sscore\"), emit: score\n    path(\"versions.yml\")             , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def mem_mb = task.memory.toMega()                   \n    \"\"\"\n    plink2 \\\\\n        --threads $task.cpus \\\\\n        --memory $mem_mb \\\\\n        --pfile ${pgen.baseName} vzs \\\\\n        --score ${scorefile} \\\\\n        $args \\\\\n        --out ${prefix}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        plink2: \\$(plink2 --version 2>&1 | sed 's/^PLINK v//; s/ 64.*\\$//' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 37,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def mem_mb = task.memory.toMega()                   \n    \"\"\"\n    plink2 \\\\\n        --threads $task.cpus \\\\\n        --memory $mem_mb \\\\\n        --pfile ${pgen.baseName} vzs \\\\\n        --score ${scorefile} \\\\\n        $args \\\\\n        --out ${prefix}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        plink2: \\$(plink2 --version 2>&1 | sed 's/^PLINK v//; s/ 64.*\\$//' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "pgen",
            "psam",
            "pvar",
            "scorefile"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::plink2=2.00a2.3\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/plink2:2.00a2.3--h712d239_1' : 'quay.io/biocontainers/plink2:2.00a2.3--h712d239_1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "GATK4_ESTIMATELIBRARYCOMPLEXITY": {
        "name_process": "GATK4_ESTIMATELIBRARYCOMPLEXITY",
        "string_process": "process GATK4_ESTIMATELIBRARYCOMPLEXITY {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::gatk4=4.2.6.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/gatk4:4.2.6.1--hdfd78af_0':\n        'quay.io/biocontainers/gatk4:4.2.6.1--hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(input)\n    path  fasta\n    path  fai\n    path  dict\n\n    output:\n    tuple val(meta), path('*.metrics'), emit: metrics\n    path \"versions.yml\"               , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def input_list = input.collect(){\"--INPUT $it\"}.join(\" \")\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[GATK EstimateLibraryComplexity] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    gatk --java-options \"-Xmx${avail_mem}g\" EstimateLibraryComplexity \\\\\n        $input_list \\\\\n        --OUTPUT ${prefix}.metrics \\\\\n        --REFERENCE_SEQUENCE ${fasta} \\\\\n        --TMP_DIR . \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 45,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def input_list = input.collect(){\"--INPUT $it\"}.join(\" \")\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[GATK EstimateLibraryComplexity] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    gatk --java-options \"-Xmx${avail_mem}g\" EstimateLibraryComplexity \\\\\n        $input_list \\\\\n        --OUTPUT ${prefix}.metrics \\\\\n        --REFERENCE_SEQUENCE ${fasta} \\\\\n        --TMP_DIR . \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 22,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "meta",
            "input",
            "fasta",
            "fai",
            "dict"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::gatk4=4.2.6.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/gatk4:4.2.6.1--hdfd78af_0': 'quay.io/biocontainers/gatk4:4.2.6.1--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "RSEQC_INNERDISTANCE": {
        "name_process": "RSEQC_INNERDISTANCE",
        "string_process": "process RSEQC_INNERDISTANCE {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::rseqc=3.0.1 'conda-forge::r-base>=3.5'\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/rseqc:3.0.1--py37h516909a_1' :\n        'quay.io/biocontainers/rseqc:3.0.1--py37h516909a_1' }\"\n\n    input:\n    tuple val(meta), path(bam)\n    path  bed\n\n    output:\n    tuple val(meta), path(\"*distance.txt\"), optional:true, emit: distance\n    tuple val(meta), path(\"*freq.txt\")    , optional:true, emit: freq\n    tuple val(meta), path(\"*mean.txt\")    , optional:true, emit: mean\n    tuple val(meta), path(\"*.pdf\")        , optional:true, emit: pdf\n    tuple val(meta), path(\"*.r\")          , optional:true, emit: rscript\n    path  \"versions.yml\"                  , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (!meta.single_end) {\n        \"\"\"\n        inner_distance.py \\\\\n            -i $bam \\\\\n            -r $bed \\\\\n            -o $prefix \\\\\n            $args \\\\\n            > stdout.txt\n        head -n 2 stdout.txt > ${prefix}.inner_distance_mean.txt\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            rseqc: \\$(inner_distance.py --version | sed -e \"s/inner_distance.py //g\")\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            rseqc: \\$(inner_distance.py --version | sed -e \"s/inner_distance.py //g\")\n        END_VERSIONS\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 49,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (!meta.single_end) {\n        \"\"\"\n        inner_distance.py \\\\\n            -i $bam \\\\\n            -r $bed \\\\\n            -o $prefix \\\\\n            $args \\\\\n            > stdout.txt\n        head -n 2 stdout.txt > ${prefix}.inner_distance_mean.txt\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            rseqc: \\$(inner_distance.py --version | sed -e \"s/inner_distance.py //g\")\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            rseqc: \\$(inner_distance.py --version | sed -e \"s/inner_distance.py //g\")\n        END_VERSIONS\n        \"\"\"\n    }",
        "nb_lignes_script": 24,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "bam",
            "bed"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::rseqc=3.0.1 'conda-forge::r-base>=3.5'\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/rseqc:3.0.1--py37h516909a_1' : 'quay.io/biocontainers/rseqc:3.0.1--py37h516909a_1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "SAMTOOLS_VIEW": {
        "name_process": "SAMTOOLS_VIEW",
        "string_process": "process SAMTOOLS_VIEW {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::samtools=1.15.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/samtools:1.15.1--h1170115_0' :\n        'quay.io/biocontainers/samtools:1.15.1--h1170115_0' }\"\n\n    input:\n    tuple val(meta), path(input), path(index)\n    path fasta\n\n    output:\n    tuple val(meta), path(\"*.bam\") , emit: bam , optional: true\n    tuple val(meta), path(\"*.cram\"), emit: cram, optional: true\n    path  \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def reference = fasta ? \"--reference ${fasta} -C\" : \"\"\n    def file_type = input.getExtension()\n    if (\"$input\" == \"${prefix}.${file_type}\") error \"Input and output names are the same, use \\\"task.ext.prefix\\\" to disambiguate!\"\n    \"\"\"\n    samtools \\\\\n        view \\\\\n        --threads ${task.cpus-1} \\\\\n        ${reference} \\\\\n        $args \\\\\n        $input \\\\\n        $args2 \\\\\n        > ${prefix}.${file_type}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.bam\n    touch ${prefix}.cram\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 54,
        "string_script": "    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def reference = fasta ? \"--reference ${fasta} -C\" : \"\"\n    def file_type = input.getExtension()\n    if (\"$input\" == \"${prefix}.${file_type}\") error \"Input and output names are the same, use \\\"task.ext.prefix\\\" to disambiguate!\"\n    \"\"\"\n    samtools \\\\\n        view \\\\\n        --threads ${task.cpus-1} \\\\\n        ${reference} \\\\\n        $args \\\\\n        $input \\\\\n        $args2 \\\\\n        > ${prefix}.${file_type}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 20,
        "language_script": "bash",
        "tools": [
            "SAMtools",
            "iview"
        ],
        "tools_url": [
            "https://bio.tools/samtools",
            "https://bio.tools/iview"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "iview",
                "uri": "https://bio.tools/iview",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2275",
                            "term": "Molecular modelling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0128",
                            "term": "Protein interactions"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2814",
                            "term": "Protein structure analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_2814",
                            "term": "Protein structure"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0477",
                                    "term": "Protein modelling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0477",
                                    "term": "Homology modelling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0477",
                                    "term": "Comparative modelling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0477",
                                    "term": "Protein structure comparative modelling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0477",
                                    "term": "Homology structure modelling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Interactive HTML5 visualizer of protein-ligand complex.",
                "homepage": "http://istar.cse.cuhk.edu.hk/iview/"
            }
        ],
        "inputs": [
            "meta",
            "input",
            "index",
            "fasta"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::samtools=1.15.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/samtools:1.15.1--h1170115_0' : 'quay.io/biocontainers/samtools:1.15.1--h1170115_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.bam\n    touch ${prefix}.cram\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\""
    },
    "GATK4_SPLITNCIGARREADS": {
        "name_process": "GATK4_SPLITNCIGARREADS",
        "string_process": "process GATK4_SPLITNCIGARREADS {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::gatk4=4.2.6.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/gatk4:4.2.6.1--hdfd78af_0':\n        'quay.io/biocontainers/gatk4:4.2.6.1--hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(bam), path(bai), path(intervals)\n    path  fasta\n    path  fai\n    path  dict\n\n    output:\n    tuple val(meta), path('*.bam'), emit: bam\n    path  \"versions.yml\"          , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def interval_command = intervals ? \"--intervals $intervals\" : \"\"\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[GATK SplitNCigarReads] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    gatk --java-options \"-Xmx${avail_mem}g\" SplitNCigarReads \\\\\n        --input $bam \\\\\n        --output ${prefix}.bam \\\\\n        --reference $fasta \\\\\n        $interval_command \\\\\n        --tmp-dir . \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 46,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def interval_command = intervals ? \"--intervals $intervals\" : \"\"\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[GATK SplitNCigarReads] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    gatk --java-options \"-Xmx${avail_mem}g\" SplitNCigarReads \\\\\n        --input $bam \\\\\n        --output ${prefix}.bam \\\\\n        --reference $fasta \\\\\n        $interval_command \\\\\n        --tmp-dir . \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 23,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "meta",
            "bam",
            "bai",
            "intervals",
            "fasta",
            "fai",
            "dict"
        ],
        "nb_inputs": 7,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::gatk4=4.2.6.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/gatk4:4.2.6.1--hdfd78af_0': 'quay.io/biocontainers/gatk4:4.2.6.1--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "NUCMER": {
        "name_process": "NUCMER",
        "string_process": "process NUCMER {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::mummer=3.23\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mummer:3.23--pl5262h1b792b2_12' :\n        'quay.io/biocontainers/mummer:3.23--pl5262h1b792b2_12' }\"\n\n    input:\n    tuple val(meta), path(ref), path(query)\n\n    output:\n    tuple val(meta), path(\"*.delta\") , emit: delta\n    tuple val(meta), path(\"*.coords\"), emit: coords\n    path \"versions.yml\"              , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def is_compressed_ref   = ref.getName().endsWith(\".gz\")   ? true : false\n    def is_compressed_query = query.getName().endsWith(\".gz\") ? true : false\n    def fasta_name_ref      = ref.getName().replace(\".gz\", \"\")\n    def fasta_name_query    = query.getName().replace(\".gz\", \"\")\n    \"\"\"\n    if [ \"$is_compressed_ref\" == \"true\" ]; then\n        gzip -c -d $ref > $fasta_name_ref\n    fi\n    if [ \"$is_compressed_query\" == \"true\" ]; then\n        gzip -c -d $query > $fasta_name_query\n    fi\n\n    nucmer \\\\\n        -p $prefix \\\\\n        --coords \\\\\n        $args \\\\\n        $fasta_name_ref \\\\\n        $fasta_name_query\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        nucmer: \\$( nucmer --version 2>&1  | grep \"version\" | sed -e \"s/NUCmer (NUCleotide MUMmer) version //g; s/nucmer//g;\" )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 46,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def is_compressed_ref   = ref.getName().endsWith(\".gz\")   ? true : false\n    def is_compressed_query = query.getName().endsWith(\".gz\") ? true : false\n    def fasta_name_ref      = ref.getName().replace(\".gz\", \"\")\n    def fasta_name_query    = query.getName().replace(\".gz\", \"\")\n    \"\"\"\n    if [ \"$is_compressed_ref\" == \"true\" ]; then\n        gzip -c -d $ref > $fasta_name_ref\n    fi\n    if [ \"$is_compressed_query\" == \"true\" ]; then\n        gzip -c -d $query > $fasta_name_query\n    fi\n\n    nucmer \\\\\n        -p $prefix \\\\\n        --coords \\\\\n        $args \\\\\n        $fasta_name_ref \\\\\n        $fasta_name_query\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        nucmer: \\$( nucmer --version 2>&1  | grep \"version\" | sed -e \"s/NUCmer (NUCleotide MUMmer) version //g; s/nucmer//g;\" )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 25,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "ref",
            "query"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::mummer=3.23\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mummer:3.23--pl5262h1b792b2_12' : 'quay.io/biocontainers/mummer:3.23--pl5262h1b792b2_12' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "DSHBIO_SPLITGFF3": {
        "name_process": "DSHBIO_SPLITGFF3",
        "string_process": "process DSHBIO_SPLITGFF3 {\n    tag \"${meta.id}\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::dsh-bio=2.0.8\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/dsh-bio:2.0.8--hdfd78af_0' :\n        'quay.io/biocontainers/dsh-bio:2.0.8--hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(gff3)\n\n    output:\n    tuple val(meta), path(\"*.gff3.gz\"), emit: gff3\n    path \"versions.yml\"               , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    dsh-bio \\\\\n        split-gff3 \\\\\n        $args \\\\\n        -p $prefix \\\\\n        -s '.gff3.gz' \\\\\n        -i $gff3\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        dshbio: \\$(dsh-bio --version 2>&1 | grep -o 'dsh-bio-tools .*' | cut -f2 -d ' ')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    dsh-bio \\\\\n        split-gff3 \\\\\n        $args \\\\\n        -p $prefix \\\\\n        -s '.gff3.gz' \\\\\n        -i $gff3\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        dshbio: \\$(dsh-bio --version 2>&1 | grep -o 'dsh-bio-tools .*' | cut -f2 -d ' ')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "gff3"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"${meta.id}\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::dsh-bio=2.0.8\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/dsh-bio:2.0.8--hdfd78af_0' : 'quay.io/biocontainers/dsh-bio:2.0.8--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "PLINK2_VCF": {
        "name_process": "PLINK2_VCF",
        "string_process": "process PLINK2_VCF {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::plink2=2.00a2.3\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/plink2:2.00a2.3--h712d239_1' :\n        'quay.io/biocontainers/plink2:2.00a2.3--h712d239_1' }\"\n\n    input:\n    tuple val(meta), path(vcf)\n\n    output:\n    tuple val(meta), path(\"*.pgen\")    , emit: pgen\n    tuple val(meta), path(\"*.psam\")    , emit: psam\n    tuple val(meta), path(\"*.pvar.zst\"), emit: pvar\n    path \"versions.yml\"                , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def mem_mb = task.memory.toMega()\n    \"\"\"\n    plink2 \\\\\n        --threads $task.cpus \\\\\n        --memory $mem_mb \\\\\n        $args \\\\\n        --vcf $vcf \\\\\n        --make-pgen vzs \\\\\n        --out ${prefix}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        plink2: \\$(plink2 --version 2>&1 | sed 's/^PLINK v//; s/ 64.*\\$//' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 38,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def mem_mb = task.memory.toMega()\n    \"\"\"\n    plink2 \\\\\n        --threads $task.cpus \\\\\n        --memory $mem_mb \\\\\n        $args \\\\\n        --vcf $vcf \\\\\n        --make-pgen vzs \\\\\n        --out ${prefix}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        plink2: \\$(plink2 --version 2>&1 | sed 's/^PLINK v//; s/ 64.*\\$//' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "vcf"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::plink2=2.00a2.3\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/plink2:2.00a2.3--h712d239_1' : 'quay.io/biocontainers/plink2:2.00a2.3--h712d239_1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "RSEQC_TIN": {
        "name_process": "RSEQC_TIN",
        "string_process": "process RSEQC_TIN {\n    tag \"$meta.id\"\n    label 'process_high'\n\n    conda (params.enable_conda ? \"bioconda::rseqc=3.0.1 'conda-forge::r-base>=3.5'\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/rseqc:3.0.1--py37h516909a_1' :\n        'quay.io/biocontainers/rseqc:3.0.1--py37h516909a_1' }\"\n\n    input:\n    tuple val(meta), path(bam), path(bai)\n    path  bed\n\n    output:\n    tuple val(meta), path(\"*.txt\"), emit: txt\n    tuple val(meta), path(\"*.xls\"), emit: xls\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    tin.py \\\\\n        -i $bam \\\\\n        -r $bed \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        rseqc: \\$(tin.py --version | sed -e \"s/tin.py //g\")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    tin.py \\\\\n        -i $bam \\\\\n        -r $bed \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        rseqc: \\$(tin.py --version | sed -e \"s/tin.py //g\")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "bam",
            "bai",
            "bed"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "conda (params.enable_conda ? \"bioconda::rseqc=3.0.1 'conda-forge::r-base>=3.5'\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/rseqc:3.0.1--py37h516909a_1' : 'quay.io/biocontainers/rseqc:3.0.1--py37h516909a_1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "BBMAP_INDEX": {
        "name_process": "BBMAP_INDEX",
        "string_process": "process BBMAP_INDEX {\n    tag \"$fasta\"\n    label 'process_long'\n\n    conda (params.enable_conda ? \"bioconda::bbmap=38.92\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bbmap:38.92--he522d1c_0' :\n        'quay.io/biocontainers/bbmap:38.92--he522d1c_0' }\"\n\n    input:\n    path fasta\n\n    output:\n    path 'ref'                    , emit: index\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    bbmap.sh \\\\\n        ref=${fasta} \\\\\n        $args \\\\\n        threads=$task.cpus \\\\\n        -Xmx${task.memory.toGiga()}g\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bbmap: \\$(bbversion.sh)\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    bbmap.sh \\\\\n        ref=${fasta} \\\\\n        $args \\\\\n        threads=$task.cpus \\\\\n        -Xmx${task.memory.toGiga()}g\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bbmap: \\$(bbversion.sh)\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fasta"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$fasta\"",
            "label 'process_long'",
            "conda (params.enable_conda ? \"bioconda::bbmap=38.92\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bbmap:38.92--he522d1c_0' : 'quay.io/biocontainers/bbmap:38.92--he522d1c_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "PIRATE": {
        "name_process": "PIRATE",
        "string_process": "process PIRATE {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::pirate=1.0.4 bioconda::perl-bioperl=1.7.2\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/pirate:1.0.4--hdfd78af_2' :\n        'quay.io/biocontainers/pirate:1.0.4--hdfd78af_2' }\"\n\n    input:\n    tuple val(meta), path(gff)\n\n    output:\n    tuple val(meta), path(\"results/*\")                                   , emit: results\n    tuple val(meta), path(\"results/core_alignment.fasta\"), optional: true, emit: aln\n    path \"versions.yml\"                                                  , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    PIRATE \\\\\n        $args \\\\\n        --threads $task.cpus \\\\\n        --input ./ \\\\\n        --output results/\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        pirate: \\$( echo \\$( PIRATE --version 2>&1) | sed 's/PIRATE //' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    PIRATE \\\\\n        $args \\\\\n        --threads $task.cpus \\\\\n        --input ./ \\\\\n        --output results/\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        pirate: \\$( echo \\$( PIRATE --version 2>&1) | sed 's/PIRATE //' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [
            "PIRATE"
        ],
        "tools_url": [
            "https://bio.tools/PIRATE"
        ],
        "tools_dico": [
            {
                "name": "PIRATE",
                "uri": "https://bio.tools/PIRATE",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0623",
                            "term": "Gene and protein families"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype and phenotype"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0114",
                            "term": "Gene structure"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0623",
                            "term": "Genes, gene family or system"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype and phenotype resources"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype-phenotype analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype-phenotype"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0114",
                            "term": "Gene features"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Deposition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3359",
                                    "term": "Splitting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3432",
                                    "term": "Clustering"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Data submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Database deposition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Database submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Data deposition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3359",
                                    "term": "File splitting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "PIRATE is a fast and scalable pangenomics toolbox for clustering diverged orthologues in bacteria.",
                "homepage": "https://github.com/SionBayliss/PIRATE"
            }
        ],
        "inputs": [
            "meta",
            "gff"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::pirate=1.0.4 bioconda::perl-bioperl=1.7.2\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/pirate:1.0.4--hdfd78af_2' : 'quay.io/biocontainers/pirate:1.0.4--hdfd78af_2' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "MEDAKA": {
        "name_process": "MEDAKA",
        "string_process": "process MEDAKA {\n    tag \"$meta.id\"\n    label 'process_high'\n\n    conda (params.enable_conda ? \"bioconda::medaka=1.4.4\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/medaka:1.4.4--py38h130def0_0' :\n        'quay.io/biocontainers/medaka:1.4.4--py38h130def0_0' }\"\n\n    input:\n    tuple val(meta), path(reads), path(assembly)\n\n    output:\n    tuple val(meta), path(\"*.fa.gz\"), emit: assembly\n    path \"versions.yml\"             , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    medaka_consensus \\\\\n        -t $task.cpus \\\\\n        $args \\\\\n        -i $reads \\\\\n        -d $assembly \\\\\n        -o ./\n\n    mv consensus.fasta ${prefix}.fa\n\n    gzip -n ${prefix}.fa\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        medaka: \\$( medaka --version 2>&1 | sed 's/medaka //g' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 38,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    medaka_consensus \\\\\n        -t $task.cpus \\\\\n        $args \\\\\n        -i $reads \\\\\n        -d $assembly \\\\\n        -o ./\n\n    mv consensus.fasta ${prefix}.fa\n\n    gzip -n ${prefix}.fa\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        medaka: \\$( medaka --version 2>&1 | sed 's/medaka //g' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "reads",
            "assembly"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "conda (params.enable_conda ? \"bioconda::medaka=1.4.4\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/medaka:1.4.4--py38h130def0_0' : 'quay.io/biocontainers/medaka:1.4.4--py38h130def0_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "BISCUIT_INDEX": {
        "name_process": "BISCUIT_INDEX",
        "string_process": "process BISCUIT_INDEX {\n    tag \"$fasta\"\n    label 'process_long'\n\n    conda (params.enable_conda ? \"bioconda::biscuit=1.0.2.20220113\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/biscuit:1.0.2.20220113--h81a5ba2_0':\n        'quay.io/biocontainers/biscuit:1.0.2.20220113--h81a5ba2_0' }\"\n\n    input:\n    path fasta, stageAs: \"BiscuitIndex/*\"\n\n    output:\n    path \"BiscuitIndex/*.fa*\", emit: index, includeInputs: true\n    path \"versions.yml\"      , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    biscuit \\\\\n        index \\\\\n        $args \\\\\n        $fasta\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        biscuit: \\$( biscuit version |& sed '1!d; s/^.*BISCUIT Version: //' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    biscuit \\\\\n        index \\\\\n        $args \\\\\n        $fasta\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        biscuit: \\$( biscuit version |& sed '1!d; s/^.*BISCUIT Version: //' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "CINdex"
        ],
        "tools_url": [
            "https://bio.tools/cindex"
        ],
        "tools_dico": [
            {
                "name": "CINdex",
                "uri": "https://bio.tools/cindex",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3233",
                                    "term": "Copy number estimation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3233",
                                    "term": "Transcript copy number estimation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The package addresses important area of high-throughput genomic analysis. It allows the automated processing and analysis of the experimental DNA copy number data generated by Affymetrix SNP 6.0 arrays or similar. It calculates the chromosome instability index to quantitatively characterize genome-wide DNA copy number alterations. This package calculates not only overall genomic instability, but also instability in terms of copy number gains and losses at the chromosome and cytoband level.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/CINdex.html"
            }
        ],
        "inputs": [
            "fasta"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$fasta\"",
            "label 'process_long'",
            "conda (params.enable_conda ? \"bioconda::biscuit=1.0.2.20220113\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/biscuit:1.0.2.20220113--h81a5ba2_0': 'quay.io/biocontainers/biscuit:1.0.2.20220113--h81a5ba2_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "PAIRTOOLS_SORT": {
        "name_process": "PAIRTOOLS_SORT",
        "string_process": "process PAIRTOOLS_SORT {\n    tag \"$meta.id\"\n    label 'process_high'\n\n    conda (params.enable_conda ? \"bioconda::pairtools=0.3.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/pairtools:0.3.0--py37hb9c2fc3_5' :\n        'quay.io/biocontainers/pairtools:0.3.0--py37hb9c2fc3_5' }\"\n\n    input:\n    tuple val(meta), path(input)\n\n    output:\n    tuple val(meta), path(\"*.pairs.gz\"), emit: sorted\n    path \"versions.yml\"                , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def mem      = task.memory.toString().replaceAll(/(\\s|\\.|B)+/, '')\n    \"\"\"\n    pairtools \\\\\n        sort \\\\\n        $args \\\\\n        --nproc $task.cpus \\\\\n        --memory \"$mem\" \\\\\n        -o ${prefix}.pairs.gz \\\\\n        $input\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        pairtools: \\$(pairtools --version 2>&1 | sed 's/pairtools.*version //')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 36,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def mem      = task.memory.toString().replaceAll(/(\\s|\\.|B)+/, '')\n    \"\"\"\n    pairtools \\\\\n        sort \\\\\n        $args \\\\\n        --nproc $task.cpus \\\\\n        --memory \"$mem\" \\\\\n        -o ${prefix}.pairs.gz \\\\\n        $input\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        pairtools: \\$(pairtools --version 2>&1 | sed 's/pairtools.*version //')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "input"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "conda (params.enable_conda ? \"bioconda::pairtools=0.3.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/pairtools:0.3.0--py37hb9c2fc3_5' : 'quay.io/biocontainers/pairtools:0.3.0--py37hb9c2fc3_5' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "STUB_PHYLOFLASH_DATABASE": {
        "name_process": "STUB_PHYLOFLASH_DATABASE",
        "string_process": "\nprocess STUB_PHYLOFLASH_DATABASE {\n    output:\n    path \"ref\"    , emit: silva_db\n    path \"UniVec\" , emit: univec_db\n\n    stub:\n    \"\"\"\n    mkdir ref\n    touch UniVec\n    \"\"\"\n}",
        "nb_lignes_process": 10,
        "string_script": "",
        "nb_lignes_script": 0,
        "language_script": "",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [],
        "when": "",
        "stub": "\n    \"\"\"\n    mkdir ref\n    touch UniVec\n    \"\"\""
    },
    "BOWTIE_ALIGN": {
        "name_process": "BOWTIE_ALIGN",
        "string_process": "process BOWTIE_ALIGN {\n    tag \"$meta.id\"\n    label 'process_high'\n\n    conda (params.enable_conda ? 'bioconda::bowtie=1.3.0 bioconda::samtools=1.15.1' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mulled-v2-ffbf83a6b0ab6ec567a336cf349b80637135bca3:676c5bcfe34af6097728fea60fb7ea83f94a4a5f-0' :\n        'quay.io/biocontainers/mulled-v2-ffbf83a6b0ab6ec567a336cf349b80637135bca3:676c5bcfe34af6097728fea60fb7ea83f94a4a5f-0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n    path  index\n\n    output:\n    tuple val(meta), path('*.bam'), emit: bam\n    tuple val(meta), path('*.out'), emit: log\n    path  \"versions.yml\"          , emit: versions\n    tuple val(meta), path('*fastq.gz'), optional:true, emit: fastq\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def unaligned = params.save_unaligned ? \"--un ${prefix}.unmapped.fastq\" : ''\n    def endedness = meta.single_end ? \"$reads\" : \"-1 ${reads[0]} -2 ${reads[1]}\"\n    \"\"\"\n    INDEX=`find -L ./ -name \"*.3.ebwt\" | sed 's/.3.ebwt//'`\n    bowtie \\\\\n        --threads $task.cpus \\\\\n        --sam \\\\\n        -x \\$INDEX \\\\\n        -q \\\\\n        $unaligned \\\\\n        $args \\\\\n        $endedness \\\\\n        2> ${prefix}.out \\\\\n        | samtools view $args2 -@ $task.cpus -bS -o ${prefix}.bam -\n\n    if [ -f ${prefix}.unmapped.fastq ]; then\n        gzip ${prefix}.unmapped.fastq\n    fi\n    if [ -f ${prefix}.unmapped_1.fastq ]; then\n        gzip ${prefix}.unmapped_1.fastq\n        gzip ${prefix}.unmapped_2.fastq\n    fi\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bowtie: \\$(echo \\$(bowtie --version 2>&1) | sed 's/^.*bowtie-align-s version //; s/ .*\\$//')\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 54,
        "string_script": "    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def unaligned = params.save_unaligned ? \"--un ${prefix}.unmapped.fastq\" : ''\n    def endedness = meta.single_end ? \"$reads\" : \"-1 ${reads[0]} -2 ${reads[1]}\"\n    \"\"\"\n    INDEX=`find -L ./ -name \"*.3.ebwt\" | sed 's/.3.ebwt//'`\n    bowtie \\\\\n        --threads $task.cpus \\\\\n        --sam \\\\\n        -x \\$INDEX \\\\\n        -q \\\\\n        $unaligned \\\\\n        $args \\\\\n        $endedness \\\\\n        2> ${prefix}.out \\\\\n        | samtools view $args2 -@ $task.cpus -bS -o ${prefix}.bam -\n\n    if [ -f ${prefix}.unmapped.fastq ]; then\n        gzip ${prefix}.unmapped.fastq\n    fi\n    if [ -f ${prefix}.unmapped_1.fastq ]; then\n        gzip ${prefix}.unmapped_1.fastq\n        gzip ${prefix}.unmapped_2.fastq\n    fi\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bowtie: \\$(echo \\$(bowtie --version 2>&1) | sed 's/^.*bowtie-align-s version //; s/ .*\\$//')\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 31,
        "language_script": "bash",
        "tools": [
            "Bowtie",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/bowtie",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "Bowtie",
                "uri": "https://bio.tools/bowtie",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            },
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            }
                        ]
                    }
                ],
                "description": "Bowtie is an ultrafast, memory-efficient short read aligner.",
                "homepage": "http://bowtie-bio.sourceforge.net/index.shtml"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "index"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "conda (params.enable_conda ? 'bioconda::bowtie=1.3.0 bioconda::samtools=1.15.1' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mulled-v2-ffbf83a6b0ab6ec567a336cf349b80637135bca3:676c5bcfe34af6097728fea60fb7ea83f94a4a5f-0' : 'quay.io/biocontainers/mulled-v2-ffbf83a6b0ab6ec567a336cf349b80637135bca3:676c5bcfe34af6097728fea60fb7ea83f94a4a5f-0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "SAMTOOLS_MERGE": {
        "name_process": "SAMTOOLS_MERGE",
        "string_process": "process SAMTOOLS_MERGE {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::samtools=1.15.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/samtools:1.15.1--h1170115_0' :\n        'quay.io/biocontainers/samtools:1.15.1--h1170115_0' }\"\n\n    input:\n    tuple val(meta), path(input_files)\n    path fasta\n\n    output:\n    tuple val(meta), path(\"${prefix}.bam\") , optional:true, emit: bam\n    tuple val(meta), path(\"${prefix}.cram\"), optional:true, emit: cram\n    path  \"versions.yml\"                                  , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args   ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n    def file_type = input_files[0].getExtension()\n    def reference = fasta ? \"--reference ${fasta}\" : \"\"\n    \"\"\"\n    samtools \\\\\n        merge \\\\\n        --threads ${task.cpus-1} \\\\\n        $args \\\\\n        ${reference} \\\\\n        ${prefix}.${file_type} \\\\\n        $input_files\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    prefix = task.ext.suffix ? \"${meta.id}${task.ext.suffix}\" : \"${meta.id}\"\n    def file_type = input_files[0].getExtension()\n    \"\"\"\n    touch ${prefix}.${file_type}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 51,
        "string_script": "    def args = task.ext.args   ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n    def file_type = input_files[0].getExtension()\n    def reference = fasta ? \"--reference ${fasta}\" : \"\"\n    \"\"\"\n    samtools \\\\\n        merge \\\\\n        --threads ${task.cpus-1} \\\\\n        $args \\\\\n        ${reference} \\\\\n        ${prefix}.${file_type} \\\\\n        $input_files\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 17,
        "language_script": "bash",
        "tools": [
            "SAMtools",
            "merger"
        ],
        "tools_url": [
            "https://bio.tools/samtools",
            "https://bio.tools/merger"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "merger",
                "uri": "https://bio.tools/merger",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0097",
                            "term": "Nucleic acid structure analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0097",
                            "term": "Nucleic acid structure"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise sequence alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0232",
                                    "term": "Sequence merging"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0232",
                                    "term": "Sequence splicing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0874",
                                "term": "Comparison matrix"
                            },
                            {
                                "uri": "http://edamontology.org/data_0849",
                                "term": "Sequence record"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0849",
                                "term": "Sequence record"
                            },
                            {
                                "uri": "http://edamontology.org/data_1381",
                                "term": "Pair sequence alignment"
                            }
                        ]
                    }
                ],
                "description": "Merge two overlapping sequences.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/merger.html"
            }
        ],
        "inputs": [
            "meta",
            "input_files",
            "fasta"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::samtools=1.15.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/samtools:1.15.1--h1170115_0' : 'quay.io/biocontainers/samtools:1.15.1--h1170115_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    prefix = task.ext.suffix ? \"${meta.id}${task.ext.suffix}\" : \"${meta.id}\"\n    def file_type = input_files[0].getExtension()\n    \"\"\"\n    touch ${prefix}.${file_type}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\""
    },
    "YARA_MAPPER": {
        "name_process": "YARA_MAPPER",
        "string_process": "process YARA_MAPPER {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::yara=1.0.2 bioconda::samtools=1.15.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mulled-v2-f13549097a0d1ca36f9d4f017636fb3609f6c083:d6c969c1e20cc02a9234961c07a24bb0887f05ea-0' :\n        'quay.io/biocontainers/mulled-v2-f13549097a0d1ca36f9d4f017636fb3609f6c083:d6c969c1e20cc02a9234961c07a24bb0887f05ea-0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n    path index\n\n    output:\n    tuple val(meta), path(\"*.mapped.bam\"), emit: bam\n    tuple val(meta), path(\"*.mapped.bam.bai\"), emit: bai\n    path \"versions.yml\"                  , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (meta.single_end) {\n        \"\"\"\n        yara_mapper \\\\\n            $args \\\\\n            -t $task.cpus \\\\\n            -f bam \\\\\n            ${index}/yara \\\\\n            $reads | samtools view -@ $task.cpus -hb -F4 | samtools sort -@ $task.cpus > ${prefix}.mapped.bam\n\n        samtools index -@ $task.cpus ${prefix}.mapped.bam\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            yara: \\$(echo \\$(yara_mapper --version 2>&1) | sed 's/^.*yara_mapper version: //; s/ .*\\$//')\n            samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        yara_mapper \\\\\n            $args \\\\\n            -t $task.cpus \\\\\n            -f bam \\\\\n            ${index}/yara \\\\\n            ${reads[0]} \\\\\n            ${reads[1]} > output.bam\n\n        samtools view -@ $task.cpus -hF 4 -f 0x40 -b output.bam | samtools sort -@ $task.cpus > ${prefix}_1.mapped.bam\n        samtools view -@ $task.cpus -hF 4 -f 0x80 -b output.bam | samtools sort -@ $task.cpus > ${prefix}_2.mapped.bam\n\n        samtools index -@ $task.cpus ${prefix}_1.mapped.bam\n        samtools index -@ $task.cpus ${prefix}_2.mapped.bam\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            yara: \\$(echo \\$(yara_mapper --version 2>&1) | sed 's/^.*yara_mapper version: //; s/ .*\\$//')\n            samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n        END_VERSIONS\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 63,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (meta.single_end) {\n        \"\"\"\n        yara_mapper \\\\\n            $args \\\\\n            -t $task.cpus \\\\\n            -f bam \\\\\n            ${index}/yara \\\\\n            $reads | samtools view -@ $task.cpus -hb -F4 | samtools sort -@ $task.cpus > ${prefix}.mapped.bam\n\n        samtools index -@ $task.cpus ${prefix}.mapped.bam\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            yara: \\$(echo \\$(yara_mapper --version 2>&1) | sed 's/^.*yara_mapper version: //; s/ .*\\$//')\n            samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        yara_mapper \\\\\n            $args \\\\\n            -t $task.cpus \\\\\n            -f bam \\\\\n            ${index}/yara \\\\\n            ${reads[0]} \\\\\n            ${reads[1]} > output.bam\n\n        samtools view -@ $task.cpus -hF 4 -f 0x40 -b output.bam | samtools sort -@ $task.cpus > ${prefix}_1.mapped.bam\n        samtools view -@ $task.cpus -hF 4 -f 0x80 -b output.bam | samtools sort -@ $task.cpus > ${prefix}_2.mapped.bam\n\n        samtools index -@ $task.cpus ${prefix}_1.mapped.bam\n        samtools index -@ $task.cpus ${prefix}_2.mapped.bam\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            yara: \\$(echo \\$(yara_mapper --version 2>&1) | sed 's/^.*yara_mapper version: //; s/ .*\\$//')\n            samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n        END_VERSIONS\n        \"\"\"\n    }",
        "nb_lignes_script": 41,
        "language_script": "bash",
        "tools": [
            "yara",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/yara",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "yara",
                "uri": "https://bio.tools/yara",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Yara is an exact tool for aligning DNA sequencing reads to reference genomes.",
                "homepage": "http://www.seqan.de/yara/"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "index"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::yara=1.0.2 bioconda::samtools=1.15.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mulled-v2-f13549097a0d1ca36f9d4f017636fb3609f6c083:d6c969c1e20cc02a9234961c07a24bb0887f05ea-0' : 'quay.io/biocontainers/mulled-v2-f13549097a0d1ca36f9d4f017636fb3609f6c083:d6c969c1e20cc02a9234961c07a24bb0887f05ea-0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "RACON": {
        "name_process": "RACON",
        "string_process": "process RACON {\n    tag \"$meta.id\"\n    label 'process_high'\n\n    conda (params.enable_conda ? \"bioconda::racon=1.4.20\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/racon:1.4.20--h9a82719_1' :\n        'quay.io/biocontainers/racon:1.4.20--h9a82719_1' }\"\n\n    input:\n    tuple val(meta), path(reads), path(assembly), path(paf)\n\n    output:\n    tuple val(meta), path('*_assembly_consensus.fasta.gz') , emit: improved_assembly\n    path \"versions.yml\"          , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    racon -t \"$task.cpus\" \\\\\n        \"${reads}\" \\\\\n        \"${paf}\" \\\\\n        $args \\\\\n        \"${assembly}\" > \\\\\n        ${prefix}_assembly_consensus.fasta\n\n    gzip -n ${prefix}_assembly_consensus.fasta\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        racon: \\$( racon --version 2>&1 | sed 's/^.*v//' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 36,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    racon -t \"$task.cpus\" \\\\\n        \"${reads}\" \\\\\n        \"${paf}\" \\\\\n        $args \\\\\n        \"${assembly}\" > \\\\\n        ${prefix}_assembly_consensus.fasta\n\n    gzip -n ${prefix}_assembly_consensus.fasta\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        racon: \\$( racon --version 2>&1 | sed 's/^.*v//' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [
            "Racon"
        ],
        "tools_url": [
            "https://bio.tools/Racon"
        ],
        "tools_dico": [
            {
                "name": "Racon",
                "uri": "https://bio.tools/Racon",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0780",
                            "term": "Plant biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Whole genome sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0780",
                            "term": "Plant science"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0780",
                            "term": "Plants"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0780",
                            "term": "Botany"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0780",
                            "term": "Plant"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "WGS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0523",
                                    "term": "Mapping assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Sequence trimming"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0523",
                                    "term": "Sequence assembly (mapping assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Trimming"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Possibility to Use Oxford Nanopore Technology | Ultrafast consensus module for raw de novo genome assembly of long uncorrected reads. http://genome.cshlp.org/content/early/2017/01/18/gr.214270.116 Note: This was the original repository which will no longer be officially maintained. Please use the new official repository here: | Racon is intended as a standalone consensus module to correct raw contigs generated by rapid assembly methods which do not include a consensus step | Consensus module for raw de novo DNA assembly of long uncorrected reads",
                "homepage": "https://github.com/isovic/racon"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "assembly",
            "paf"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "conda (params.enable_conda ? \"bioconda::racon=1.4.20\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/racon:1.4.20--h9a82719_1' : 'quay.io/biocontainers/racon:1.4.20--h9a82719_1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "DEEPARG_PREDICT": {
        "name_process": "DEEPARG_PREDICT",
        "string_process": "\nprocess DEEPARG_PREDICT {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::deeparg=1.0.2\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/deeparg:1.0.2--pyhdfd78af_1' :\n        'quay.io/biocontainers/deeparg:1.0.2--pyhdfd78af_1' }\"\n      \n                                                                                                                                                              \n                                                                      \n      \n    containerOptions { \"${workflow.containerEngine}\" == 'singularity' ? '-B $(which bash):/usr/local/lib/python2.7/site-packages/Theano-0.8.2-py2.7.egg-info/PKG-INFO' : '' }\n\n    input:\n    tuple val(meta), path(fasta), val(model)\n    path(db)\n\n    output:\n    tuple val(meta), path(\"*.align.daa\")            , emit: daa\n    tuple val(meta), path(\"*.align.daa.tsv\")        , emit: daa_tsv\n    tuple val(meta), path(\"*.mapping.ARG\")          , emit: arg\n    tuple val(meta), path(\"*.mapping.potential.ARG\"), emit: potential_arg\n    path \"versions.yml\"                             , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    deeparg \\\\\n        predict \\\\\n        $args \\\\\n        -i $fasta \\\\\n        -o ${prefix} \\\\\n        -d $db \\\\\n        --model $model\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        deeparg: $VERSION\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 45,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    deeparg \\\\\n        predict \\\\\n        $args \\\\\n        -i $fasta \\\\\n        -o ${prefix} \\\\\n        -d $db \\\\\n        --model $model\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        deeparg: $VERSION\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [
            "TFpredict"
        ],
        "tools_url": [
            "https://bio.tools/tfpredict"
        ],
        "tools_dico": [
            {
                "name": "TFpredict",
                "uri": "https://bio.tools/tfpredict",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Proteins"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0749",
                            "term": "Transcription factors and regulatory sites"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein informatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2479",
                                    "term": "Protein sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2990",
                                    "term": "Classification"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2479",
                                    "term": "Sequence analysis (protein)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Transcription Factor predict. Combines sequence similarity searching with supervised machine learning methods for the identification of TFs and the prediction of their structural superclass.",
                "homepage": "http://www.ra.cs.uni-tuebingen.de/software/TFpredict/welcome_e.html"
            }
        ],
        "inputs": [
            "meta",
            "model",
            "fasta",
            "db"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::deeparg=1.0.2\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/deeparg:1.0.2--pyhdfd78af_1' : 'quay.io/biocontainers/deeparg:1.0.2--pyhdfd78af_1' }\"",
            "containerOptions { \"${workflow.containerEngine}\" == 'singularity' ? '-B $(which bash):/usr/local/lib/python2.7/site-packages/Theano-0.8.2-py2.7.egg-info/PKG-INFO' : '' }"
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "PHANTOMPEAKQUALTOOLS": {
        "name_process": "PHANTOMPEAKQUALTOOLS",
        "string_process": "\nprocess PHANTOMPEAKQUALTOOLS {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::phantompeakqualtools=1.2.2\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/phantompeakqualtools:1.2.2--0' :\n        'quay.io/biocontainers/phantompeakqualtools:1.2.2--0' }\"\n\n    input:\n    tuple val(meta), path(bam)\n\n    output:\n    tuple val(meta), path(\"*.out\")  , emit: spp\n    tuple val(meta), path(\"*.pdf\")  , emit: pdf\n    tuple val(meta), path(\"*.Rdata\"), emit: rdata\n    path  \"versions.yml\"            , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args   = task.ext.args ?: ''\n    def args2  = task.ext.args2 ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    RUN_SPP=`which run_spp.R`\n    Rscript $args -e \"library(caTools); source(\\\\\"\\$RUN_SPP\\\\\")\" -c=\"$bam\" -savp=\"${prefix}.spp.pdf\" -savd=\"${prefix}.spp.Rdata\" -out=\"${prefix}.spp.out\" $args2\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        phantompeakqualtools: $VERSION\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    def args   = task.ext.args ?: ''\n    def args2  = task.ext.args2 ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    RUN_SPP=`which run_spp.R`\n    Rscript $args -e \"library(caTools); source(\\\\\"\\$RUN_SPP\\\\\")\" -c=\"$bam\" -savp=\"${prefix}.spp.pdf\" -savd=\"${prefix}.spp.Rdata\" -out=\"${prefix}.spp.out\" $args2\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        phantompeakqualtools: $VERSION\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "bam"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::phantompeakqualtools=1.2.2\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/phantompeakqualtools:1.2.2--0' : 'quay.io/biocontainers/phantompeakqualtools:1.2.2--0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "HAMRONIZATION_SUMMARIZE": {
        "name_process": "HAMRONIZATION_SUMMARIZE",
        "string_process": "process HAMRONIZATION_SUMMARIZE {\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::hamronization=1.0.3\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/hamronization:1.0.3--py_0':\n        'quay.io/biocontainers/hamronization:1.0.3--py_0' }\"\n\n    input:\n    path(reports)\n    val(format)\n\n    output:\n    path(\"hamronization_combined_report.json\"), optional: true, emit: json\n    path(\"hamronization_combined_report.tsv\") , optional: true, emit: tsv\n    path(\"hamronization_combined_report.html\"), optional: true, emit: html\n    path \"versions.yml\"                       , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def outformat = format == 'interactive' ? 'html' : format\n    \"\"\"\n    hamronize \\\\\n        summarize \\\\\n        ${reports.join(' ')} \\\\\n        -t ${format} \\\\\n        $args \\\\\n        -o hamronization_combined_report.${outformat}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        hamronization: \\$(echo \\$(hamronize --version 2>&1) | cut -f 2 -d ' ' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 36,
        "string_script": "    def args = task.ext.args ?: ''\n    def outformat = format == 'interactive' ? 'html' : format\n    \"\"\"\n    hamronize \\\\\n        summarize \\\\\n        ${reports.join(' ')} \\\\\n        -t ${format} \\\\\n        $args \\\\\n        -o hamronization_combined_report.${outformat}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        hamronization: \\$(echo \\$(hamronize --version 2>&1) | cut -f 2 -d ' ' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "reports",
            "format"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::hamronization=1.0.3\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/hamronization:1.0.3--py_0': 'quay.io/biocontainers/hamronization:1.0.3--py_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "PEDDY": {
        "name_process": "PEDDY",
        "string_process": "process PEDDY {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::peddy=0.4.8\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/peddy:0.4.8--pyh5e36f6f_0' :\n        'quay.io/biocontainers/peddy:0.4.8--pyh5e36f6f_0' }\"\n\n    input:\n    tuple val(meta), path(vcf), path(vcf_tbi)\n    path ped\n\n    output:\n    tuple val(meta), path(\"*.html\")     , emit: html\n    tuple val(meta), path(\"*.csv\")      , emit: csv\n    tuple val(meta), path(\"*.peddy.ped\"), emit: ped\n    tuple val(meta), path(\"*.png\")      , optional: true, emit: png\n    path \"versions.yml\"                 , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    peddy \\\\\n        $args \\\\\n        --plot \\\\\n        -p $task.cpus \\\\\n        $vcf \\\\\n        $ped\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        peddy: \\$( peddy --version 2>&1 | sed 's/peddy, version //' )\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    \"\"\"\n    filename=\\$(basename $vcf)\n    touch \\$filename.ped_check.csv\n    touch \\$filename.vs.html\n    touch \\$filename.het_check.csv\n    touch \\$filename.sex_check.csv\n    touch \\$filename.peddy.ped\n    touch \\$filename.html\n\n    touch versions.yml\n    \"\"\"\n}",
        "nb_lignes_process": 51,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    peddy \\\\\n        $args \\\\\n        --plot \\\\\n        -p $task.cpus \\\\\n        $vcf \\\\\n        $ped\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        peddy: \\$( peddy --version 2>&1 | sed 's/peddy, version //' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "vcf",
            "vcf_tbi",
            "ped"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::peddy=0.4.8\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/peddy:0.4.8--pyh5e36f6f_0' : 'quay.io/biocontainers/peddy:0.4.8--pyh5e36f6f_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    \"\"\"\n    filename=\\$(basename $vcf)\n    touch \\$filename.ped_check.csv\n    touch \\$filename.vs.html\n    touch \\$filename.het_check.csv\n    touch \\$filename.sex_check.csv\n    touch \\$filename.peddy.ped\n    touch \\$filename.html\n\n    touch versions.yml\n    \"\"\""
    },
    "BWA_MEM": {
        "name_process": "BWA_MEM",
        "string_process": "process BWA_MEM {\n    tag \"$meta.id\"\n    label 'process_high'\n\n    conda (params.enable_conda ? \"bioconda::bwa=0.7.17 bioconda::samtools=1.15.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mulled-v2-fe8faa35dbf6dc65a0f7f5d4ea12e31a79f73e40:8110a70be2bfe7f75a2ea7f2a89cda4cc7732095-0' :\n        'quay.io/biocontainers/mulled-v2-fe8faa35dbf6dc65a0f7f5d4ea12e31a79f73e40:8110a70be2bfe7f75a2ea7f2a89cda4cc7732095-0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n    path  index\n    val   sort_bam\n\n    output:\n    tuple val(meta), path(\"*.bam\"), emit: bam\n    path  \"versions.yml\"          , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def samtools_command = sort_bam ? 'sort' : 'view'\n    \"\"\"\n    INDEX=`find -L ./ -name \"*.amb\" | sed 's/.amb//'`\n\n    bwa mem \\\\\n        $args \\\\\n        -t $task.cpus \\\\\n        \\$INDEX \\\\\n        $reads \\\\\n        | samtools $samtools_command $args2 --threads $task.cpus -o ${prefix}.bam -\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bwa: \\$(echo \\$(bwa 2>&1) | sed 's/^.*Version: //; s/Contact:.*\\$//')\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 41,
        "string_script": "    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def samtools_command = sort_bam ? 'sort' : 'view'\n    \"\"\"\n    INDEX=`find -L ./ -name \"*.amb\" | sed 's/.amb//'`\n\n    bwa mem \\\\\n        $args \\\\\n        -t $task.cpus \\\\\n        \\$INDEX \\\\\n        $reads \\\\\n        | samtools $samtools_command $args2 --threads $task.cpus -o ${prefix}.bam -\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bwa: \\$(echo \\$(bwa 2>&1) | sed 's/^.*Version: //; s/Contact:.*\\$//')\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [
            "BWA",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/bwa",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "BWA",
                "uri": "https://bio.tools/bwa",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3211",
                                    "term": "Genome indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2044",
                                "term": "Sequence"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_2012",
                                "term": "Sequence coordinates"
                            },
                            {
                                "uri": "http://edamontology.org/data_1916",
                                "term": "Alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ]
                    }
                ],
                "description": "Fast, accurate, memory-efficient aligner for short and long sequencing reads",
                "homepage": "http://bio-bwa.sourceforge.net"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "index",
            "sort_bam"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "conda (params.enable_conda ? \"bioconda::bwa=0.7.17 bioconda::samtools=1.15.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mulled-v2-fe8faa35dbf6dc65a0f7f5d4ea12e31a79f73e40:8110a70be2bfe7f75a2ea7f2a89cda4cc7732095-0' : 'quay.io/biocontainers/mulled-v2-fe8faa35dbf6dc65a0f7f5d4ea12e31a79f73e40:8110a70be2bfe7f75a2ea7f2a89cda4cc7732095-0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "DEEPTOOLS_COMPUTEMATRIX": {
        "name_process": "DEEPTOOLS_COMPUTEMATRIX",
        "string_process": "process DEEPTOOLS_COMPUTEMATRIX {\n    tag \"$meta.id\"\n    label 'process_high'\n\n    conda (params.enable_conda ? 'bioconda::deeptools=3.5.1' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/deeptools:3.5.1--py_0' :\n        'quay.io/biocontainers/deeptools:3.5.1--py_0' }\"\n\n    input:\n    tuple val(meta), path(bigwig)\n    path  bed\n\n    output:\n    tuple val(meta), path(\"*.mat.gz\") , emit: matrix\n    tuple val(meta), path(\"*.mat.tab\"), emit: table\n    path  \"versions.yml\"              , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    computeMatrix \\\\\n        $args \\\\\n        --regionsFileName $bed \\\\\n        --scoreFileName $bigwig \\\\\n        --outFileName ${prefix}.computeMatrix.mat.gz \\\\\n        --outFileNameMatrix ${prefix}.computeMatrix.vals.mat.tab \\\\\n        --numberOfProcessors $task.cpus\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        deeptools: \\$(computeMatrix --version | sed -e \"s/computeMatrix //g\")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 37,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    computeMatrix \\\\\n        $args \\\\\n        --regionsFileName $bed \\\\\n        --scoreFileName $bigwig \\\\\n        --outFileName ${prefix}.computeMatrix.mat.gz \\\\\n        --outFileNameMatrix ${prefix}.computeMatrix.vals.mat.tab \\\\\n        --numberOfProcessors $task.cpus\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        deeptools: \\$(computeMatrix --version | sed -e \"s/computeMatrix //g\")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "bigwig",
            "bed"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "conda (params.enable_conda ? 'bioconda::deeptools=3.5.1' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/deeptools:3.5.1--py_0' : 'quay.io/biocontainers/deeptools:3.5.1--py_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "GATK4_BEDTOINTERVALLIST": {
        "name_process": "GATK4_BEDTOINTERVALLIST",
        "string_process": "process GATK4_BEDTOINTERVALLIST {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::gatk4=4.2.6.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/gatk4:4.2.6.1--hdfd78af_0':\n        'quay.io/biocontainers/gatk4:4.2.6.1--hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(bed)\n    path  dict\n\n    output:\n    tuple val(meta), path('*.interval_list'), emit: interval_list\n    path  \"versions.yml\"                    , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[GATK BedToIntervalList] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    gatk --java-options \"-Xmx${avail_mem}g\" BedToIntervalList \\\\\n        --INPUT $bed \\\\\n        --OUTPUT ${prefix}.interval_list \\\\\n        --SEQUENCE_DICTIONARY $dict \\\\\n        --TMP_DIR . \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.interval_list\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 53,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[GATK BedToIntervalList] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    gatk --java-options \"-Xmx${avail_mem}g\" BedToIntervalList \\\\\n        --INPUT $bed \\\\\n        --OUTPUT ${prefix}.interval_list \\\\\n        --SEQUENCE_DICTIONARY $dict \\\\\n        --TMP_DIR . \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 21,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "meta",
            "bed",
            "dict"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::gatk4=4.2.6.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/gatk4:4.2.6.1--hdfd78af_0': 'quay.io/biocontainers/gatk4:4.2.6.1--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.interval_list\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\""
    },
    "MSISENSORPRO_MSI_SOMATIC": {
        "name_process": "MSISENSORPRO_MSI_SOMATIC",
        "string_process": "process MSISENSORPRO_MSI_SOMATIC {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::msisensor-pro=1.2.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/msisensor-pro:1.2.0--hfc31af2_0' :\n        'quay.io/biocontainers/msisensor-pro:1.2.0--hfc31af2_0' }\"\n\n    input:\n    tuple val(meta), path(normal), path(normal_index), path(tumor), path(tumor_index), path(intervals)\n    path (fasta)\n    path (msisensor_scan)\n\n    output:\n    tuple val(meta), path(\"${prefix}\")         , emit: output_report\n    tuple val(meta), path(\"${prefix}_dis\")     , emit: output_dis\n    tuple val(meta), path(\"${prefix}_germline\"), emit: output_germline\n    tuple val(meta), path(\"${prefix}_somatic\") , emit: output_somatic\n    path \"versions.yml\"                        , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args   ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n    def fasta = fasta ? \"-g ${fasta}\" : \"\"\n    def intervals = intervals ? \" -e ${intervals} \" : \"\"\n    \"\"\"\n    msisensor-pro \\\\\n        msi \\\\\n        -d ${msisensor_scan} \\\\\n        -n ${normal} \\\\\n        -t ${tumor} \\\\\n        ${fasta} \\\\\n        -o $prefix \\\\\n        -b ${task.cpus} \\\\\n        ${intervals} \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        msisensor-pro: \\$(msisensor-pro 2>&1 | sed -nE 's/Version:\\\\sv([0-9]\\\\.[0-9])/\\\\1/ p')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 45,
        "string_script": "    def args = task.ext.args   ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n    def fasta = fasta ? \"-g ${fasta}\" : \"\"\n    def intervals = intervals ? \" -e ${intervals} \" : \"\"\n    \"\"\"\n    msisensor-pro \\\\\n        msi \\\\\n        -d ${msisensor_scan} \\\\\n        -n ${normal} \\\\\n        -t ${tumor} \\\\\n        ${fasta} \\\\\n        -o $prefix \\\\\n        -b ${task.cpus} \\\\\n        ${intervals} \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        msisensor-pro: \\$(msisensor-pro 2>&1 | sed -nE 's/Version:\\\\sv([0-9]\\\\.[0-9])/\\\\1/ p')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 20,
        "language_script": "bash",
        "tools": [
            "MSI"
        ],
        "tools_url": [
            "https://bio.tools/msi"
        ],
        "tools_dico": [
            {
                "name": "MSI",
                "uri": "https://bio.tools/msi",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2229",
                            "term": "Cell biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2259",
                            "term": "Systems biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0804",
                            "term": "Immunology"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2426",
                                    "term": "Modelling and simulation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Ongoing project aimed at the development of software for the computational simulation of spatial processes in immunity. The software is an open source development project; there are several options for acquiring the program, including the complete source code, or just pre-built binaries.",
                "homepage": "http://www.cs.duke.edu/~emonson/MSI_Site/index.html"
            }
        ],
        "inputs": [
            "meta",
            "normal",
            "normal_index",
            "tumor",
            "tumor_index",
            "intervals",
            "fasta",
            "msisensor_scan"
        ],
        "nb_inputs": 8,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::msisensor-pro=1.2.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/msisensor-pro:1.2.0--hfc31af2_0' : 'quay.io/biocontainers/msisensor-pro:1.2.0--hfc31af2_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "GUNZIP": {
        "name_process": "GUNZIP",
        "string_process": "process GUNZIP {\n    tag \"$archive\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/ubuntu:20.04' :\n        'ubuntu:20.04' }\"\n\n    input:\n    tuple val(meta), path(archive)\n\n    output:\n    tuple val(meta), path(\"$gunzip\"), emit: gunzip\n    path \"versions.yml\"             , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    gunzip = archive.toString() - '.gz'\n    \"\"\"\n    gunzip \\\\\n        -f \\\\\n        $args \\\\\n        $archive\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gunzip: \\$(echo \\$(gunzip --version 2>&1) | sed 's/^.*(gzip) //; s/ Copyright.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "    def args = task.ext.args ?: ''\n    gunzip = archive.toString() - '.gz'\n    \"\"\"\n    gunzip \\\\\n        -f \\\\\n        $args \\\\\n        $archive\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gunzip: \\$(echo \\$(gunzip --version 2>&1) | sed 's/^.*(gzip) //; s/ Copyright.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "archive"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$archive\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/ubuntu:20.04' : 'ubuntu:20.04' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "HICAP": {
        "name_process": "HICAP",
        "string_process": "process HICAP {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::hicap=1.0.3\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/hicap:1.0.3--py_0' :\n        'quay.io/biocontainers/hicap:1.0.3--py_0' }\"\n\n    input:\n    tuple val(meta), path(fasta)\n    path database_dir\n    path model_fp\n\n    output:\n    tuple val(meta), path(\"*.gbk\"), emit: gbk, optional: true\n    tuple val(meta), path(\"*.svg\"), emit: svg, optional: true\n    tuple val(meta), path(\"*.tsv\"), emit: tsv, optional: true\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def database_args = database_dir ? \"--database_dir ${database_dir}\" : \"\"\n    def model_args = model_fp ? \"--model_fp ${model_fp}\" : \"\"\n    def is_compressed = fasta.getName().endsWith(\".gz\") ? true : false\n    def fasta_name = fasta.getName().replace(\".gz\", \"\")\n    \"\"\"\n    if [ \"$is_compressed\" == \"true\" ]; then\n        gzip -c -d $fasta > $fasta_name\n    fi\n    hicap \\\\\n        --query_fp $fasta_name \\\\\n        $database_args \\\\\n        $model_args \\\\\n        $args \\\\\n        --threads $task.cpus \\\\\n        -o ./\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        hicap: \\$( echo \\$( hicap --version 2>&1 ) | sed 's/^.*hicap //' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 46,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def database_args = database_dir ? \"--database_dir ${database_dir}\" : \"\"\n    def model_args = model_fp ? \"--model_fp ${model_fp}\" : \"\"\n    def is_compressed = fasta.getName().endsWith(\".gz\") ? true : false\n    def fasta_name = fasta.getName().replace(\".gz\", \"\")\n    \"\"\"\n    if [ \"$is_compressed\" == \"true\" ]; then\n        gzip -c -d $fasta > $fasta_name\n    fi\n    hicap \\\\\n        --query_fp $fasta_name \\\\\n        $database_args \\\\\n        $model_args \\\\\n        $args \\\\\n        --threads $task.cpus \\\\\n        -o ./\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        hicap: \\$( echo \\$( hicap --version 2>&1 ) | sed 's/^.*hicap //' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 22,
        "language_script": "bash",
        "tools": [
            "HiCapTools"
        ],
        "tools_url": [
            "https://bio.tools/hicaptools"
        ],
        "tools_dico": [
            {
                "name": "HiCapTools",
                "uri": "https://bio.tools/hicaptools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0632",
                            "term": "Probes and primers"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2419",
                                    "term": "Primer and probe design"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2419",
                                    "term": "Primer and probe prediction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Probe design and proximity detection for targeted chromosome conformation capture applications.",
                "homepage": "https://github.com/sahlenlab/HiCapTools"
            }
        ],
        "inputs": [
            "meta",
            "fasta",
            "database_dir",
            "model_fp"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::hicap=1.0.3\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/hicap:1.0.3--py_0' : 'quay.io/biocontainers/hicap:1.0.3--py_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "PMDTOOLS_FILTER": {
        "name_process": "PMDTOOLS_FILTER",
        "string_process": "process PMDTOOLS_FILTER {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::pmdtools=0.60\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/pmdtools:0.60--hdfd78af_5' :\n        'quay.io/biocontainers/pmdtools:0.60--hdfd78af_5' }\"\n\n    input:\n    tuple val(meta), path(bam), path (bai)\n    val(threshold)\n    path(reference)\n\n    output:\n    tuple val(meta), path(\"*.bam\"), emit: bam\n    path \"versions.yml\"               , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    def args3 = task.ext.args3 ?: ''\n    def split_cpus = Math.floor(task.cpus/2)\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (\"$bam\" == \"${prefix}.bam\") error \"[pmdtools/filter] Input and output names are the same, use \\\"task.ext.prefix\\\" to disambiguate!\"\n                                                                        \n    \"\"\"\n    samtools \\\\\n        calmd \\\\\n        $bam \\\\\n        $reference \\\\\n        $args \\\\\n        -@ ${split_cpus} \\\\\n    | pmdtools \\\\\n        --threshold $threshold \\\\\n        --header \\\\\n        $args2 \\\\\n    | samtools \\\\\n        view \\\\\n        $args3 \\\\\n        -Sb \\\\\n        - \\\\\n        -@ ${split_cpus} \\\\\n        -o ${prefix}.bam\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        pmdtools: \\$( pmdtools --version | cut -f2 -d ' ' | sed 's/v//')\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 53,
        "string_script": "    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    def args3 = task.ext.args3 ?: ''\n    def split_cpus = Math.floor(task.cpus/2)\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (\"$bam\" == \"${prefix}.bam\") error \"[pmdtools/filter] Input and output names are the same, use \\\"task.ext.prefix\\\" to disambiguate!\"\n                                                                        \n    \"\"\"\n    samtools \\\\\n        calmd \\\\\n        $bam \\\\\n        $reference \\\\\n        $args \\\\\n        -@ ${split_cpus} \\\\\n    | pmdtools \\\\\n        --threshold $threshold \\\\\n        --header \\\\\n        $args2 \\\\\n    | samtools \\\\\n        view \\\\\n        $args3 \\\\\n        -Sb \\\\\n        - \\\\\n        -@ ${split_cpus} \\\\\n        -o ${prefix}.bam\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        pmdtools: \\$( pmdtools --version | cut -f2 -d ' ' | sed 's/v//')\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 31,
        "language_script": "bash",
        "tools": [
            "SAMtools",
            "iview"
        ],
        "tools_url": [
            "https://bio.tools/samtools",
            "https://bio.tools/iview"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "iview",
                "uri": "https://bio.tools/iview",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2275",
                            "term": "Molecular modelling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0128",
                            "term": "Protein interactions"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2814",
                            "term": "Protein structure analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_2814",
                            "term": "Protein structure"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0477",
                                    "term": "Protein modelling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0477",
                                    "term": "Homology modelling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0477",
                                    "term": "Comparative modelling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0477",
                                    "term": "Protein structure comparative modelling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0477",
                                    "term": "Homology structure modelling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Interactive HTML5 visualizer of protein-ligand complex.",
                "homepage": "http://istar.cse.cuhk.edu.hk/iview/"
            }
        ],
        "inputs": [
            "meta",
            "bam",
            "bai",
            "threshold",
            "reference"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::pmdtools=0.60\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/pmdtools:0.60--hdfd78af_5' : 'quay.io/biocontainers/pmdtools:0.60--hdfd78af_5' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "GATK4_INTERVALLISTTOBED": {
        "name_process": "GATK4_INTERVALLISTTOBED",
        "string_process": "process GATK4_INTERVALLISTTOBED {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::gatk4=4.2.6.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/gatk4:4.2.6.1--hdfd78af_0':\n        'quay.io/biocontainers/gatk4:4.2.6.1--hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(intervals)\n\n    output:\n    tuple val(meta), path(\"*.bed\"), emit: bed\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[GATK IntervalListToBed] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    gatk --java-options \"-Xmx${avail_mem}g\" IntervalListToBed \\\\\n        --INPUT $intervals \\\\\n        --OUTPUT ${prefix}.bed \\\\\n        --TMP_DIR . \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 40,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[GATK IntervalListToBed] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    gatk --java-options \"-Xmx${avail_mem}g\" IntervalListToBed \\\\\n        --INPUT $intervals \\\\\n        --OUTPUT ${prefix}.bed \\\\\n        --TMP_DIR . \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 20,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "meta",
            "intervals"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::gatk4=4.2.6.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/gatk4:4.2.6.1--hdfd78af_0': 'quay.io/biocontainers/gatk4:4.2.6.1--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "GLNEXUS": {
        "name_process": "GLNEXUS",
        "string_process": "process GLNEXUS {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::glnexus=1.4.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/glnexus:1.4.1--h40d77a6_0' :\n        'quay.io/biocontainers/glnexus:1.4.1--h40d77a6_0' }\"\n\n    input:\n    tuple val(meta), path(gvcfs)\n\n    output:\n    tuple val(meta), path(\"*.bcf\"), emit: bcf\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n                                  \n    def input = gvcfs.collect { it.toString() }\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[Glnexus] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    glnexus_cli \\\\\n        --threads $task.cpus \\\\\n        --mem-gbytes $avail_mem \\\\\n        $args \\\\\n        ${input.join(' ')} \\\\\n        > ${prefix}.bcf\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        glnexus: \\$( echo \\$(glnexus_cli 2>&1) | head -n 1 | sed 's/^.*release v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.bcf\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        glnexus: \\$( echo \\$(glnexus_cli 2>&1) | head -n 1 | sed 's/^.*release v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 54,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n                                  \n    def input = gvcfs.collect { it.toString() }\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[Glnexus] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    glnexus_cli \\\\\n        --threads $task.cpus \\\\\n        --mem-gbytes $avail_mem \\\\\n        $args \\\\\n        ${input.join(' ')} \\\\\n        > ${prefix}.bcf\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        glnexus: \\$( echo \\$(glnexus_cli 2>&1) | head -n 1 | sed 's/^.*release v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 23,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "gvcfs"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::glnexus=1.4.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/glnexus:1.4.1--h40d77a6_0' : 'quay.io/biocontainers/glnexus:1.4.1--h40d77a6_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.bcf\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        glnexus: \\$( echo \\$(glnexus_cli 2>&1) | head -n 1 | sed 's/^.*release v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\""
    },
    "BWA_ALN": {
        "name_process": "BWA_ALN",
        "string_process": "process BWA_ALN {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::bwa=0.7.17\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bwa:0.7.17--h5bf99c6_8' :\n        'quay.io/biocontainers/bwa:0.7.17--h5bf99c6_8' }\"\n\n    input:\n    tuple val(meta), path(reads)\n    path index\n\n    output:\n    tuple val(meta), path(\"*.sai\"), emit: sai\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n    if (meta.single_end) {\n        \"\"\"\n        INDEX=`find -L ./ -name \"*.amb\" | sed 's/.amb//'`\n\n        bwa aln \\\\\n            $args \\\\\n            -t $task.cpus \\\\\n            -f ${prefix}.sai \\\\\n            \\$INDEX \\\\\n            ${reads}\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            bwa: \\$(echo \\$(bwa 2>&1) | sed 's/^.*Version: //; s/Contact:.*\\$//')\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        INDEX=`find -L ./ -name \"*.amb\" | sed 's/.amb//'`\n\n        bwa aln \\\\\n            $args \\\\\n            -t $task.cpus \\\\\n            -f ${prefix}.1.sai \\\\\n            \\$INDEX \\\\\n            ${reads[0]}\n\n        bwa aln \\\\\n            $args \\\\\n            -t $task.cpus \\\\\n            -f ${prefix}.2.sai \\\\\n            \\$INDEX \\\\\n            ${reads[1]}\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            bwa: \\$(echo \\$(bwa 2>&1) | sed 's/^.*Version: //; s/Contact:.*\\$//')\n        END_VERSIONS\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 63,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n    if (meta.single_end) {\n        \"\"\"\n        INDEX=`find -L ./ -name \"*.amb\" | sed 's/.amb//'`\n\n        bwa aln \\\\\n            $args \\\\\n            -t $task.cpus \\\\\n            -f ${prefix}.sai \\\\\n            \\$INDEX \\\\\n            ${reads}\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            bwa: \\$(echo \\$(bwa 2>&1) | sed 's/^.*Version: //; s/Contact:.*\\$//')\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        INDEX=`find -L ./ -name \"*.amb\" | sed 's/.amb//'`\n\n        bwa aln \\\\\n            $args \\\\\n            -t $task.cpus \\\\\n            -f ${prefix}.1.sai \\\\\n            \\$INDEX \\\\\n            ${reads[0]}\n\n        bwa aln \\\\\n            $args \\\\\n            -t $task.cpus \\\\\n            -f ${prefix}.2.sai \\\\\n            \\$INDEX \\\\\n            ${reads[1]}\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            bwa: \\$(echo \\$(bwa 2>&1) | sed 's/^.*Version: //; s/Contact:.*\\$//')\n        END_VERSIONS\n        \"\"\"\n    }",
        "nb_lignes_script": 42,
        "language_script": "bash",
        "tools": [
            "BWA"
        ],
        "tools_url": [
            "https://bio.tools/bwa"
        ],
        "tools_dico": [
            {
                "name": "BWA",
                "uri": "https://bio.tools/bwa",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3211",
                                    "term": "Genome indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2044",
                                "term": "Sequence"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_2012",
                                "term": "Sequence coordinates"
                            },
                            {
                                "uri": "http://edamontology.org/data_1916",
                                "term": "Alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ]
                    }
                ],
                "description": "Fast, accurate, memory-efficient aligner for short and long sequencing reads",
                "homepage": "http://bio-bwa.sourceforge.net"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "index"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::bwa=0.7.17\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bwa:0.7.17--h5bf99c6_8' : 'quay.io/biocontainers/bwa:0.7.17--h5bf99c6_8' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "BOWTIE_BUILD": {
        "name_process": "BOWTIE_BUILD",
        "string_process": "process BOWTIE_BUILD {\n    tag \"$fasta\"\n    label 'process_high'\n\n    conda (params.enable_conda ? 'bioconda::bowtie=1.3.0' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bowtie:1.3.0--py38hed8969a_1' :\n        'quay.io/biocontainers/bowtie:1.3.0--py38hed8969a_1' }\"\n\n    input:\n    path fasta\n\n    output:\n    path 'bowtie'       , emit: index\n    path \"versions.yml\" , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    mkdir bowtie\n    bowtie-build --threads $task.cpus $fasta bowtie/${fasta.baseName}\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bowtie: \\$(echo \\$(bowtie --version 2>&1) | sed 's/^.*bowtie-align-s version //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    mkdir bowtie\n    bowtie-build --threads $task.cpus $fasta bowtie/${fasta.baseName}\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bowtie: \\$(echo \\$(bowtie --version 2>&1) | sed 's/^.*bowtie-align-s version //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "Bowtie"
        ],
        "tools_url": [
            "https://bio.tools/bowtie"
        ],
        "tools_dico": [
            {
                "name": "Bowtie",
                "uri": "https://bio.tools/bowtie",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            },
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            }
                        ]
                    }
                ],
                "description": "Bowtie is an ultrafast, memory-efficient short read aligner.",
                "homepage": "http://bowtie-bio.sourceforge.net/index.shtml"
            }
        ],
        "inputs": [
            "fasta"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$fasta\"",
            "label 'process_high'",
            "conda (params.enable_conda ? 'bioconda::bowtie=1.3.0' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bowtie:1.3.0--py38hed8969a_1' : 'quay.io/biocontainers/bowtie:1.3.0--py38hed8969a_1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "CNVPYTOR_PARTITION": {
        "name_process": "CNVPYTOR_PARTITION",
        "string_process": "process CNVPYTOR_PARTITION {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::cnvpytor=1.2.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/cnvpytor:1.2.1--pyhdfd78af_0':\n        'quay.io/biocontainers/cnvpytor:1.2.1--pyhdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(pytor)\n    val bin_sizes\n\n    output:\n    tuple val(meta), path(\"${pytor.baseName}.pytor\"), emit: pytor\n    path \"versions.yml\"                             , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def bins = bin_sizes ?: '1000'\n    \"\"\"\n    cnvpytor \\\\\n        -root $pytor \\\\\n        -partition $bins\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        cnvpytor: \\$(echo \\$(cnvpytor --version 2>&1) | sed 's/CNVpytor //' ))\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    \"\"\"\n    touch ${pytor.baseName}.pytor\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        cnvpytor: \\$(echo \\$(cnvpytor --version 2>&1) | sed 's/CNVpytor //' ))\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 41,
        "string_script": "    def bins = bin_sizes ?: '1000'\n    \"\"\"\n    cnvpytor \\\\\n        -root $pytor \\\\\n        -partition $bins\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        cnvpytor: \\$(echo \\$(cnvpytor --version 2>&1) | sed 's/CNVpytor //' ))\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "pytor",
            "bin_sizes"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::cnvpytor=1.2.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/cnvpytor:1.2.1--pyhdfd78af_0': 'quay.io/biocontainers/cnvpytor:1.2.1--pyhdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    \"\"\"\n    touch ${pytor.baseName}.pytor\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        cnvpytor: \\$(echo \\$(cnvpytor --version 2>&1) | sed 's/CNVpytor //' ))\n    END_VERSIONS\n    \"\"\""
    },
    "BAMTOOLS_CONVERT": {
        "name_process": "BAMTOOLS_CONVERT",
        "string_process": "process BAMTOOLS_CONVERT {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::bamtools=2.5.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bamtools:2.5.1--h9a82719_9' :\n        'quay.io/biocontainers/bamtools:2.5.1--h9a82719_9' }\"\n\n    input:\n    tuple val(meta), path(bam)\n\n    output:\n    tuple val(meta), path(\"*.{bed,fasta,fastq,json,pileup,sam,yaml}\"), emit: data\n    path \"versions.yml\"                                              , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def test = args ==~ /-format (bed|fasta|fastq|json|pileup|sam|yaml)/\n    if ( test == false ) error \"-format option must be provided in args. Possible values: bed fasta fastq json pileup sam yaml\"\n    m = args =~ /-format ([a-z]+)/\n    ext = m[0][1]\n\n\n    \"\"\"\n    bamtools \\\\\n        convert \\\\\n        $args \\\\\n        -in $bam \\\\\n        -out ${prefix}.${ext}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bamtools: \\$( bamtools --version | grep -e 'bamtools' | sed 's/^.*bamtools //' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 39,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def test = args ==~ /-format (bed|fasta|fastq|json|pileup|sam|yaml)/\n    if ( test == false ) error \"-format option must be provided in args. Possible values: bed fasta fastq json pileup sam yaml\"\n    m = args =~ /-format ([a-z]+)/\n    ext = m[0][1]\n\n\n    \"\"\"\n    bamtools \\\\\n        convert \\\\\n        $args \\\\\n        -in $bam \\\\\n        -out ${prefix}.${ext}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bamtools: \\$( bamtools --version | grep -e 'bamtools' | sed 's/^.*bamtools //' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [
            "FASTA",
            "FastQC",
            "mpileup",
            "SAM",
            "drtext",
            "BamTools",
            "convert"
        ],
        "tools_url": [
            "https://bio.tools/fasta",
            "https://bio.tools/fastqc",
            "https://bio.tools/mpileup",
            "https://bio.tools/sam",
            "https://bio.tools/drtext",
            "https://bio.tools/bamtools",
            "https://bio.tools/convert"
        ],
        "tools_dico": [
            {
                "name": "FASTA",
                "uri": "https://bio.tools/fasta",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "Gene transcripts"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0157",
                            "term": "Sequence composition, complexity and repeats"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "mRNA features"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0346",
                                    "term": "Sequence similarity search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2451",
                                    "term": "Sequence comparison"
                                }
                            ],
                            []
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2044",
                                "term": "Sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0857",
                                "term": "Sequence search results"
                            }
                        ]
                    }
                ],
                "description": "The FASTA programs find regions of local or global similarity between protein or DNA sequences, either by searching protein or DNA databases, or by identifying local duplications within a sequence. Like BLAST, FASTA can be used to infer functional and evolutionary relationships between sequences as well as help identify members of gene families.",
                "homepage": "http://fasta.bioch.virginia.edu/"
            },
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            },
            {
                "name": "mpileup",
                "uri": "https://bio.tools/mpileup",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3695",
                                    "term": "Filtering"
                                }
                            ],
                            []
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            },
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            },
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            },
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Filter bam file using mpileup on coverage and SNPs.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "SAM",
                "uri": "https://bio.tools/sam",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3053",
                            "term": "Genetics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3473",
                            "term": "Data mining"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3518",
                            "term": "Microarray experiment"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3518",
                            "term": "Microarrays"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0571",
                                    "term": "Expression data visualisation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0571",
                                    "term": "Expression data rendering"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "This tool is a statistical technique for finding significant genes in a set of microarray experiments, a supervised learning software for genomic expression data mining.",
                "homepage": "http://statweb.stanford.edu/~tibs/SAM/index.html"
            },
            {
                "name": "drtext",
                "uri": "https://bio.tools/drtext",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0224",
                                    "term": "Query and retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0224",
                                    "term": "Database retrieval"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0957",
                                "term": "Database metadata"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0957",
                                "term": "Database metadata"
                            }
                        ]
                    }
                ],
                "description": "Get data resource entries complete text.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/drtext.html"
            },
            {
                "name": "BamTools",
                "uri": "https://bio.tools/bamtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0258",
                                    "term": "Sequence alignment analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "BamTools provides a fast, flexible C++ API & toolkit for reading, writing, and managing BAM files.",
                "homepage": "https://github.com/pezmaster31/bamtools"
            },
            {
                "name": "convert",
                "uri": "https://bio.tools/convert",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3511",
                            "term": "Nucleic acid sites, features and motifs"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3434",
                                    "term": "Conversion"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_2854",
                                "term": "Position-specific scoring matrix"
                            },
                            {
                                "uri": "http://edamontology.org/data_0849",
                                "term": "Sequence record"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2854",
                                "term": "Position-specific scoring matrix"
                            },
                            {
                                "uri": "http://edamontology.org/data_1669",
                                "term": "P-value"
                            },
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "Define coerce methods for microarray data objects.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/convert.html"
            }
        ],
        "inputs": [
            "meta",
            "bam"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::bamtools=2.5.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bamtools:2.5.1--h9a82719_9' : 'quay.io/biocontainers/bamtools:2.5.1--h9a82719_9' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "ATAQV_ATAQV": {
        "name_process": "ATAQV_ATAQV",
        "string_process": "process ATAQV_ATAQV {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::ataqv=1.2.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/ataqv:1.2.1--py39ha23c084_2' :\n        'quay.io/biocontainers/ataqv:1.2.1--py39ha23c084_2' }\"\n\n    input:\n    tuple val(meta), path(bam), path(bai), path(peak_file)\n    val organism\n    path tss_file\n    path excl_regs_file\n    path autosom_ref_file\n\n    output:\n    tuple val(meta), path(\"*.ataqv.json\"), emit: json\n    tuple val(meta), path(\"*.problems\")  , emit: problems, optional: true\n    path \"versions.yml\"                  , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def peak        = peak_file        ? \"--peak-file $peak_file\"                       : ''\n    def tss         = tss_file         ? \"--tss-file $tss_file\"                         : ''\n    def excl_regs   = excl_regs_file   ? \"--excluded-region-file $excl_regs_file\"       : ''\n    def autosom_ref = autosom_ref_file ? \"--autosomal-reference-file $autosom_ref_file\" : ''\n    \"\"\"\n    ataqv \\\\\n        $args \\\\\n        $peak \\\\\n        $tss \\\\\n        $excl_regs \\\\\n        $autosom_ref \\\\\n        --metrics-file \"${prefix}.ataqv.json\" \\\\\n        --threads $task.cpus \\\\\n        --name $prefix \\\\\n        $organism \\\\\n        $bam\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        ataqv: \\$( ataqv --version )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 48,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def peak        = peak_file        ? \"--peak-file $peak_file\"                       : ''\n    def tss         = tss_file         ? \"--tss-file $tss_file\"                         : ''\n    def excl_regs   = excl_regs_file   ? \"--excluded-region-file $excl_regs_file\"       : ''\n    def autosom_ref = autosom_ref_file ? \"--autosomal-reference-file $autosom_ref_file\" : ''\n    \"\"\"\n    ataqv \\\\\n        $args \\\\\n        $peak \\\\\n        $tss \\\\\n        $excl_regs \\\\\n        $autosom_ref \\\\\n        --metrics-file \"${prefix}.ataqv.json\" \\\\\n        --threads $task.cpus \\\\\n        --name $prefix \\\\\n        $organism \\\\\n        $bam\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        ataqv: \\$( ataqv --version )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 23,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "bam",
            "bai",
            "peak_file",
            "organism",
            "tss_file",
            "excl_regs_file",
            "autosom_ref_file"
        ],
        "nb_inputs": 8,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::ataqv=1.2.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/ataqv:1.2.1--py39ha23c084_2' : 'quay.io/biocontainers/ataqv:1.2.1--py39ha23c084_2' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "SVDB_QUERY": {
        "name_process": "SVDB_QUERY",
        "string_process": "process SVDB_QUERY {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::svdb=2.6.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/svdb:2.6.1--py39h5371cbf_0':\n        'quay.io/biocontainers/svdb:2.6.1--py39h5371cbf_0' }\"\n\n    input:\n    tuple val(meta), path(vcf)\n    val(in_occs)\n    val(in_frqs)\n    val(out_occs)\n    val(out_frqs)\n    path (vcf_dbs)\n\n    output:\n    tuple val(meta), path(\"*_query.vcf\"), emit: vcf\n    path \"versions.yml\"                     , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args    = task.ext.args ?: ''\n    def prefix  = task.ext.prefix ?: \"${meta.id}\"\n    def in_occ  = \"\"\n    def in_frq  = \"\"\n    def out_occ = \"\"\n    def out_frq = \"\"\n    if (in_occs) {\n        in_occ  = \"--in_occ ${in_occs.join(',')}\"\n    }\n    if (in_frqs) {\n        in_frq  = \"--in_frq ${in_frqs.join(',')}\"\n    }\n    if (out_occs) {\n        out_occ = \"--out_occ ${out_occs.join(',')}\"\n    }\n    if (out_frqs) {\n        out_frq = \"--out_frq ${out_frqs.join(',')}\"\n    }\n\n    \"\"\"\n    svdb \\\\\n        --query \\\\\n        $in_occ \\\\\n        $in_frq \\\\\n        $out_occ \\\\\n        $out_frq \\\\\n        $args \\\\\n        --db ${vcf_dbs.join(',')} \\\\\n        --query_vcf $vcf \\\\\n        --prefix ${prefix}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        svdb: \\$( echo \\$(svdb) | head -1 | sed 's/usage: SVDB-\\\\([0-9]\\\\.[0-9]\\\\.[0-9]\\\\).*/\\\\1/' )\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}_query.vcf\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        svdb: \\$( echo \\$(svdb) | head -1 | sed 's/usage: SVDB-\\\\([0-9]\\\\.[0-9]\\\\.[0-9]\\\\).*/\\\\1/' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 71,
        "string_script": "    def args    = task.ext.args ?: ''\n    def prefix  = task.ext.prefix ?: \"${meta.id}\"\n    def in_occ  = \"\"\n    def in_frq  = \"\"\n    def out_occ = \"\"\n    def out_frq = \"\"\n    if (in_occs) {\n        in_occ  = \"--in_occ ${in_occs.join(',')}\"\n    }\n    if (in_frqs) {\n        in_frq  = \"--in_frq ${in_frqs.join(',')}\"\n    }\n    if (out_occs) {\n        out_occ = \"--out_occ ${out_occs.join(',')}\"\n    }\n    if (out_frqs) {\n        out_frq = \"--out_frq ${out_frqs.join(',')}\"\n    }\n\n    \"\"\"\n    svdb \\\\\n        --query \\\\\n        $in_occ \\\\\n        $in_frq \\\\\n        $out_occ \\\\\n        $out_frq \\\\\n        $args \\\\\n        --db ${vcf_dbs.join(',')} \\\\\n        --query_vcf $vcf \\\\\n        --prefix ${prefix}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        svdb: \\$( echo \\$(svdb) | head -1 | sed 's/usage: SVDB-\\\\([0-9]\\\\.[0-9]\\\\.[0-9]\\\\).*/\\\\1/' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 35,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "vcf",
            "in_occs",
            "in_frqs",
            "out_occs",
            "out_frqs",
            "vcf_dbs"
        ],
        "nb_inputs": 7,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::svdb=2.6.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/svdb:2.6.1--py39h5371cbf_0': 'quay.io/biocontainers/svdb:2.6.1--py39h5371cbf_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}_query.vcf\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        svdb: \\$( echo \\$(svdb) | head -1 | sed 's/usage: SVDB-\\\\([0-9]\\\\.[0-9]\\\\.[0-9]\\\\).*/\\\\1/' )\n    END_VERSIONS\n    \"\"\""
    },
    "CUSTOM_GETCHROMSIZES": {
        "name_process": "CUSTOM_GETCHROMSIZES",
        "string_process": "process CUSTOM_GETCHROMSIZES {\n    tag \"$fasta\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::samtools=1.15.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/samtools:1.15.1--h1170115_0' :\n        'quay.io/biocontainers/samtools:1.15.1--h1170115_0' }\"\n\n    input:\n    path fasta\n\n    output:\n    path '*.sizes'      , emit: sizes\n    path '*.fai'        , emit: fai\n    path  \"versions.yml\", emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    samtools faidx $fasta\n    cut -f 1,2 ${fasta}.fai > ${fasta}.sizes\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        custom: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    samtools faidx $fasta\n    cut -f 1,2 ${fasta}.fai > ${fasta}.sizes\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        custom: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "fasta"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$fasta\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::samtools=1.15.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/samtools:1.15.1--h1170115_0' : 'quay.io/biocontainers/samtools:1.15.1--h1170115_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "BWA_SAMPE": {
        "name_process": "BWA_SAMPE",
        "string_process": "process BWA_SAMPE {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::bwa=0.7.17 bioconda::samtools=1.15.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mulled-v2-fe8faa35dbf6dc65a0f7f5d4ea12e31a79f73e40:8110a70be2bfe7f75a2ea7f2a89cda4cc7732095-0' :\n        'quay.io/biocontainers/mulled-v2-fe8faa35dbf6dc65a0f7f5d4ea12e31a79f73e40:8110a70be2bfe7f75a2ea7f2a89cda4cc7732095-0' }\"\n\n    input:\n    tuple val(meta), path(reads), path(sai)\n    path index\n\n    output:\n    tuple val(meta), path(\"*.bam\"), emit: bam\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def read_group = meta.read_group ? \"-r ${meta.read_group}\" : \"\"\n\n    \"\"\"\n    INDEX=`find -L ./ -name \"*.amb\" | sed 's/.amb//'`\n\n    bwa sampe \\\\\n        $args \\\\\n        $read_group \\\\\n        \\$INDEX \\\\\n        $sai \\\\\n        $reads | samtools sort -@ ${task.cpus - 1} -O bam - > ${prefix}.bam\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bwa: \\$(echo \\$(bwa 2>&1) | sed 's/^.*Version: //; s/Contact:.*\\$//')\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 40,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def read_group = meta.read_group ? \"-r ${meta.read_group}\" : \"\"\n\n    \"\"\"\n    INDEX=`find -L ./ -name \"*.amb\" | sed 's/.amb//'`\n\n    bwa sampe \\\\\n        $args \\\\\n        $read_group \\\\\n        \\$INDEX \\\\\n        $sai \\\\\n        $reads | samtools sort -@ ${task.cpus - 1} -O bam - > ${prefix}.bam\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bwa: \\$(echo \\$(bwa 2>&1) | sed 's/^.*Version: //; s/Contact:.*\\$//')\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [
            "BWA",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/bwa",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "BWA",
                "uri": "https://bio.tools/bwa",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3211",
                                    "term": "Genome indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2044",
                                "term": "Sequence"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_2012",
                                "term": "Sequence coordinates"
                            },
                            {
                                "uri": "http://edamontology.org/data_1916",
                                "term": "Alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ]
                    }
                ],
                "description": "Fast, accurate, memory-efficient aligner for short and long sequencing reads",
                "homepage": "http://bio-bwa.sourceforge.net"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "sai",
            "index"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::bwa=0.7.17 bioconda::samtools=1.15.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mulled-v2-fe8faa35dbf6dc65a0f7f5d4ea12e31a79f73e40:8110a70be2bfe7f75a2ea7f2a89cda4cc7732095-0' : 'quay.io/biocontainers/mulled-v2-fe8faa35dbf6dc65a0f7f5d4ea12e31a79f73e40:8110a70be2bfe7f75a2ea7f2a89cda4cc7732095-0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "METABAT2_JGISUMMARIZEBAMCONTIGDEPTHS": {
        "name_process": "METABAT2_JGISUMMARIZEBAMCONTIGDEPTHS",
        "string_process": "process METABAT2_JGISUMMARIZEBAMCONTIGDEPTHS {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::metabat2=2.15\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/metabat2:2.15--h986a166_1' :\n        'quay.io/biocontainers/metabat2:2.15--h986a166_1' }\"\n\n    input:\n    tuple val(meta), path(bam), path(bai)\n\n    output:\n    tuple val(meta), path(\"*.txt.gz\"), emit: depth\n    path \"versions.yml\"                    , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    export OMP_NUM_THREADS=$task.cpus\n\n    jgi_summarize_bam_contig_depths \\\\\n        --outputDepth ${prefix}.txt \\\\\n        $args \\\\\n        $bam\n\n    bgzip --threads $task.cpus ${prefix}.txt\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        metabat2: \\$( metabat2 --help 2>&1 | head -n 2 | tail -n 1| sed 's/.*\\\\:\\\\([0-9]*\\\\.[0-9]*\\\\).*/\\\\1/' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 36,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    export OMP_NUM_THREADS=$task.cpus\n\n    jgi_summarize_bam_contig_depths \\\\\n        --outputDepth ${prefix}.txt \\\\\n        $args \\\\\n        $bam\n\n    bgzip --threads $task.cpus ${prefix}.txt\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        metabat2: \\$( metabat2 --help 2>&1 | head -n 2 | tail -n 1| sed 's/.*\\\\:\\\\([0-9]*\\\\.[0-9]*\\\\).*/\\\\1/' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "bam",
            "bai"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::metabat2=2.15\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/metabat2:2.15--h986a166_1' : 'quay.io/biocontainers/metabat2:2.15--h986a166_1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "DEEPVARIANT": {
        "name_process": "DEEPVARIANT",
        "string_process": "process DEEPVARIANT {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n\n    if (params.enable_conda) {\n        exit 1, \"Conda environments cannot be used when using the DeepVariant tool. Please use docker or singularity containers.\"\n    }\n\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'google/deepvariant:1.3.0' :\n        'google/deepvariant:1.3.0' }\"\n\n    input:\n    tuple val(meta), path(input), path(index), path(intervals)\n    path(fasta)\n    path(fai)\n\n    output:\n    tuple val(meta), path(\"${prefix}.vcf.gz\") ,  emit: vcf\n    tuple val(meta), path(\"${prefix}.g.vcf.gz\"),  emit: gvcf\n    path \"versions.yml\"               ,  emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    prefix = task.ext.prefix ?: \"${meta.id}\"\n    def regions = intervals ? \"--regions ${intervals}\" : \"\"\n\n    \"\"\"\n    /opt/deepvariant/bin/run_deepvariant \\\\\n        --ref=${fasta} \\\\\n        --reads=${input} \\\\\n        --output_vcf=${prefix}.vcf.gz \\\\\n        --output_gvcf=${prefix}.g.vcf.gz \\\\\n        ${args} \\\\\n        ${regions} \\\\\n        --num_shards=${task.cpus}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        deepvariant: \\$(echo \\$(/opt/deepvariant/bin/run_deepvariant --version) | sed 's/^.*version //; s/ .*\\$//' )\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.vcf.gz\n    touch ${prefix}.g.vcf.gz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        deepvariant: \\$(echo \\$(/opt/deepvariant/bin/run_deepvariant --version) | sed 's/^.*version //; s/ .*\\$//' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 57,
        "string_script": "    def args = task.ext.args ?: ''\n    prefix = task.ext.prefix ?: \"${meta.id}\"\n    def regions = intervals ? \"--regions ${intervals}\" : \"\"\n\n    \"\"\"\n    /opt/deepvariant/bin/run_deepvariant \\\\\n        --ref=${fasta} \\\\\n        --reads=${input} \\\\\n        --output_vcf=${prefix}.vcf.gz \\\\\n        --output_gvcf=${prefix}.g.vcf.gz \\\\\n        ${args} \\\\\n        ${regions} \\\\\n        --num_shards=${task.cpus}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        deepvariant: \\$(echo \\$(/opt/deepvariant/bin/run_deepvariant --version) | sed 's/^.*version //; s/ .*\\$//' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "input",
            "index",
            "intervals",
            "fasta",
            "fai"
        ],
        "nb_inputs": 6,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium' if (params.enable_conda) { exit 1, \"Conda environments cannot be used when using the DeepVariant tool. Please use docker or singularity containers.\" }",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'google/deepvariant:1.3.0' : 'google/deepvariant:1.3.0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.vcf.gz\n    touch ${prefix}.g.vcf.gz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        deepvariant: \\$(echo \\$(/opt/deepvariant/bin/run_deepvariant --version) | sed 's/^.*version //; s/ .*\\$//' )\n    END_VERSIONS\n    \"\"\""
    },
    "FASTQSCAN": {
        "name_process": "FASTQSCAN",
        "string_process": "process FASTQSCAN {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::fastq-scan=0.4.4\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/fastq-scan:0.4.4--h7d875b9_0' :\n        'quay.io/biocontainers/fastq-scan:0.4.4--h7d875b9_0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path(\"*.json\"), emit: json\n    path \"versions.yml\"            , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    zcat $reads | \\\\\n        fastq-scan \\\\\n        $args > ${prefix}.json\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        fastqscan: \\$( echo \\$(fastq-scan -v 2>&1) | sed 's/^.*fastq-scan //' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    zcat $reads | \\\\\n        fastq-scan \\\\\n        $args > ${prefix}.json\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        fastqscan: \\$( echo \\$(fastq-scan -v 2>&1) | sed 's/^.*fastq-scan //' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::fastq-scan=0.4.4\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/fastq-scan:0.4.4--h7d875b9_0' : 'quay.io/biocontainers/fastq-scan:0.4.4--h7d875b9_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "PAIRTOOLS_PARSE": {
        "name_process": "PAIRTOOLS_PARSE",
        "string_process": "process PAIRTOOLS_PARSE {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::pairtools=0.3.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/pairtools:0.3.0--py37hb9c2fc3_5' :\n        'quay.io/biocontainers/pairtools:0.3.0--py37hb9c2fc3_5' }\"\n\n    input:\n    tuple val(meta), path(bam)\n    path chromsizes\n\n    output:\n    tuple val(meta), path(\"*.pairsam.gz\")  , emit: pairsam\n    tuple val(meta), path(\"*.pairsam.stat\"), emit: stat\n    path \"versions.yml\"                    , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    pairtools \\\\\n        parse \\\\\n        -c $chromsizes \\\\\n        $args \\\\\n        --output-stats ${prefix}.pairsam.stat \\\\\n        -o ${prefix}.pairsam.gz \\\\\n        $bam\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        pairtools: \\$(pairtools --version 2>&1 | sed 's/pairtools.*version //')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 37,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    pairtools \\\\\n        parse \\\\\n        -c $chromsizes \\\\\n        $args \\\\\n        --output-stats ${prefix}.pairsam.stat \\\\\n        -o ${prefix}.pairsam.gz \\\\\n        $bam\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        pairtools: \\$(pairtools --version 2>&1 | sed 's/pairtools.*version //')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [
            "Parseq"
        ],
        "tools_url": [
            "https://bio.tools/parseq"
        ],
        "tools_dico": [
            {
                "name": "Parseq",
                "uri": "https://bio.tools/parseq",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2269",
                            "term": "Statistics and probability"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0438",
                                    "term": "Transcriptional regulatory element prediction"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0438",
                                    "term": "Regulatory element prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0438",
                                    "term": "Transcription regulatory element prediction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Statistical approach for transcription landscape reconstruction at a basepair resolution from RNA Seq read counts.",
                "homepage": "http://www.lcqb.upmc.fr/parseq/"
            }
        ],
        "inputs": [
            "meta",
            "bam",
            "chromsizes"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::pairtools=0.3.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/pairtools:0.3.0--py37hb9c2fc3_5' : 'quay.io/biocontainers/pairtools:0.3.0--py37hb9c2fc3_5' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "GSTAMA_COLLAPSE": {
        "name_process": "GSTAMA_COLLAPSE",
        "string_process": "process GSTAMA_COLLAPSE {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::gs-tama=1.0.3\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/gs-tama:1.0.3--hdfd78af_0' :\n        'quay.io/biocontainers/gs-tama:1.0.3--hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(bam)\n    path fasta\n\n    output:\n    tuple val(meta), path(\"*_collapsed.bed\")          , emit: bed\n    tuple val(meta), path(\"*_trans_read.bed\")         , emit: bed_trans_reads\n    tuple val(meta), path(\"*_local_density_error.txt\"), emit: local_density_error\n    tuple val(meta), path(\"*_polya.txt\")              , emit: polya\n    tuple val(meta), path(\"*_read.txt\")               , emit: read\n    tuple val(meta), path(\"*_strand_check.txt\")       , emit: strand_check\n    tuple val(meta), path(\"*_trans_report.txt\")       , emit: trans_report\n    path \"versions.yml\"                               , emit: versions\n\n    tuple val(meta), path(\"*_varcov.txt\")             , emit: varcov  , optional: true\n    tuple val(meta), path(\"*_variants.txt\")           , emit: variants, optional: true\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    tama_collapse.py \\\\\n        -s $bam \\\\\n        -f $fasta \\\\\n        -p ${prefix} \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gstama: \\$( tama_collapse.py -version | grep 'tc_version_date_'|sed 's/tc_version_date_//g' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 43,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    tama_collapse.py \\\\\n        -s $bam \\\\\n        -f $fasta \\\\\n        -p ${prefix} \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gstama: \\$( tama_collapse.py -version | grep 'tc_version_date_'|sed 's/tc_version_date_//g' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "bam",
            "fasta"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::gs-tama=1.0.3\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/gs-tama:1.0.3--hdfd78af_0' : 'quay.io/biocontainers/gs-tama:1.0.3--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "GATK4_HAPLOTYPECALLER": {
        "name_process": "GATK4_HAPLOTYPECALLER",
        "string_process": "process GATK4_HAPLOTYPECALLER {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::gatk4=4.2.6.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/gatk4:4.2.6.1--hdfd78af_0':\n        'quay.io/biocontainers/gatk4:4.2.6.1--hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(input), path(input_index), path(intervals)\n    path  fasta\n    path  fai\n    path  dict\n    path  dbsnp\n    path  dbsnp_tbi\n\n    output:\n    tuple val(meta), path(\"*.vcf.gz\"), emit: vcf\n    tuple val(meta), path(\"*.tbi\")   , optional:true, emit: tbi\n    path \"versions.yml\"              , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def dbsnp_command = dbsnp ? \"--dbsnp $dbsnp\" : \"\"\n    def interval_command = intervals ? \"--intervals $intervals\" : \"\"\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[GATK HaplotypeCaller] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    gatk --java-options \"-Xmx${avail_mem}g\" HaplotypeCaller \\\\\n        --input $input \\\\\n        --output ${prefix}.vcf.gz \\\\\n        --reference $fasta \\\\\n        $dbsnp_command \\\\\n        $interval_command \\\\\n        --tmp-dir . \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 51,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def dbsnp_command = dbsnp ? \"--dbsnp $dbsnp\" : \"\"\n    def interval_command = intervals ? \"--intervals $intervals\" : \"\"\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[GATK HaplotypeCaller] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    gatk --java-options \"-Xmx${avail_mem}g\" HaplotypeCaller \\\\\n        --input $input \\\\\n        --output ${prefix}.vcf.gz \\\\\n        --reference $fasta \\\\\n        $dbsnp_command \\\\\n        $interval_command \\\\\n        --tmp-dir . \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 25,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "meta",
            "input",
            "input_index",
            "intervals",
            "fasta",
            "fai",
            "dict",
            "dbsnp",
            "dbsnp_tbi"
        ],
        "nb_inputs": 9,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::gatk4=4.2.6.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/gatk4:4.2.6.1--hdfd78af_0': 'quay.io/biocontainers/gatk4:4.2.6.1--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "MEGAHIT": {
        "name_process": "MEGAHIT",
        "string_process": "process MEGAHIT {\n    tag \"$meta.id\"\n    label 'process_high'\n\n    conda (params.enable_conda ? \"bioconda::megahit=1.2.9 conda-forge::pigz=2.6\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mulled-v2-0f92c152b180c7cd39d9b0e6822f8c89ccb59c99:8ec213d21e5d03f9db54898a2baeaf8ec729b447-0' :\n        'quay.io/biocontainers/mulled-v2-0f92c152b180c7cd39d9b0e6822f8c89ccb59c99:8ec213d21e5d03f9db54898a2baeaf8ec729b447-0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path(\"megahit_out/*.contigs.fa.gz\")                            , emit: contigs\n    tuple val(meta), path(\"megahit_out/intermediate_contigs/k*.contigs.fa.gz\")      , emit: k_contigs\n    tuple val(meta), path(\"megahit_out/intermediate_contigs/k*.addi.fa.gz\")         , emit: addi_contigs\n    tuple val(meta), path(\"megahit_out/intermediate_contigs/k*.local.fa.gz\")        , emit: local_contigs\n    tuple val(meta), path(\"megahit_out/intermediate_contigs/k*.final.contigs.fa.gz\"), emit: kfinal_contigs\n    path \"versions.yml\"                                                             , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (meta.single_end) {\n        \"\"\"\n        megahit \\\\\n            -r ${reads} \\\\\n            -t $task.cpus \\\\\n            $args \\\\\n            --out-prefix $prefix\n\n        pigz \\\\\n            --no-name \\\\\n            -p $task.cpus \\\\\n            $args2 \\\\\n            megahit_out/*.fa \\\\\n            megahit_out/intermediate_contigs/*.fa\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            megahit: \\$(echo \\$(megahit -v 2>&1) | sed 's/MEGAHIT v//')\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        megahit \\\\\n            -1 ${reads[0]} \\\\\n            -2 ${reads[1]} \\\\\n            -t $task.cpus \\\\\n            $args \\\\\n            --out-prefix $prefix\n\n        pigz \\\\\n            --no-name \\\\\n            -p $task.cpus \\\\\n            $args2 \\\\\n            megahit_out/*.fa \\\\\n            megahit_out/intermediate_contigs/*.fa\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            megahit: \\$(echo \\$(megahit -v 2>&1) | sed 's/MEGAHIT v//')\n        END_VERSIONS\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 68,
        "string_script": "    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (meta.single_end) {\n        \"\"\"\n        megahit \\\\\n            -r ${reads} \\\\\n            -t $task.cpus \\\\\n            $args \\\\\n            --out-prefix $prefix\n\n        pigz \\\\\n            --no-name \\\\\n            -p $task.cpus \\\\\n            $args2 \\\\\n            megahit_out/*.fa \\\\\n            megahit_out/intermediate_contigs/*.fa\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            megahit: \\$(echo \\$(megahit -v 2>&1) | sed 's/MEGAHIT v//')\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        megahit \\\\\n            -1 ${reads[0]} \\\\\n            -2 ${reads[1]} \\\\\n            -t $task.cpus \\\\\n            $args \\\\\n            --out-prefix $prefix\n\n        pigz \\\\\n            --no-name \\\\\n            -p $task.cpus \\\\\n            $args2 \\\\\n            megahit_out/*.fa \\\\\n            megahit_out/intermediate_contigs/*.fa\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            megahit: \\$(echo \\$(megahit -v 2>&1) | sed 's/MEGAHIT v//')\n        END_VERSIONS\n        \"\"\"\n    }",
        "nb_lignes_script": 44,
        "language_script": "bash",
        "tools": [
            "MEGAHIT"
        ],
        "tools_url": [
            "https://bio.tools/megahit"
        ],
        "tools_dico": [
            {
                "name": "MEGAHIT",
                "uri": "https://bio.tools/megahit",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0610",
                            "term": "Ecology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Single node assembler for large and complex metagenomics NGS reads, such as soil. It makes use of succinct de Bruijn graph to achieve low memory usage, whereas its goal is not to make memory usage as low as possible.",
                "homepage": "https://github.com/voutcn/megahit"
            }
        ],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "conda (params.enable_conda ? \"bioconda::megahit=1.2.9 conda-forge::pigz=2.6\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mulled-v2-0f92c152b180c7cd39d9b0e6822f8c89ccb59c99:8ec213d21e5d03f9db54898a2baeaf8ec729b447-0' : 'quay.io/biocontainers/mulled-v2-0f92c152b180c7cd39d9b0e6822f8c89ccb59c99:8ec213d21e5d03f9db54898a2baeaf8ec729b447-0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "DEEPTOOLS_PLOTHEATMAP": {
        "name_process": "DEEPTOOLS_PLOTHEATMAP",
        "string_process": "process DEEPTOOLS_PLOTHEATMAP {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? 'bioconda::deeptools=3.5.1' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/deeptools:3.5.1--py_0' :\n        'quay.io/biocontainers/deeptools:3.5.1--py_0' }\"\n\n    input:\n    tuple val(meta), path(matrix)\n\n    output:\n    tuple val(meta), path(\"*.pdf\"), emit: pdf\n    tuple val(meta), path(\"*.tab\"), emit: table\n    path  \"versions.yml\"          , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    plotHeatmap \\\\\n        $args \\\\\n        --matrixFile $matrix \\\\\n        --outFileName ${prefix}.plotHeatmap.pdf \\\\\n        --outFileNameMatrix ${prefix}.plotHeatmap.mat.tab\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        deeptools: \\$(plotHeatmap --version | sed -e \"s/plotHeatmap //g\")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    plotHeatmap \\\\\n        $args \\\\\n        --matrixFile $matrix \\\\\n        --outFileName ${prefix}.plotHeatmap.pdf \\\\\n        --outFileNameMatrix ${prefix}.plotHeatmap.mat.tab\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        deeptools: \\$(plotHeatmap --version | sed -e \"s/plotHeatmap //g\")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "matrix"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? 'bioconda::deeptools=3.5.1' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/deeptools:3.5.1--py_0' : 'quay.io/biocontainers/deeptools:3.5.1--py_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "CMSEQ_POLYMUT": {
        "name_process": "CMSEQ_POLYMUT",
        "string_process": "\nprocess CMSEQ_POLYMUT {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::cmseq=1.0.4\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/cmseq:1.0.4--pyhb7b1952_0' :\n        'quay.io/biocontainers/cmseq:1.0.4--pyhb7b1952_0' }\"\n\n    input:\n    tuple val(meta), path(bam), path(bai), path(gff), path(fasta)\n\n    output:\n    tuple val(meta), path(\"*.txt\"), emit: polymut\n    path \"versions.yml\"                   , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def fasta_refid = fasta ? \"-c $fasta\" : \"\"\n    def sortindex = bai ? \"\" : \"--sortindex\"\n    \"\"\"\n    polymut.py \\\\\n        $args \\\\\n        $sortindex \\\\\n        $fasta_refid \\\\\n        --gff_file $gff \\\\\n        $bam > ${prefix}.txt\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        cmseq: $VERSION\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 37,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def fasta_refid = fasta ? \"-c $fasta\" : \"\"\n    def sortindex = bai ? \"\" : \"--sortindex\"\n    \"\"\"\n    polymut.py \\\\\n        $args \\\\\n        $sortindex \\\\\n        $fasta_refid \\\\\n        --gff_file $gff \\\\\n        $bam > ${prefix}.txt\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        cmseq: $VERSION\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "bam",
            "bai",
            "gff",
            "fasta"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::cmseq=1.0.4\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/cmseq:1.0.4--pyhb7b1952_0' : 'quay.io/biocontainers/cmseq:1.0.4--pyhb7b1952_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "SAMTOOLS_FAIDX": {
        "name_process": "SAMTOOLS_FAIDX",
        "string_process": "process SAMTOOLS_FAIDX {\n    tag \"$fasta\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::samtools=1.15.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/samtools:1.15.1--h1170115_0' :\n        'quay.io/biocontainers/samtools:1.15.1--h1170115_0' }\"\n\n    input:\n    tuple val(meta), path(fasta)\n\n    output:\n    tuple val(meta), path (\"*.fai\"), emit: fai\n    path \"versions.yml\"            , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    samtools \\\\\n        faidx \\\\\n        $fasta\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    \"\"\"\n    touch ${fasta}.fai\n    cat <<-END_VERSIONS > versions.yml\n\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 40,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    samtools \\\\\n        faidx \\\\\n        $fasta\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [
            "SAMtools",
            "pyfaidx"
        ],
        "tools_url": [
            "https://bio.tools/samtools",
            "https://bio.tools/pyfaidx"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "pyfaidx",
                "uri": "https://bio.tools/pyfaidx",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "This python module implements pure Python classes for indexing, retrieval, and in-place modification of FASTA files using a samtools compatible index.",
                "homepage": "https://pythonhosted.org/pyfaidx/"
            }
        ],
        "inputs": [
            "meta",
            "fasta"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$fasta\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::samtools=1.15.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/samtools:1.15.1--h1170115_0' : 'quay.io/biocontainers/samtools:1.15.1--h1170115_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    \"\"\"\n    touch ${fasta}.fai\n    cat <<-END_VERSIONS > versions.yml\n\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\""
    },
    "SORTMERNA": {
        "name_process": "SORTMERNA",
        "string_process": "process SORTMERNA {\n    tag \"$meta.id\"\n    label \"process_high\"\n\n    conda (params.enable_conda ? \"bioconda::sortmerna=4.3.4\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/sortmerna:4.3.4--h9ee0642_0' :\n        'quay.io/biocontainers/sortmerna:4.3.4--h9ee0642_0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n    path  fastas\n\n    output:\n    tuple val(meta), path(\"*.fastq.gz\"), emit: reads\n    tuple val(meta), path(\"*.log\")     , emit: log\n    path  \"versions.yml\"               , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (meta.single_end) {\n        \"\"\"\n        sortmerna \\\\\n            ${'--ref '+fastas.join(' --ref ')} \\\\\n            --reads $reads \\\\\n            --threads $task.cpus \\\\\n            --workdir . \\\\\n            --aligned rRNA_reads \\\\\n            --other non_rRNA_reads \\\\\n            $args\n\n        mv non_rRNA_reads.fq.gz ${prefix}.fastq.gz\n        mv rRNA_reads.log ${prefix}.sortmerna.log\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            sortmerna: \\$(echo \\$(sortmerna --version 2>&1) | sed 's/^.*SortMeRNA version //; s/ Build Date.*\\$//')\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        sortmerna \\\\\n            ${'--ref '+fastas.join(' --ref ')} \\\\\n            --reads ${reads[0]} \\\\\n            --reads ${reads[1]} \\\\\n            --threads $task.cpus \\\\\n            --workdir . \\\\\n            --aligned rRNA_reads \\\\\n            --other non_rRNA_reads \\\\\n            --paired_in \\\\\n            --out2 \\\\\n            $args\n\n        mv non_rRNA_reads_fwd.fq.gz ${prefix}_1.fastq.gz\n        mv non_rRNA_reads_rev.fq.gz ${prefix}_2.fastq.gz\n        mv rRNA_reads.log ${prefix}.sortmerna.log\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            sortmerna: \\$(echo \\$(sortmerna --version 2>&1) | sed 's/^.*SortMeRNA version //; s/ Build Date.*\\$//')\n        END_VERSIONS\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 66,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (meta.single_end) {\n        \"\"\"\n        sortmerna \\\\\n            ${'--ref '+fastas.join(' --ref ')} \\\\\n            --reads $reads \\\\\n            --threads $task.cpus \\\\\n            --workdir . \\\\\n            --aligned rRNA_reads \\\\\n            --other non_rRNA_reads \\\\\n            $args\n\n        mv non_rRNA_reads.fq.gz ${prefix}.fastq.gz\n        mv rRNA_reads.log ${prefix}.sortmerna.log\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            sortmerna: \\$(echo \\$(sortmerna --version 2>&1) | sed 's/^.*SortMeRNA version //; s/ Build Date.*\\$//')\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        sortmerna \\\\\n            ${'--ref '+fastas.join(' --ref ')} \\\\\n            --reads ${reads[0]} \\\\\n            --reads ${reads[1]} \\\\\n            --threads $task.cpus \\\\\n            --workdir . \\\\\n            --aligned rRNA_reads \\\\\n            --other non_rRNA_reads \\\\\n            --paired_in \\\\\n            --out2 \\\\\n            $args\n\n        mv non_rRNA_reads_fwd.fq.gz ${prefix}_1.fastq.gz\n        mv non_rRNA_reads_rev.fq.gz ${prefix}_2.fastq.gz\n        mv rRNA_reads.log ${prefix}.sortmerna.log\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            sortmerna: \\$(echo \\$(sortmerna --version 2>&1) | sed 's/^.*SortMeRNA version //; s/ Build Date.*\\$//')\n        END_VERSIONS\n        \"\"\"\n    }",
        "nb_lignes_script": 44,
        "language_script": "bash",
        "tools": [
            "SortMeRna"
        ],
        "tools_url": [
            "https://bio.tools/sortmerna"
        ],
        "tools_dico": [
            {
                "name": "SortMeRna",
                "uri": "https://bio.tools/sortmerna",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2451",
                                    "term": "Sequence comparison"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0346",
                                    "term": "Sequence similarity search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0258",
                                    "term": "Sequence alignment analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Sequence analysis tool for filtering, mapping and OTU-picking NGS reads.",
                "homepage": "http://bioinfo.lifl.fr/RNA/sortmerna/"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "fastas"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label \"process_high\"",
            "conda (params.enable_conda ? \"bioconda::sortmerna=4.3.4\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/sortmerna:4.3.4--h9ee0642_0' : 'quay.io/biocontainers/sortmerna:4.3.4--h9ee0642_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "BOWTIE2_ALIGN": {
        "name_process": "BOWTIE2_ALIGN",
        "string_process": "process BOWTIE2_ALIGN {\n    tag \"$meta.id\"\n    label \"process_high\"\n\n    conda (params.enable_conda ? \"bioconda::bowtie2=2.4.4 bioconda::samtools=1.15.1 conda-forge::pigz=2.6\" : null)\n    container \"${ workflow.containerEngine == \"singularity\" && !task.ext.singularity_pull_docker_container ?\n        \"https://depot.galaxyproject.org/singularity/mulled-v2-ac74a7f02cebcfcc07d8e8d1d750af9c83b4d45a:1744f68fe955578c63054b55309e05b41c37a80d-0\" :\n        \"quay.io/biocontainers/mulled-v2-ac74a7f02cebcfcc07d8e8d1d750af9c83b4d45a:1744f68fe955578c63054b55309e05b41c37a80d-0\" }\"\n\n    input:\n    tuple val(meta), path(reads)\n    path  index\n    val   save_unaligned\n    val   sort_bam\n\n    output:\n    tuple val(meta), path(\"*.bam\")    , emit: bam\n    tuple val(meta), path(\"*.log\")    , emit: log\n    tuple val(meta), path(\"*fastq.gz\"), emit: fastq, optional:true\n    path  \"versions.yml\"              , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: \"\"\n    def args2 = task.ext.args2 ?: \"\"\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n    def unaligned = \"\"\n    def reads_args = \"\"\n    if (meta.single_end) {\n        unaligned = save_unaligned ? \"--un-gz ${prefix}.unmapped.fastq.gz\" : \"\"\n        reads_args = \"-U ${reads}\"\n    } else {\n        unaligned = save_unaligned ? \"--un-conc-gz ${prefix}.unmapped.fastq.gz\" : \"\"\n        reads_args = \"-1 ${reads[0]} -2 ${reads[1]}\"\n    }\n\n    def samtools_command = sort_bam ? 'sort' : 'view'\n\n    \"\"\"\n    INDEX=`find -L ./ -name \"*.rev.1.bt2\" | sed \"s/.rev.1.bt2//\"`\n    [ -z \"\\$INDEX\" ] && INDEX=`find -L ./ -name \"*.rev.1.bt2l\" | sed \"s/.rev.1.bt2l//\"`\n    [ -z \"\\$INDEX\" ] && echo \"Bowtie2 index files not found\" 1>&2 && exit 1\n\n    bowtie2 \\\\\n        -x \\$INDEX \\\\\n        $reads_args \\\\\n        --threads $task.cpus \\\\\n        $unaligned \\\\\n        $args \\\\\n        2> ${prefix}.bowtie2.log \\\\\n        | samtools $samtools_command $args2 --threads $task.cpus -o ${prefix}.bam -\n\n    if [ -f ${prefix}.unmapped.fastq.1.gz ]; then\n        mv ${prefix}.unmapped.fastq.1.gz ${prefix}.unmapped_1.fastq.gz\n    fi\n\n    if [ -f ${prefix}.unmapped.fastq.2.gz ]; then\n        mv ${prefix}.unmapped.fastq.2.gz ${prefix}.unmapped_2.fastq.gz\n    fi\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bowtie2: \\$(echo \\$(bowtie2 --version 2>&1) | sed 's/^.*bowtie2-align-s version //; s/ .*\\$//')\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n        pigz: \\$( pigz --version 2>&1 | sed 's/pigz //g' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 69,
        "string_script": "    def args = task.ext.args ?: \"\"\n    def args2 = task.ext.args2 ?: \"\"\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n    def unaligned = \"\"\n    def reads_args = \"\"\n    if (meta.single_end) {\n        unaligned = save_unaligned ? \"--un-gz ${prefix}.unmapped.fastq.gz\" : \"\"\n        reads_args = \"-U ${reads}\"\n    } else {\n        unaligned = save_unaligned ? \"--un-conc-gz ${prefix}.unmapped.fastq.gz\" : \"\"\n        reads_args = \"-1 ${reads[0]} -2 ${reads[1]}\"\n    }\n\n    def samtools_command = sort_bam ? 'sort' : 'view'\n\n    \"\"\"\n    INDEX=`find -L ./ -name \"*.rev.1.bt2\" | sed \"s/.rev.1.bt2//\"`\n    [ -z \"\\$INDEX\" ] && INDEX=`find -L ./ -name \"*.rev.1.bt2l\" | sed \"s/.rev.1.bt2l//\"`\n    [ -z \"\\$INDEX\" ] && echo \"Bowtie2 index files not found\" 1>&2 && exit 1\n\n    bowtie2 \\\\\n        -x \\$INDEX \\\\\n        $reads_args \\\\\n        --threads $task.cpus \\\\\n        $unaligned \\\\\n        $args \\\\\n        2> ${prefix}.bowtie2.log \\\\\n        | samtools $samtools_command $args2 --threads $task.cpus -o ${prefix}.bam -\n\n    if [ -f ${prefix}.unmapped.fastq.1.gz ]; then\n        mv ${prefix}.unmapped.fastq.1.gz ${prefix}.unmapped_1.fastq.gz\n    fi\n\n    if [ -f ${prefix}.unmapped.fastq.2.gz ]; then\n        mv ${prefix}.unmapped.fastq.2.gz ${prefix}.unmapped_2.fastq.gz\n    fi\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bowtie2: \\$(echo \\$(bowtie2 --version 2>&1) | sed 's/^.*bowtie2-align-s version //; s/ .*\\$//')\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n        pigz: \\$( pigz --version 2>&1 | sed 's/pigz //g' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 44,
        "language_script": "bash",
        "tools": [
            "Rbowtie2",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/rbowtie2",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "Rbowtie2",
                "uri": "https://bio.tools/rbowtie2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0232",
                                    "term": "Sequence merging"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0232",
                                    "term": "Sequence splicing"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "This package provides an R wrapper of the popular bowtie2 sequencing reads aligner and AdapterRemoval, a convenient tool for rapid adapter trimming, identification, and read merging.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/Rbowtie2.html"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "index",
            "save_unaligned",
            "sort_bam"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label \"process_high\"",
            "conda (params.enable_conda ? \"bioconda::bowtie2=2.4.4 bioconda::samtools=1.15.1 conda-forge::pigz=2.6\" : null)",
            "container \"${ workflow.containerEngine == \"singularity\" && !task.ext.singularity_pull_docker_container ? \"https://depot.galaxyproject.org/singularity/mulled-v2-ac74a7f02cebcfcc07d8e8d1d750af9c83b4d45a:1744f68fe955578c63054b55309e05b41c37a80d-0\" : \"quay.io/biocontainers/mulled-v2-ac74a7f02cebcfcc07d8e8d1d750af9c83b4d45a:1744f68fe955578c63054b55309e05b41c37a80d-0\" }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "QUALIMAP_BAMQC": {
        "name_process": "QUALIMAP_BAMQC",
        "string_process": "process QUALIMAP_BAMQC {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::qualimap=2.2.2d\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/qualimap:2.2.2d--1' :\n        'quay.io/biocontainers/qualimap:2.2.2d--1' }\"\n\n    input:\n    tuple val(meta), path(bam)\n    path gff\n\n    output:\n    tuple val(meta), path(\"${prefix}\"), emit: results\n    path  \"versions.yml\"              , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args   ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n\n    def collect_pairs = meta.single_end ? '' : '--collect-overlap-pairs'\n    def memory     = task.memory.toGiga() + \"G\"\n    def regions = gff ? \"--gff $gff\" : ''\n\n    def strandedness = 'non-strand-specific'\n    if (meta.strandedness == 'forward') {\n        strandedness = 'strand-specific-forward'\n    } else if (meta.strandedness == 'reverse') {\n        strandedness = 'strand-specific-reverse'\n    }\n    \"\"\"\n    unset DISPLAY\n    mkdir tmp\n    export _JAVA_OPTIONS=-Djava.io.tmpdir=./tmp\n    qualimap \\\\\n        --java-mem-size=$memory \\\\\n        bamqc \\\\\n        $args \\\\\n        -bam $bam \\\\\n        $regions \\\\\n        -p $strandedness \\\\\n        $collect_pairs \\\\\n        -outdir $prefix \\\\\n        -nt $task.cpus\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        qualimap: \\$(echo \\$(qualimap 2>&1) | sed 's/^.*QualiMap v.//; s/Built.*\\$//')\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    prefix = task.ext.suffix ? \"${meta.id}${task.ext.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    mkdir -p $prefix/css\n    mkdir $prefix/images_qualimapReport\n    mkdir $prefix/raw_data_qualimapReport\n    cd $prefix/css\n    touch agogo.css\n    touch basic.css\n    touch bgtop.png\n    touch comment-close.png\n    touch doctools.js\n    touch down-pressed.png\n    touch jquery.js\n    touch plus.png\n    touch qualimap_logo_small.png\n    touch searchtools.js\n    touch up.png\n    touch websupport.js\n    touch ajax-loader.gif\n    touch bgfooter.png\n    touch comment-bright.png\n    touch comment.png\n    touch down.png\n    touch file.png\n    touch minus.png\n    touch pygments.css\n    touch report.css\n    touch underscore.js\n    touch up-pressed.png\n    cd ../images_qualimapReport/\n    touch genome_coverage_0to50_histogram.png\n    touch genome_coverage_quotes.png\n    touch genome_insert_size_across_reference.png\n    touch genome_mapping_quality_histogram.png\n    touch genome_uniq_read_starts_histogram.png\n    touch genome_coverage_across_reference.png\n    touch genome_gc_content_per_window.png\n    touch genome_insert_size_histogram.png\n    touch genome_reads_clipping_profile.png\n    touch genome_coverage_histogram.png\n    touch genome_homopolymer_indels.png\n    touch genome_mapping_quality_across_reference.png\n    touch genome_reads_content_per_read_position.png\n    cd ../raw_data_qualimapReport\n    touch coverage_across_reference.txt\n    touch genome_fraction_coverage.txt\n    touch insert_size_histogram.txt\n    touch mapped_reads_nucleotide_content.txt\n    touch coverage_histogram.txt\n    touch homopolymer_indels.txt\n    touch mapped_reads_clipping_profile.txt\n    touch mapping_quality_across_reference.txt\n    touch duplication_rate_histogram.txt\n    touch insert_size_across_reference.txt\n    touch mapped_reads_gc-content_distribution.txt\n    touch mapping_quality_histogram.txt\n    cd ../\n    touch genome_results.txt\n    touch qualimapReport.html\n    cd ../\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        qualimap: \\$(echo \\$(qualimap 2>&1) | sed 's/^.*QualiMap v.//; s/Built.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 121,
        "string_script": "    def args = task.ext.args   ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n\n    def collect_pairs = meta.single_end ? '' : '--collect-overlap-pairs'\n    def memory     = task.memory.toGiga() + \"G\"\n    def regions = gff ? \"--gff $gff\" : ''\n\n    def strandedness = 'non-strand-specific'\n    if (meta.strandedness == 'forward') {\n        strandedness = 'strand-specific-forward'\n    } else if (meta.strandedness == 'reverse') {\n        strandedness = 'strand-specific-reverse'\n    }\n    \"\"\"\n    unset DISPLAY\n    mkdir tmp\n    export _JAVA_OPTIONS=-Djava.io.tmpdir=./tmp\n    qualimap \\\\\n        --java-mem-size=$memory \\\\\n        bamqc \\\\\n        $args \\\\\n        -bam $bam \\\\\n        $regions \\\\\n        -p $strandedness \\\\\n        $collect_pairs \\\\\n        -outdir $prefix \\\\\n        -nt $task.cpus\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        qualimap: \\$(echo \\$(qualimap 2>&1) | sed 's/^.*QualiMap v.//; s/Built.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 32,
        "language_script": "bash",
        "tools": [
            "QualiMap"
        ],
        "tools_url": [
            "https://bio.tools/qualimap"
        ],
        "tools_dico": [
            {
                "name": "QualiMap",
                "uri": "https://bio.tools/qualimap",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Platform-independent application written in Java and R that provides both a Graphical User Inteface (GUI) and a command-line interface to facilitate the quality control of alignment sequencing data.",
                "homepage": "http://qualimap.bioinfo.cipf.es/"
            }
        ],
        "inputs": [
            "meta",
            "bam",
            "gff"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::qualimap=2.2.2d\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/qualimap:2.2.2d--1' : 'quay.io/biocontainers/qualimap:2.2.2d--1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    prefix = task.ext.suffix ? \"${meta.id}${task.ext.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    mkdir -p $prefix/css\n    mkdir $prefix/images_qualimapReport\n    mkdir $prefix/raw_data_qualimapReport\n    cd $prefix/css\n    touch agogo.css\n    touch basic.css\n    touch bgtop.png\n    touch comment-close.png\n    touch doctools.js\n    touch down-pressed.png\n    touch jquery.js\n    touch plus.png\n    touch qualimap_logo_small.png\n    touch searchtools.js\n    touch up.png\n    touch websupport.js\n    touch ajax-loader.gif\n    touch bgfooter.png\n    touch comment-bright.png\n    touch comment.png\n    touch down.png\n    touch file.png\n    touch minus.png\n    touch pygments.css\n    touch report.css\n    touch underscore.js\n    touch up-pressed.png\n    cd ../images_qualimapReport/\n    touch genome_coverage_0to50_histogram.png\n    touch genome_coverage_quotes.png\n    touch genome_insert_size_across_reference.png\n    touch genome_mapping_quality_histogram.png\n    touch genome_uniq_read_starts_histogram.png\n    touch genome_coverage_across_reference.png\n    touch genome_gc_content_per_window.png\n    touch genome_insert_size_histogram.png\n    touch genome_reads_clipping_profile.png\n    touch genome_coverage_histogram.png\n    touch genome_homopolymer_indels.png\n    touch genome_mapping_quality_across_reference.png\n    touch genome_reads_content_per_read_position.png\n    cd ../raw_data_qualimapReport\n    touch coverage_across_reference.txt\n    touch genome_fraction_coverage.txt\n    touch insert_size_histogram.txt\n    touch mapped_reads_nucleotide_content.txt\n    touch coverage_histogram.txt\n    touch homopolymer_indels.txt\n    touch mapped_reads_clipping_profile.txt\n    touch mapping_quality_across_reference.txt\n    touch duplication_rate_histogram.txt\n    touch insert_size_across_reference.txt\n    touch mapped_reads_gc-content_distribution.txt\n    touch mapping_quality_histogram.txt\n    cd ../\n    touch genome_results.txt\n    touch qualimapReport.html\n    cd ../\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        qualimap: \\$(echo \\$(qualimap 2>&1) | sed 's/^.*QualiMap v.//; s/Built.*\\$//')\n    END_VERSIONS\n    \"\"\""
    },
    "BISMARK_REPORT": {
        "name_process": "BISMARK_REPORT",
        "string_process": "process BISMARK_REPORT {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::bismark=0.23.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bismark:0.23.0--0' :\n        'quay.io/biocontainers/bismark:0.23.0--0' }\"\n\n    input:\n    tuple val(meta), path(align_report), path(dedup_report), path(splitting_report), path(mbias)\n\n    output:\n    tuple val(meta), path(\"*report.{html,txt}\"), emit: report\n    path  \"versions.yml\"                       , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    bismark2report $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bismark: \\$(echo \\$(bismark -v 2>&1) | sed 's/^.*Bismark Version: v//; s/Copyright.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    bismark2report $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bismark: \\$(echo \\$(bismark -v 2>&1) | sed 's/^.*Bismark Version: v//; s/Copyright.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "align_report",
            "dedup_report",
            "splitting_report",
            "mbias"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::bismark=0.23.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bismark:0.23.0--0' : 'quay.io/biocontainers/bismark:0.23.0--0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "SEQKIT_SPLIT2": {
        "name_process": "SEQKIT_SPLIT2",
        "string_process": "process SEQKIT_SPLIT2 {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? 'bioconda::seqkit=2.1.0' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/seqkit:2.1.0--h9ee0642_0' :\n        'quay.io/biocontainers/seqkit:2.1.0--h9ee0642_0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path(\"**/*.gz\"), emit: reads\n    path \"versions.yml\"             , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args   = task.ext.args   ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if(meta.single_end){\n        \"\"\"\n        seqkit \\\\\n            split2 \\\\\n            $args \\\\\n            --threads $task.cpus \\\\\n            $reads \\\\\n            --out-dir ${prefix}\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            seqkit: \\$(echo \\$(seqkit 2>&1) | sed 's/^.*Version: //; s/ .*\\$//')\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        seqkit \\\\\n            split2 \\\\\n            $args \\\\\n            --threads $task.cpus \\\\\n            --read1 ${reads[0]} \\\\\n            --read2 ${reads[1]} \\\\\n            --out-dir ${prefix}\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            seqkit: \\$(echo \\$(seqkit 2>&1) | sed 's/^.*Version: //; s/ .*\\$//')\n        END_VERSIONS\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 51,
        "string_script": "    def args   = task.ext.args   ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if(meta.single_end){\n        \"\"\"\n        seqkit \\\\\n            split2 \\\\\n            $args \\\\\n            --threads $task.cpus \\\\\n            $reads \\\\\n            --out-dir ${prefix}\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            seqkit: \\$(echo \\$(seqkit 2>&1) | sed 's/^.*Version: //; s/ .*\\$//')\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        seqkit \\\\\n            split2 \\\\\n            $args \\\\\n            --threads $task.cpus \\\\\n            --read1 ${reads[0]} \\\\\n            --read2 ${reads[1]} \\\\\n            --out-dir ${prefix}\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            seqkit: \\$(echo \\$(seqkit 2>&1) | sed 's/^.*Version: //; s/ .*\\$//')\n        END_VERSIONS\n        \"\"\"\n    }",
        "nb_lignes_script": 31,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? 'bioconda::seqkit=2.1.0' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/seqkit:2.1.0--h9ee0642_0' : 'quay.io/biocontainers/seqkit:2.1.0--h9ee0642_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "DELLY_CALL": {
        "name_process": "DELLY_CALL",
        "string_process": "process DELLY_CALL {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::delly=0.8.7\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/delly:0.8.7--he03298f_1' :\n        'quay.io/biocontainers/delly:0.8.7--he03298f_1' }\"\n\n    input:\n    tuple val(meta), path(bam), path(bai)\n    path fasta\n    path fai\n\n    output:\n    tuple val(meta), path(\"*.bcf\"), emit: bcf\n    tuple val(meta), path(\"*.csi\"), emit: csi\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    delly \\\\\n        call \\\\\n        $args \\\\\n        -o ${prefix}.bcf \\\\\n        -g  $fasta \\\\\n        $bam \\\\\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        delly: \\$( echo \\$(delly --version 2>&1) | sed 's/^.*Delly version: v//; s/ using.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 37,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    delly \\\\\n        call \\\\\n        $args \\\\\n        -o ${prefix}.bcf \\\\\n        -g  $fasta \\\\\n        $bam \\\\\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        delly: \\$( echo \\$(delly --version 2>&1) | sed 's/^.*Delly version: v//; s/ using.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "Delly2",
            "QCALL"
        ],
        "tools_url": [
            "https://bio.tools/delly2",
            "https://bio.tools/qcall"
        ],
        "tools_dico": [
            {
                "name": "Delly2",
                "uri": "https://bio.tools/delly2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3796",
                            "term": "Population genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "Pathology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "Structural variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "Disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "https://en.wikipedia.org/wiki/Pathology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "Genomic structural variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "DNA structural variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0452",
                                    "term": "Indel detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3228",
                                    "term": "Structural variation detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0452",
                                    "term": "Indel discovery"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0452",
                                    "term": "Sequence alignment analysis (indel detection)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3228",
                                    "term": "Structural variation discovery"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Sequence variation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Variant analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation annotation"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2977",
                                "term": "Nucleic acid sequence"
                            },
                            {
                                "uri": "http://edamontology.org/data_1383",
                                "term": "Nucleic acid sequence alignment"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Integrated structural variant prediction method that can discover, genotype and visualize deletions, tandem duplications, inversions and translocations at single-nucleotide resolution in short-read massively parallel sequencing data. It uses paired-ends and split-reads to sensitively and accurately delineate genomic rearrangements throughout the genome. Structural variants can be visualized using Delly-maze and Delly-suave.",
                "homepage": "https://github.com/dellytools/delly"
            },
            {
                "name": "QCALL",
                "uri": "https://bio.tools/qcall",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0484",
                                    "term": "SNP detection"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Sequence variation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Variant analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation annotation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0484",
                                    "term": "Single nucleotide polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0484",
                                    "term": "SNP discovery"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0484",
                                    "term": "SNP calling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "SNP detection and genotyping from low-coverage sequencing data on multiple diploid samples.",
                "homepage": "http://www.sanger.ac.uk/"
            }
        ],
        "inputs": [
            "meta",
            "bam",
            "bai",
            "fasta",
            "fai"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::delly=0.8.7\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/delly:0.8.7--he03298f_1' : 'quay.io/biocontainers/delly:0.8.7--he03298f_1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "CELLRANGER_MKGTF": {
        "name_process": "CELLRANGER_MKGTF",
        "string_process": "process CELLRANGER_MKGTF {\n    tag \"$gtf\"\n    label 'process_low'\n\n    if (params.enable_conda) {\n        exit 1, \"Conda environments cannot be used when using the Cell Ranger tool. Please use docker or singularity containers.\"\n    }\n    container \"nfcore/cellranger:6.1.2\"\n\n    input:\n    path gtf\n\n    output:\n    path \"*.filtered.gtf\", emit: gtf\n    path \"versions.yml\"  , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    cellranger \\\\\n        mkgtf \\\\\n        $gtf \\\\\n        ${gtf.baseName}.filtered.gtf \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        cellranger: \\$(echo \\$( cellranger --version 2>&1) | sed 's/^.*[^0-9]\\\\([0-9]*\\\\.[0-9]*\\\\.[0-9]*\\\\).*\\$/\\\\1/' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    cellranger \\\\\n        mkgtf \\\\\n        $gtf \\\\\n        ${gtf.baseName}.filtered.gtf \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        cellranger: \\$(echo \\$( cellranger --version 2>&1) | sed 's/^.*[^0-9]\\\\([0-9]*\\\\.[0-9]*\\\\.[0-9]*\\\\).*\\$/\\\\1/' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "gtf"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$gtf\"",
            "label 'process_low' if (params.enable_conda) { exit 1, \"Conda environments cannot be used when using the Cell Ranger tool. Please use docker or singularity containers.\" }",
            "container \"nfcore/cellranger:6.1.2\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "TRANSDECODER_LONGORF": {
        "name_process": "TRANSDECODER_LONGORF",
        "string_process": "process TRANSDECODER_LONGORF {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::transdecoder=5.5.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n    'https://depot.galaxyproject.org/singularity/transdecoder:5.5.0--pl5262hdfd78af_4' :\n    'quay.io/comp-bio-aging/transdecoder' }\"\n\n    input:\n    tuple val(meta), path(fasta)\n\n    output:\n    tuple val(meta), path(\"${meta.id}/*.pep\") , emit: pep\n    tuple val(meta), path(\"${meta.id}/*.gff3\"), emit: gff3\n    tuple val(meta), path(\"${meta.id}/*.cds\") , emit: cds\n    tuple val(meta), path(\"${meta.id}/*.dat\") , emit: dat\n    path(\"${meta.id}/\")                       , emit: folder\n    path \"versions.yml\"                       , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n    \"\"\"\n    TransDecoder.LongOrfs \\\\\n        $args \\\\\n        -O $prefix \\\\\n        -t \\\\\n        $fasta\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        transdecoder: \\$(echo \\$(TransDecoder.LongOrfs --version) | sed -e \"s/TransDecoder.LongOrfs //g\")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 38,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n    \"\"\"\n    TransDecoder.LongOrfs \\\\\n        $args \\\\\n        -O $prefix \\\\\n        -t \\\\\n        $fasta\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        transdecoder: \\$(echo \\$(TransDecoder.LongOrfs --version) | sed -e \"s/TransDecoder.LongOrfs //g\")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "fasta"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::transdecoder=5.5.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/transdecoder:5.5.0--pl5262hdfd78af_4' : 'quay.io/comp-bio-aging/transdecoder' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "LAST_LASTDB": {
        "name_process": "LAST_LASTDB",
        "string_process": "process LAST_LASTDB {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? 'bioconda::last=1250' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/last:1250--h2e03b76_0' :\n        'quay.io/biocontainers/last:1250--h2e03b76_0' }\"\n\n    input:\n    tuple val(meta), path(fastx)\n\n    output:\n    tuple val(meta), path(\"lastdb\"), emit: index\n    path \"versions.yml\"            , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    mkdir lastdb\n    lastdb \\\\\n        $args \\\\\n        -P $task.cpus \\\\\n        lastdb/${prefix} \\\\\n        $fastx\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        last: \\$(lastdb --version 2>&1 | sed 's/lastdb //')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    mkdir lastdb\n    lastdb \\\\\n        $args \\\\\n        -P $task.cpus \\\\\n        lastdb/${prefix} \\\\\n        $fastx\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        last: \\$(lastdb --version 2>&1 | sed 's/lastdb //')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "fastx"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? 'bioconda::last=1250' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/last:1250--h2e03b76_0' : 'quay.io/biocontainers/last:1250--h2e03b76_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "BCFTOOLS_NORM": {
        "name_process": "BCFTOOLS_NORM",
        "string_process": "process BCFTOOLS_NORM {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? 'bioconda::bcftools=1.14' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bcftools:1.14--h88f3f91_0' :\n        'quay.io/biocontainers/bcftools:1.14--h88f3f91_0' }\"\n\n    input:\n    tuple val(meta), path(vcf)\n    path(fasta)\n\n    output:\n    tuple val(meta), path(\"*.gz\") , emit: vcf\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    bcftools norm \\\\\n        --fasta-ref ${fasta} \\\\\n        --output ${prefix}.vcf.gz \\\\\n        $args \\\\\n        --threads $task.cpus \\\\\n        ${vcf}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bcftools: \\$(bcftools --version 2>&1 | head -n1 | sed 's/^.*bcftools //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.vcf.gz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bcftools: \\$(bcftools --version 2>&1 | head -n1 | sed 's/^.*bcftools //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 46,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    bcftools norm \\\\\n        --fasta-ref ${fasta} \\\\\n        --output ${prefix}.vcf.gz \\\\\n        $args \\\\\n        --threads $task.cpus \\\\\n        ${vcf}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bcftools: \\$(bcftools --version 2>&1 | head -n1 | sed 's/^.*bcftools //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "BCFtools"
        ],
        "tools_url": [
            "https://bio.tools/bcftools"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "vcf",
            "fasta"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? 'bioconda::bcftools=1.14' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bcftools:1.14--h88f3f91_0' : 'quay.io/biocontainers/bcftools:1.14--h88f3f91_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.vcf.gz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bcftools: \\$(bcftools --version 2>&1 | head -n1 | sed 's/^.*bcftools //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\""
    },
    "GATK4_GATHERBQSRREPORTS": {
        "name_process": "GATK4_GATHERBQSRREPORTS",
        "string_process": "process GATK4_GATHERBQSRREPORTS {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::gatk4=4.2.6.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/gatk4:4.2.6.1--hdfd78af_0':\n        'quay.io/biocontainers/gatk4:4.2.6.1--hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(table)\n\n    output:\n    tuple val(meta), path(\"*.table\"), emit: table\n    path \"versions.yml\"             , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def input_list = table.collect{\"--input $it\"}.join(' ')\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[GATK GatherBQSRReports] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    gatk --java-options \"-Xmx${avail_mem}g\" GatherBQSRReports \\\\\n        $input_list \\\\\n        --output ${prefix}.table \\\\\n        --tmp-dir . \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 41,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def input_list = table.collect{\"--input $it\"}.join(' ')\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[GATK GatherBQSRReports] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    gatk --java-options \"-Xmx${avail_mem}g\" GatherBQSRReports \\\\\n        $input_list \\\\\n        --output ${prefix}.table \\\\\n        --tmp-dir . \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 21,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "meta",
            "table"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::gatk4=4.2.6.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/gatk4:4.2.6.1--hdfd78af_0': 'quay.io/biocontainers/gatk4:4.2.6.1--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "GATK4_SELECTVARIANTS": {
        "name_process": "GATK4_SELECTVARIANTS",
        "string_process": "process GATK4_SELECTVARIANTS {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::gatk4=4.2.6.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/gatk4:4.2.6.1--hdfd78af_0':\n        'quay.io/biocontainers/gatk4:4.2.6.1--hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(vcf), path(vcf_idx)\n\n    output:\n    tuple val(meta), path(\"*.selectvariants.vcf.gz\")       , emit: vcf\n    tuple val(meta), path(\"*.selectvariants.vcf.gz.tbi\")   , emit: tbi\n    path \"versions.yml\"\t\t                               , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[GATK VariantFiltration] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.toGiga()\n    }\n    \"\"\"\n    gatk --java-options \"-Xmx${avail_mem}G\" SelectVariants \\\\\n        --variant $vcf \\\\\n        --output ${prefix}.selectvariants.vcf.gz \\\\\n        --tmp-dir . \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 41,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[GATK VariantFiltration] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.toGiga()\n    }\n    \"\"\"\n    gatk --java-options \"-Xmx${avail_mem}G\" SelectVariants \\\\\n        --variant $vcf \\\\\n        --output ${prefix}.selectvariants.vcf.gz \\\\\n        --tmp-dir . \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 20,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "meta",
            "vcf",
            "vcf_idx"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::gatk4=4.2.6.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/gatk4:4.2.6.1--hdfd78af_0': 'quay.io/biocontainers/gatk4:4.2.6.1--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "DIAMOND_BLASTX": {
        "name_process": "DIAMOND_BLASTX",
        "string_process": "process DIAMOND_BLASTX {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::diamond=2.0.15\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/diamond:2.0.15--hb97b32f_0' :\n        'quay.io/biocontainers/diamond:2.0.15--hb97b32f_0' }\"\n\n    input:\n    tuple val(meta), path(fasta)\n    path db\n    val out_ext\n    val blast_columns\n\n    output:\n    tuple val(meta), path('*.blast'), optional: true, emit: blast\n    tuple val(meta), path('*.xml')  , optional: true, emit: xml\n    tuple val(meta), path('*.txt')  , optional: true, emit: txt\n    tuple val(meta), path('*.daa')  , optional: true, emit: daa\n    tuple val(meta), path('*.sam')  , optional: true, emit: sam\n    tuple val(meta), path('*.tsv')  , optional: true, emit: tsv\n    tuple val(meta), path('*.paf')  , optional: true, emit: paf\n    path \"versions.yml\"                               , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def columns = blast_columns ? \"${blast_columns}\" : ''\n    switch ( out_ext ) {\n        case \"blast\": outfmt = 0; break\n        case \"xml\": outfmt = 5; break\n        case \"txt\": outfmt = 6; break\n        case \"daa\": outfmt = 100; break\n        case \"sam\": outfmt = 101; break\n        case \"tsv\": outfmt = 102; break\n        case \"paf\": outfmt = 103; break\n        default:\n            outfmt = '6';\n            out_ext = 'txt';\n            log.warn(\"Unknown output file format provided (${out_ext}): selecting DIAMOND default of tabular BLAST output (txt)\");\n            break\n    }\n    \"\"\"\n    DB=`find -L ./ -name \"*.dmnd\" | sed 's/.dmnd//'`\n\n    diamond \\\\\n        blastx \\\\\n        --threads $task.cpus \\\\\n        --db \\$DB \\\\\n        --query $fasta \\\\\n        --outfmt ${outfmt} ${columns} \\\\\n        $args \\\\\n        --out ${prefix}.${out_ext}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        diamond: \\$(diamond --version 2>&1 | tail -n 1 | sed 's/^diamond version //')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 62,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def columns = blast_columns ? \"${blast_columns}\" : ''\n    switch ( out_ext ) {\n        case \"blast\": outfmt = 0; break\n        case \"xml\": outfmt = 5; break\n        case \"txt\": outfmt = 6; break\n        case \"daa\": outfmt = 100; break\n        case \"sam\": outfmt = 101; break\n        case \"tsv\": outfmt = 102; break\n        case \"paf\": outfmt = 103; break\n        default:\n            outfmt = '6';\n            out_ext = 'txt';\n            log.warn(\"Unknown output file format provided (${out_ext}): selecting DIAMOND default of tabular BLAST output (txt)\");\n            break\n    }\n    \"\"\"\n    DB=`find -L ./ -name \"*.dmnd\" | sed 's/.dmnd//'`\n\n    diamond \\\\\n        blastx \\\\\n        --threads $task.cpus \\\\\n        --db \\$DB \\\\\n        --query $fasta \\\\\n        --outfmt ${outfmt} ${columns} \\\\\n        $args \\\\\n        --out ${prefix}.${out_ext}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        diamond: \\$(diamond --version 2>&1 | tail -n 1 | sed 's/^diamond version //')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 33,
        "language_script": "bash",
        "tools": [
            "oswitch",
            "CASE",
            "BreakSeq",
            "Diamond"
        ],
        "tools_url": [
            "https://bio.tools/oswitch",
            "https://bio.tools/CASE",
            "https://bio.tools/breakseq",
            "https://bio.tools/diamond"
        ],
        "tools_dico": [
            {
                "name": "oswitch",
                "uri": "https://bio.tools/oswitch",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3760",
                                    "term": "Service management"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Provides quick and simple Docker based virtual environments on Macs and compute clusters alike for reproducible bioinformatics.",
                "homepage": "https://github.com/wurmlab/oswitch"
            },
            {
                "name": "CASE",
                "uri": "https://bio.tools/CASE",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0749",
                            "term": "Transcription factors and regulatory sites"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Model organisms"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0089",
                            "term": "Ontology and terminology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Organisms"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3436",
                                    "term": "Aggregation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3435",
                                    "term": "Standardisation and normalisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3559",
                                    "term": "Ontology visualisation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3559",
                                    "term": "Ontology browsing"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Advancing Coordinated Cyber-investigations and Tool Interoperability using a Community Developed Specification Language.\n\nSource files for the CASE website.\n\nAPI used for instantiating CASE objects (includes ontological verification and type checking).\n\nCyber-investigation Analysis Standard Expression (CASE).\n\nRead the CASE Wiki tab to learn everything you need to know about the Cyber-investigation Analysis Standard Expression (CASE) ontology. For learning about the Unified Cyber Ontology, CASE's parent, see UCO.\n\n\"@vocab\": \"http://case.example.org/core#\",.\n\nDET ER DINE PENGER DET DREIER SEG OM...\n\nVi er ikke st\ufffdrst, men garanterer effektiv behandling.\n\nLast ned v\ufffdr brosjyre i PDF format.\n\n||| COMMON LINK WITH (PUB. & NAME DIFFERENT) bio.tools/pymzml (GITHUB.COM).\n\n||| CORRECT NAME OF TOOL COULD ALSO BE 'UCO', 'cyber-investigation', 'cyber-investigations', 'plaso'",
                "homepage": "http://CASE.as"
            },
            {
                "name": "BreakSeq",
                "uri": "https://bio.tools/breakseq",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "Structural variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "Genomic structural variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "DNA structural variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Database of known human breakpoint junctions and software to search short reads against them.",
                "homepage": "http://sv.gersteinlab.org/breakseq/"
            },
            {
                "name": "Diamond",
                "uri": "https://bio.tools/diamond",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Proteins"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein informatics"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0258",
                                    "term": "Sequence alignment analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Sequence aligner for protein and translated DNA searches and functions as a drop-in replacement for the NCBI BLAST software tools. It is suitable for protein-protein search as well as DNA-protein search on short reads and longer sequences including contigs and assemblies, providing a speedup of BLAST ranging up to x20,000.",
                "homepage": "https://github.com/bbuchfink/diamond"
            }
        ],
        "inputs": [
            "meta",
            "fasta",
            "db",
            "out_ext",
            "blast_columns"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::diamond=2.0.15\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/diamond:2.0.15--hb97b32f_0' : 'quay.io/biocontainers/diamond:2.0.15--hb97b32f_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "SAMTOOLS_STATS": {
        "name_process": "SAMTOOLS_STATS",
        "string_process": "process SAMTOOLS_STATS {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::samtools=1.15.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/samtools:1.15.1--h1170115_0' :\n        'quay.io/biocontainers/samtools:1.15.1--h1170115_0' }\"\n\n    input:\n    tuple val(meta), path(input), path(input_index)\n    path fasta\n\n    output:\n    tuple val(meta), path(\"*.stats\"), emit: stats\n    path  \"versions.yml\"            , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def reference = fasta ? \"--reference ${fasta}\" : \"\"\n    \"\"\"\n    samtools \\\\\n        stats \\\\\n        --threads ${task.cpus-1} \\\\\n        ${reference} \\\\\n        ${input} \\\\\n        > ${input}.stats\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${input}.stats\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 46,
        "string_script": "    def args = task.ext.args ?: ''\n    def reference = fasta ? \"--reference ${fasta}\" : \"\"\n    \"\"\"\n    samtools \\\\\n        stats \\\\\n        --threads ${task.cpus-1} \\\\\n        ${reference} \\\\\n        ${input} \\\\\n        > ${input}.stats\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "SAMtools",
            "GOstats"
        ],
        "tools_url": [
            "https://bio.tools/samtools",
            "https://bio.tools/gostats"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "GOstats",
                "uri": "https://bio.tools/gostats",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0089",
                            "term": "Ontology and terminology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2436",
                                    "term": "Gene-set enrichment analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2436",
                                    "term": "GSEA"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2436",
                                    "term": "Functional enrichment analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2436",
                                    "term": "Gene-set over-represenation analysis"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2603",
                                "term": "Expression data"
                            },
                            {
                                "uri": "http://edamontology.org/data_0582",
                                "term": "Ontology"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2884",
                                "term": "Plot"
                            },
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            },
                            {
                                "uri": "http://edamontology.org/data_1772",
                                "term": "Score"
                            }
                        ]
                    }
                ],
                "description": "A set of tools for interacting with GO and microarray data. A variety of basic manipulation tools for graphs, hypothesis testing and other simple calculations.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/GOstats.html"
            }
        ],
        "inputs": [
            "meta",
            "input",
            "input_index",
            "fasta"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::samtools=1.15.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/samtools:1.15.1--h1170115_0' : 'quay.io/biocontainers/samtools:1.15.1--h1170115_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${input}.stats\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\""
    },
    "PICARD_FILTERSAMREADS": {
        "name_process": "PICARD_FILTERSAMREADS",
        "string_process": "process PICARD_FILTERSAMREADS {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::picard=2.27.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/picard:2.27.1--hdfd78af_0' :\n        'quay.io/biocontainers/picard:2.27.1--hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(bam), path(readlist)\n    val filter\n\n    output:\n    tuple val(meta), path(\"*.bam\"), emit: bam\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[Picard FilterSamReads] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    if ( filter == 'includeAligned' || filter == 'excludeAligned' ) {\n        \"\"\"\n        picard \\\\\n            FilterSamReads \\\\\n            -Xmx${avail_mem}g \\\\\n            --INPUT $bam \\\\\n            --OUTPUT ${prefix}.bam \\\\\n            --FILTER $filter \\\\\n            $args\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            picard: \\$(picard FilterSamReads --version 2>&1 | grep -o 'Version:.*' | cut -f2- -d:)\n        END_VERSIONS\n        \"\"\"\n    } else if ( filter == 'includeReadList' || filter == 'excludeReadList' ) {\n        \"\"\"\n        picard \\\\\n            FilterSamReads \\\\\n            -Xmx${avail_mem}g \\\\\n            --INPUT $bam \\\\\n            --OUTPUT ${prefix}.bam \\\\\n            --FILTER $filter \\\\\n            --READ_LIST_FILE $readlist \\\\\n            $args\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            picard: \\$(picard FilterSamReads --version 2>&1 | grep -o 'Version:.*' | cut -f2- -d:)\n        END_VERSIONS\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 60,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[Picard FilterSamReads] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    if ( filter == 'includeAligned' || filter == 'excludeAligned' ) {\n        \"\"\"\n        picard \\\\\n            FilterSamReads \\\\\n            -Xmx${avail_mem}g \\\\\n            --INPUT $bam \\\\\n            --OUTPUT ${prefix}.bam \\\\\n            --FILTER $filter \\\\\n            $args\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            picard: \\$(picard FilterSamReads --version 2>&1 | grep -o 'Version:.*' | cut -f2- -d:)\n        END_VERSIONS\n        \"\"\"\n    } else if ( filter == 'includeReadList' || filter == 'excludeReadList' ) {\n        \"\"\"\n        picard \\\\\n            FilterSamReads \\\\\n            -Xmx${avail_mem}g \\\\\n            --INPUT $bam \\\\\n            --OUTPUT ${prefix}.bam \\\\\n            --FILTER $filter \\\\\n            --READ_LIST_FILE $readlist \\\\\n            $args\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            picard: \\$(picard FilterSamReads --version 2>&1 | grep -o 'Version:.*' | cut -f2- -d:)\n        END_VERSIONS\n        \"\"\"\n    }",
        "nb_lignes_script": 39,
        "language_script": "bash",
        "tools": [
            "Filter",
            "Picard"
        ],
        "tools_url": [
            "https://bio.tools/filter",
            "https://bio.tools/picard_tools"
        ],
        "tools_dico": [
            {
                "name": "Filter",
                "uri": "https://bio.tools/filter",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3187",
                                    "term": "Sequence contamination filtering"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Produce a filtered version of an sRNA dataset, controlled by several user-defined criteria, including sequence length, abundance, complexity, transfer and ribosomal RNA removal.",
                "homepage": "http://srna-workbench.cmp.uea.ac.uk/filter-2/"
            },
            {
                "name": "Picard",
                "uri": "https://bio.tools/picard_tools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Sequence variation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Variant analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation annotation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A set of command line tools for manipulating high-throughput sequencing (HTS) data in formats such as SAM/BAM/CRAM and VCF. Available as a standalone program or within the GATK4 program.",
                "homepage": "https://github.com/broadinstitute/picard"
            }
        ],
        "inputs": [
            "meta",
            "bam",
            "readlist",
            "filter"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::picard=2.27.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/picard:2.27.1--hdfd78af_0' : 'quay.io/biocontainers/picard:2.27.1--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "LAST_SPLIT": {
        "name_process": "LAST_SPLIT",
        "string_process": "process LAST_SPLIT {\n    tag \"$meta.id\"\n    label 'process_high'\n\n    conda (params.enable_conda ? 'bioconda::last=1250' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/last:1250--h2e03b76_0' :\n        'quay.io/biocontainers/last:1250--h2e03b76_0' }\"\n\n    input:\n    tuple val(meta), path(maf)\n\n    output:\n    tuple val(meta), path(\"*.maf.gz\"), emit: maf\n    path \"versions.yml\"              , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    zcat < $maf | last-split $args | gzip --no-name > ${prefix}.maf.gz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        last: \\$(last-split --version 2>&1 | sed 's/last-split //')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    zcat < $maf | last-split $args | gzip --no-name > ${prefix}.maf.gz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        last: \\$(last-split --version 2>&1 | sed 's/last-split //')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "maf"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "conda (params.enable_conda ? 'bioconda::last=1250' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/last:1250--h2e03b76_0' : 'quay.io/biocontainers/last:1250--h2e03b76_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "RASUSA": {
        "name_process": "RASUSA",
        "string_process": "process RASUSA {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::rasusa=0.3.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/rasusa:0.3.0--h779adbc_1' :\n        'quay.io/biocontainers/rasusa:0.3.0--h779adbc_1' }\"\n\n    input:\n    tuple val(meta), path(reads), val(genome_size)\n    val   depth_cutoff\n\n    output:\n    tuple val(meta), path('*.fastq.gz'), emit: reads\n    path \"versions.yml\"                , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def output   = meta.single_end ? \"--output ${prefix}.fastq.gz\" : \"--output ${prefix}_1.fastq.gz ${prefix}_2.fastq.gz\"\n    \"\"\"\n    rasusa \\\\\n        $args \\\\\n        --coverage $depth_cutoff \\\\\n        --genome-size $genome_size \\\\\n        --input $reads \\\\\n        $output\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        rasusa: \\$(rasusa --version 2>&1 | sed -e \"s/rasusa //g\")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def output   = meta.single_end ? \"--output ${prefix}.fastq.gz\" : \"--output ${prefix}_1.fastq.gz ${prefix}_2.fastq.gz\"\n    \"\"\"\n    rasusa \\\\\n        $args \\\\\n        --coverage $depth_cutoff \\\\\n        --genome-size $genome_size \\\\\n        --input $reads \\\\\n        $output\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        rasusa: \\$(rasusa --version 2>&1 | sed -e \"s/rasusa //g\")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "genome_size",
            "reads",
            "depth_cutoff"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::rasusa=0.3.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/rasusa:0.3.0--h779adbc_1' : 'quay.io/biocontainers/rasusa:0.3.0--h779adbc_1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "LAST_MAFCONVERT": {
        "name_process": "LAST_MAFCONVERT",
        "string_process": "process LAST_MAFCONVERT {\n    tag \"$meta.id\"\n    label 'process_high'\n\n    conda (params.enable_conda ? 'bioconda::last=1250' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/last:1250--h2e03b76_0' :\n        'quay.io/biocontainers/last:1250--h2e03b76_0' }\"\n\n    input:\n    tuple val(meta), path(maf)\n    val(format)\n\n    output:\n    tuple val(meta), path(\"*.axt.gz\"),      optional:true, emit: axt_gz\n    tuple val(meta), path(\"*.blast.gz\"),    optional:true, emit: blast_gz\n    tuple val(meta), path(\"*.blasttab.gz\"), optional:true, emit: blasttab_gz\n    tuple val(meta), path(\"*.chain.gz\"),    optional:true, emit: chain_gz\n    tuple val(meta), path(\"*.gff.gz\"),      optional:true, emit: gff_gz\n    tuple val(meta), path(\"*.html.gz\"),     optional:true, emit: html_gz\n    tuple val(meta), path(\"*.psl.gz\"),      optional:true, emit: psl_gz\n    tuple val(meta), path(\"*.sam.gz\"),      optional:true, emit: sam_gz\n    tuple val(meta), path(\"*.tab.gz\"),      optional:true, emit: tab_gz\n    path \"versions.yml\"                                  , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    maf-convert $args $format $maf | gzip --no-name \\\\\n        > ${prefix}.${format}.gz\n\n    # maf-convert has no --version option but lastdb (part of the same package) has.\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        last: \\$(lastdb --version 2>&1 | sed 's/lastdb //')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 40,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    maf-convert $args $format $maf | gzip --no-name \\\\\n        > ${prefix}.${format}.gz\n\n    # maf-convert has no --version option but lastdb (part of the same package) has.\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        last: \\$(lastdb --version 2>&1 | sed 's/lastdb //')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "maf",
            "format"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "conda (params.enable_conda ? 'bioconda::last=1250' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/last:1250--h2e03b76_0' : 'quay.io/biocontainers/last:1250--h2e03b76_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "HOMER_MAKEUCSCFILE": {
        "name_process": "HOMER_MAKEUCSCFILE",
        "string_process": "\nprocess HOMER_MAKEUCSCFILE {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::homer=4.11=pl526hc9558a2_3\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/homer:4.11--pl526hc9558a2_3' :\n        'quay.io/biocontainers/homer:4.11--pl526hc9558a2_3' }\"\n\n    input:\n    tuple val(meta), path(tagDir)\n\n    output:\n    tuple val(meta), path(\"*.bedGraph.gz\"), emit: bedGraph\n    path  \"versions.yml\"                  , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    makeUCSCfile \\\\\n        $tagDir \\\\\n        -o ${prefix}.bedGraph \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        homer: $VERSION\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    makeUCSCfile \\\\\n        $tagDir \\\\\n        -o ${prefix}.bedGraph \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        homer: $VERSION\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "tagDir"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::homer=4.11=pl526hc9558a2_3\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/homer:4.11--pl526hc9558a2_3' : 'quay.io/biocontainers/homer:4.11--pl526hc9558a2_3' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "FARGENE": {
        "name_process": "FARGENE",
        "string_process": "\nprocess FARGENE {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::fargene=0.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/fargene:0.1--py27h21c881e_4' :\n        'quay.io/biocontainers/fargene:0.1--py27h21c881e_4' }\"\n\n    input:\n                                                                                                                                       \n    tuple val(meta), path(input)\n    val hmm_model\n\n    output:\n    path \"*.log\"                                                                                 , emit: log\n    path \"${prefix}/results_summary.txt\"                                                         , emit: txt\n    tuple val(meta), path(\"${prefix}/hmmsearchresults/*.out\")                                    , optional: true, emit: hmm\n    tuple val(meta), path(\"${prefix}/predictedGenes/predicted-orfs.fasta\")                       , optional: true, emit: orfs\n    tuple val(meta), path(\"${prefix}/predictedGenes/predicted-orfs-amino.fasta\")                 , optional: true, emit: orfs_amino\n    tuple val(meta), path(\"${prefix}/predictedGenes/retrieved-contigs.fasta\")                    , optional: true, emit: contigs\n    tuple val(meta), path(\"${prefix}/predictedGenes/retrieved-contigs-peptides.fasta\")           , optional: true, emit: contigs_pept\n    tuple val(meta), path(\"${prefix}/predictedGenes/*filtered.fasta\")                            , optional: true, emit: filtered\n    tuple val(meta), path(\"${prefix}/predictedGenes/*filtered-peptides.fasta\")                   , optional: true, emit: filtered_pept\n    tuple val(meta), path(\"${prefix}/retrievedFragments/all_retrieved_*.fastq\")                  , optional: true, emit: fragments\n    tuple val(meta), path(\"${prefix}/retrievedFragments/retrievedFragments/trimmedReads/*.fasta\"), optional: true, emit: trimmed\n    tuple val(meta), path(\"${prefix}/spades_assembly/*\")                                         , optional: true, emit: spades\n    tuple val(meta), path(\"${prefix}/tmpdir/*.fasta\")                                            , optional: true, emit: metagenome\n    tuple val(meta), path(\"${prefix}/tmpdir/*.out\")                                              , optional: true, emit: tmp\n    path \"versions.yml\"                                                                          , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args   ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    fargene \\\\\n        $args \\\\\n        -p $task.cpus \\\\\n        -i $input \\\\\n        --hmm-model $hmm_model \\\\\n        -o $prefix\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        fargene: $VERSION\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 50,
        "string_script": "    def args = task.ext.args   ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    fargene \\\\\n        $args \\\\\n        -p $task.cpus \\\\\n        -i $input \\\\\n        --hmm-model $hmm_model \\\\\n        -o $prefix\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        fargene: $VERSION\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "input",
            "hmm_model"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::fargene=0.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/fargene:0.1--py27h21c881e_4' : 'quay.io/biocontainers/fargene:0.1--py27h21c881e_4' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "TRIMGALORE": {
        "name_process": "TRIMGALORE",
        "string_process": "process TRIMGALORE {\n    tag \"$meta.id\"\n    label 'process_high'\n\n    conda (params.enable_conda ? 'bioconda::trim-galore=0.6.7' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/trim-galore:0.6.7--hdfd78af_0' :\n        'quay.io/biocontainers/trim-galore:0.6.7--hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path(\"*{trimmed,val}*.fq.gz\"), emit: reads\n    tuple val(meta), path(\"*report.txt\")          , emit: log\n    path \"versions.yml\"                           , emit: versions\n\n    tuple val(meta), path(\"*unpaired*.fq.gz\")     , emit: unpaired, optional: true\n    tuple val(meta), path(\"*.html\")               , emit: html    , optional: true\n    tuple val(meta), path(\"*.zip\")                , emit: zip     , optional: true\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n                                                                             \n                                                                                                                 \n                                                      \n    def cores = 1\n    if (task.cpus) {\n        cores = (task.cpus as int) - 4\n        if (meta.single_end) cores = (task.cpus as int) - 3\n        if (cores < 1) cores = 1\n        if (cores > 4) cores = 4\n    }\n\n                                                                    \n    def c_r1   = params.clip_r1 > 0             ? \"--clip_r1 ${params.clip_r1}\"                         : ''\n    def c_r2   = params.clip_r2 > 0             ? \"--clip_r2 ${params.clip_r2}\"                         : ''\n    def tpc_r1 = params.three_prime_clip_r1 > 0 ? \"--three_prime_clip_r1 ${params.three_prime_clip_r1}\" : ''\n    def tpc_r2 = params.three_prime_clip_r2 > 0 ? \"--three_prime_clip_r2 ${params.three_prime_clip_r2}\" : ''\n\n                                                                           \n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (meta.single_end) {\n        \"\"\"\n        [ ! -f  ${prefix}.fastq.gz ] && ln -s $reads ${prefix}.fastq.gz\n        trim_galore \\\\\n            $args \\\\\n            --cores $cores \\\\\n            --gzip \\\\\n            $c_r1 \\\\\n            $tpc_r1 \\\\\n            ${prefix}.fastq.gz\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            trimgalore: \\$(echo \\$(trim_galore --version 2>&1) | sed 's/^.*version //; s/Last.*\\$//')\n            cutadapt: \\$(cutadapt --version)\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        [ ! -f  ${prefix}_1.fastq.gz ] && ln -s ${reads[0]} ${prefix}_1.fastq.gz\n        [ ! -f  ${prefix}_2.fastq.gz ] && ln -s ${reads[1]} ${prefix}_2.fastq.gz\n        trim_galore \\\\\n            $args \\\\\n            --cores $cores \\\\\n            --paired \\\\\n            --gzip \\\\\n            $c_r1 \\\\\n            $c_r2 \\\\\n            $tpc_r1 \\\\\n            $tpc_r2 \\\\\n            ${prefix}_1.fastq.gz \\\\\n            ${prefix}_2.fastq.gz\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            trimgalore: \\$(echo \\$(trim_galore --version 2>&1) | sed 's/^.*version //; s/Last.*\\$//')\n            cutadapt: \\$(cutadapt --version)\n        END_VERSIONS\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 84,
        "string_script": "    def args = task.ext.args ?: ''\n                                                                             \n                                                                                                                 \n                                                      \n    def cores = 1\n    if (task.cpus) {\n        cores = (task.cpus as int) - 4\n        if (meta.single_end) cores = (task.cpus as int) - 3\n        if (cores < 1) cores = 1\n        if (cores > 4) cores = 4\n    }\n\n                                                                    \n    def c_r1   = params.clip_r1 > 0             ? \"--clip_r1 ${params.clip_r1}\"                         : ''\n    def c_r2   = params.clip_r2 > 0             ? \"--clip_r2 ${params.clip_r2}\"                         : ''\n    def tpc_r1 = params.three_prime_clip_r1 > 0 ? \"--three_prime_clip_r1 ${params.three_prime_clip_r1}\" : ''\n    def tpc_r2 = params.three_prime_clip_r2 > 0 ? \"--three_prime_clip_r2 ${params.three_prime_clip_r2}\" : ''\n\n                                                                           \n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (meta.single_end) {\n        \"\"\"\n        [ ! -f  ${prefix}.fastq.gz ] && ln -s $reads ${prefix}.fastq.gz\n        trim_galore \\\\\n            $args \\\\\n            --cores $cores \\\\\n            --gzip \\\\\n            $c_r1 \\\\\n            $tpc_r1 \\\\\n            ${prefix}.fastq.gz\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            trimgalore: \\$(echo \\$(trim_galore --version 2>&1) | sed 's/^.*version //; s/Last.*\\$//')\n            cutadapt: \\$(cutadapt --version)\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        [ ! -f  ${prefix}_1.fastq.gz ] && ln -s ${reads[0]} ${prefix}_1.fastq.gz\n        [ ! -f  ${prefix}_2.fastq.gz ] && ln -s ${reads[1]} ${prefix}_2.fastq.gz\n        trim_galore \\\\\n            $args \\\\\n            --cores $cores \\\\\n            --paired \\\\\n            --gzip \\\\\n            $c_r1 \\\\\n            $c_r2 \\\\\n            $tpc_r1 \\\\\n            $tpc_r2 \\\\\n            ${prefix}_1.fastq.gz \\\\\n            ${prefix}_2.fastq.gz\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            trimgalore: \\$(echo \\$(trim_galore --version 2>&1) | sed 's/^.*version //; s/Last.*\\$//')\n            cutadapt: \\$(cutadapt --version)\n        END_VERSIONS\n        \"\"\"\n    }",
        "nb_lignes_script": 59,
        "language_script": "bash",
        "tools": [
            "CoreSlicer"
        ],
        "tools_url": [
            "https://bio.tools/CoreSlicer"
        ],
        "tools_dico": [
            {
                "name": "CoreSlicer",
                "uri": "https://bio.tools/CoreSlicer",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3384",
                            "term": "Medical imaging"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3452",
                            "term": "Tomography"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3444",
                            "term": "MRI"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3452",
                            "term": "CT"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3452",
                            "term": "Computed tomography"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3452",
                            "term": "TDM"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3444",
                            "term": "Nuclear magnetic resonance imaging"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3444",
                            "term": "Magnetic resonance imaging"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3444",
                            "term": "MRT"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3444",
                            "term": "Magnetic resonance tomography"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3444",
                            "term": "NMRI"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Enables extraction of morphomic markers from CT images by non-technically skilled clinicians.",
                "homepage": "https://coreslicer.com/"
            }
        ],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "conda (params.enable_conda ? 'bioconda::trim-galore=0.6.7' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/trim-galore:0.6.7--hdfd78af_0' : 'quay.io/biocontainers/trim-galore:0.6.7--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "MALT_RUN": {
        "name_process": "MALT_RUN",
        "string_process": "process MALT_RUN {\n    tag \"$meta.id\"\n    label 'process_high'\n\n    conda (params.enable_conda ? \"bioconda::malt=0.53\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/malt:0.53--hdfd78af_0' :\n        'quay.io/biocontainers/malt:0.53--hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(fastqs)\n    val mode\n    path index\n\n    output:\n    tuple val(meta), path(\"*.rma6\")                          , emit: rma6\n    tuple val(meta), path(\"*.{tab,text,sam}\"),  optional:true, emit: alignments\n    tuple val(meta), path(\"*.log\")                           , emit: log\n    path \"versions.yml\"                                      , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def avail_mem = 6\n    if (!task.memory) {\n        log.info '[MALT_RUN] Available memory not known - defaulting to 6GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n\n    \"\"\"\n    malt-run \\\\\n        -J-Xmx${avail_mem}g \\\\\n        -t $task.cpus \\\\\n        -v \\\\\n        -o . \\\\\n        $args \\\\\n        --inFile ${fastqs.join(' ')} \\\\\n        -m $mode \\\\\n        --index $index/ |&tee ${prefix}-malt-run.log\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        malt: \\$(malt-run --help  2>&1 | grep -o 'version.* ' | cut -f 1 -d ',' | cut -f2 -d ' ')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 48,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def avail_mem = 6\n    if (!task.memory) {\n        log.info '[MALT_RUN] Available memory not known - defaulting to 6GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n\n    \"\"\"\n    malt-run \\\\\n        -J-Xmx${avail_mem}g \\\\\n        -t $task.cpus \\\\\n        -v \\\\\n        -o . \\\\\n        $args \\\\\n        --inFile ${fastqs.join(' ')} \\\\\n        -m $mode \\\\\n        --index $index/ |&tee ${prefix}-malt-run.log\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        malt: \\$(malt-run --help  2>&1 | grep -o 'version.* ' | cut -f 1 -d ',' | cut -f2 -d ' ')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 24,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "fastqs",
            "mode",
            "index"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "conda (params.enable_conda ? \"bioconda::malt=0.53\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/malt:0.53--hdfd78af_0' : 'quay.io/biocontainers/malt:0.53--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "SHOVILL": {
        "name_process": "SHOVILL",
        "string_process": "process SHOVILL {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::shovill=1.1.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/shovill:1.1.0--0' :\n        'quay.io/biocontainers/shovill:1.1.0--0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path(\"contigs.fa\")                         , emit: contigs\n    tuple val(meta), path(\"shovill.corrections\")                , emit: corrections\n    tuple val(meta), path(\"shovill.log\")                        , emit: log\n    tuple val(meta), path(\"{skesa,spades,megahit,velvet}.fasta\"), emit: raw_contigs\n    tuple val(meta), path(\"contigs.{fastg,gfa,LastGraph}\")      , optional:true, emit: gfa\n    path \"versions.yml\"                                         , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def memory = task.memory.toGiga()\n    \"\"\"\n    shovill \\\\\n        --R1 ${reads[0]} \\\\\n        --R2 ${reads[1]} \\\\\n        $args \\\\\n        --cpus $task.cpus \\\\\n        --ram $memory \\\\\n        --outdir ./ \\\\\n        --force\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        shovill: \\$(echo \\$(shovill --version 2>&1) | sed 's/^.*shovill //')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 40,
        "string_script": "    def args = task.ext.args ?: ''\n    def memory = task.memory.toGiga()\n    \"\"\"\n    shovill \\\\\n        --R1 ${reads[0]} \\\\\n        --R2 ${reads[1]} \\\\\n        $args \\\\\n        --cpus $task.cpus \\\\\n        --ram $memory \\\\\n        --outdir ./ \\\\\n        --force\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        shovill: \\$(echo \\$(shovill --version 2>&1) | sed 's/^.*shovill //')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [
            "shovill"
        ],
        "tools_url": [
            "https://bio.tools/shovill"
        ],
        "tools_dico": [
            {
                "name": "shovill",
                "uri": "https://bio.tools/shovill",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3301",
                            "term": "Microbiology"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3494",
                                "term": "DNA sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3494",
                                "term": "DNA sequence"
                            }
                        ]
                    }
                ],
                "description": "Shovill is a pipeline for assembly of bacterial isolate genomes from Illumina paired-end reads.  Shovill uses SPAdes at its core, but alters the steps before and after the primary assembly step to get similar results in less time. Shovill also supports other assemblers like SKESA, Velvet and Megahit, so you can take advantage of the pre- and post-processing the Shovill provides with those too.",
                "homepage": "https://github.com/tseemann/shovill"
            }
        ],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::shovill=1.1.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/shovill:1.1.0--0' : 'quay.io/biocontainers/shovill:1.1.0--0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "GATK4_FILTERMUTECTCALLS": {
        "name_process": "GATK4_FILTERMUTECTCALLS",
        "string_process": "process GATK4_FILTERMUTECTCALLS {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::gatk4=4.2.6.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/gatk4:4.2.6.1--hdfd78af_0':\n        'quay.io/biocontainers/gatk4:4.2.6.1--hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(vcf), path(vcf_tbi), path(stats), path(orientationbias), path(segmentation), path(table), val(estimate)\n    path  fasta\n    path  fai\n    path  dict\n\n    output:\n    tuple val(meta), path(\"*.vcf.gz\")            , emit: vcf\n    tuple val(meta), path(\"*.vcf.gz.tbi\")        , emit: tbi\n    tuple val(meta), path(\"*.filteringStats.tsv\"), emit: stats\n    path \"versions.yml\"                          , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n    def orientationbias_command = orientationbias ? orientationbias.collect{\"--orientation-bias-artifact-priors $it\"}.join(' ') : ''\n    def segmentation_command    = segmentation    ? segmentation.collect{\"--tumor-segmentation $it\"}.join(' ')                  : ''\n    def estimate_command        = estimate        ? \" --contamination-estimate ${estimate} \"                                    : ''\n    def table_command           = table           ? \" --contamination-table ${table} \"                                          : ''\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[GATK FilterMutectCalls] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    gatk --java-options \"-Xmx${avail_mem}g\" FilterMutectCalls \\\\\n        --variant $vcf \\\\\n        --output ${prefix}.vcf.gz \\\\\n        --reference $fasta \\\\\n        $orientationbias_command \\\\\n        $segmentation_command \\\\\n        $estimate_command \\\\\n        $table_command \\\\\n        --tmp-dir . \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 55,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n    def orientationbias_command = orientationbias ? orientationbias.collect{\"--orientation-bias-artifact-priors $it\"}.join(' ') : ''\n    def segmentation_command    = segmentation    ? segmentation.collect{\"--tumor-segmentation $it\"}.join(' ')                  : ''\n    def estimate_command        = estimate        ? \" --contamination-estimate ${estimate} \"                                    : ''\n    def table_command           = table           ? \" --contamination-table ${table} \"                                          : ''\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[GATK FilterMutectCalls] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    gatk --java-options \"-Xmx${avail_mem}g\" FilterMutectCalls \\\\\n        --variant $vcf \\\\\n        --output ${prefix}.vcf.gz \\\\\n        --reference $fasta \\\\\n        $orientationbias_command \\\\\n        $segmentation_command \\\\\n        $estimate_command \\\\\n        $table_command \\\\\n        --tmp-dir . \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 30,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "meta",
            "estimate",
            "vcf",
            "vcf_tbi",
            "stats",
            "orientationbias",
            "segmentation",
            "table",
            "fasta",
            "fai",
            "dict"
        ],
        "nb_inputs": 11,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::gatk4=4.2.6.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/gatk4:4.2.6.1--hdfd78af_0': 'quay.io/biocontainers/gatk4:4.2.6.1--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "SNPSIFT_SPLIT": {
        "name_process": "SNPSIFT_SPLIT",
        "string_process": "process SNPSIFT_SPLIT {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::snpsift=4.3.1t\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/snpsift:4.3.1t--hdfd78af_3' :\n        'quay.io/biocontainers/snpsift:4.3.1t--hdfd78af_3' }\"\n\n    input:\n    tuple val(meta), path(vcf)\n\n    output:\n    tuple val(meta), path(\"*.vcf\"), emit: out_vcfs\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (meta.split) {\n        \"\"\"\n        SnpSift \\\\\n            split \\\\\n            $args \\\\\n            $vcf\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            snpsift: \\$( echo \\$(SnpSift split -h 2>&1) | sed 's/^.*version //' | sed 's/(.*//' | sed 's/t//g' )\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        SnpSift \\\\\n            split \\\\\n            -j \\\\\n            $args \\\\\n            $vcf \\\\\n            > ${prefix}.joined.vcf\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            snpsift: \\$( echo \\$(SnpSift split -h 2>&1) | sed 's/^.*version //' | sed 's/(.*//' | sed 's/t//g' )\n        END_VERSIONS\n        \"\"\"\n    }\n\n}",
        "nb_lignes_process": 49,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (meta.split) {\n        \"\"\"\n        SnpSift \\\\\n            split \\\\\n            $args \\\\\n            $vcf\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            snpsift: \\$( echo \\$(SnpSift split -h 2>&1) | sed 's/^.*version //' | sed 's/(.*//' | sed 's/t//g' )\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        SnpSift \\\\\n            split \\\\\n            -j \\\\\n            $args \\\\\n            $vcf \\\\\n            > ${prefix}.joined.vcf\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            snpsift: \\$( echo \\$(SnpSift split -h 2>&1) | sed 's/^.*version //' | sed 's/(.*//' | sed 's/t//g' )\n        END_VERSIONS\n        \"\"\"\n    }",
        "nb_lignes_script": 28,
        "language_script": "bash",
        "tools": [
            "SnpSift"
        ],
        "tools_url": [
            "https://bio.tools/snpsift"
        ],
        "tools_dico": [
            {
                "name": "SnpSift",
                "uri": "https://bio.tools/snpsift",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3365",
                            "term": "Data architecture, analysis and design"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3675",
                                    "term": "Variant filtering"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Toolbox that allows you to filter and manipulate annotated vcf files.",
                "homepage": "http://snpeff.sourceforge.net/SnpSift.html"
            }
        ],
        "inputs": [
            "meta",
            "vcf"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::snpsift=4.3.1t\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/snpsift:4.3.1t--hdfd78af_3' : 'quay.io/biocontainers/snpsift:4.3.1t--hdfd78af_3' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "UCSC_WIGTOBIGWIG": {
        "name_process": "UCSC_WIGTOBIGWIG",
        "string_process": "\nprocess UCSC_WIGTOBIGWIG {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::ucsc-wigtobigwig=377\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/ucsc-wigtobigwig:377--h0b8a92a_2' :\n        'quay.io/biocontainers/ucsc-wigtobigwig:377--h0b8a92a_2' }\"\n\n    input:\n    tuple val(meta), path(wig)\n    path sizes\n\n    output:\n    tuple val(meta), path(\"*.bw\"), emit: bw\n    path \"versions.yml\"          , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    wigToBigWig \\\\\n        $args \\\\\n        $wig \\\\\n        $sizes \\\\\n        ${prefix}.bw\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        ucsc: $VERSION\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.bw\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        ucsc: $VERSION\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 46,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    wigToBigWig \\\\\n        $args \\\\\n        $wig \\\\\n        $sizes \\\\\n        ${prefix}.bw\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        ucsc: $VERSION\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "wig",
            "sizes"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::ucsc-wigtobigwig=377\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/ucsc-wigtobigwig:377--h0b8a92a_2' : 'quay.io/biocontainers/ucsc-wigtobigwig:377--h0b8a92a_2' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.bw\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        ucsc: $VERSION\n    END_VERSIONS\n    \"\"\""
    },
    "STUB_GTDBTK_DATABASE": {
        "name_process": "STUB_GTDBTK_DATABASE",
        "string_process": "\nprocess STUB_GTDBTK_DATABASE {\n    output:\n    tuple val(\"gtdbtk_r202_data\"), path(\"database/*\"), emit: database\n\n    stub:\n    \"\"\"\n    mkdir database\n    touch database/gtdbtk_r202_data\n    \"\"\"\n}",
        "nb_lignes_process": 9,
        "string_script": "",
        "nb_lignes_script": 0,
        "language_script": "",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [],
        "when": "",
        "stub": "\n    \"\"\"\n    mkdir database\n    touch database/gtdbtk_r202_data\n    \"\"\""
    },
    "BISCUIT_VCF2BED": {
        "name_process": "BISCUIT_VCF2BED",
        "string_process": "process BISCUIT_VCF2BED {\n    tag \"$meta.id\"\n    label 'process_long'\n\n    conda (params.enable_conda ? \"bioconda::biscuit=1.0.2.20220113 bioconda::samtools=1.15\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mulled-v2-db16f1c237a26ea9245cf9924f858974ff321d6e:17fa66297f088a1bc7560b7b90dc273bf23f2d8c-0':\n        'quay.io/biocontainers/mulled-v2-db16f1c237a26ea9245cf9924f858974ff321d6e:17fa66297f088a1bc7560b7b90dc273bf23f2d8c-0' }\"\n\n    input:\n    tuple val(meta), path(vcf)\n\n    output:\n    tuple val(meta), path(\"*.bed.gz\"), emit: bed\n    path \"versions.yml\"              , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    biscuit vcf2bed \\\\\n        $args \\\\\n        $vcf | \\\\\n    LC_ALL=C sort -k1,1 -k2,2n | \\\\\n    bgzip \\\\\n        $args2 \\\\\n        -c > ${prefix}.bed.gz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        biscuit: \\$(echo \\$(biscuit version 2>&1) | sed 's/^.*BISCUIT Version: //; s/Using.*\\$//')\n        samtools: \\$( samtools --version |& sed '1!d; s/^.*samtools //' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 37,
        "string_script": "    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    biscuit vcf2bed \\\\\n        $args \\\\\n        $vcf | \\\\\n    LC_ALL=C sort -k1,1 -k2,2n | \\\\\n    bgzip \\\\\n        $args2 \\\\\n        -c > ${prefix}.bed.gz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        biscuit: \\$(echo \\$(biscuit version 2>&1) | sed 's/^.*BISCUIT Version: //; s/Using.*\\$//')\n        samtools: \\$( samtools --version |& sed '1!d; s/^.*samtools //' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 17,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "vcf"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_long'",
            "conda (params.enable_conda ? \"bioconda::biscuit=1.0.2.20220113 bioconda::samtools=1.15\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mulled-v2-db16f1c237a26ea9245cf9924f858974ff321d6e:17fa66297f088a1bc7560b7b90dc273bf23f2d8c-0': 'quay.io/biocontainers/mulled-v2-db16f1c237a26ea9245cf9924f858974ff321d6e:17fa66297f088a1bc7560b7b90dc273bf23f2d8c-0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "BIOBAMBAM_BAMMARKDUPLICATES2": {
        "name_process": "BIOBAMBAM_BAMMARKDUPLICATES2",
        "string_process": "process BIOBAMBAM_BAMMARKDUPLICATES2 {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::biobambam=2.0.183\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/biobambam:2.0.183--h9f5acd7_1' : 'quay.io/biocontainers/biobambam:2.0.183--h9f5acd7_1'}\"\n\n    input:\n    tuple val(meta), path(bam)\n\n    output:\n    tuple val(meta), path(\"*.bam\")        , emit: bam\n    tuple val(meta), path(\"*.metrics.txt\"), emit: metrics\n    path \"versions.yml\"                   , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    bammarkduplicates2 \\\\\n        $args \\\\\n        I=$bam \\\\\n        O=${prefix}.bam \\\\\n        M=${prefix}.metrics.txt \\\\\n        tmpfile=$prefix \\\\\n        markthreads=$task.cpus\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bammarkduplicates2: \\$(echo \\$(bammarkduplicates2 --version 2>&1) | sed 's/^This is biobambam2 version //; s/..biobambam2 is .*\\$//' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    bammarkduplicates2 \\\\\n        $args \\\\\n        I=$bam \\\\\n        O=${prefix}.bam \\\\\n        M=${prefix}.metrics.txt \\\\\n        tmpfile=$prefix \\\\\n        markthreads=$task.cpus\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bammarkduplicates2: \\$(echo \\$(bammarkduplicates2 --version 2>&1) | sed 's/^This is biobambam2 version //; s/..biobambam2 is .*\\$//' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "bam"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::biobambam=2.0.183\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/biobambam:2.0.183--h9f5acd7_1' : 'quay.io/biocontainers/biobambam:2.0.183--h9f5acd7_1'}\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "EXPANSIONHUNTER": {
        "name_process": "EXPANSIONHUNTER",
        "string_process": "process EXPANSIONHUNTER {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::expansionhunter=4.0.2\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/expansionhunter:4.0.2--he785bd8_0' :\n        'quay.io/biocontainers/expansionhunter:4.0.2--he785bd8_0' }\"\n\n    input:\n    tuple val(meta), path(bam), path(bai)\n    path fasta\n    path variant_catalog\n\n    output:\n    tuple val(meta), path(\"*.vcf\"), emit: vcf\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def gender = (meta.gender == 'male' || meta.gender == 1 || meta.gender == 'XY') ? \"male\" : \"female\"\n    \"\"\"\n    ExpansionHunter \\\\\n        $args \\\\\n        --reads $bam \\\\\n        --output-prefix $prefix \\\\\n        --reference $fasta \\\\\n        --variant-catalog $variant_catalog \\\\\n        --sex $gender\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        expansionhunter: \\$( echo \\$(ExpansionHunter --version 2>&1) | sed 's/^.*ExpansionHunter v//')\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.vcf\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        expansionhunter: \\$( echo \\$(ExpansionHunter --version 2>&1) | sed 's/^.*ExpansionHunter v//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 49,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def gender = (meta.gender == 'male' || meta.gender == 1 || meta.gender == 'XY') ? \"male\" : \"female\"\n    \"\"\"\n    ExpansionHunter \\\\\n        $args \\\\\n        --reads $bam \\\\\n        --output-prefix $prefix \\\\\n        --reference $fasta \\\\\n        --variant-catalog $variant_catalog \\\\\n        --sex $gender\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        expansionhunter: \\$( echo \\$(ExpansionHunter --version 2>&1) | sed 's/^.*ExpansionHunter v//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [
            "ExpansionHunter"
        ],
        "tools_url": [
            "https://bio.tools/ExpansionHunter"
        ],
        "tools_dico": [
            {
                "name": "ExpansionHunter",
                "uri": "https://bio.tools/ExpansionHunter",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype and phenotype"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Whole genome sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype and phenotype resources"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype-phenotype analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype-phenotype"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "WGS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Sequence-graph-based tool to analyze variation in short tandem repeat regions.",
                "homepage": "https://github.com/Illumina/ExpansionHunter/"
            }
        ],
        "inputs": [
            "meta",
            "bam",
            "bai",
            "fasta",
            "variant_catalog"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::expansionhunter=4.0.2\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/expansionhunter:4.0.2--he785bd8_0' : 'quay.io/biocontainers/expansionhunter:4.0.2--he785bd8_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.vcf\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        expansionhunter: \\$( echo \\$(ExpansionHunter --version 2>&1) | sed 's/^.*ExpansionHunter v//')\n    END_VERSIONS\n    \"\"\""
    },
    "LEGSTA": {
        "name_process": "LEGSTA",
        "string_process": "process LEGSTA {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::legsta=0.5.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/legsta%3A0.5.1--hdfd78af_2':\n        'quay.io/biocontainers/legsta:0.5.1--hdfd78af_2' }\"\n\n    input:\n    tuple val(meta), path(seqs)\n\n    output:\n    tuple val(meta), path(\"*.tsv\"), emit: tsv\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    legsta \\\\\n        $args \\\\\n        $seqs > ${prefix}.tsv\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        legsta: \\$(echo \\$(legsta --version 2>&1) | sed 's/^.*legsta //; s/ .*\\$//;')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    legsta \\\\\n        $args \\\\\n        $seqs > ${prefix}.tsv\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        legsta: \\$(echo \\$(legsta --version 2>&1) | sed 's/^.*legsta //; s/ .*\\$//;')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "seqs"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::legsta=0.5.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/legsta%3A0.5.1--hdfd78af_2': 'quay.io/biocontainers/legsta:0.5.1--hdfd78af_2' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "SRATOOLS_PREFETCH": {
        "name_process": "SRATOOLS_PREFETCH",
        "string_process": "process SRATOOLS_PREFETCH {\n    tag \"$id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? 'bioconda::sra-tools=2.11.0' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/sra-tools:2.11.0--pl5321ha49a11a_3' :\n        'quay.io/biocontainers/sra-tools:2.11.0--pl5321ha49a11a_3' }\"\n\n    input:\n    tuple val(meta), val(id)\n    path ncbi_settings\n\n    output:\n    tuple val(meta), path(id), emit: sra\n    path 'versions.yml'      , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    shell:\n    args = task.ext.args ?: ''\n    args2 = task.ext.args2 ?: '5 1 100'                                                                 \n    template 'retry_with_backoff.sh'\n}",
        "nb_lignes_process": 23,
        "string_script": "    args = task.ext.args ?: ''\n    args2 = task.ext.args2 ?: '5 1 100'                                                                 \n    template 'retry_with_backoff.sh'",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "PopTargs",
            "docxtemplate"
        ],
        "tools_url": [
            "https://bio.tools/PopTargs",
            "https://bio.tools/docxtemplate"
        ],
        "tools_dico": [
            {
                "name": "PopTargs",
                "uri": "https://bio.tools/PopTargs",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0659",
                            "term": "Functional, regulatory and non-coding RNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0160",
                            "term": "Sequence sites, features and motifs"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3056",
                            "term": "Population genetics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "miRNA target prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Database search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "microRNA target detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "miRNA prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "microRNA detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "PopTargs is a database for studying population evolutionary genetics of human microRNA target sites.\n\nThese are the scripts used to create the MySQL database that is used by PopTargs.essex.ac.uk. The pipeline can be altered to create similar databases with different species, it may need to be adjusted to fit your file names.",
                "homepage": "https://poptargs.essex.ac.uk/"
            },
            {
                "name": "docxtemplate",
                "uri": "https://bio.tools/docxtemplate",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3314",
                            "term": "Chemistry"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0176",
                            "term": "Molecular dynamics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3489",
                            "term": "Database management"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3489",
                            "term": "Database administration"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0249",
                                    "term": "Protein geometry calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0322",
                                    "term": "Molecular model refinement"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Deposition"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Data submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Database deposition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Database submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Data deposition"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "> VERY_LOW CONFIDENCE! | > CORRECT NAME OF TOOL COULD ALSO BE 'Phenix', 'restraints', 'Amber', 'refinement' | Improved chemistry restraints for crystallographic refinement by integrating the Amber force field into Phenix | Word templates and tools for Windows | The IUCr Word templates utilize the content management features and document styles of Word to format your manuscript and to store essential details for submission of your manuscript",
                "homepage": "http://journals.iucr.org/services/docxtemplate/"
            }
        ],
        "inputs": [
            "meta",
            "id",
            "ncbi_settings"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? 'bioconda::sra-tools=2.11.0' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/sra-tools:2.11.0--pl5321ha49a11a_3' : 'quay.io/biocontainers/sra-tools:2.11.0--pl5321ha49a11a_3' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "BCFTOOLS_CONCAT": {
        "name_process": "BCFTOOLS_CONCAT",
        "string_process": "process BCFTOOLS_CONCAT {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? 'bioconda::bcftools=1.14' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bcftools:1.14--h88f3f91_0' :\n        'quay.io/biocontainers/bcftools:1.14--h88f3f91_0' }\"\n\n    input:\n    tuple val(meta), path(vcfs)\n\n    output:\n    tuple val(meta), path(\"*.gz\"), emit: vcf\n    path  \"versions.yml\"         , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args   ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    bcftools concat \\\\\n        --output ${prefix}.vcf.gz \\\\\n        $args \\\\\n        --threads $task.cpus \\\\\n        ${vcfs}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bcftools: \\$(bcftools --version 2>&1 | head -n1 | sed 's/^.*bcftools //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    def args = task.ext.args   ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    bcftools concat \\\\\n        --output ${prefix}.vcf.gz \\\\\n        $args \\\\\n        --threads $task.cpus \\\\\n        ${vcfs}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bcftools: \\$(bcftools --version 2>&1 | head -n1 | sed 's/^.*bcftools //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [
            "BCFtools"
        ],
        "tools_url": [
            "https://bio.tools/bcftools"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "vcfs"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? 'bioconda::bcftools=1.14' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bcftools:1.14--h88f3f91_0' : 'quay.io/biocontainers/bcftools:1.14--h88f3f91_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "PAIRTOOLS_FLIP": {
        "name_process": "PAIRTOOLS_FLIP",
        "string_process": "process PAIRTOOLS_FLIP {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::pairtools=0.3.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/pairtools:0.3.0--py37hb9c2fc3_5' :\n        'quay.io/biocontainers/pairtools:0.3.0--py37hb9c2fc3_5' }\"\n\n    input:\n    tuple val(meta), path(sam)\n    path chromsizes\n\n    output:\n    tuple val(meta), path(\"*.flip.gz\"), emit: flip\n    path \"versions.yml\"               , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    pairtools \\\\\n        flip \\\\\n        -c $chromsizes \\\\\n        $args \\\\\n        -o ${prefix}.flip.gz \\\\\n        $sam\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        pairtools: \\$(pairtools --version 2>&1 | sed 's/pairtools.*version //')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    pairtools \\\\\n        flip \\\\\n        -c $chromsizes \\\\\n        $args \\\\\n        -o ${prefix}.flip.gz \\\\\n        $sam\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        pairtools: \\$(pairtools --version 2>&1 | sed 's/pairtools.*version //')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "Flipper"
        ],
        "tools_url": [
            "https://bio.tools/flipper"
        ],
        "tools_dico": [
            {
                "name": "Flipper",
                "uri": "https://bio.tools/flipper",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3316",
                            "term": "Computer science"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biological science"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3763",
                                    "term": "Service invocation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3436",
                                    "term": "Aggregation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Standalone client able to register Web-Services in different catalogues (e.g. BioMOBY, INB, etc.). In addition the tool is able to perform the deployment process of command line applications. The process first registers the service, then it creates the Web-Service implementation skeletons, and finally, it deploys the skeletons and the command-line application in a server.",
                "homepage": "http://bitlab-es.com/flipper/"
            }
        ],
        "inputs": [
            "meta",
            "sam",
            "chromsizes"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::pairtools=0.3.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/pairtools:0.3.0--py37hb9c2fc3_5' : 'quay.io/biocontainers/pairtools:0.3.0--py37hb9c2fc3_5' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "STAPHOPIASCCMEC": {
        "name_process": "STAPHOPIASCCMEC",
        "string_process": "process STAPHOPIASCCMEC {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::staphopia-sccmec=1.0.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/staphopia-sccmec:1.0.0--hdfd78af_0' :\n        'quay.io/biocontainers/staphopia-sccmec:1.0.0--hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(fasta)\n\n    output:\n    tuple val(meta), path(\"*.tsv\"), emit: tsv\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    staphopia-sccmec --assembly $fasta $args > ${prefix}.tsv\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        staphopiasccmec: \\$(staphopia-sccmec --version 2>&1 | sed 's/^.*staphopia-sccmec //')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    staphopia-sccmec --assembly $fasta $args > ${prefix}.tsv\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        staphopiasccmec: \\$(staphopia-sccmec --version 2>&1 | sed 's/^.*staphopia-sccmec //')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "fasta"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::staphopia-sccmec=1.0.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/staphopia-sccmec:1.0.0--hdfd78af_0' : 'quay.io/biocontainers/staphopia-sccmec:1.0.0--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "SEQKIT_REPLACE": {
        "name_process": "SEQKIT_REPLACE",
        "string_process": "process SEQKIT_REPLACE {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::seqkit=2.1.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/seqkit:2.1.0--h9ee0642_0':\n        'quay.io/biocontainers/seqkit:2.1.0--h9ee0642_0' }\"\n\n    input:\n    tuple val(meta), path(fastx)\n\n    output:\n    tuple val(meta), path(\"*.fast*\"), emit: fastx\n    path \"versions.yml\"             , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def extension = \"fastq\"\n    if (\"$fastx\" ==~ /.+\\.fasta|.+\\.fasta.gz|.+\\.fa|.+\\.fa.gz|.+\\.fas|.+\\.fas.gz|.+\\.fna|.+\\.fna.gz/) {\n        extension = \"fasta\"\n    }\n    def endswith = task.ext.suffix ?: \"${extension}.gz\"\n    \"\"\"\n    seqkit \\\\\n        replace \\\\\n        ${args} \\\\\n        --threads ${task.cpus} \\\\\n        -i ${fastx} \\\\\n        -o ${prefix}.${endswith}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        seqkit: \\$( seqkit | sed '3!d; s/Version: //' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 39,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def extension = \"fastq\"\n    if (\"$fastx\" ==~ /.+\\.fasta|.+\\.fasta.gz|.+\\.fa|.+\\.fa.gz|.+\\.fas|.+\\.fas.gz|.+\\.fna|.+\\.fna.gz/) {\n        extension = \"fasta\"\n    }\n    def endswith = task.ext.suffix ?: \"${extension}.gz\"\n    \"\"\"\n    seqkit \\\\\n        replace \\\\\n        ${args} \\\\\n        --threads ${task.cpus} \\\\\n        -i ${fastx} \\\\\n        -o ${prefix}.${endswith}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        seqkit: \\$( seqkit | sed '3!d; s/Version: //' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "fastx"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::seqkit=2.1.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/seqkit:2.1.0--h9ee0642_0': 'quay.io/biocontainers/seqkit:2.1.0--h9ee0642_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "SRATOOLS_FASTERQDUMP": {
        "name_process": "SRATOOLS_FASTERQDUMP",
        "string_process": "process SRATOOLS_FASTERQDUMP {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? 'bioconda::sra-tools=2.11.0 conda-forge::pigz=2.6' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mulled-v2-5f89fe0cd045cb1d615630b9261a1d17943a9b6a:6a9ff0e76ec016c3d0d27e0c0d362339f2d787e6-0' :\n        'quay.io/biocontainers/mulled-v2-5f89fe0cd045cb1d615630b9261a1d17943a9b6a:6a9ff0e76ec016c3d0d27e0c0d362339f2d787e6-0' }\"\n\n    input:\n    tuple val(meta), path(sra)\n    path ncbi_settings\n\n    output:\n    tuple val(meta), path(output), emit: reads\n    path \"versions.yml\"          , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n                                                                                       \n                                                                              \n                                               \n    output = meta.single_end ? '*.fastq.gz' : '*_{1,2}.fastq.gz'\n    \"\"\"\n    export NCBI_SETTINGS=\"\\$PWD/${ncbi_settings}\"\n\n    fasterq-dump \\\\\n        $args \\\\\n        --threads $task.cpus \\\\\n        ${sra.name}\n\n    pigz \\\\\n        $args2 \\\\\n        --no-name \\\\\n        --processes $task.cpus \\\\\n        *.fastq\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        sratools: \\$(fasterq-dump --version 2>&1 | grep -Eo '[0-9.]+')\n        pigz: \\$( pigz --version 2>&1 | sed 's/pigz //g' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 46,
        "string_script": "    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n                                                                                       \n                                                                              \n                                               \n    output = meta.single_end ? '*.fastq.gz' : '*_{1,2}.fastq.gz'\n    \"\"\"\n    export NCBI_SETTINGS=\"\\$PWD/${ncbi_settings}\"\n\n    fasterq-dump \\\\\n        $args \\\\\n        --threads $task.cpus \\\\\n        ${sra.name}\n\n    pigz \\\\\n        $args2 \\\\\n        --no-name \\\\\n        --processes $task.cpus \\\\\n        *.fastq\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        sratools: \\$(fasterq-dump --version 2>&1 | grep -Eo '[0-9.]+')\n        pigz: \\$( pigz --version 2>&1 | sed 's/pigz //g' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 25,
        "language_script": "bash",
        "tools": [
            "wossoutput"
        ],
        "tools_url": [
            "https://bio.tools/wossoutput"
        ],
        "tools_dico": [
            {
                "name": "wossoutput",
                "uri": "https://bio.tools/wossoutput",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0219",
                            "term": "Data submission, annotation and curation"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0958",
                                "term": "Tool metadata"
                            }
                        ]
                    }
                ],
                "description": "Find programs by EDAM output data.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/wossoutput.html"
            }
        ],
        "inputs": [
            "meta",
            "sra",
            "ncbi_settings"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? 'bioconda::sra-tools=2.11.0 conda-forge::pigz=2.6' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mulled-v2-5f89fe0cd045cb1d615630b9261a1d17943a9b6a:6a9ff0e76ec016c3d0d27e0c0d362339f2d787e6-0' : 'quay.io/biocontainers/mulled-v2-5f89fe0cd045cb1d615630b9261a1d17943a9b6a:6a9ff0e76ec016c3d0d27e0c0d362339f2d787e6-0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "DIAMOND_BLASTP": {
        "name_process": "DIAMOND_BLASTP",
        "string_process": "process DIAMOND_BLASTP {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::diamond=2.0.15\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/diamond:2.0.15--hb97b32f_0' :\n        'quay.io/biocontainers/diamond:2.0.15--hb97b32f_0' }\"\n\n    input:\n    tuple val(meta), path(fasta)\n    path db\n    val out_ext\n    val blast_columns\n\n    output:\n    tuple val(meta), path('*.blast'), optional: true, emit: blast\n    tuple val(meta), path('*.xml')  , optional: true, emit: xml\n    tuple val(meta), path('*.txt')  , optional: true, emit: txt\n    tuple val(meta), path('*.daa')  , optional: true, emit: daa\n    tuple val(meta), path('*.sam')  , optional: true, emit: sam\n    tuple val(meta), path('*.tsv')  , optional: true, emit: tsv\n    tuple val(meta), path('*.paf')  , optional: true, emit: paf\n    path \"versions.yml\"               , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def columns = blast_columns ? \"${blast_columns}\" : ''\n    switch ( out_ext ) {\n        case \"blast\": outfmt = 0; break\n        case \"xml\": outfmt = 5; break\n        case \"txt\": outfmt = 6; break\n        case \"daa\": outfmt = 100; break\n        case \"sam\": outfmt = 101; break\n        case \"tsv\": outfmt = 102; break\n        case \"paf\": outfmt = 103; break\n        default:\n            outfmt = '6';\n            out_ext = 'txt';\n            log.warn(\"Unknown output file format provided (${out_ext}): selecting DIAMOND default of tabular BLAST output (txt)\");\n            break\n    }\n    \"\"\"\n    DB=`find -L ./ -name \"*.dmnd\" | sed 's/.dmnd//'`\n\n    diamond \\\\\n        blastp \\\\\n        --threads $task.cpus \\\\\n        --db \\$DB \\\\\n        --query $fasta \\\\\n        --outfmt ${outfmt} ${columns} \\\\\n        $args \\\\\n        --out ${prefix}.${out_ext}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        diamond: \\$(diamond --version 2>&1 | tail -n 1 | sed 's/^diamond version //')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 62,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def columns = blast_columns ? \"${blast_columns}\" : ''\n    switch ( out_ext ) {\n        case \"blast\": outfmt = 0; break\n        case \"xml\": outfmt = 5; break\n        case \"txt\": outfmt = 6; break\n        case \"daa\": outfmt = 100; break\n        case \"sam\": outfmt = 101; break\n        case \"tsv\": outfmt = 102; break\n        case \"paf\": outfmt = 103; break\n        default:\n            outfmt = '6';\n            out_ext = 'txt';\n            log.warn(\"Unknown output file format provided (${out_ext}): selecting DIAMOND default of tabular BLAST output (txt)\");\n            break\n    }\n    \"\"\"\n    DB=`find -L ./ -name \"*.dmnd\" | sed 's/.dmnd//'`\n\n    diamond \\\\\n        blastp \\\\\n        --threads $task.cpus \\\\\n        --db \\$DB \\\\\n        --query $fasta \\\\\n        --outfmt ${outfmt} ${columns} \\\\\n        $args \\\\\n        --out ${prefix}.${out_ext}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        diamond: \\$(diamond --version 2>&1 | tail -n 1 | sed 's/^diamond version //')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 33,
        "language_script": "bash",
        "tools": [
            "oswitch",
            "CASE",
            "BreakSeq",
            "Diamond",
            "BLASTP-ACC"
        ],
        "tools_url": [
            "https://bio.tools/oswitch",
            "https://bio.tools/CASE",
            "https://bio.tools/breakseq",
            "https://bio.tools/diamond",
            "https://bio.tools/BLASTP-ACC"
        ],
        "tools_dico": [
            {
                "name": "oswitch",
                "uri": "https://bio.tools/oswitch",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3760",
                                    "term": "Service management"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Provides quick and simple Docker based virtual environments on Macs and compute clusters alike for reproducible bioinformatics.",
                "homepage": "https://github.com/wurmlab/oswitch"
            },
            {
                "name": "CASE",
                "uri": "https://bio.tools/CASE",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0749",
                            "term": "Transcription factors and regulatory sites"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Model organisms"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0089",
                            "term": "Ontology and terminology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Organisms"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3436",
                                    "term": "Aggregation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3435",
                                    "term": "Standardisation and normalisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3559",
                                    "term": "Ontology visualisation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3559",
                                    "term": "Ontology browsing"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Advancing Coordinated Cyber-investigations and Tool Interoperability using a Community Developed Specification Language.\n\nSource files for the CASE website.\n\nAPI used for instantiating CASE objects (includes ontological verification and type checking).\n\nCyber-investigation Analysis Standard Expression (CASE).\n\nRead the CASE Wiki tab to learn everything you need to know about the Cyber-investigation Analysis Standard Expression (CASE) ontology. For learning about the Unified Cyber Ontology, CASE's parent, see UCO.\n\n\"@vocab\": \"http://case.example.org/core#\",.\n\nDET ER DINE PENGER DET DREIER SEG OM...\n\nVi er ikke st\ufffdrst, men garanterer effektiv behandling.\n\nLast ned v\ufffdr brosjyre i PDF format.\n\n||| COMMON LINK WITH (PUB. & NAME DIFFERENT) bio.tools/pymzml (GITHUB.COM).\n\n||| CORRECT NAME OF TOOL COULD ALSO BE 'UCO', 'cyber-investigation', 'cyber-investigations', 'plaso'",
                "homepage": "http://CASE.as"
            },
            {
                "name": "BreakSeq",
                "uri": "https://bio.tools/breakseq",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "Structural variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "Genomic structural variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "DNA structural variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Database of known human breakpoint junctions and software to search short reads against them.",
                "homepage": "http://sv.gersteinlab.org/breakseq/"
            },
            {
                "name": "Diamond",
                "uri": "https://bio.tools/diamond",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Proteins"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein informatics"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0258",
                                    "term": "Sequence alignment analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Sequence aligner for protein and translated DNA searches and functions as a drop-in replacement for the NCBI BLAST software tools. It is suitable for protein-protein search as well as DNA-protein search on short reads and longer sequences including contigs and assemblies, providing a speedup of BLAST ranging up to x20,000.",
                "homepage": "https://github.com/bbuchfink/diamond"
            },
            {
                "name": "BLASTP-ACC",
                "uri": "https://bio.tools/BLASTP-ACC",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3297",
                            "term": "Biotechnology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0081",
                            "term": "Structure analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Proteins"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0081",
                            "term": "Structural bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0081",
                            "term": "Biomolecular structure"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein informatics"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0495",
                                    "term": "Local alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Database search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3802",
                                    "term": "Sorting"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0495",
                                    "term": "Local sequence alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0495",
                                    "term": "Sequence alignment (local)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Search"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Parallel Architecture and Hardware Accelerator Design for BLAST-based Protein Sequence Alignment.\n\nIn this study, we design a hardware accelerator for a widely used sequence alignment algorithm, the basic local alignment search tool for proteins (BLASTP). The architecture of the proposed accelerator consists of five stages: a new systolic-array-based one-hit finding stage, a novel RAM-REG-based two-hit finding stage, a refined ungapped extension stage, a faster gapped extension stage, and a highly efficient parallel sorter. The system is implemented on an Altera Stratix V FPGA with a processing speed of more than 500 giga cell updates per second (GCUPS). It can receive a query sequence, compare it with the sequences in the database, and generate a list sorted in descending order of the similarity scores between the query sequence and the subject sequences.\n\n||| HOMEPAGE MISSING!.\n\n||| CORRECT NAME OF TOOL COULD ALSO BE 'accelerator', 'Altera', 'Stratix', 'RAM-REG-based'",
                "homepage": "https://www.ncbi.nlm.nih.gov/pubmed/?term=31581096"
            }
        ],
        "inputs": [
            "meta",
            "fasta",
            "db",
            "out_ext",
            "blast_columns"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::diamond=2.0.15\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/diamond:2.0.15--hb97b32f_0' : 'quay.io/biocontainers/diamond:2.0.15--hb97b32f_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "PICARD_SORTSAM": {
        "name_process": "PICARD_SORTSAM",
        "string_process": "process PICARD_SORTSAM {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::picard=2.27.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/picard:2.27.1--hdfd78af_0' :\n        'quay.io/biocontainers/picard:2.27.1--hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(bam)\n    val sort_order\n\n    output:\n    tuple val(meta), path(\"*.bam\"), emit: bam\n    path \"versions.yml\"                  , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[Picard SortSam] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    picard \\\\\n        SortSam \\\\\n        -Xmx${avail_mem}g \\\\\n        --INPUT $bam \\\\\n        --OUTPUT ${prefix}.bam \\\\\n        --SORT_ORDER $sort_order\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        picard: \\$(picard SortSam --version 2>&1 | grep -o 'Version:.*' | cut -f2- -d:)\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 41,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[Picard SortSam] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    picard \\\\\n        SortSam \\\\\n        -Xmx${avail_mem}g \\\\\n        --INPUT $bam \\\\\n        --OUTPUT ${prefix}.bam \\\\\n        --SORT_ORDER $sort_order\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        picard: \\$(picard SortSam --version 2>&1 | grep -o 'Version:.*' | cut -f2- -d:)\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 20,
        "language_script": "bash",
        "tools": [
            "Picard"
        ],
        "tools_url": [
            "https://bio.tools/picard_tools"
        ],
        "tools_dico": [
            {
                "name": "Picard",
                "uri": "https://bio.tools/picard_tools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Sequence variation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Variant analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation annotation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A set of command line tools for manipulating high-throughput sequencing (HTS) data in formats such as SAM/BAM/CRAM and VCF. Available as a standalone program or within the GATK4 program.",
                "homepage": "https://github.com/broadinstitute/picard"
            }
        ],
        "inputs": [
            "meta",
            "bam",
            "sort_order"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::picard=2.27.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/picard:2.27.1--hdfd78af_0' : 'quay.io/biocontainers/picard:2.27.1--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "CUTADAPT": {
        "name_process": "CUTADAPT",
        "string_process": "process CUTADAPT {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? 'bioconda::cutadapt=3.4' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/cutadapt:3.4--py39h38f01e4_1' :\n        'quay.io/biocontainers/cutadapt:3.4--py39h38f01e4_1' }\"\n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path('*.trim.fastq.gz'), emit: reads\n    tuple val(meta), path('*.log')          , emit: log\n    path \"versions.yml\"                     , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def trimmed  = meta.single_end ? \"-o ${prefix}.trim.fastq.gz\" : \"-o ${prefix}_1.trim.fastq.gz -p ${prefix}_2.trim.fastq.gz\"\n    \"\"\"\n    cutadapt \\\\\n        --cores $task.cpus \\\\\n        $args \\\\\n        $trimmed \\\\\n        $reads \\\\\n        > ${prefix}.cutadapt.log\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        cutadapt: \\$(cutadapt --version)\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def trimmed  = meta.single_end ? \"-o ${prefix}.trim.fastq.gz\" : \"-o ${prefix}_1.trim.fastq.gz -p ${prefix}_2.trim.fastq.gz\"\n    \"\"\"\n    cutadapt \\\\\n        --cores $task.cpus \\\\\n        $args \\\\\n        $trimmed \\\\\n        $reads \\\\\n        > ${prefix}.cutadapt.log\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        cutadapt: \\$(cutadapt --version)\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "Cutadapt"
        ],
        "tools_url": [
            "https://bio.tools/cutadapt"
        ],
        "tools_dico": [
            {
                "name": "Cutadapt",
                "uri": "https://bio.tools/cutadapt",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0632",
                            "term": "Probes and primers"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Sequence trimming"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Trimming"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3495",
                                "term": "RNA sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3495",
                                "term": "RNA sequence"
                            }
                        ]
                    }
                ],
                "description": "Find and remove adapter sequences, primers, poly-A tails and other types of unwanted sequence from your high-throughput sequencing reads.",
                "homepage": "https://pypi.python.org/pypi/cutadapt"
            }
        ],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? 'bioconda::cutadapt=3.4' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/cutadapt:3.4--py39h38f01e4_1' : 'quay.io/biocontainers/cutadapt:3.4--py39h38f01e4_1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "CAT_FASTQ": {
        "name_process": "CAT_FASTQ",
        "string_process": "process CAT_FASTQ {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/ubuntu:20.04' :\n        'ubuntu:20.04' }\"\n\n    input:\n    tuple val(meta), path(reads, stageAs: \"input*/*\")\n\n    output:\n    tuple val(meta), path(\"*.merged.fastq.gz\"), emit: reads\n    path \"versions.yml\"                       , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def readList = reads.collect{ it.toString() }\n    if (meta.single_end) {\n        if (readList.size > 1) {\n            \"\"\"\n            cat ${readList.join(' ')} > ${prefix}.merged.fastq.gz\n\n            cat <<-END_VERSIONS > versions.yml\n            \"${task.process}\":\n                cat: \\$(echo \\$(cat --version 2>&1) | sed 's/^.*coreutils) //; s/ .*\\$//')\n            END_VERSIONS\n            \"\"\"\n        }\n    } else {\n        if (readList.size > 2) {\n            def read1 = []\n            def read2 = []\n            readList.eachWithIndex{ v, ix -> ( ix & 1 ? read2 : read1 ) << v }\n            \"\"\"\n            cat ${read1.join(' ')} > ${prefix}_1.merged.fastq.gz\n            cat ${read2.join(' ')} > ${prefix}_2.merged.fastq.gz\n\n            cat <<-END_VERSIONS > versions.yml\n            \"${task.process}\":\n                cat: \\$(echo \\$(cat --version 2>&1) | sed 's/^.*coreutils) //; s/ .*\\$//')\n            END_VERSIONS\n            \"\"\"\n        }\n    }\n}",
        "nb_lignes_process": 49,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def readList = reads.collect{ it.toString() }\n    if (meta.single_end) {\n        if (readList.size > 1) {\n            \"\"\"\n            cat ${readList.join(' ')} > ${prefix}.merged.fastq.gz\n\n            cat <<-END_VERSIONS > versions.yml\n            \"${task.process}\":\n                cat: \\$(echo \\$(cat --version 2>&1) | sed 's/^.*coreutils) //; s/ .*\\$//')\n            END_VERSIONS\n            \"\"\"\n        }\n    } else {\n        if (readList.size > 2) {\n            def read1 = []\n            def read2 = []\n            readList.eachWithIndex{ v, ix -> ( ix & 1 ? read2 : read1 ) << v }\n            \"\"\"\n            cat ${read1.join(' ')} > ${prefix}_1.merged.fastq.gz\n            cat ${read2.join(' ')} > ${prefix}_2.merged.fastq.gz\n\n            cat <<-END_VERSIONS > versions.yml\n            \"${task.process}\":\n                cat: \\$(echo \\$(cat --version 2>&1) | sed 's/^.*coreutils) //; s/ .*\\$//')\n            END_VERSIONS\n            \"\"\"\n        }\n    }",
        "nb_lignes_script": 29,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/ubuntu:20.04' : 'ubuntu:20.04' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "MSISENSORPRO_SCAN": {
        "name_process": "MSISENSORPRO_SCAN",
        "string_process": "process MSISENSORPRO_SCAN {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::msisensor-pro=1.2.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/msisensor-pro:1.2.0--hfc31af2_0' :\n        'quay.io/biocontainers/msisensor-pro:1.2.0--hfc31af2_0' }\"\n\n    input:\n    tuple val(meta), path(fasta)\n\n    output:\n    tuple val(meta), path(\"*.list\"), emit: list\n    path \"versions.yml\"            , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    msisensor-pro \\\\\n        scan \\\\\n        -d $fasta \\\\\n        -o ${prefix}.msisensor_scan.list \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        msisensor-pro: \\$(msisensor-pro 2>&1 | sed -nE 's/Version:\\\\sv([0-9]\\\\.[0-9])/\\\\1/ p')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    msisensor-pro \\\\\n        scan \\\\\n        -d $fasta \\\\\n        -o ${prefix}.msisensor_scan.list \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        msisensor-pro: \\$(msisensor-pro 2>&1 | sed -nE 's/Version:\\\\sv([0-9]\\\\.[0-9])/\\\\1/ p')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [
            "IScan"
        ],
        "tools_url": [
            "https://bio.tools/iscan"
        ],
        "tools_dico": [
            {
                "name": "IScan",
                "uri": "https://bio.tools/iscan",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0226",
                                    "term": "Annotation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A package to identify insertion sequences and similar transposable elements, their inverted repeats, and the direct target repeats they generate in entire genomes.",
                "homepage": "http://www.ieu.uzh.ch/wagner/software/IScan/index.html"
            }
        ],
        "inputs": [
            "meta",
            "fasta"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::msisensor-pro=1.2.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/msisensor-pro:1.2.0--hfc31af2_0' : 'quay.io/biocontainers/msisensor-pro:1.2.0--hfc31af2_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "BCFTOOLS_SORT": {
        "name_process": "BCFTOOLS_SORT",
        "string_process": "process BCFTOOLS_SORT {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::bcftools=1.14\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bcftools:1.14--h88f3f91_0':\n        'quay.io/biocontainers/bcftools:1.14--h88f3f91_0' }\"\n\n    input:\n    tuple val(meta), path(vcf)\n\n    output:\n    tuple val(meta), path(\"*.gz\"), emit: vcf\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    bcftools \\\\\n        sort \\\\\n        --output ${prefix}.vcf.gz \\\\\n        $args \\\\\n        $vcf\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bcftools: \\$(bcftools --version 2>&1 | head -n1 | sed 's/^.*bcftools //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    bcftools \\\\\n        sort \\\\\n        --output ${prefix}.vcf.gz \\\\\n        $args \\\\\n        $vcf\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bcftools: \\$(bcftools --version 2>&1 | head -n1 | sed 's/^.*bcftools //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [
            "BCFtools"
        ],
        "tools_url": [
            "https://bio.tools/bcftools"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "vcf"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::bcftools=1.14\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bcftools:1.14--h88f3f91_0': 'quay.io/biocontainers/bcftools:1.14--h88f3f91_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "PBCCS": {
        "name_process": "PBCCS",
        "string_process": "process PBCCS {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::pbccs=6.2.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/pbccs:6.2.0--h9ee0642_0' :\n        'quay.io/biocontainers/pbccs:6.2.0--h9ee0642_0' }\"\n\n    input:\n    tuple val(meta), path(bam), path(pbi)\n    val chunk_num\n    val chunk_on\n\n    output:\n    tuple val(meta), path(\"*.chunk*.bam\")     , emit: bam\n    tuple val(meta), path(\"*.chunk*.bam.pbi\") , emit: pbi\n    tuple val(meta), path(\"*.report.txt\" )    , emit: report_txt\n    tuple val(meta), path(\"*.report.json\" )   , emit: report_json\n    tuple val(meta), path(\"*.metrics.json.gz\"), emit: metrics\n    path  \"versions.yml\"                      , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    ccs \\\\\n        $bam \\\\\n        ${prefix}.chunk${chunk_num}.bam \\\\\n        --report-file ${prefix}.chunk${chunk_num}.report.txt \\\\\n        --report-json ${prefix}.chunk${chunk_num}.report.json \\\\\n        --metrics-json ${prefix}.chunk${chunk_num}.metrics.json.gz \\\\\n        --chunk $chunk_num/$chunk_on \\\\\n        -j $task.cpus \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        pbccs: \\$(echo \\$(ccs --version 2>&1) | grep 'ccs' | sed 's/^.*ccs //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 43,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    ccs \\\\\n        $bam \\\\\n        ${prefix}.chunk${chunk_num}.bam \\\\\n        --report-file ${prefix}.chunk${chunk_num}.report.txt \\\\\n        --report-json ${prefix}.chunk${chunk_num}.report.json \\\\\n        --metrics-json ${prefix}.chunk${chunk_num}.metrics.json.gz \\\\\n        --chunk $chunk_num/$chunk_on \\\\\n        -j $task.cpus \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        pbccs: \\$(echo \\$(ccs --version 2>&1) | grep 'ccs' | sed 's/^.*ccs //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 17,
        "language_script": "bash",
        "tools": [
            "ICCS"
        ],
        "tools_url": [
            "https://bio.tools/ICCS"
        ],
        "tools_dico": [
            {
                "name": "ICCS",
                "uri": "https://bio.tools/ICCS",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0593",
                            "term": "NMR"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3295",
                            "term": "Epigenetics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3385",
                            "term": "Light microscopy"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3306",
                            "term": "Biophysics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0593",
                            "term": "Nuclear magnetic resonance spectroscopy"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0593",
                            "term": "NMR spectroscopy"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3443",
                                    "term": "Image analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3435",
                                    "term": "Standardisation and normalisation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Nanoscale Distribution of Nuclear Sites by Super-Resolved Image Cross-Correlation Spectroscopy.\n\nUser-fiendly code for image cross-correlation specroscopy (ICCS) analysis based on the following article:",
                "homepage": "https://github.com/llanzano/ICCS"
            }
        ],
        "inputs": [
            "meta",
            "bam",
            "pbi",
            "chunk_num",
            "chunk_on"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::pbccs=6.2.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/pbccs:6.2.0--h9ee0642_0' : 'quay.io/biocontainers/pbccs:6.2.0--h9ee0642_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "PBBAM_PBMERGE": {
        "name_process": "PBBAM_PBMERGE",
        "string_process": "process PBBAM_PBMERGE {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::pbbam=1.7.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/pbbam:1.7.0--h058f120_1' :\n        'quay.io/biocontainers/pbbam:1.7.0--h058f120_1' }\"\n\n    input:\n    tuple val(meta), path(bam)\n\n    output:\n    tuple val(meta), path(\"*.bam\"), emit: bam\n    tuple val(meta), path(\"*.pbi\"), emit: pbi\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    pbmerge \\\\\n        -o ${prefix}.bam \\\\\n        $args \\\\\n        *.bam\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        pbbam: \\$( pbmerge --version|sed 's/pbmerge //' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    pbmerge \\\\\n        -o ${prefix}.bam \\\\\n        $args \\\\\n        *.bam\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        pbbam: \\$( pbmerge --version|sed 's/pbmerge //' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "bam"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::pbbam=1.7.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/pbbam:1.7.0--h058f120_1' : 'quay.io/biocontainers/pbbam:1.7.0--h058f120_1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "GENMAP_MAPPABILITY": {
        "name_process": "GENMAP_MAPPABILITY",
        "string_process": "process GENMAP_MAPPABILITY {\n    tag '$fasta'\n    label 'process_high'\n\n    conda (params.enable_conda ? \"bioconda::genmap=1.3.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/genmap:1.3.0--h1b792b2_1' :\n        'quay.io/biocontainers/genmap:1.3.0--h1b792b2_1' }\"\n\n    input:\n    path index\n\n    output:\n    path \"*.wig\"        , optional:true, emit: wig\n    path \"*.bedgraph\"   , optional:true, emit: bedgraph\n    path \"*.txt\"        , optional:true, emit: txt\n    path \"versions.yml\"                , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    genmap \\\\\n        map \\\\\n        $args \\\\\n        -I $index \\\\\n        -O mappability\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        genmap: \\$(genmap --version 2>&1 | sed 's/GenMap version: //; s/SeqAn.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    genmap \\\\\n        map \\\\\n        $args \\\\\n        -I $index \\\\\n        -O mappability\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        genmap: \\$(genmap --version 2>&1 | sed 's/GenMap version: //; s/SeqAn.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [
            "GenMAPP",
            "MAP"
        ],
        "tools_url": [
            "https://bio.tools/genmapp",
            "https://bio.tools/MAP"
        ],
        "tools_dico": [
            {
                "name": "GenMAPP",
                "uri": "https://bio.tools/genmapp",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Model organisms"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3518",
                            "term": "Microarray experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0602",
                            "term": "Molecular interactions, pathways and networks"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Organisms"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3518",
                            "term": "Microarrays"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0314",
                                    "term": "Gene expression profiling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0313",
                                    "term": "Expression profile clustering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0315",
                                    "term": "Expression profile comparison"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0314",
                                    "term": "Functional profiling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0314",
                                    "term": "Gene expression profile construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0314",
                                    "term": "Feature expression analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0314",
                                    "term": "Gene transcription profiling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0314",
                                    "term": "Gene expression quantification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0314",
                                    "term": "Gene expression profile generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression data analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Microarray expression data visualization tool, allowing data to be viewed on maps representing gene groupings and biological pathways.",
                "homepage": "http://www.genmapp.org/"
            },
            {
                "name": "MAP",
                "uri": "https://bio.tools/MAP",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3520",
                            "term": "Proteomics experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0121",
                            "term": "Proteomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0154",
                            "term": "Small molecules"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0108",
                            "term": "Protein expression"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3638",
                                    "term": "SILAC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3659",
                                    "term": "Regression analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression data analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Model-based analysis of proteomic data to detect proteins with significant abundance changes.\n\nMAP (Model-based Analysis of Proteomic data), is designed to statistically compare the proteomic profiles generated from different biological samples using the isotope labeling based mass spectrometry (MS) technique and directly identify proteins with significant abundance changes. Unlike many existing tools for this purpose, it does not require parallel/additional technical replicates to fathom technical variations; instead, MAP uses a novel step-by-step regression analysis to directly model technical variations from the profiles under comparison. Therefore, experimental designs and their expenses can be simplified and reduced for more practices",
                "homepage": "http://bioinfo.sibs.ac.cn/shaolab/MAP"
            }
        ],
        "inputs": [
            "index"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag '$fasta'",
            "label 'process_high'",
            "conda (params.enable_conda ? \"bioconda::genmap=1.3.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/genmap:1.3.0--h1b792b2_1' : 'quay.io/biocontainers/genmap:1.3.0--h1b792b2_1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "SVDB_MERGE": {
        "name_process": "SVDB_MERGE",
        "string_process": "process SVDB_MERGE {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::svdb=2.6.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/svdb:2.6.1--py39h5371cbf_0':\n        'quay.io/biocontainers/svdb:2.6.1--py39h5371cbf_0' }\"\n\n    input:\n    tuple val(meta), path(vcfs)\n    val (priority)\n\n    output:\n    tuple val(meta), path(\"*_sv_merge.vcf\"), emit: vcf\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args   = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def input  = \"${vcfs.join(\" \")}\"\n    def prio   = \"\"\n    if(priority) {\n        prio = \"--priority ${priority.join(',')}\"\n        input = \"\"\n        for (int index = 0; index < vcfs.size(); index++) {\n            input += \" ${vcfs[index]}:${priority[index]}\"\n        }\n    }\n    \"\"\"\n    svdb \\\\\n        --merge \\\\\n        $args \\\\\n        $prio \\\\\n        --vcf $input \\\\\n        > ${prefix}_sv_merge.vcf\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        svdb: \\$( echo \\$(svdb) | head -1 | sed 's/usage: SVDB-\\\\([0-9]\\\\.[0-9]\\\\.[0-9]\\\\).*/\\\\1/' )\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}_sv_merge.vcf\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        svdb: \\$( echo \\$(svdb) | head -1 | sed 's/usage: SVDB-\\\\([0-9]\\\\.[0-9]\\\\.[0-9]\\\\).*/\\\\1/' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 55,
        "string_script": "    def args   = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def input  = \"${vcfs.join(\" \")}\"\n    def prio   = \"\"\n    if(priority) {\n        prio = \"--priority ${priority.join(',')}\"\n        input = \"\"\n        for (int index = 0; index < vcfs.size(); index++) {\n            input += \" ${vcfs[index]}:${priority[index]}\"\n        }\n    }\n    \"\"\"\n    svdb \\\\\n        --merge \\\\\n        $args \\\\\n        $prio \\\\\n        --vcf $input \\\\\n        > ${prefix}_sv_merge.vcf\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        svdb: \\$( echo \\$(svdb) | head -1 | sed 's/usage: SVDB-\\\\([0-9]\\\\.[0-9]\\\\.[0-9]\\\\).*/\\\\1/' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 23,
        "language_script": "bash",
        "tools": [
            "PriorCD",
            "wossinput",
            "CINdex"
        ],
        "tools_url": [
            "https://bio.tools/PriorCD",
            "https://bio.tools/wossinput",
            "https://bio.tools/cindex"
        ],
        "tools_dico": [
            {
                "name": "PriorCD",
                "uri": "https://bio.tools/PriorCD",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3375",
                            "term": "Drug metabolism"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3336",
                            "term": "Drug discovery"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3379",
                            "term": "Preclinical and clinical studies"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3223",
                                    "term": "Differential gene expression profiling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2436",
                                    "term": "Gene-set enrichment analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3223",
                                    "term": "Differential gene analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3223",
                                    "term": "Differentially expressed gene identification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3223",
                                    "term": "Differential expression analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3223",
                                    "term": "Differential gene expression analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2436",
                                    "term": "GSEA"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2436",
                                    "term": "Functional enrichment analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2436",
                                    "term": "Gene-set over-represenation analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Prioritization of candidate cancer drugs based on a drug functional similarity network constructed by integrating pathway activities and drug activities | Prioritizing Cancer Drugs for Interested Cancer | Prioritize candidate cancer drugs for drug repositioning based on the random walk with restart algorithm in a drug-drug functional similarity network. 1) We firstly constructed a drug-drug functional similarity network by integrating pathway activity and drug activity derived from the NCI-60 cancer cell lines. 2) Secondly, we calculated drug repurposing score according to a set of approved therapeutic drugs of interested cancer based on the random walk with restart algorithm in the drug-drug functional similarity network. 3) Finally, the permutation test was used to calculate the statistical significance level for the drug repurposing score",
                "homepage": "https://cran.r-project.org/web/packages/PriorCD"
            },
            {
                "name": "wossinput",
                "uri": "https://bio.tools/wossinput",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0219",
                            "term": "Data submission, annotation and curation"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0958",
                                "term": "Tool metadata"
                            }
                        ]
                    }
                ],
                "description": "Find programs by EDAM input data.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/wossinput.html"
            },
            {
                "name": "CINdex",
                "uri": "https://bio.tools/cindex",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3233",
                                    "term": "Copy number estimation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3233",
                                    "term": "Transcript copy number estimation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The package addresses important area of high-throughput genomic analysis. It allows the automated processing and analysis of the experimental DNA copy number data generated by Affymetrix SNP 6.0 arrays or similar. It calculates the chromosome instability index to quantitatively characterize genome-wide DNA copy number alterations. This package calculates not only overall genomic instability, but also instability in terms of copy number gains and losses at the chromosome and cytoband level.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/CINdex.html"
            }
        ],
        "inputs": [
            "meta",
            "vcfs",
            "priority"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::svdb=2.6.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/svdb:2.6.1--py39h5371cbf_0': 'quay.io/biocontainers/svdb:2.6.1--py39h5371cbf_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}_sv_merge.vcf\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        svdb: \\$( echo \\$(svdb) | head -1 | sed 's/usage: SVDB-\\\\([0-9]\\\\.[0-9]\\\\.[0-9]\\\\).*/\\\\1/' )\n    END_VERSIONS\n    \"\"\""
    },
    "PAIRTOOLS_SELECT": {
        "name_process": "PAIRTOOLS_SELECT",
        "string_process": "process PAIRTOOLS_SELECT {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::pairtools=0.3.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/pairtools:0.3.0--py37hb9c2fc3_5' :\n        'quay.io/biocontainers/pairtools:0.3.0--py37hb9c2fc3_5' }\"\n\n    input:\n    tuple val(meta), path(input)\n\n    output:\n    tuple val(meta), path(\"*.selected.pairs.gz\")  , emit: selected\n    tuple val(meta), path(\"*.unselected.pairs.gz\"), emit: unselected\n    path \"versions.yml\"                           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    pairtools select \\\\\n        \"$args\" \\\\\n        -o ${prefix}.selected.pairs.gz \\\\\n        --output-rest ${prefix}.unselected.pairs.gz \\\\\n        ${input}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        pairtools: \\$(pairtools --version 2>&1 | sed 's/pairtools.*version //')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    pairtools select \\\\\n        \"$args\" \\\\\n        -o ${prefix}.selected.pairs.gz \\\\\n        --output-rest ${prefix}.unselected.pairs.gz \\\\\n        ${input}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        pairtools: \\$(pairtools --version 2>&1 | sed 's/pairtools.*version //')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "input"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::pairtools=0.3.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/pairtools:0.3.0--py37hb9c2fc3_5' : 'quay.io/biocontainers/pairtools:0.3.0--py37hb9c2fc3_5' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "BWA_INDEX": {
        "name_process": "BWA_INDEX",
        "string_process": "process BWA_INDEX {\n    tag \"$fasta\"\n    label 'process_high'\n\n    conda (params.enable_conda ? \"bioconda::bwa=0.7.17\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bwa:0.7.17--hed695b0_7' :\n        'quay.io/biocontainers/bwa:0.7.17--hed695b0_7' }\"\n\n    input:\n    path fasta\n\n    output:\n    path \"bwa\"         , emit: index\n    path \"versions.yml\", emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    mkdir bwa\n    bwa \\\\\n        index \\\\\n        $args \\\\\n        -p bwa/${fasta.baseName} \\\\\n        $fasta\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bwa: \\$(echo \\$(bwa 2>&1) | sed 's/^.*Version: //; s/Contact:.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    mkdir bwa\n    bwa \\\\\n        index \\\\\n        $args \\\\\n        -p bwa/${fasta.baseName} \\\\\n        $fasta\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bwa: \\$(echo \\$(bwa 2>&1) | sed 's/^.*Version: //; s/Contact:.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [
            "BWA",
            "CINdex"
        ],
        "tools_url": [
            "https://bio.tools/bwa",
            "https://bio.tools/cindex"
        ],
        "tools_dico": [
            {
                "name": "BWA",
                "uri": "https://bio.tools/bwa",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3211",
                                    "term": "Genome indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2044",
                                "term": "Sequence"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_2012",
                                "term": "Sequence coordinates"
                            },
                            {
                                "uri": "http://edamontology.org/data_1916",
                                "term": "Alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ]
                    }
                ],
                "description": "Fast, accurate, memory-efficient aligner for short and long sequencing reads",
                "homepage": "http://bio-bwa.sourceforge.net"
            },
            {
                "name": "CINdex",
                "uri": "https://bio.tools/cindex",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3233",
                                    "term": "Copy number estimation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3233",
                                    "term": "Transcript copy number estimation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The package addresses important area of high-throughput genomic analysis. It allows the automated processing and analysis of the experimental DNA copy number data generated by Affymetrix SNP 6.0 arrays or similar. It calculates the chromosome instability index to quantitatively characterize genome-wide DNA copy number alterations. This package calculates not only overall genomic instability, but also instability in terms of copy number gains and losses at the chromosome and cytoband level.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/CINdex.html"
            }
        ],
        "inputs": [
            "fasta"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$fasta\"",
            "label 'process_high'",
            "conda (params.enable_conda ? \"bioconda::bwa=0.7.17\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bwa:0.7.17--hed695b0_7' : 'quay.io/biocontainers/bwa:0.7.17--hed695b0_7' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "DSHBIO_FILTERGFF3": {
        "name_process": "DSHBIO_FILTERGFF3",
        "string_process": "process DSHBIO_FILTERGFF3 {\n    tag \"${meta.id}\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::dsh-bio=2.0.8\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/dsh-bio:2.0.8--hdfd78af_0' :\n        'quay.io/biocontainers/dsh-bio:2.0.8--hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(gff3)\n\n    output:\n    tuple val(meta), path(\"*.gff3.gz\"), emit: gff3\n    path \"versions.yml\"               , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    dsh-bio \\\\\n        filter-gff3 \\\\\n        $args \\\\\n        -i $gff3 \\\\\n        -o ${prefix}.gff3.gz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        dshbio: \\$(dsh-bio --version 2>&1 | grep -o 'dsh-bio-tools .*' | cut -f2 -d ' ')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    dsh-bio \\\\\n        filter-gff3 \\\\\n        $args \\\\\n        -i $gff3 \\\\\n        -o ${prefix}.gff3.gz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        dshbio: \\$(dsh-bio --version 2>&1 | grep -o 'dsh-bio-tools .*' | cut -f2 -d ' ')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "gff3"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"${meta.id}\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::dsh-bio=2.0.8\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/dsh-bio:2.0.8--hdfd78af_0' : 'quay.io/biocontainers/dsh-bio:2.0.8--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "VCFLIB_VCFUNIQ": {
        "name_process": "VCFLIB_VCFUNIQ",
        "string_process": "\nprocess VCFLIB_VCFUNIQ {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::vcflib=1.0.2\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/vcflib:1.0.2--h3198e80_5':\n        'quay.io/biocontainers/vcflib:1.0.2--h3198e80_5' }\"\n\n    input:\n    tuple val(meta), path(vcf), path(tbi)\n\n    output:\n    tuple val(meta), path(\"*.gz\"), emit: vcf\n    path \"versions.yml\"          , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    vcfuniq \\\\\n        $vcf \\\\\n        | bgzip -c $args > ${prefix}.vcf.gz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        vcflib: $VERSION\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    vcfuniq \\\\\n        $vcf \\\\\n        | bgzip -c $args > ${prefix}.vcf.gz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        vcflib: $VERSION\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "vcf",
            "tbi"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::vcflib=1.0.2\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/vcflib:1.0.2--h3198e80_5': 'quay.io/biocontainers/vcflib:1.0.2--h3198e80_5' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "MANTA_SOMATIC": {
        "name_process": "MANTA_SOMATIC",
        "string_process": "process MANTA_SOMATIC {\n    tag \"$meta.id\"\n    label 'process_high'\n\n    conda (params.enable_conda ? \"bioconda::manta=1.6.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/manta:1.6.0--h9ee0642_1' :\n        'quay.io/biocontainers/manta:1.6.0--h9ee0642_1' }\"\n\n    input:\n    tuple val(meta), path(input_normal), path(input_index_normal), path(input_tumor), path(input_index_tumor), path(target_bed), path(target_bed_tbi)\n    path fasta\n    path fai\n\n    output:\n    tuple val(meta), path(\"*.candidate_small_indels.vcf.gz\")     , emit: candidate_small_indels_vcf\n    tuple val(meta), path(\"*.candidate_small_indels.vcf.gz.tbi\") , emit: candidate_small_indels_vcf_tbi\n    tuple val(meta), path(\"*.candidate_sv.vcf.gz\")               , emit: candidate_sv_vcf\n    tuple val(meta), path(\"*.candidate_sv.vcf.gz.tbi\")           , emit: candidate_sv_vcf_tbi\n    tuple val(meta), path(\"*.diploid_sv.vcf.gz\")                 , emit: diploid_sv_vcf\n    tuple val(meta), path(\"*.diploid_sv.vcf.gz.tbi\")             , emit: diploid_sv_vcf_tbi\n    tuple val(meta), path(\"*.somatic_sv.vcf.gz\")                 , emit: somatic_sv_vcf\n    tuple val(meta), path(\"*.somatic_sv.vcf.gz.tbi\")             , emit: somatic_sv_vcf_tbi\n    path \"versions.yml\"                                          , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def options_manta = target_bed ? \"--exome --callRegions $target_bed\" : \"\"\n\n    \"\"\"\n    configManta.py \\\n        --tumorBam $input_tumor \\\n        --normalBam $input_normal \\\n        --reference $fasta \\\n        $options_manta \\\n        --runDir manta\n\n    python manta/runWorkflow.py -m local -j $task.cpus\n\n    mv manta/results/variants/candidateSmallIndels.vcf.gz     ${prefix}.candidate_small_indels.vcf.gz\n    mv manta/results/variants/candidateSmallIndels.vcf.gz.tbi ${prefix}.candidate_small_indels.vcf.gz.tbi\n    mv manta/results/variants/candidateSV.vcf.gz              ${prefix}.candidate_sv.vcf.gz\n    mv manta/results/variants/candidateSV.vcf.gz.tbi          ${prefix}.candidate_sv.vcf.gz.tbi\n    mv manta/results/variants/diploidSV.vcf.gz                ${prefix}.diploid_sv.vcf.gz\n    mv manta/results/variants/diploidSV.vcf.gz.tbi            ${prefix}.diploid_sv.vcf.gz.tbi\n    mv manta/results/variants/somaticSV.vcf.gz                ${prefix}.somatic_sv.vcf.gz\n    mv manta/results/variants/somaticSV.vcf.gz.tbi            ${prefix}.somatic_sv.vcf.gz.tbi\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        manta: \\$( configManta.py --version )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 56,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def options_manta = target_bed ? \"--exome --callRegions $target_bed\" : \"\"\n\n    \"\"\"\n    configManta.py \\\n        --tumorBam $input_tumor \\\n        --normalBam $input_normal \\\n        --reference $fasta \\\n        $options_manta \\\n        --runDir manta\n\n    python manta/runWorkflow.py -m local -j $task.cpus\n\n    mv manta/results/variants/candidateSmallIndels.vcf.gz     ${prefix}.candidate_small_indels.vcf.gz\n    mv manta/results/variants/candidateSmallIndels.vcf.gz.tbi ${prefix}.candidate_small_indels.vcf.gz.tbi\n    mv manta/results/variants/candidateSV.vcf.gz              ${prefix}.candidate_sv.vcf.gz\n    mv manta/results/variants/candidateSV.vcf.gz.tbi          ${prefix}.candidate_sv.vcf.gz.tbi\n    mv manta/results/variants/diploidSV.vcf.gz                ${prefix}.diploid_sv.vcf.gz\n    mv manta/results/variants/diploidSV.vcf.gz.tbi            ${prefix}.diploid_sv.vcf.gz.tbi\n    mv manta/results/variants/somaticSV.vcf.gz                ${prefix}.somatic_sv.vcf.gz\n    mv manta/results/variants/somaticSV.vcf.gz.tbi            ${prefix}.somatic_sv.vcf.gz.tbi\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        manta: \\$( configManta.py --version )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 27,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "input_normal",
            "input_index_normal",
            "input_tumor",
            "input_index_tumor",
            "target_bed",
            "target_bed_tbi",
            "fasta",
            "fai"
        ],
        "nb_inputs": 9,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "conda (params.enable_conda ? \"bioconda::manta=1.6.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/manta:1.6.0--h9ee0642_1' : 'quay.io/biocontainers/manta:1.6.0--h9ee0642_1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "BISCUIT_MERGECG": {
        "name_process": "BISCUIT_MERGECG",
        "string_process": "process BISCUIT_MERGECG {\n    tag \"$meta.id\"\n    label 'process_long'\n\n    conda (params.enable_conda ? \"bioconda::biscuit=1.0.2.20220113 bioconda::samtools=1.15\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mulled-v2-db16f1c237a26ea9245cf9924f858974ff321d6e:17fa66297f088a1bc7560b7b90dc273bf23f2d8c-0':\n        'quay.io/biocontainers/mulled-v2-db16f1c237a26ea9245cf9924f858974ff321d6e:17fa66297f088a1bc7560b7b90dc273bf23f2d8c-0' }\"\n\n    input:\n    tuple val(meta), path(bed)\n    path index\n\n    output:\n    tuple val(meta), path(\"*.bed.gz\"), emit: mergecg_bed\n    path \"versions.yml\"              , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    INDEX=`find -L ./ -name \"*.bis.amb\" | sed 's/.bis.amb//'`\n\n    biscuit mergecg \\\\\n        $args \\\\\n        \\$INDEX \\\\\n        $bed | \\\\\n    LC_ALL=C sort -k1,1 -k2,2n | \\\\\n    bgzip \\\\\n        $args2 \\\\\n        -c > ${prefix}.bed.gz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        biscuit: \\$( biscuit version |& sed '1!d; s/^.*BISCUIT Version: //' )\n        samtools: \\$( samtools --version |& sed '1!d; s/^.*samtools //' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 41,
        "string_script": "    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    INDEX=`find -L ./ -name \"*.bis.amb\" | sed 's/.bis.amb//'`\n\n    biscuit mergecg \\\\\n        $args \\\\\n        \\$INDEX \\\\\n        $bed | \\\\\n    LC_ALL=C sort -k1,1 -k2,2n | \\\\\n    bgzip \\\\\n        $args2 \\\\\n        -c > ${prefix}.bed.gz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        biscuit: \\$( biscuit version |& sed '1!d; s/^.*BISCUIT Version: //' )\n        samtools: \\$( samtools --version |& sed '1!d; s/^.*samtools //' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 20,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "bed",
            "index"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_long'",
            "conda (params.enable_conda ? \"bioconda::biscuit=1.0.2.20220113 bioconda::samtools=1.15\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mulled-v2-db16f1c237a26ea9245cf9924f858974ff321d6e:17fa66297f088a1bc7560b7b90dc273bf23f2d8c-0': 'quay.io/biocontainers/mulled-v2-db16f1c237a26ea9245cf9924f858974ff321d6e:17fa66297f088a1bc7560b7b90dc273bf23f2d8c-0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "GATK4_COMBINEGVCFS": {
        "name_process": "GATK4_COMBINEGVCFS",
        "string_process": "process GATK4_COMBINEGVCFS {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::gatk4=4.2.6.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/gatk4:4.2.6.1--hdfd78af_0':\n        'quay.io/biocontainers/gatk4:4.2.6.1--hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(vcf), path(vcf_idx)\n    path  fasta\n    path  fai\n    path  dict\n\n    output:\n    tuple val(meta), path(\"*.combined.g.vcf.gz\"), emit: combined_gvcf\n    path \"versions.yml\"                         , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def input_list = vcf.collect{\"--variant $it\"}.join(' ')\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[GATK COMBINEGVCFS] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    gatk --java-options \"-Xmx${avail_mem}g\" CombineGVCFs \\\\\n        $input_list \\\\\n        --output ${prefix}.combined.g.vcf.gz \\\\\n        --reference ${fasta} \\\\\n        --tmp-dir . \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 45,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def input_list = vcf.collect{\"--variant $it\"}.join(' ')\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[GATK COMBINEGVCFS] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    gatk --java-options \"-Xmx${avail_mem}g\" CombineGVCFs \\\\\n        $input_list \\\\\n        --output ${prefix}.combined.g.vcf.gz \\\\\n        --reference ${fasta} \\\\\n        --tmp-dir . \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 22,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "meta",
            "vcf",
            "vcf_idx",
            "fasta",
            "fai",
            "dict"
        ],
        "nb_inputs": 6,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::gatk4=4.2.6.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/gatk4:4.2.6.1--hdfd78af_0': 'quay.io/biocontainers/gatk4:4.2.6.1--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "DRAGONFLYE": {
        "name_process": "DRAGONFLYE",
        "string_process": "process DRAGONFLYE {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::dragonflye=1.0.11\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/dragonflye:1.0.11--hdfd78af_0' :\n        'quay.io/biocontainers/dragonflye:1.0.11--hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path(\"contigs.fa\")                                        , emit: contigs\n    tuple val(meta), path(\"dragonflye.log\")                                    , emit: log\n    tuple val(meta), path(\"{flye,miniasm,raven}.fasta\")                        , emit: raw_contigs\n    tuple val(meta), path(\"{miniasm,raven}-unpolished.gfa\"), optional:true     , emit: gfa\n    tuple val(meta), path(\"flye-info.txt\"), optional:true                      , emit: txt\n    path \"versions.yml\"                                                        , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def memory = task.memory.toGiga()\n    \"\"\"\n    dragonflye \\\\\n        --reads ${reads} \\\\\n        $args \\\\\n        --cpus $task.cpus \\\\\n        --ram $memory \\\\\n        --outdir ./ \\\\\n        --force\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        dragonflye: \\$(dragonflye --version 2>&1 | sed 's/^.*dragonflye //' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 39,
        "string_script": "    def args = task.ext.args ?: ''\n    def memory = task.memory.toGiga()\n    \"\"\"\n    dragonflye \\\\\n        --reads ${reads} \\\\\n        $args \\\\\n        --cpus $task.cpus \\\\\n        --ram $memory \\\\\n        --outdir ./ \\\\\n        --force\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        dragonflye: \\$(dragonflye --version 2>&1 | sed 's/^.*dragonflye //' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::dragonflye=1.0.11\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/dragonflye:1.0.11--hdfd78af_0' : 'quay.io/biocontainers/dragonflye:1.0.11--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "GRAPHMAP2_INDEX": {
        "name_process": "GRAPHMAP2_INDEX",
        "string_process": "process GRAPHMAP2_INDEX {\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::graphmap=0.6.3\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/graphmap:0.6.3--he513fc3_0' :\n        'quay.io/biocontainers/graphmap:0.6.3--he513fc3_0' }\"\n\n    input:\n    path fasta\n\n    output:\n    path \"*.gmidx\"      , emit: index\n    path \"versions.yml\" , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    graphmap2 \\\\\n        align \\\\\n        -t $task.cpus \\\\\n        -I \\\\\n        $args \\\\\n        -r $fasta\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        graphmap2: \\$(echo \\$(graphmap2 align 2>&1) | sed 's/^.*Version: v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    graphmap2 \\\\\n        align \\\\\n        -t $task.cpus \\\\\n        -I \\\\\n        $args \\\\\n        -r $fasta\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        graphmap2: \\$(echo \\$(graphmap2 align 2>&1) | sed 's/^.*Version: v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [
            "Graphmap2",
            "ALIGN"
        ],
        "tools_url": [
            "https://bio.tools/Graphmap2",
            "https://bio.tools/align"
        ],
        "tools_dico": [
            {
                "name": "Graphmap2",
                "uri": "https://bio.tools/Graphmap2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3320",
                            "term": "RNA splicing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "Gene transcripts"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3320",
                            "term": "Alternative splicing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "mRNA features"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Sequence trimming"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0526",
                                    "term": "EST assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Trimming"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0526",
                                    "term": "Sequence assembly (EST assembly)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Splice-aware RNA-seq mapper for long reads | GraphMap - A highly sensitive and accurate mapper for long, error-prone reads http://www.nature.com/ncomms/2016/160415/ncomms11307/full/ncomms11307.html https://www.biorxiv.org/content/10.1101/720458v1 | GraphMap2 - A highly sensitive and accurate mapper for long, error-prone reads | GMAP: A Genomic Mapping and Alignment Program for mRNA and EST Sequences, and | GSNAP: Genomic Short-read Nucleotide Alignment Program | Links are provided below in parentheses for users who wish to download the files with a command-line tool, like wget",
                "homepage": "https://github.com/lbcb-sci/graphmap2"
            },
            {
                "name": "ALIGN",
                "uri": "https://bio.tools/align",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0300",
                                    "term": "Sequence profile alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0495",
                                    "term": "Local alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0496",
                                    "term": "Global alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0495",
                                    "term": "Local sequence alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0495",
                                    "term": "Sequence alignment (local)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0496",
                                    "term": "Global sequence alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0496",
                                    "term": "Sequence alignment (global)"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_1460",
                                "term": "Protein structure"
                            },
                            {
                                "uri": "http://edamontology.org/data_2976",
                                "term": "Protein sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_1384",
                                "term": "Protein sequence alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_0869",
                                "term": "Sequence-profile alignment"
                            }
                        ]
                    }
                ],
                "description": "Pairwise alignment tool.",
                "homepage": "http://protein.bio.unipd.it/align2"
            }
        ],
        "inputs": [
            "fasta"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::graphmap=0.6.3\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/graphmap:0.6.3--he513fc3_0' : 'quay.io/biocontainers/graphmap:0.6.3--he513fc3_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "MAPDAMAGE2": {
        "name_process": "MAPDAMAGE2",
        "string_process": "process MAPDAMAGE2 {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::mapdamage2=2.2.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mapdamage2:2.2.1--pyr40_0' :\n        'quay.io/biocontainers/mapdamage2:2.2.1--pyr40_0' }\"\n\n    input:\n    tuple val(meta), path(bam)\n    path(fasta)\n\n    output:\n    tuple val(meta), path(\"results_*/Runtime_log.txt\")                                    ,emit: runtime_log\n    tuple val(meta), path(\"results_*/Fragmisincorporation_plot.pdf\"), optional: true      ,emit: fragmisincorporation_plot\n    tuple val(meta), path(\"results_*/Length_plot.pdf\"), optional: true                    ,emit: length_plot\n    tuple val(meta), path(\"results_*/misincorporation.txt\"), optional: true               ,emit: misincorporation\n    tuple val(meta), path(\"results_*/lgdistribution.txt\"), optional: true                 ,emit: lgdistribution\n    tuple val(meta), path(\"results_*/dnacomp.txt\"), optional: true                        ,emit: dnacomp\n    tuple val(meta), path(\"results_*/Stats_out_MCMC_hist.pdf\"), optional: true            ,emit: stats_out_mcmc_hist\n    tuple val(meta), path(\"results_*/Stats_out_MCMC_iter.csv\"), optional: true            ,emit: stats_out_mcmc_iter\n    tuple val(meta), path(\"results_*/Stats_out_MCMC_trace.pdf\"), optional: true           ,emit: stats_out_mcmc_trace\n    tuple val(meta), path(\"results_*/Stats_out_MCMC_iter_summ_stat.csv\"), optional: true  ,emit: stats_out_mcmc_iter_summ_stat\n    tuple val(meta), path(\"results_*/Stats_out_MCMC_post_pred.pdf\"), optional: true       ,emit: stats_out_mcmc_post_pred\n    tuple val(meta), path(\"results_*/Stats_out_MCMC_correct_prob.csv\"), optional: true    ,emit: stats_out_mcmc_correct_prob\n    tuple val(meta), path(\"results_*/dnacomp_genome.csv\"), optional: true                 ,emit: dnacomp_genome\n    tuple val(meta), path(\"results_*/rescaled.bam\"), optional: true                       ,emit: rescaled\n    tuple val(meta), path(\"results_*/5pCtoT_freq.txt\"), optional: true                    ,emit: pctot_freq\n    tuple val(meta), path(\"results_*/3pGtoA_freq.txt\"), optional: true                    ,emit: pgtoa_freq\n    tuple val(meta), path(\"results_*/*.fasta\"), optional: true                            ,emit: fasta\n    tuple val(meta), path(\"*/\"), optional: true                                           ,emit: folder\n    path \"versions.yml\",emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    mapDamage \\\\\n            $args \\\\\n            -i $bam \\\\\n            -r $fasta\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        mapdamage2: \\$(echo \\$(mapDamage --version))\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 50,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    mapDamage \\\\\n            $args \\\\\n            -i $bam \\\\\n            -r $fasta\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        mapdamage2: \\$(echo \\$(mapDamage --version))\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [
            "MapDamage"
        ],
        "tools_url": [
            "https://bio.tools/mapdamage"
        ],
        "tools_dico": [
            {
                "name": "MapDamage",
                "uri": "https://bio.tools/mapdamage",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Identify and quantify DNA damage patterns in ancient DNA.",
                "homepage": "http://ginolhac.github.io/mapDamage/"
            }
        ],
        "inputs": [
            "meta",
            "bam",
            "fasta"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::mapdamage2=2.2.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mapdamage2:2.2.1--pyr40_0' : 'quay.io/biocontainers/mapdamage2:2.2.1--pyr40_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "AMPS": {
        "name_process": "AMPS",
        "string_process": "process AMPS {\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::hops=0.35\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/hops:0.35--hdfd78af_1' :\n        'quay.io/biocontainers/hops:0.35--hdfd78af_1' }\"\n\n    input:\n    path maltextract_results\n    path taxon_list\n    val filter\n\n    output:\n    path \"results/heatmap_overview_Wevid.json\" , emit: json\n    path \"results/heatmap_overview_Wevid.pdf\"  , emit: summary_pdf\n    path \"results/heatmap_overview_Wevid.tsv\"  , emit: tsv\n    path \"results/pdf_candidate_profiles/\"     , emit: candidate_pdfs\n    path \"versions.yml\"                        , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    postprocessing.AMPS.r \\\\\n        -r $maltextract_results \\\\\n        -n $taxon_list \\\\\n        -m $filter \\\\\n        -t $task.cpus \\\\\n        -j \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        amps: \\$(echo \\$(hops --version 2>&1) | sed 's/HOPS version//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 38,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    postprocessing.AMPS.r \\\\\n        -r $maltextract_results \\\\\n        -n $taxon_list \\\\\n        -m $filter \\\\\n        -t $task.cpus \\\\\n        -j \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        amps: \\$(echo \\$(hops --version 2>&1) | sed 's/HOPS version//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "maltextract_results",
            "taxon_list",
            "filter"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::hops=0.35\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/hops:0.35--hdfd78af_1' : 'quay.io/biocontainers/hops:0.35--hdfd78af_1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "MACREL_CONTIGS": {
        "name_process": "MACREL_CONTIGS",
        "string_process": "process MACREL_CONTIGS {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::macrel=1.1.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/macrel:1.1.0--py36hc5360cc_0':\n        'quay.io/biocontainers/macrel:1.1.0--py36hc5360cc_0' }\"\n\n    input:\n    tuple val(meta), path(fasta)\n\n    output:\n    tuple val(meta), path(\"*/*.smorfs.faa.gz\")      , emit: smorfs\n    tuple val(meta), path(\"*/*.all_orfs.faa.gz\")    , emit: all_orfs\n    tuple val(meta), path(\"*/*.prediction.gz\")      , emit: amp_prediction\n    tuple val(meta), path(\"*/*.md\")                 , emit: readme_file\n    tuple val(meta), path(\"*/*_log.txt\")            , emit: log_file\n    path \"versions.yml\"                             , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    macrel contigs \\\\\n        $args \\\\\n        --fasta $fasta \\\\\n        --output ${prefix}/ \\\\\n        --tag ${prefix} \\\\\n        --log-file ${prefix}/${prefix}_log.txt \\\\\n        --threads $task.cpus\n\n    gzip --no-name ${prefix}/*.faa\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        macrel: \\$(echo \\$(macrel --version | sed 's/macrel //g'))\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 41,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    macrel contigs \\\\\n        $args \\\\\n        --fasta $fasta \\\\\n        --output ${prefix}/ \\\\\n        --tag ${prefix} \\\\\n        --log-file ${prefix}/${prefix}_log.txt \\\\\n        --threads $task.cpus\n\n    gzip --no-name ${prefix}/*.faa\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        macrel: \\$(echo \\$(macrel --version | sed 's/macrel //g'))\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 17,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "fasta"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::macrel=1.1.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/macrel:1.1.0--py36hc5360cc_0': 'quay.io/biocontainers/macrel:1.1.0--py36hc5360cc_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "GTDBTK_CLASSIFYWF": {
        "name_process": "GTDBTK_CLASSIFYWF",
        "string_process": "\nprocess GTDBTK_CLASSIFYWF {\n    tag \"${meta.assembler}-${meta.id}\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::gtdbtk=1.5.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/gtdbtk:1.5.0--pyhdfd78af_0' :\n        'quay.io/biocontainers/gtdbtk:1.5.0--pyhdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(\"bins/*\")\n    tuple val(db_name), path(\"database/*\")\n\n    output:\n    path \"gtdbtk.${meta.assembler}-${meta.id}.*.summary.tsv\"        , emit: summary\n    path \"gtdbtk.${meta.assembler}-${meta.id}.*.classify.tree.gz\"   , emit: tree\n    path \"gtdbtk.${meta.assembler}-${meta.id}.*.markers_summary.tsv\", emit: markers\n    path \"gtdbtk.${meta.assembler}-${meta.id}.*.msa.fasta.gz\"       , emit: msa\n    path \"gtdbtk.${meta.assembler}-${meta.id}.*.user_msa.fasta\"     , emit: user_msa\n    path \"gtdbtk.${meta.assembler}-${meta.id}.*.filtered.tsv\"       , emit: filtered\n    path \"gtdbtk.${meta.assembler}-${meta.id}.log\"                  , emit: log\n    path \"gtdbtk.${meta.assembler}-${meta.id}.warnings.log\"         , emit: warnings\n    path \"gtdbtk.${meta.assembler}-${meta.id}.failed_genomes.tsv\"   , emit: failed\n    path \"versions.yml\"                                             , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def pplacer_scratch = params.gtdbtk_pplacer_scratch ? \"--scratch_dir pplacer_tmp\" : \"\"\n    \"\"\"\n    export GTDBTK_DATA_PATH=\"\\${PWD}/database\"\n    if [ ${pplacer_scratch} != \"\" ] ; then\n        mkdir pplacer_tmp\n    fi\n\n    gtdbtk classify_wf \\\\\n        $args \\\\\n        --genome_dir bins \\\\\n        --prefix \"gtdbtk.${meta.assembler}-${meta.id}\" \\\\\n        --out_dir \"\\${PWD}\" \\\\\n        --cpus $task.cpus \\\\\n        --pplacer_cpus $params.gtdbtk_pplacer_cpus \\\\\n        $pplacer_scratch \\\\\n        --min_perc_aa $params.gtdbtk_min_perc_aa \\\\\n        --min_af $params.gtdbtk_min_af\n\n    gzip \"gtdbtk.${meta.assembler}-${meta.id}\".*.classify.tree \"gtdbtk.${meta.assembler}-${meta.id}\".*.msa.fasta\n    mv gtdbtk.log \"gtdbtk.${meta.assembler}-${meta.id}.log\"\n    mv gtdbtk.warnings.log \"gtdbtk.${meta.assembler}-${meta.id}.warnings.log\"\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gtdbtk: \\$(echo \\$(gtdbtk --version -v 2>&1) | sed \"s/gtdbtk: version //; s/ Copyright.*//\")\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    \"\"\"\n    touch gtdbtk.${meta.assembler}-${meta.id}.stub.summary.tsv\n    touch gtdbtk.${meta.assembler}-${meta.id}.stub.classify.tree.gz\n    touch gtdbtk.${meta.assembler}-${meta.id}.stub.markers_summary.tsv\n    touch gtdbtk.${meta.assembler}-${meta.id}.stub.msa.fasta.gz\n    touch gtdbtk.${meta.assembler}-${meta.id}.stub.user_msa.fasta\n    touch gtdbtk.${meta.assembler}-${meta.id}.stub.filtered.tsv\n    touch gtdbtk.${meta.assembler}-${meta.id}.log\n    touch gtdbtk.${meta.assembler}-${meta.id}.warnings.log\n    touch gtdbtk.${meta.assembler}-${meta.id}.failed_genomes.tsv\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gtdbtk: $VERSION\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 75,
        "string_script": "    def args = task.ext.args ?: ''\n    def pplacer_scratch = params.gtdbtk_pplacer_scratch ? \"--scratch_dir pplacer_tmp\" : \"\"\n    \"\"\"\n    export GTDBTK_DATA_PATH=\"\\${PWD}/database\"\n    if [ ${pplacer_scratch} != \"\" ] ; then\n        mkdir pplacer_tmp\n    fi\n\n    gtdbtk classify_wf \\\\\n        $args \\\\\n        --genome_dir bins \\\\\n        --prefix \"gtdbtk.${meta.assembler}-${meta.id}\" \\\\\n        --out_dir \"\\${PWD}\" \\\\\n        --cpus $task.cpus \\\\\n        --pplacer_cpus $params.gtdbtk_pplacer_cpus \\\\\n        $pplacer_scratch \\\\\n        --min_perc_aa $params.gtdbtk_min_perc_aa \\\\\n        --min_af $params.gtdbtk_min_af\n\n    gzip \"gtdbtk.${meta.assembler}-${meta.id}\".*.classify.tree \"gtdbtk.${meta.assembler}-${meta.id}\".*.msa.fasta\n    mv gtdbtk.log \"gtdbtk.${meta.assembler}-${meta.id}.log\"\n    mv gtdbtk.warnings.log \"gtdbtk.${meta.assembler}-${meta.id}.warnings.log\"\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gtdbtk: \\$(echo \\$(gtdbtk --version -v 2>&1) | sed \"s/gtdbtk: version //; s/ Copyright.*//\")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 27,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "db_name"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"${meta.assembler}-${meta.id}\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::gtdbtk=1.5.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/gtdbtk:1.5.0--pyhdfd78af_0' : 'quay.io/biocontainers/gtdbtk:1.5.0--pyhdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    \"\"\"\n    touch gtdbtk.${meta.assembler}-${meta.id}.stub.summary.tsv\n    touch gtdbtk.${meta.assembler}-${meta.id}.stub.classify.tree.gz\n    touch gtdbtk.${meta.assembler}-${meta.id}.stub.markers_summary.tsv\n    touch gtdbtk.${meta.assembler}-${meta.id}.stub.msa.fasta.gz\n    touch gtdbtk.${meta.assembler}-${meta.id}.stub.user_msa.fasta\n    touch gtdbtk.${meta.assembler}-${meta.id}.stub.filtered.tsv\n    touch gtdbtk.${meta.assembler}-${meta.id}.log\n    touch gtdbtk.${meta.assembler}-${meta.id}.warnings.log\n    touch gtdbtk.${meta.assembler}-${meta.id}.failed_genomes.tsv\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gtdbtk: $VERSION\n    END_VERSIONS\n    \"\"\""
    },
    "CHROMAP_CHROMAP": {
        "name_process": "CHROMAP_CHROMAP",
        "string_process": "process CHROMAP_CHROMAP {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::chromap=0.2.1 bioconda::samtools=1.15.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mulled-v2-1f09f39f20b1c4ee36581dc81cc323c70e661633:963e4fe6a85c548a4018585660aed79780a175d3-0' :\n        'quay.io/biocontainers/mulled-v2-1f09f39f20b1c4ee36581dc81cc323c70e661633:963e4fe6a85c548a4018585660aed79780a175d3-0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n    path fasta\n    path index\n    path barcodes\n    path whitelist\n    path chr_order\n    path pairs_chr_order\n\n    output:\n    tuple val(meta), path(\"*.bed.gz\")     , optional:true, emit: bed\n    tuple val(meta), path(\"*.bam\")        , optional:true, emit: bam\n    tuple val(meta), path(\"*.tagAlign.gz\"), optional:true, emit: tagAlign\n    tuple val(meta), path(\"*.pairs.gz\")   , optional:true, emit: pairs\n    path \"versions.yml\"                                  , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def args_list = args.tokenize()\n\n    def file_extension = args.contains(\"--SAM\") ? 'sam' : args.contains(\"--TagAlign\")? 'tagAlign' : args.contains(\"--pairs\")? 'pairs' : 'bed'\n    if (barcodes) {\n        args_list << \"-b ${barcodes.join(',')}\"\n        if (whitelist) {\n            args_list << \"--barcode-whitelist $whitelist\"\n        }\n    }\n    if (chr_order) {\n        args_list << \"--chr-order $chr_order\"\n    }\n    if (pairs_chr_order){\n        args_list << \"--pairs-natural-chr-order $pairs_chr_order\"\n    }\n    def final_args = args_list.join(' ')\n    def compression_cmds = \"gzip -n ${prefix}.${file_extension}\"\n    if (args.contains(\"--SAM\")) {\n        compression_cmds = \"\"\"\n        samtools view $args2 -@ $task.cpus -bh \\\\\n            -o ${prefix}.bam ${prefix}.${file_extension}\n        rm ${prefix}.${file_extension}\n        \"\"\"\n    }\n    if (meta.single_end) {\n        \"\"\"\n        chromap \\\\\n            $final_args \\\\\n            -t $task.cpus \\\\\n            -x $index \\\\\n            -r $fasta \\\\\n            -1 ${reads.join(',')} \\\\\n            -o ${prefix}.${file_extension}\n\n        $compression_cmds\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            chromap: \\$(echo \\$(chromap --version 2>&1))\n            samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        chromap \\\\\n            $final_args \\\\\n            -t $task.cpus \\\\\n            -x $index \\\\\n            -r $fasta \\\\\n            -1 ${reads[0]} \\\\\n            -2 ${reads[1]} \\\\\n            -o ${prefix}.${file_extension}\n\n        $compression_cmds\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            chromap: \\$(echo \\$(chromap --version 2>&1))\n            samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n        END_VERSIONS\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 93,
        "string_script": "    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def args_list = args.tokenize()\n\n    def file_extension = args.contains(\"--SAM\") ? 'sam' : args.contains(\"--TagAlign\")? 'tagAlign' : args.contains(\"--pairs\")? 'pairs' : 'bed'\n    if (barcodes) {\n        args_list << \"-b ${barcodes.join(',')}\"\n        if (whitelist) {\n            args_list << \"--barcode-whitelist $whitelist\"\n        }\n    }\n    if (chr_order) {\n        args_list << \"--chr-order $chr_order\"\n    }\n    if (pairs_chr_order){\n        args_list << \"--pairs-natural-chr-order $pairs_chr_order\"\n    }\n    def final_args = args_list.join(' ')\n    def compression_cmds = \"gzip -n ${prefix}.${file_extension}\"\n    if (args.contains(\"--SAM\")) {\n        compression_cmds = \"\"\"\n        samtools view $args2 -@ $task.cpus -bh \\\\\n            -o ${prefix}.bam ${prefix}.${file_extension}\n        rm ${prefix}.${file_extension}\n        \"\"\"\n    }\n    if (meta.single_end) {\n        \"\"\"\n        chromap \\\\\n            $final_args \\\\\n            -t $task.cpus \\\\\n            -x $index \\\\\n            -r $fasta \\\\\n            -1 ${reads.join(',')} \\\\\n            -o ${prefix}.${file_extension}\n\n        $compression_cmds\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            chromap: \\$(echo \\$(chromap --version 2>&1))\n            samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        chromap \\\\\n            $final_args \\\\\n            -t $task.cpus \\\\\n            -x $index \\\\\n            -r $fasta \\\\\n            -1 ${reads[0]} \\\\\n            -2 ${reads[1]} \\\\\n            -o ${prefix}.${file_extension}\n\n        $compression_cmds\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            chromap: \\$(echo \\$(chromap --version 2>&1))\n            samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n        END_VERSIONS\n        \"\"\"\n    }",
        "nb_lignes_script": 64,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "fasta",
            "index",
            "barcodes",
            "whitelist",
            "chr_order",
            "pairs_chr_order"
        ],
        "nb_inputs": 8,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::chromap=0.2.1 bioconda::samtools=1.15.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mulled-v2-1f09f39f20b1c4ee36581dc81cc323c70e661633:963e4fe6a85c548a4018585660aed79780a175d3-0' : 'quay.io/biocontainers/mulled-v2-1f09f39f20b1c4ee36581dc81cc323c70e661633:963e4fe6a85c548a4018585660aed79780a175d3-0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "IQTREE": {
        "name_process": "IQTREE",
        "string_process": "process IQTREE {\n    tag \"$alignment\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? 'bioconda::iqtree=2.1.4_beta' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/iqtree:2.1.4_beta--hdcc8f71_0' :\n        'quay.io/biocontainers/iqtree:2.1.4_beta--hdcc8f71_0' }\"\n\n    input:\n    path alignment\n    val constant_sites\n\n    output:\n    path \"*.treefile\",    emit: phylogeny\n    path \"versions.yml\" , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def fconst_args = constant_sites ? \"-fconst $constant_sites\" : ''\n    def memory      = task.memory.toString().replaceAll(' ', '')\n    \"\"\"\n    iqtree \\\\\n        $fconst_args \\\\\n        $args \\\\\n        -s $alignment \\\\\n        -nt AUTO \\\\\n        -ntmax $task.cpus \\\\\n        -mem $memory \\\\\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        iqtree: \\$(echo \\$(iqtree -version 2>&1) | sed 's/^IQ-TREE multicore version //;s/ .*//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 37,
        "string_script": "    def args = task.ext.args ?: ''\n    def fconst_args = constant_sites ? \"-fconst $constant_sites\" : ''\n    def memory      = task.memory.toString().replaceAll(' ', '')\n    \"\"\"\n    iqtree \\\\\n        $fconst_args \\\\\n        $args \\\\\n        -s $alignment \\\\\n        -nt AUTO \\\\\n        -ntmax $task.cpus \\\\\n        -mem $memory \\\\\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        iqtree: \\$(echo \\$(iqtree -version 2>&1) | sed 's/^IQ-TREE multicore version //;s/ .*//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "alignment",
            "constant_sites"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$alignment\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? 'bioconda::iqtree=2.1.4_beta' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/iqtree:2.1.4_beta--hdcc8f71_0' : 'quay.io/biocontainers/iqtree:2.1.4_beta--hdcc8f71_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "STRELKA_GERMLINE": {
        "name_process": "STRELKA_GERMLINE",
        "string_process": "process STRELKA_GERMLINE {\n    tag \"$meta.id\"\n    label 'process_high'\n\n    conda (params.enable_conda ? \"bioconda::strelka=2.9.10\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/strelka:2.9.10--0' :\n        'quay.io/biocontainers/strelka:2.9.10--0' }\"\n\n    input:\n    tuple val(meta), path(input), path(input_index), path (target_bed), path (target_bed_tbi)\n    path  fasta\n    path  fai\n\n    output:\n    tuple val(meta), path(\"*variants.vcf.gz\")    , emit: vcf\n    tuple val(meta), path(\"*variants.vcf.gz.tbi\"), emit: vcf_tbi\n    tuple val(meta), path(\"*genome.vcf.gz\")      , emit: genome_vcf\n    tuple val(meta), path(\"*genome.vcf.gz.tbi\")  , emit: genome_vcf_tbi\n    path \"versions.yml\"                          , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def regions  = target_bed ? \"--callRegions ${target_bed}\" : \"\"\n    \"\"\"\n    configureStrelkaGermlineWorkflow.py \\\\\n        --bam $input \\\\\n        --referenceFasta $fasta \\\\\n        $regions \\\\\n        $args \\\\\n        --runDir strelka\n\n    python strelka/runWorkflow.py -m local -j $task.cpus\n    mv strelka/results/variants/genome.*.vcf.gz     ${prefix}.genome.vcf.gz\n    mv strelka/results/variants/genome.*.vcf.gz.tbi ${prefix}.genome.vcf.gz.tbi\n    mv strelka/results/variants/variants.vcf.gz     ${prefix}.variants.vcf.gz\n    mv strelka/results/variants/variants.vcf.gz.tbi ${prefix}.variants.vcf.gz.tbi\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        strelka: \\$( configureStrelkaGermlineWorkflow.py --version )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 46,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def regions  = target_bed ? \"--callRegions ${target_bed}\" : \"\"\n    \"\"\"\n    configureStrelkaGermlineWorkflow.py \\\\\n        --bam $input \\\\\n        --referenceFasta $fasta \\\\\n        $regions \\\\\n        $args \\\\\n        --runDir strelka\n\n    python strelka/runWorkflow.py -m local -j $task.cpus\n    mv strelka/results/variants/genome.*.vcf.gz     ${prefix}.genome.vcf.gz\n    mv strelka/results/variants/genome.*.vcf.gz.tbi ${prefix}.genome.vcf.gz.tbi\n    mv strelka/results/variants/variants.vcf.gz     ${prefix}.variants.vcf.gz\n    mv strelka/results/variants/variants.vcf.gz.tbi ${prefix}.variants.vcf.gz.tbi\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        strelka: \\$( configureStrelkaGermlineWorkflow.py --version )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 21,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "input",
            "input_index",
            "target_bed",
            "target_bed_tbi",
            "fasta",
            "fai"
        ],
        "nb_inputs": 7,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "conda (params.enable_conda ? \"bioconda::strelka=2.9.10\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/strelka:2.9.10--0' : 'quay.io/biocontainers/strelka:2.9.10--0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "ISOSEQ3_CLUSTER": {
        "name_process": "ISOSEQ3_CLUSTER",
        "string_process": "process ISOSEQ3_CLUSTER {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::isoseq3=3.4.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/isoseq3:3.4.0--0' :\n        'quay.io/biocontainers/isoseq3:3.4.0--0' }\"\n\n    input:\n    tuple val(meta), path(bam)\n\n    output:\n    tuple val(meta), path(\"*.transcripts.bam\")               , emit: bam\n    tuple val(meta), path(\"*.transcripts.bam.pbi\")           , emit: pbi\n    tuple val(meta), path(\"*.transcripts.cluster\")           , emit: cluster\n    tuple val(meta), path(\"*.transcripts.cluster_report.csv\"), emit: cluster_report\n    tuple val(meta), path(\"*.transcripts.transcriptset.xml\") , emit: transcriptset\n    tuple val(meta), path(\"*.transcripts.hq.bam\")            , optional: true, emit: hq_bam\n    tuple val(meta), path(\"*.transcripts.hq.bam.pbi\")        , optional: true, emit: hq_pbi\n    tuple val(meta), path(\"*.transcripts.lq.bam\")            , optional: true, emit: lq_bam\n    tuple val(meta), path(\"*.transcripts.lq.bam.pbi\")        , optional: true, emit: lq_pbi\n    tuple val(meta), path(\"*.transcripts.singletons.bam\")    , optional: true, emit: singletons_bam\n    tuple val(meta), path(\"*.transcripts.singletons.bam.pbi\"), optional: true, emit: singletons_pbi\n    path  \"versions.yml\"                                     , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    isoseq3 \\\\\n        cluster \\\\\n        $bam \\\\\n        ${prefix}.transcripts.bam \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        isoseq3: \\$( isoseq3 cluster --version|sed 's/isoseq cluster //g'|sed 's/ (.*//g' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 43,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    isoseq3 \\\\\n        cluster \\\\\n        $bam \\\\\n        ${prefix}.transcripts.bam \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        isoseq3: \\$( isoseq3 cluster --version|sed 's/isoseq cluster //g'|sed 's/ (.*//g' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [
            "Clusterv"
        ],
        "tools_url": [
            "https://bio.tools/clusterv"
        ],
        "tools_dico": [
            {
                "name": "Clusterv",
                "uri": "https://bio.tools/clusterv",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Software engineering"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Computer programming"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Software development"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3432",
                                    "term": "Clustering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2945",
                                    "term": "Analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The clusterv R package implements a set of functions to assess the reliability of clusters discovered by clustering algorithms. This library is tailored to the analysis of high dimensional data and in particular it is conceived for the analysis of the reliability of clusters discovered using DNA microarray data.",
                "homepage": "http://homes.di.unimi.it/~valenti/SW/clusterv/"
            }
        ],
        "inputs": [
            "meta",
            "bam"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::isoseq3=3.4.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/isoseq3:3.4.0--0' : 'quay.io/biocontainers/isoseq3:3.4.0--0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "FREEBAYES": {
        "name_process": "FREEBAYES",
        "string_process": "process FREEBAYES {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::freebayes=1.3.5\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/freebayes:1.3.5--py38ha193a2f_3' :\n        'quay.io/biocontainers/freebayes:1.3.5--py38ha193a2f_3' }\"\n\n    input:\n    tuple val(meta), path(input_1), path(input_1_index), path(input_2), path(input_2_index), path(target_bed)\n    path fasta\n    path fasta_fai\n    path samples\n    path populations\n    path cnv\n\n    output:\n    tuple val(meta), path(\"*.vcf.gz\"), emit: vcf\n    path  \"versions.yml\"             , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def input            = input_2        ? \"${input_1} ${input_2}\"        : \"${input_1}\"\n    def targets_file     = target_bed     ? \"--target ${target_bed}\"       : \"\"\n    def samples_file     = samples        ? \"--samples ${samples}\"         : \"\"\n    def populations_file = populations    ? \"--populations ${populations}\" : \"\"\n    def cnv_file         = cnv            ? \"--cnv-map ${cnv}\"             : \"\"\n\n    if (task.cpus > 1) {\n        \"\"\"\n        freebayes-parallel \\\\\n            <(fasta_generate_regions.py $fasta_fai 10000) $task.cpus \\\\\n            -f $fasta \\\\\n            $targets_file \\\\\n            $samples_file \\\\\n            $populations_file \\\\\n            $cnv_file \\\\\n            $args \\\\\n            $input > ${prefix}.vcf\n\n        bgzip ${prefix}.vcf\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            freebayes: \\$(echo \\$(freebayes --version 2>&1) | sed 's/version:\\s*v//g' )\n        END_VERSIONS\n        \"\"\"\n\n    } else {\n        \"\"\"\n        freebayes \\\\\n            -f $fasta \\\\\n            $targets_file \\\\\n            $samples_file \\\\\n            $populations_file \\\\\n            $cnv_file \\\\\n            $args \\\\\n            $input > ${prefix}.vcf\n\n        bgzip ${prefix}.vcf\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            freebayes: \\$(echo \\$(freebayes --version 2>&1) | sed 's/version:\\s*v//g' )\n        END_VERSIONS\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 71,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def input            = input_2        ? \"${input_1} ${input_2}\"        : \"${input_1}\"\n    def targets_file     = target_bed     ? \"--target ${target_bed}\"       : \"\"\n    def samples_file     = samples        ? \"--samples ${samples}\"         : \"\"\n    def populations_file = populations    ? \"--populations ${populations}\" : \"\"\n    def cnv_file         = cnv            ? \"--cnv-map ${cnv}\"             : \"\"\n\n    if (task.cpus > 1) {\n        \"\"\"\n        freebayes-parallel \\\\\n            <(fasta_generate_regions.py $fasta_fai 10000) $task.cpus \\\\\n            -f $fasta \\\\\n            $targets_file \\\\\n            $samples_file \\\\\n            $populations_file \\\\\n            $cnv_file \\\\\n            $args \\\\\n            $input > ${prefix}.vcf\n\n        bgzip ${prefix}.vcf\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            freebayes: \\$(echo \\$(freebayes --version 2>&1) | sed 's/version:\\s*v//g' )\n        END_VERSIONS\n        \"\"\"\n\n    } else {\n        \"\"\"\n        freebayes \\\\\n            -f $fasta \\\\\n            $targets_file \\\\\n            $samples_file \\\\\n            $populations_file \\\\\n            $cnv_file \\\\\n            $args \\\\\n            $input > ${prefix}.vcf\n\n        bgzip ${prefix}.vcf\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            freebayes: \\$(echo \\$(freebayes --version 2>&1) | sed 's/version:\\s*v//g' )\n        END_VERSIONS\n        \"\"\"\n    }",
        "nb_lignes_script": 46,
        "language_script": "bash",
        "tools": [
            "FreeBayes"
        ],
        "tools_url": [
            "https://bio.tools/freebayes"
        ],
        "tools_dico": [
            {
                "name": "FreeBayes",
                "uri": "https://bio.tools/freebayes",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Bayesian genetic variant detector designed to find small polymorphisms, specifically SNPs, indels, multi-nucleotide polymorphisms, and complex events (composite insertion and substitution events) smaller than the length of a short-read sequencing alignment.",
                "homepage": "https://github.com/ekg/freebayes"
            }
        ],
        "inputs": [
            "meta",
            "input_1",
            "input_1_index",
            "input_2",
            "input_2_index",
            "target_bed",
            "fasta",
            "fasta_fai",
            "samples",
            "populations",
            "cnv"
        ],
        "nb_inputs": 11,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::freebayes=1.3.5\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/freebayes:1.3.5--py38ha193a2f_3' : 'quay.io/biocontainers/freebayes:1.3.5--py38ha193a2f_3' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "BCFTOOLS_ANNOTATE": {
        "name_process": "BCFTOOLS_ANNOTATE",
        "string_process": "process BCFTOOLS_ANNOTATE {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::bcftools=1.15\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bcftools:1.15--haf5b3da_0':\n        'quay.io/biocontainers/bcftools:1.15--haf5b3da_0' }\"\n\n    input:\n    tuple val(meta), path(input)\n\n    output:\n    tuple val(meta), path(\"*_annotated.vcf.gz\"), optional:true , emit: vcf\n    tuple val(meta), path(\"*_annotated.bcf\")   , optional:true , emit: bcf\n    path \"versions.yml\"                                        , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n    def matcher = input ==~ /\\S+\\.*vcf\\.\\S*/\n    def output_suffix = matcher ? \"vcf.gz\" : \"bcf\"\n    def output_type_compressed = matcher ? \"z\" : \"b\"\n    \"\"\"\n    bcftools \\\\\n        annotate \\\\\n        $args \\\\\n        --output ${prefix}_annotated.${output_suffix} \\\\\n        --output-type $output_type_compressed \\\\\n        --threads $task.cpus \\\\\n        $input\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bcftools: \\$( bcftools --version |& sed '1!d; s/^.*bcftools //' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 40,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n    def matcher = input ==~ /\\S+\\.*vcf\\.\\S*/\n    def output_suffix = matcher ? \"vcf.gz\" : \"bcf\"\n    def output_type_compressed = matcher ? \"z\" : \"b\"\n    \"\"\"\n    bcftools \\\\\n        annotate \\\\\n        $args \\\\\n        --output ${prefix}_annotated.${output_suffix} \\\\\n        --output-type $output_type_compressed \\\\\n        --threads $task.cpus \\\\\n        $input\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bcftools: \\$( bcftools --version |& sed '1!d; s/^.*bcftools //' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [
            "BCFtools",
            "annotate"
        ],
        "tools_url": [
            "https://bio.tools/bcftools",
            "https://bio.tools/annotate"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "annotate",
                "uri": "https://bio.tools/annotate",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0361",
                                    "term": "Sequence annotation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Database search"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Search"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_1276",
                                "term": "Nucleic acid features"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2080",
                                "term": "Database search results"
                            }
                        ]
                    }
                ],
                "description": "Using R enviroments for annotation.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/annotate.html"
            }
        ],
        "inputs": [
            "meta",
            "input"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::bcftools=1.15\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bcftools:1.15--haf5b3da_0': 'quay.io/biocontainers/bcftools:1.15--haf5b3da_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "RSEQC_INFEREXPERIMENT": {
        "name_process": "RSEQC_INFEREXPERIMENT",
        "string_process": "process RSEQC_INFEREXPERIMENT {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::rseqc=3.0.1 'conda-forge::r-base>=3.5'\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/rseqc:3.0.1--py37h516909a_1' :\n        'quay.io/biocontainers/rseqc:3.0.1--py37h516909a_1' }\"\n\n    input:\n    tuple val(meta), path(bam)\n    path  bed\n\n    output:\n    tuple val(meta), path(\"*.infer_experiment.txt\"), emit: txt\n    path  \"versions.yml\"                           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    infer_experiment.py \\\\\n        -i $bam \\\\\n        -r $bed \\\\\n        $args \\\\\n        > ${prefix}.infer_experiment.txt\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        rseqc: \\$(infer_experiment.py --version | sed -e \"s/infer_experiment.py //g\")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    infer_experiment.py \\\\\n        -i $bam \\\\\n        -r $bed \\\\\n        $args \\\\\n        > ${prefix}.infer_experiment.txt\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        rseqc: \\$(infer_experiment.py --version | sed -e \"s/infer_experiment.py //g\")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "bam",
            "bed"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::rseqc=3.0.1 'conda-forge::r-base>=3.5'\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/rseqc:3.0.1--py37h516909a_1' : 'quay.io/biocontainers/rseqc:3.0.1--py37h516909a_1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "DASTOOL_SCAFFOLDS2BIN": {
        "name_process": "DASTOOL_SCAFFOLDS2BIN",
        "string_process": "process DASTOOL_SCAFFOLDS2BIN {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::das_tool=1.1.3\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/das_tool:1.1.3--r41hdfd78af_0' :\n        'quay.io/biocontainers/das_tool:1.1.3--r41hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(fasta)\n    val(extension)\n\n    output:\n    tuple val(meta), path(\"*.tsv\"), emit: scaffolds2bin\n    path \"versions.yml\"                         , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def file_extension = extension ? extension : \"fasta\"\n    def clean_fasta = fasta.toString() - \".gz\"\n    def decompress_fasta = fasta.toString() == clean_fasta ? \"\" : \"gunzip -q -f $fasta\"\n    \"\"\"\n    $decompress_fasta\n\n    Fasta_to_Scaffolds2Bin.sh \\\\\n        $args \\\\\n        -i . \\\\\n        -e $file_extension \\\\\n        > ${prefix}.tsv\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        dastool: \\$( DAS_Tool --version 2>&1 | grep \"DAS Tool\" | sed 's/DAS Tool version //' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 39,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def file_extension = extension ? extension : \"fasta\"\n    def clean_fasta = fasta.toString() - \".gz\"\n    def decompress_fasta = fasta.toString() == clean_fasta ? \"\" : \"gunzip -q -f $fasta\"\n    \"\"\"\n    $decompress_fasta\n\n    Fasta_to_Scaffolds2Bin.sh \\\\\n        $args \\\\\n        -i . \\\\\n        -e $file_extension \\\\\n        > ${prefix}.tsv\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        dastool: \\$( DAS_Tool --version 2>&1 | grep \"DAS Tool\" | sed 's/DAS Tool version //' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "fasta",
            "extension"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::das_tool=1.1.3\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/das_tool:1.1.3--r41hdfd78af_0' : 'quay.io/biocontainers/das_tool:1.1.3--r41hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "NGSCHECKMATE_NCM": {
        "name_process": "NGSCHECKMATE_NCM",
        "string_process": "process NGSCHECKMATE_NCM {\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::ngscheckmate=1.0.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/ngscheckmate:1.0.0--py27r41hdfd78af_3':\n        'quay.io/biocontainers/ngscheckmate:1.0.0--py27r41hdfd78af_3' }\"\n\n    input:\n    path files\n    path snp_bed\n    path fasta\n\n    output:\n    path \"*.pdf\"            , emit: pdf\n    path \"*_corr_matrix.txt\", emit: corr_matrix\n    path \"*_matched.txt\"    , emit: matched\n    path \"*_all.txt\"        , emit: all\n    path \"*.vcf\"            , emit: vcfs, optional: true\n    path \"versions.yml\"     , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"output\"\n    def unzip = files.any { it.toString().endsWith(\".vcf.gz\") }\n    \"\"\"\n    if $unzip\n    then\n        for VCFGZ in *.vcf.gz; do\n            gunzip -cdf \\$VCFGZ > \\$( basename \\$VCFGZ .gz );\n        done\n    fi\n\n    NCM_REF=\"./\"${fasta} ncm.py -d . -bed ${snp_bed} -O . -N ${prefix} $args\n\n    if $unzip\n    then\n        rm -f *.vcf  # clean up decompressed vcfs\n    fi\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        ngscheckmate: \\$(ncm.py --help | sed \"7!d;s/ *Ensuring Sample Identity v//g\")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 47,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"output\"\n    def unzip = files.any { it.toString().endsWith(\".vcf.gz\") }\n    \"\"\"\n    if $unzip\n    then\n        for VCFGZ in *.vcf.gz; do\n            gunzip -cdf \\$VCFGZ > \\$( basename \\$VCFGZ .gz );\n        done\n    fi\n\n    NCM_REF=\"./\"${fasta} ncm.py -d . -bed ${snp_bed} -O . -N ${prefix} $args\n\n    if $unzip\n    then\n        rm -f *.vcf  # clean up decompressed vcfs\n    fi\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        ngscheckmate: \\$(ncm.py --help | sed \"7!d;s/ *Ensuring Sample Identity v//g\")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 22,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "files",
            "snp_bed",
            "fasta"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::ngscheckmate=1.0.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/ngscheckmate:1.0.0--py27r41hdfd78af_3': 'quay.io/biocontainers/ngscheckmate:1.0.0--py27r41hdfd78af_3' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "GATK4_SAMTOFASTQ": {
        "name_process": "GATK4_SAMTOFASTQ",
        "string_process": "process GATK4_SAMTOFASTQ {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::gatk4=4.2.6.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/gatk4:4.2.6.1--hdfd78af_0':\n        'quay.io/biocontainers/gatk4:4.2.6.1--hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(bam)\n\n    output:\n    tuple val(meta), path('*.fastq.gz'), emit: fastq\n    path  \"versions.yml\"               , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def output = meta.single_end ? \"--FASTQ ${prefix}.fastq.gz\" : \"--FASTQ ${prefix}_1.fastq.gz --SECOND_END_FASTQ ${prefix}_2.fastq.gz\"\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[GATK SamToFastq] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    gatk --java-options \"-Xmx${avail_mem}g\" SamToFastq \\\\\n        --INPUT $bam \\\\\n        $output \\\\\n        --TMP_DIR . \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.fastq.gz\n    touch ${prefix}_1.fastq.gz\n    touch ${prefix}_2.fastq.gz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 54,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def output = meta.single_end ? \"--FASTQ ${prefix}.fastq.gz\" : \"--FASTQ ${prefix}_1.fastq.gz --SECOND_END_FASTQ ${prefix}_2.fastq.gz\"\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[GATK SamToFastq] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    gatk --java-options \"-Xmx${avail_mem}g\" SamToFastq \\\\\n        --INPUT $bam \\\\\n        $output \\\\\n        --TMP_DIR . \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 21,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "meta",
            "bam"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::gatk4=4.2.6.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/gatk4:4.2.6.1--hdfd78af_0': 'quay.io/biocontainers/gatk4:4.2.6.1--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.fastq.gz\n    touch ${prefix}_1.fastq.gz\n    touch ${prefix}_2.fastq.gz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\""
    },
    "BCFTOOLS_VIEW": {
        "name_process": "BCFTOOLS_VIEW",
        "string_process": "process BCFTOOLS_VIEW {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? 'bioconda::bcftools=1.14' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bcftools:1.14--h88f3f91_0' :\n        'quay.io/biocontainers/bcftools:1.14--h88f3f91_0' }\"\n\n    input:\n    tuple val(meta), path(vcf), path(index)\n    path(regions)\n    path(targets)\n    path(samples)\n\n    output:\n    tuple val(meta), path(\"*.gz\") , emit: vcf\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def regions_file  = regions ? \"--regions-file ${regions}\" : \"\"\n    def targets_file = targets ? \"--targets-file ${targets}\" : \"\"\n    def samples_file =  samples ? \"--samples-file ${samples}\" : \"\"\n    \"\"\"\n    bcftools view \\\\\n        --output ${prefix}.vcf.gz \\\\\n        ${regions_file} \\\\\n        ${targets_file} \\\\\n        ${samples_file} \\\\\n        $args \\\\\n        --threads $task.cpus \\\\\n        ${vcf}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bcftools: \\$(bcftools --version 2>&1 | head -n1 | sed 's/^.*bcftools //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.vcf.gz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bcftools: \\$(bcftools --version 2>&1 | head -n1 | sed 's/^.*bcftools //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 53,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def regions_file  = regions ? \"--regions-file ${regions}\" : \"\"\n    def targets_file = targets ? \"--targets-file ${targets}\" : \"\"\n    def samples_file =  samples ? \"--samples-file ${samples}\" : \"\"\n    \"\"\"\n    bcftools view \\\\\n        --output ${prefix}.vcf.gz \\\\\n        ${regions_file} \\\\\n        ${targets_file} \\\\\n        ${samples_file} \\\\\n        $args \\\\\n        --threads $task.cpus \\\\\n        ${vcf}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bcftools: \\$(bcftools --version 2>&1 | head -n1 | sed 's/^.*bcftools //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [
            "BCFtools"
        ],
        "tools_url": [
            "https://bio.tools/bcftools"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "vcf",
            "index",
            "regions",
            "targets",
            "samples"
        ],
        "nb_inputs": 6,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? 'bioconda::bcftools=1.14' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bcftools:1.14--h88f3f91_0' : 'quay.io/biocontainers/bcftools:1.14--h88f3f91_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.vcf.gz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bcftools: \\$(bcftools --version 2>&1 | head -n1 | sed 's/^.*bcftools //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\""
    },
    "SEQUENZAUTILS_BAM2SEQZ": {
        "name_process": "SEQUENZAUTILS_BAM2SEQZ",
        "string_process": "process SEQUENZAUTILS_BAM2SEQZ {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::sequenza-utils=3.0.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/sequenza-utils:3.0.0--py38h6ed170a_2' :\n        'quay.io/biocontainers/sequenza-utils:3.0.0--py38h6ed170a_2' }\"\n\n    input:\n    tuple val(meta), path(normalbam), path(tumourbam)\n    path fasta\n    path wigfile\n\n    output:\n    tuple val(meta), path(\"*.gz\"), emit: seqz\n    path \"versions.yml\"          , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    sequenza-utils \\\\\n        bam2seqz \\\\\n        $args \\\\\n        -n $normalbam \\\\\n        -t $tumourbam \\\\\n        --fasta $fasta \\\\\n        -gc $wigfile \\\\\n        -o ${prefix}.gz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        sequenzautils: \\$(echo \\$(sequenza-utils 2>&1) | sed 's/^.*is version //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 38,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    sequenza-utils \\\\\n        bam2seqz \\\\\n        $args \\\\\n        -n $normalbam \\\\\n        -t $tumourbam \\\\\n        --fasta $fasta \\\\\n        -gc $wigfile \\\\\n        -o ${prefix}.gz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        sequenzautils: \\$(echo \\$(sequenza-utils 2>&1) | sed 's/^.*is version //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "normalbam",
            "tumourbam",
            "fasta",
            "wigfile"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::sequenza-utils=3.0.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/sequenza-utils:3.0.0--py38h6ed170a_2' : 'quay.io/biocontainers/sequenza-utils:3.0.0--py38h6ed170a_2' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "UNTAR": {
        "name_process": "UNTAR",
        "string_process": "process UNTAR {\n    tag \"$archive\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/ubuntu:20.04' :\n        'ubuntu:20.04' }\"\n\n    input:\n    tuple val(meta), path(archive)\n\n    output:\n    tuple val(meta), path(\"$untar\"), emit: untar\n    path \"versions.yml\"            , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args  = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    untar     = archive.toString() - '.tar.gz'\n    \"\"\"\n    tar \\\\\n        -xzvf \\\\\n        $args \\\\\n        $archive \\\\\n        $args2 \\\\\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        untar: \\$(echo \\$(tar --version 2>&1) | sed 's/^.*(GNU tar) //; s/ Copyright.*\\$//')\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    untar     = archive.toString() - '.tar.gz'\n    \"\"\"\n    touch $untar\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        untar: \\$(echo \\$(tar --version 2>&1) | sed 's/^.*(GNU tar) //; s/ Copyright.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 45,
        "string_script": "    def args  = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    untar     = archive.toString() - '.tar.gz'\n    \"\"\"\n    tar \\\\\n        -xzvf \\\\\n        $args \\\\\n        $archive \\\\\n        $args2 \\\\\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        untar: \\$(echo \\$(tar --version 2>&1) | sed 's/^.*(GNU tar) //; s/ Copyright.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "archive"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$archive\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/ubuntu:20.04' : 'ubuntu:20.04' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    untar     = archive.toString() - '.tar.gz'\n    \"\"\"\n    touch $untar\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        untar: \\$(echo \\$(tar --version 2>&1) | sed 's/^.*(GNU tar) //; s/ Copyright.*\\$//')\n    END_VERSIONS\n    \"\"\""
    },
    "GENRICH": {
        "name_process": "GENRICH",
        "string_process": "process GENRICH {\n    tag \"$meta.id\"\n    label 'process_high'\n\n    conda (params.enable_conda ? \"bioconda::genrich=0.6.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/genrich:0.6.1--h5bf99c6_1' :\n        'quay.io/biocontainers/genrich:0.6.1--h5bf99c6_1' }\"\n\n    input:\n    tuple val(meta), path(treatment_bam)\n    path  control_bam\n    path  blacklist_bed\n    val   save_pvalues\n    val   save_pileup\n    val   save_bed\n    val   save_duplicates\n\n    output:\n    tuple val(meta), path(\"*narrowPeak\")                     , emit: peaks\n    tuple val(meta), path(\"*pvalues.bedGraph\"), optional:true, emit: bedgraph_pvalues\n    tuple val(meta), path(\"*pileup.bedGraph\") , optional:true, emit: bedgraph_pileup\n    tuple val(meta), path(\"*intervals.bed\")   , optional:true, emit: bed_intervals\n    tuple val(meta), path(\"*duplicates.txt\")  , optional:true, emit: duplicates\n    path \"versions.yml\"                                      , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def control    = control_bam    ? \"-c $control_bam\"               : ''\n    def blacklist  = blacklist_bed  ? \"-E $blacklist_bed\"             : \"\"\n    def pvalues    = save_pvalues   ? \"-f ${prefix}.pvalues.bedGraph\" : \"\"\n    def pileup     = save_pileup    ? \"-k ${prefix}.pileup.bedGraph\"  : \"\"\n    def bed        = save_bed       ? \"-b ${prefix}.intervals.bed\"    : \"\"\n    def duplicates = \"\"\n    if (save_duplicates) {\n        if (args.contains('-r')) {\n            duplicates = \"-R ${prefix}.duplicates.txt\"\n        } else {\n            log.info '[Genrich] Duplicates can only be saved if they are filtered, defaulting to -r option (Remove PCR duplicates).'\n            duplicates = \"-r -R ${prefix}.duplicates.txt\"\n        }\n    }\n    \"\"\"\n    Genrich \\\\\n        -t $treatment_bam \\\\\n        $args \\\\\n        $control \\\\\n        $blacklist \\\\\n        -o ${prefix}.narrowPeak \\\\\n        $pvalues \\\\\n        $pileup \\\\\n        $bed \\\\\n        $duplicates \\\\\n        $control\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        genrich: \\$(echo \\$(Genrich --version 2>&1) | sed 's/^Genrich, version //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 63,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def control    = control_bam    ? \"-c $control_bam\"               : ''\n    def blacklist  = blacklist_bed  ? \"-E $blacklist_bed\"             : \"\"\n    def pvalues    = save_pvalues   ? \"-f ${prefix}.pvalues.bedGraph\" : \"\"\n    def pileup     = save_pileup    ? \"-k ${prefix}.pileup.bedGraph\"  : \"\"\n    def bed        = save_bed       ? \"-b ${prefix}.intervals.bed\"    : \"\"\n    def duplicates = \"\"\n    if (save_duplicates) {\n        if (args.contains('-r')) {\n            duplicates = \"-R ${prefix}.duplicates.txt\"\n        } else {\n            log.info '[Genrich] Duplicates can only be saved if they are filtered, defaulting to -r option (Remove PCR duplicates).'\n            duplicates = \"-r -R ${prefix}.duplicates.txt\"\n        }\n    }\n    \"\"\"\n    Genrich \\\\\n        -t $treatment_bam \\\\\n        $args \\\\\n        $control \\\\\n        $blacklist \\\\\n        -o ${prefix}.narrowPeak \\\\\n        $pvalues \\\\\n        $pileup \\\\\n        $bed \\\\\n        $duplicates \\\\\n        $control\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        genrich: \\$(echo \\$(Genrich --version 2>&1) | sed 's/^Genrich, version //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 33,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "treatment_bam",
            "control_bam",
            "blacklist_bed",
            "save_pvalues",
            "save_pileup",
            "save_bed",
            "save_duplicates"
        ],
        "nb_inputs": 8,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "conda (params.enable_conda ? \"bioconda::genrich=0.6.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/genrich:0.6.1--h5bf99c6_1' : 'quay.io/biocontainers/genrich:0.6.1--h5bf99c6_1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "SALMON_INDEX": {
        "name_process": "SALMON_INDEX",
        "string_process": "process SALMON_INDEX {\n    tag \"$transcript_fasta\"\n    label \"process_medium\"\n\n    conda (params.enable_conda ? 'bioconda::salmon=1.5.2' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/salmon:1.5.2--h84f40af_0' :\n        'quay.io/biocontainers/salmon:1.5.2--h84f40af_0' }\"\n\n    input:\n    path genome_fasta\n    path transcript_fasta\n\n    output:\n    path \"salmon\"       , emit: index\n    path \"versions.yml\" , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def get_decoy_ids = \"grep '^>' $genome_fasta | cut -d ' ' -f 1 > decoys.txt\"\n    def gentrome      = \"gentrome.fa\"\n    if (genome_fasta.endsWith('.gz')) {\n        get_decoy_ids = \"grep '^>' <(gunzip -c $genome_fasta) | cut -d ' ' -f 1 > decoys.txt\"\n        gentrome      = \"gentrome.fa.gz\"\n    }\n    \"\"\"\n    $get_decoy_ids\n    sed -i.bak -e 's/>//g' decoys.txt\n    cat $transcript_fasta $genome_fasta > $gentrome\n\n    salmon \\\\\n        index \\\\\n        --threads $task.cpus \\\\\n        -t $gentrome \\\\\n        -d decoys.txt \\\\\n        $args \\\\\n        -i salmon\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        salmon: \\$(echo \\$(salmon --version) | sed -e \"s/salmon //g\")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 44,
        "string_script": "    def args = task.ext.args ?: ''\n    def get_decoy_ids = \"grep '^>' $genome_fasta | cut -d ' ' -f 1 > decoys.txt\"\n    def gentrome      = \"gentrome.fa\"\n    if (genome_fasta.endsWith('.gz')) {\n        get_decoy_ids = \"grep '^>' <(gunzip -c $genome_fasta) | cut -d ' ' -f 1 > decoys.txt\"\n        gentrome      = \"gentrome.fa.gz\"\n    }\n    \"\"\"\n    $get_decoy_ids\n    sed -i.bak -e 's/>//g' decoys.txt\n    cat $transcript_fasta $genome_fasta > $gentrome\n\n    salmon \\\\\n        index \\\\\n        --threads $task.cpus \\\\\n        -t $gentrome \\\\\n        -d decoys.txt \\\\\n        $args \\\\\n        -i salmon\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        salmon: \\$(echo \\$(salmon --version) | sed -e \"s/salmon //g\")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 23,
        "language_script": "bash",
        "tools": [
            "Salmon",
            "CINdex"
        ],
        "tools_url": [
            "https://bio.tools/salmon",
            "https://bio.tools/cindex"
        ],
        "tools_dico": [
            {
                "name": "Salmon",
                "uri": "https://bio.tools/salmon",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression data analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantitation"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3496",
                                "term": "RNA sequence (raw)"
                            },
                            {
                                "uri": "http://edamontology.org/data_2093",
                                "term": "Data reference"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "A tool for transcript expression quantification from RNA-seq data",
                "homepage": "https://github.com/COMBINE-lab/salmon"
            },
            {
                "name": "CINdex",
                "uri": "https://bio.tools/cindex",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3233",
                                    "term": "Copy number estimation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3233",
                                    "term": "Transcript copy number estimation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The package addresses important area of high-throughput genomic analysis. It allows the automated processing and analysis of the experimental DNA copy number data generated by Affymetrix SNP 6.0 arrays or similar. It calculates the chromosome instability index to quantitatively characterize genome-wide DNA copy number alterations. This package calculates not only overall genomic instability, but also instability in terms of copy number gains and losses at the chromosome and cytoband level.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/CINdex.html"
            }
        ],
        "inputs": [
            "genome_fasta",
            "transcript_fasta"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$transcript_fasta\"",
            "label \"process_medium\"",
            "conda (params.enable_conda ? 'bioconda::salmon=1.5.2' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/salmon:1.5.2--h84f40af_0' : 'quay.io/biocontainers/salmon:1.5.2--h84f40af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "VCFTOOLS": {
        "name_process": "VCFTOOLS",
        "string_process": "process VCFTOOLS {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::vcftools=0.1.16\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/vcftools:0.1.16--he513fc3_4' :\n        'quay.io/biocontainers/vcftools:0.1.16--he513fc3_4' }\"\n\n    input:\n                                                                                                                \n                                                                         \n                                                                                                                           \n                                                           \n    tuple val(meta), path(variant_file)\n    path  bed\n    path  diff_variant_file\n\n    output:\n    tuple val(meta), path(\"*.vcf\")                    , optional:true, emit: vcf\n    tuple val(meta), path(\"*.bcf\")                    , optional:true, emit: bcf\n    tuple val(meta), path(\"*.frq\")                    , optional:true, emit: frq\n    tuple val(meta), path(\"*.frq.count\")              , optional:true, emit: frq_count\n    tuple val(meta), path(\"*.idepth\")                 , optional:true, emit: idepth\n    tuple val(meta), path(\"*.ldepth\")                 , optional:true, emit: ldepth\n    tuple val(meta), path(\"*.ldepth.mean\")            , optional:true, emit: ldepth_mean\n    tuple val(meta), path(\"*.gdepth\")                 , optional:true, emit: gdepth\n    tuple val(meta), path(\"*.hap.ld\")                 , optional:true, emit: hap_ld\n    tuple val(meta), path(\"*.geno.ld\")                , optional:true, emit: geno_ld\n    tuple val(meta), path(\"*.geno.chisq\")             , optional:true, emit: geno_chisq\n    tuple val(meta), path(\"*.list.hap.ld\")            , optional:true, emit: list_hap_ld\n    tuple val(meta), path(\"*.list.geno.ld\")           , optional:true, emit: list_geno_ld\n    tuple val(meta), path(\"*.interchrom.hap.ld\")      , optional:true, emit: interchrom_hap_ld\n    tuple val(meta), path(\"*.interchrom.geno.ld\")     , optional:true, emit: interchrom_geno_ld\n    tuple val(meta), path(\"*.TsTv\")                   , optional:true, emit: tstv\n    tuple val(meta), path(\"*.TsTv.summary\")           , optional:true, emit: tstv_summary\n    tuple val(meta), path(\"*.TsTv.count\")             , optional:true, emit: tstv_count\n    tuple val(meta), path(\"*.TsTv.qual\")              , optional:true, emit: tstv_qual\n    tuple val(meta), path(\"*.FILTER.summary\")         , optional:true, emit: filter_summary\n    tuple val(meta), path(\"*.sites.pi\")               , optional:true, emit: sites_pi\n    tuple val(meta), path(\"*.windowed.pi\")            , optional:true, emit: windowed_pi\n    tuple val(meta), path(\"*.weir.fst\")               , optional:true, emit: weir_fst\n    tuple val(meta), path(\"*.het\")                    , optional:true, emit: heterozygosity\n    tuple val(meta), path(\"*.hwe\")                    , optional:true, emit: hwe\n    tuple val(meta), path(\"*.Tajima.D\")               , optional:true, emit: tajima_d\n    tuple val(meta), path(\"*.ifreqburden\")            , optional:true, emit: freq_burden\n    tuple val(meta), path(\"*.LROH\")                   , optional:true, emit: lroh\n    tuple val(meta), path(\"*.relatedness\")            , optional:true, emit: relatedness\n    tuple val(meta), path(\"*.relatedness2\")           , optional:true, emit: relatedness2\n    tuple val(meta), path(\"*.lqual\")                  , optional:true, emit: lqual\n    tuple val(meta), path(\"*.imiss\")                  , optional:true, emit: missing_individual\n    tuple val(meta), path(\"*.lmiss\")                  , optional:true, emit: missing_site\n    tuple val(meta), path(\"*.snpden\")                 , optional:true, emit: snp_density\n    tuple val(meta), path(\"*.kept.sites\")             , optional:true, emit: kept_sites\n    tuple val(meta), path(\"*.removed.sites\")          , optional:true, emit: removed_sites\n    tuple val(meta), path(\"*.singletons\")             , optional:true, emit: singeltons\n    tuple val(meta), path(\"*.indel.hist\")             , optional:true, emit: indel_hist\n    tuple val(meta), path(\"*.hapcount\")               , optional:true, emit: hapcount\n    tuple val(meta), path(\"*.mendel\")                 , optional:true, emit: mendel\n    tuple val(meta), path(\"*.FORMAT\")                 , optional:true, emit: format\n    tuple val(meta), path(\"*.INFO\")                   , optional:true, emit: info\n    tuple val(meta), path(\"*.012\")                    , optional:true, emit: genotypes_matrix\n    tuple val(meta), path(\"*.012.indv\")               , optional:true, emit: genotypes_matrix_individual\n    tuple val(meta), path(\"*.012.pos\")                , optional:true, emit: genotypes_matrix_position\n    tuple val(meta), path(\"*.impute.hap\")             , optional:true, emit: impute_hap\n    tuple val(meta), path(\"*.impute.hap.legend\")      , optional:true, emit: impute_hap_legend\n    tuple val(meta), path(\"*.impute.hap.indv\")        , optional:true, emit: impute_hap_indv\n    tuple val(meta), path(\"*.ldhat.sites\")            , optional:true, emit: ldhat_sites\n    tuple val(meta), path(\"*.ldhat.locs\")             , optional:true, emit: ldhat_locs\n    tuple val(meta), path(\"*.BEAGLE.GL\")              , optional:true, emit: beagle_gl\n    tuple val(meta), path(\"*.BEAGLE.PL\")              , optional:true, emit: beagle_pl\n    tuple val(meta), path(\"*.ped\")                    , optional:true, emit: ped\n    tuple val(meta), path(\"*.map\")                    , optional:true, emit: map_\n    tuple val(meta), path(\"*.tped\")                   , optional:true, emit: tped\n    tuple val(meta), path(\"*.tfam\")                   , optional:true, emit: tfam\n    tuple val(meta), path(\"*.diff.sites_in_files\")    , optional:true, emit: diff_sites_in_files\n    tuple val(meta), path(\"*.diff.indv_in_files\")     , optional:true, emit: diff_indv_in_files\n    tuple val(meta), path(\"*.diff.sites\")             , optional:true, emit: diff_sites\n    tuple val(meta), path(\"*.diff.indv\")              , optional:true, emit: diff_indv\n    tuple val(meta), path(\"*.diff.discordance.matrix\"), optional:true, emit: diff_discd_matrix\n    tuple val(meta), path(\"*.diff.switch\")            , optional:true, emit: diff_switch_error\n    path \"versions.yml\"                               , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def args_list = args.tokenize()\n\n    def bed_arg  = (args.contains('--bed')) ? \"--bed ${bed}\" :\n        (args.contains('--exclude-bed')) ? \"--exclude-bed ${bed}\" :\n        (args.contains('--hapcount')) ? \"--hapcount ${bed}\" : ''\n    args_list.removeIf { it.contains('--bed') }\n    args_list.removeIf { it.contains('--exclude-bed') }\n    args_list.removeIf { it.contains('--hapcount') }\n\n    def diff_variant_arg = (args.contains('--diff')) ? \"--diff ${diff_variant_file}\" :\n        (args.contains('--gzdiff')) ? \"--gzdiff ${diff_variant_file}\" :\n        (args.contains('--diff-bcf')) ? \"--diff-bcf ${diff_variant_file}\" : ''\n    args_list.removeIf { it.contains('--diff') }\n    args_list.removeIf { it.contains('--gzdiff') }\n    args_list.removeIf { it.contains('--diff-bcf') }\n\n    def input_file = (\"$variant_file\".endsWith(\".vcf\")) ? \"--vcf ${variant_file}\" :\n        (\"$variant_file\".endsWith(\".vcf.gz\")) ? \"--gzvcf ${variant_file}\" :\n        (\"$variant_file\".endsWith(\".bcf\")) ? \"--bcf ${variant_file}\" : ''\n\n    \"\"\"\n    vcftools \\\\\n        $input_file \\\\\n        --out $prefix \\\\\n        ${args_list.join(' ')} \\\\\n        $bed_arg \\\\\n        $diff_variant_arg\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        vcftools: \\$(echo \\$(vcftools --version 2>&1) | sed 's/^.*VCFtools (//;s/).*//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 121,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def args_list = args.tokenize()\n\n    def bed_arg  = (args.contains('--bed')) ? \"--bed ${bed}\" :\n        (args.contains('--exclude-bed')) ? \"--exclude-bed ${bed}\" :\n        (args.contains('--hapcount')) ? \"--hapcount ${bed}\" : ''\n    args_list.removeIf { it.contains('--bed') }\n    args_list.removeIf { it.contains('--exclude-bed') }\n    args_list.removeIf { it.contains('--hapcount') }\n\n    def diff_variant_arg = (args.contains('--diff')) ? \"--diff ${diff_variant_file}\" :\n        (args.contains('--gzdiff')) ? \"--gzdiff ${diff_variant_file}\" :\n        (args.contains('--diff-bcf')) ? \"--diff-bcf ${diff_variant_file}\" : ''\n    args_list.removeIf { it.contains('--diff') }\n    args_list.removeIf { it.contains('--gzdiff') }\n    args_list.removeIf { it.contains('--diff-bcf') }\n\n    def input_file = (\"$variant_file\".endsWith(\".vcf\")) ? \"--vcf ${variant_file}\" :\n        (\"$variant_file\".endsWith(\".vcf.gz\")) ? \"--gzvcf ${variant_file}\" :\n        (\"$variant_file\".endsWith(\".bcf\")) ? \"--bcf ${variant_file}\" : ''\n\n    \"\"\"\n    vcftools \\\\\n        $input_file \\\\\n        --out $prefix \\\\\n        ${args_list.join(' ')} \\\\\n        $bed_arg \\\\\n        $diff_variant_arg\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        vcftools: \\$(echo \\$(vcftools --version 2>&1) | sed 's/^.*VCFtools (//;s/).*//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 34,
        "language_script": "bash",
        "tools": [
            "VCFtools"
        ],
        "tools_url": [
            "https://bio.tools/vcftools"
        ],
        "tools_dico": [
            {
                "name": "VCFtools",
                "uri": "https://bio.tools/vcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3675",
                                    "term": "Variant filtering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Sequence variation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Variant analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation annotation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Provide easily accessible methods for working with complex genetic variation data in the form of VCF files.",
                "homepage": "https://vcftools.github.io/index.html"
            }
        ],
        "inputs": [
            "meta",
            "variant_file",
            "bed",
            "diff_variant_file"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::vcftools=0.1.16\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/vcftools:0.1.16--he513fc3_4' : 'quay.io/biocontainers/vcftools:0.1.16--he513fc3_4' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "SEQWISH_INDUCE": {
        "name_process": "SEQWISH_INDUCE",
        "string_process": "\nprocess SEQWISH_INDUCE {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? 'bioconda::seqwish=0.7.2' : null)\n\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/seqwish:0.7.2--h2e03b76_0' :\n        'quay.io/biocontainers/seqwish:0.7.2--h2e03b76_0' }\"\n\n    input:\n    tuple val(meta), path(paf), path(fasta)\n\n    output:\n    tuple val(meta), path(\"*.gfa\"), emit: gfa\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    seqwish \\\\\n        --threads $task.cpus \\\\\n        --paf-alns=$paf \\\\\n        --seqs=$fasta \\\\\n        --gfa=${prefix}.gfa \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        seqwish: $VERSION\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 36,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    seqwish \\\\\n        --threads $task.cpus \\\\\n        --paf-alns=$paf \\\\\n        --seqs=$fasta \\\\\n        --gfa=${prefix}.gfa \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        seqwish: $VERSION\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "paf",
            "fasta"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? 'bioconda::seqwish=0.7.2' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/seqwish:0.7.2--h2e03b76_0' : 'quay.io/biocontainers/seqwish:0.7.2--h2e03b76_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "BEDTOOLS_GENOMECOV": {
        "name_process": "BEDTOOLS_GENOMECOV",
        "string_process": "process BEDTOOLS_GENOMECOV {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::bedtools=2.30.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bedtools:2.30.0--hc088bd4_0' :\n        'quay.io/biocontainers/bedtools:2.30.0--hc088bd4_0' }\"\n\n    input:\n    tuple val(meta), path(intervals), val(scale)\n    path  sizes\n    val   extension\n\n    output:\n    tuple val(meta), path(\"*.${extension}\"), emit: genomecov\n    path  \"versions.yml\"                   , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def args_list = args.tokenize()\n    args += (scale > 0 && scale != 1) ? \" -scale $scale\" : \"\"\n    if (!args_list.contains('-bg') && (scale > 0 && scale != 1)) {\n        args += \" -bg\"\n    }\n\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (intervals.name =~ /\\.bam/) {\n        \"\"\"\n        bedtools \\\\\n            genomecov \\\\\n            -ibam $intervals \\\\\n            $args \\\\\n            > ${prefix}.${extension}\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            bedtools: \\$(bedtools --version | sed -e \"s/bedtools v//g\")\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        bedtools \\\\\n            genomecov \\\\\n            -i $intervals \\\\\n            -g $sizes \\\\\n            $args \\\\\n            > ${prefix}.${extension}\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            bedtools: \\$(bedtools --version | sed -e \"s/bedtools v//g\")\n        END_VERSIONS\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 57,
        "string_script": "    def args = task.ext.args ?: ''\n    def args_list = args.tokenize()\n    args += (scale > 0 && scale != 1) ? \" -scale $scale\" : \"\"\n    if (!args_list.contains('-bg') && (scale > 0 && scale != 1)) {\n        args += \" -bg\"\n    }\n\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (intervals.name =~ /\\.bam/) {\n        \"\"\"\n        bedtools \\\\\n            genomecov \\\\\n            -ibam $intervals \\\\\n            $args \\\\\n            > ${prefix}.${extension}\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            bedtools: \\$(bedtools --version | sed -e \"s/bedtools v//g\")\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        bedtools \\\\\n            genomecov \\\\\n            -i $intervals \\\\\n            -g $sizes \\\\\n            $args \\\\\n            > ${prefix}.${extension}\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            bedtools: \\$(bedtools --version | sed -e \"s/bedtools v//g\")\n        END_VERSIONS\n        \"\"\"\n    }",
        "nb_lignes_script": 35,
        "language_script": "bash",
        "tools": [
            "PopTargs",
            "BEDTools"
        ],
        "tools_url": [
            "https://bio.tools/PopTargs",
            "https://bio.tools/bedtools"
        ],
        "tools_dico": [
            {
                "name": "PopTargs",
                "uri": "https://bio.tools/PopTargs",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0659",
                            "term": "Functional, regulatory and non-coding RNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0160",
                            "term": "Sequence sites, features and motifs"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3056",
                            "term": "Population genetics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "miRNA target prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Database search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "microRNA target detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "miRNA prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "microRNA detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "PopTargs is a database for studying population evolutionary genetics of human microRNA target sites.\n\nThese are the scripts used to create the MySQL database that is used by PopTargs.essex.ac.uk. The pipeline can be altered to create similar databases with different species, it may need to be adjusted to fit your file names.",
                "homepage": "https://poptargs.essex.ac.uk/"
            },
            {
                "name": "BEDTools",
                "uri": "https://bio.tools/bedtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "BEDTools is an extensive suite of utilities for comparing genomic features in BED format.",
                "homepage": "https://github.com/arq5x/bedtools2"
            }
        ],
        "inputs": [
            "meta",
            "scale",
            "intervals",
            "sizes",
            "extension"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::bedtools=2.30.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bedtools:2.30.0--hc088bd4_0' : 'quay.io/biocontainers/bedtools:2.30.0--hc088bd4_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "SSUISSERO": {
        "name_process": "SSUISSERO",
        "string_process": "\nprocess SSUISSERO {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::ssuissero=1.0.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/ssuissero%3A1.0.1--hdfd78af_0':\n        'quay.io/biocontainers/ssuissero:1.0.1--hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(fasta)\n\n    output:\n    tuple val(meta), path(\"*.tsv\"), emit: tsv\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def is_compressed = fasta.getName().endsWith(\".gz\") ? true : false\n    def fasta_name = fasta.getName().replace(\".gz\", \"\")\n    \"\"\"\n    if [ \"$is_compressed\" == \"true\" ]; then\n        gzip -c -d $fasta > $fasta_name\n    fi\n\n    SsuisSero.sh \\\\\n        -i $fasta_name \\\\\n        -o ./ \\\\\n        -s $prefix \\\\\n        -x fasta \\\\\n        -t $task.cpus\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        ssuissero: $VERSION\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 41,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def is_compressed = fasta.getName().endsWith(\".gz\") ? true : false\n    def fasta_name = fasta.getName().replace(\".gz\", \"\")\n    \"\"\"\n    if [ \"$is_compressed\" == \"true\" ]; then\n        gzip -c -d $fasta > $fasta_name\n    fi\n\n    SsuisSero.sh \\\\\n        -i $fasta_name \\\\\n        -o ./ \\\\\n        -s $prefix \\\\\n        -x fasta \\\\\n        -t $task.cpus\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        ssuissero: $VERSION\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 20,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "fasta"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::ssuissero=1.0.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/ssuissero%3A1.0.1--hdfd78af_0': 'quay.io/biocontainers/ssuissero:1.0.1--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "SAMTOOLS_FIXMATE": {
        "name_process": "SAMTOOLS_FIXMATE",
        "string_process": "process SAMTOOLS_FIXMATE {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::samtools=1.15.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/samtools:1.15.1--h1170115_0' :\n        'quay.io/biocontainers/samtools:1.15.1--h1170115_0' }\"\n\n    input:\n    tuple val(meta), path(bam)\n\n    output:\n    tuple val(meta), path(\"*.bam\"), emit: bam\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (\"$bam\" == \"${prefix}.bam\") error \"Input and output names are the same, use \\\"task.ext.prefix\\\" to disambiguate!\"\n    \"\"\"\n    samtools \\\\\n        fixmate  \\\\\n        $args \\\\\n        --threads ${task.cpus-1} \\\\\n        $bam \\\\\n        ${prefix}.bam \\\\\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (\"$bam\" == \"${prefix}.bam\") error \"Input and output names are the same, use \\\"task.ext.prefix\\\" to disambiguate!\"\n    \"\"\"\n    samtools \\\\\n        fixmate  \\\\\n        $args \\\\\n        --threads ${task.cpus-1} \\\\\n        $bam \\\\\n        ${prefix}.bam \\\\\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [
            "SAMtools",
            "rgpicfixmate"
        ],
        "tools_url": [
            "https://bio.tools/samtools",
            "https://bio.tools/rgpicfixmate"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "rgpicfixmate",
                "uri": "https://bio.tools/rgpicfixmate",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0231",
                                    "term": "Sequence editing"
                                }
                            ],
                            []
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "Ensure that all mate-pair information is in sync between each read and it's mate pair.",
                "homepage": "https://broadinstitute.github.io/picard/"
            }
        ],
        "inputs": [
            "meta",
            "bam"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::samtools=1.15.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/samtools:1.15.1--h1170115_0' : 'quay.io/biocontainers/samtools:1.15.1--h1170115_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "MLST": {
        "name_process": "MLST",
        "string_process": "process MLST {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::mlst=2.19.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mlst:2.19.0--hdfd78af_1' :\n        'quay.io/biocontainers/mlst:2.19.0--hdfd78af_1' }\"\n\n    input:\n    tuple val(meta), path(fasta)\n\n    output:\n    tuple val(meta), path(\"*.tsv\"), emit: tsv\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    mlst \\\\\n        --threads $task.cpus \\\\\n        $fasta \\\\\n        > ${prefix}.tsv\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        mlst: \\$( echo \\$(mlst --version 2>&1) | sed 's/mlst //' )\n    END_VERSIONS\n    \"\"\"\n\n}",
        "nb_lignes_process": 33,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    mlst \\\\\n        --threads $task.cpus \\\\\n        $fasta \\\\\n        > ${prefix}.tsv\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        mlst: \\$( echo \\$(mlst --version 2>&1) | sed 's/mlst //' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [
            "MLST"
        ],
        "tools_url": [
            "https://bio.tools/mlst"
        ],
        "tools_dico": [
            {
                "name": "MLST",
                "uri": "https://bio.tools/mlst",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2830",
                            "term": "Immunoproteins and antigens"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomic classification"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomy assignment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2044",
                                "term": "Sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "Multi Locus Sequence Typing from an assembled genome or from a set of reads.",
                "homepage": "http://cge.cbs.dtu.dk/services/MLST/"
            }
        ],
        "inputs": [
            "meta",
            "fasta"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::mlst=2.19.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mlst:2.19.0--hdfd78af_1' : 'quay.io/biocontainers/mlst:2.19.0--hdfd78af_1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "CHECKM_LINEAGEWF": {
        "name_process": "CHECKM_LINEAGEWF",
        "string_process": "process CHECKM_LINEAGEWF {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::checkm-genome=1.1.3\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/checkm-genome:1.1.3--py_1' :\n        'quay.io/biocontainers/checkm-genome:1.1.3--py_1' }\"\n\n    input:\n    tuple val(meta), path(fasta)\n    val fasta_ext\n\n    output:\n    tuple val(meta), path(\"${prefix}\")    , emit: checkm_output\n    tuple val(meta), path(\"${prefix}.tsv\"), emit: checkm_tsv\n    path \"versions.yml\"                   , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args   ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    checkm \\\\\n        lineage_wf \\\\\n        -t $task.cpus \\\\\n        -f ${prefix}.tsv \\\\\n        --tab_table \\\\\n        --pplacer_threads $task.cpus \\\\\n        -x $fasta_ext \\\\\n        $args \\\\\n        . \\\\\n        $prefix\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        checkm: \\$( checkm 2>&1 | grep '...:::' | sed 's/.*CheckM v//;s/ .*//' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 40,
        "string_script": "    def args = task.ext.args   ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    checkm \\\\\n        lineage_wf \\\\\n        -t $task.cpus \\\\\n        -f ${prefix}.tsv \\\\\n        --tab_table \\\\\n        --pplacer_threads $task.cpus \\\\\n        -x $fasta_ext \\\\\n        $args \\\\\n        . \\\\\n        $prefix\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        checkm: \\$( checkm 2>&1 | grep '...:::' | sed 's/.*CheckM v//;s/ .*//' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "fasta",
            "fasta_ext"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::checkm-genome=1.1.3\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/checkm-genome:1.1.3--py_1' : 'quay.io/biocontainers/checkm-genome:1.1.3--py_1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "PLINK_VCF": {
        "name_process": "PLINK_VCF",
        "string_process": "process PLINK_VCF {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::plink=1.90b6.21\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/plink:1.90b6.21--h779adbc_1' :\n        'quay.io/biocontainers/plink:1.90b6.21--h779adbc_1' }\"\n\n    input:\n    tuple val(meta), path(vcf)\n\n    output:\n    tuple val(meta), path(\"*.bed\"), emit: bed, optional: true\n    tuple val(meta), path(\"*.bim\"), emit: bim, optional: true\n    tuple val(meta), path(\"*.fam\"), emit: fam, optional: true\n\n    path \"versions.yml\" , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n    \"\"\"\n    plink \\\\\n        --vcf ${vcf} \\\\\n        $args \\\\\n        --threads $task.cpus \\\\\n        --out ${prefix}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        plink: \\$(echo \\$(plink --version 2>&1) | sed 's/^PLINK v//' | sed 's/..-bit.*//' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 37,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n    \"\"\"\n    plink \\\\\n        --vcf ${vcf} \\\\\n        $args \\\\\n        --threads $task.cpus \\\\\n        --out ${prefix}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        plink: \\$(echo \\$(plink --version 2>&1) | sed 's/^PLINK v//' | sed 's/..-bit.*//' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "pLink"
        ],
        "tools_url": [
            "https://bio.tools/pLink-2"
        ],
        "tools_dico": [
            {
                "name": "pLink",
                "uri": "https://bio.tools/pLink-2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3520",
                            "term": "Proteomics experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0154",
                            "term": "Small molecules"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0121",
                            "term": "Proteomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3649",
                                    "term": "Target-Decoy"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Protein fragment weight comparison"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "PMF"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Peptide mass fingerprinting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Protein fingerprinting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A high-speed search engine pLink 2 with systematic evaluation for proteome-scale identification of cross-linked peptides.",
                "homepage": "http://pfind.ict.ac.cn/software/pLink/index.html"
            }
        ],
        "inputs": [
            "meta",
            "vcf"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::plink=1.90b6.21\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/plink:1.90b6.21--h779adbc_1' : 'quay.io/biocontainers/plink:1.90b6.21--h779adbc_1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "QCAT": {
        "name_process": "QCAT",
        "string_process": "process QCAT {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::qcat=1.1.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/qcat:1.1.0--py_0' :\n        'quay.io/biocontainers/qcat:1.1.0--py_0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n    val   barcode_kit\n\n    output:\n    tuple val(meta), path(\"fastq/*.fastq.gz\"), emit: reads\n    path \"versions.yml\"                      , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    ## Unzip fastq file\n    ## qcat doesn't support zipped files yet\n    FILE=$reads\n    if [[ \\$FILE == *.gz ]]\n    then\n        zcat $reads > unzipped.fastq\n        FILE=unzipped.fastq\n    fi\n\n    qcat \\\\\n        -f \\$FILE \\\\\n        -b ./fastq \\\\\n        --kit $barcode_kit\n\n    ## Zip fastq files\n    gzip fastq/*\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        qcat: \\$(qcat --version 2>&1 | sed 's/^.*qcat //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 45,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    ## Unzip fastq file\n    ## qcat doesn't support zipped files yet\n    FILE=$reads\n    if [[ \\$FILE == *.gz ]]\n    then\n        zcat $reads > unzipped.fastq\n        FILE=unzipped.fastq\n    fi\n\n    qcat \\\\\n        -f \\$FILE \\\\\n        -b ./fastq \\\\\n        --kit $barcode_kit\n\n    ## Zip fastq files\n    gzip fastq/*\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        qcat: \\$(qcat --version 2>&1 | sed 's/^.*qcat //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 24,
        "language_script": "bash",
        "tools": [
            "seqCAT"
        ],
        "tools_url": [
            "https://bio.tools/seqcat"
        ],
        "tools_dico": [
            {
                "name": "seqCAT",
                "uri": "https://bio.tools/seqcat",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Sequence variation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Variant analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation annotation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "This package uses variant calling data (in the form of VCF files) from high throughput sequencing technologies to authenticate and validate the source, function and characteristics of biological samples used in scientific endeavours.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/seqCAT.html"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "barcode_kit"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::qcat=1.1.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/qcat:1.1.0--py_0' : 'quay.io/biocontainers/qcat:1.1.0--py_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "BEDTOOLS_MERGE": {
        "name_process": "BEDTOOLS_MERGE",
        "string_process": "process BEDTOOLS_MERGE {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::bedtools=2.30.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bedtools:2.30.0--hc088bd4_0' :\n        'quay.io/biocontainers/bedtools:2.30.0--hc088bd4_0' }\"\n\n    input:\n    tuple val(meta), path(bed)\n\n    output:\n    tuple val(meta), path('*.bed'), emit: bed\n    path  \"versions.yml\"          , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    bedtools \\\\\n        merge \\\\\n        -i $bed \\\\\n        $args \\\\\n        > ${prefix}.bed\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bedtools: \\$(bedtools --version | sed -e \"s/bedtools v//g\")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    bedtools \\\\\n        merge \\\\\n        -i $bed \\\\\n        $args \\\\\n        > ${prefix}.bed\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bedtools: \\$(bedtools --version | sed -e \"s/bedtools v//g\")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [
            "BEDTools",
            "merger"
        ],
        "tools_url": [
            "https://bio.tools/bedtools",
            "https://bio.tools/merger"
        ],
        "tools_dico": [
            {
                "name": "BEDTools",
                "uri": "https://bio.tools/bedtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "BEDTools is an extensive suite of utilities for comparing genomic features in BED format.",
                "homepage": "https://github.com/arq5x/bedtools2"
            },
            {
                "name": "merger",
                "uri": "https://bio.tools/merger",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0097",
                            "term": "Nucleic acid structure analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0097",
                            "term": "Nucleic acid structure"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise sequence alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0232",
                                    "term": "Sequence merging"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0232",
                                    "term": "Sequence splicing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0874",
                                "term": "Comparison matrix"
                            },
                            {
                                "uri": "http://edamontology.org/data_0849",
                                "term": "Sequence record"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0849",
                                "term": "Sequence record"
                            },
                            {
                                "uri": "http://edamontology.org/data_1381",
                                "term": "Pair sequence alignment"
                            }
                        ]
                    }
                ],
                "description": "Merge two overlapping sequences.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/merger.html"
            }
        ],
        "inputs": [
            "meta",
            "bed"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::bedtools=2.30.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bedtools:2.30.0--hc088bd4_0' : 'quay.io/biocontainers/bedtools:2.30.0--hc088bd4_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "DRAGMAP_ALIGN": {
        "name_process": "DRAGMAP_ALIGN",
        "string_process": "process DRAGMAP_ALIGN {\n    tag \"$meta.id\"\n    label 'process_high'\n\n    conda (params.enable_conda ? \"bioconda::dragmap=1.2.1 bioconda::samtools=1.15.1 conda-forge::pigz=2.3.4\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mulled-v2-580d344d9d4a496cd403932da8765f9e0187774d:5ebebbc128cd624282eaa37d2c7fe01505a91a69-0':\n        'quay.io/biocontainers/mulled-v2-580d344d9d4a496cd403932da8765f9e0187774d:5ebebbc128cd624282eaa37d2c7fe01505a91a69-0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n    path  hashmap\n    val   sort_bam\n\n    output:\n    tuple val(meta), path(\"*.bam\"), emit: bam\n    tuple val(meta), path('*.log'), emit: log\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def reads_command = meta.single_end ? \"-1 $reads\" : \"-1 ${reads[0]} -2 ${reads[1]}\"\n    def samtools_command = sort_bam ? 'sort' : 'view'\n\n    \"\"\"\n    dragen-os \\\\\n        -r $hashmap \\\\\n        $args \\\\\n        --num-threads $task.cpus \\\\\n        $reads_command \\\\\n        2> ${prefix}.dragmap.log \\\\\n        | samtools $samtools_command $args2 --threads $task.cpus -o ${prefix}.bam -\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        dragmap: \\$(echo \\$(dragen-os --version 2>&1))\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n        pigz: \\$( pigz --version 2>&1 | sed 's/pigz //g' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 44,
        "string_script": "    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def reads_command = meta.single_end ? \"-1 $reads\" : \"-1 ${reads[0]} -2 ${reads[1]}\"\n    def samtools_command = sort_bam ? 'sort' : 'view'\n\n    \"\"\"\n    dragen-os \\\\\n        -r $hashmap \\\\\n        $args \\\\\n        --num-threads $task.cpus \\\\\n        $reads_command \\\\\n        2> ${prefix}.dragmap.log \\\\\n        | samtools $samtools_command $args2 --threads $task.cpus -o ${prefix}.bam -\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        dragmap: \\$(echo \\$(dragen-os --version 2>&1))\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n        pigz: \\$( pigz --version 2>&1 | sed 's/pigz //g' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 21,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "hashmap",
            "sort_bam"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "conda (params.enable_conda ? \"bioconda::dragmap=1.2.1 bioconda::samtools=1.15.1 conda-forge::pigz=2.3.4\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mulled-v2-580d344d9d4a496cd403932da8765f9e0187774d:5ebebbc128cd624282eaa37d2c7fe01505a91a69-0': 'quay.io/biocontainers/mulled-v2-580d344d9d4a496cd403932da8765f9e0187774d:5ebebbc128cd624282eaa37d2c7fe01505a91a69-0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "KRONA_KRONADB": {
        "name_process": "KRONA_KRONADB",
        "string_process": "\nprocess KRONA_KRONADB {\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::krona=2.7.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/krona:2.7.1--pl526_5' :\n        'quay.io/biocontainers/krona:2.7.1--pl526_5' }\"\n\n    output:\n    path 'taxonomy/taxonomy.tab', emit: db\n    path \"versions.yml\"         , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    ktUpdateTaxonomy.sh \\\\\n        $args \\\\\n        taxonomy/\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        krona: $VERSION\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    ktUpdateTaxonomy.sh \\\\\n        $args \\\\\n        taxonomy/\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        krona: $VERSION\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::krona=2.7.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/krona:2.7.1--pl526_5' : 'quay.io/biocontainers/krona:2.7.1--pl526_5' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "GATK4_BASERECALIBRATOR": {
        "name_process": "GATK4_BASERECALIBRATOR",
        "string_process": "process GATK4_BASERECALIBRATOR {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::gatk4=4.2.6.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/gatk4:4.2.6.1--hdfd78af_0':\n        'quay.io/biocontainers/gatk4:4.2.6.1--hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(input), path(input_index), path(intervals)\n    path  fasta\n    path  fai\n    path  dict\n    path  known_sites\n    path  known_sites_tbi\n\n    output:\n    tuple val(meta), path(\"*.table\"), emit: table\n    path \"versions.yml\"             , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def interval_command = intervals ? \"--intervals $intervals\" : \"\"\n    def sites_command = known_sites.collect{\"--known-sites $it\"}.join(' ')\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[GATK BaseRecalibrator] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    gatk --java-options \"-Xmx${avail_mem}g\" BaseRecalibrator  \\\\\n        --input $input \\\\\n        --output ${prefix}.table \\\\\n        --reference $fasta \\\\\n        $interval_command \\\\\n        $sites_command \\\\\n        --tmp-dir . \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 50,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def interval_command = intervals ? \"--intervals $intervals\" : \"\"\n    def sites_command = known_sites.collect{\"--known-sites $it\"}.join(' ')\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[GATK BaseRecalibrator] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    gatk --java-options \"-Xmx${avail_mem}g\" BaseRecalibrator  \\\\\n        --input $input \\\\\n        --output ${prefix}.table \\\\\n        --reference $fasta \\\\\n        $interval_command \\\\\n        $sites_command \\\\\n        --tmp-dir . \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 25,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "meta",
            "input",
            "input_index",
            "intervals",
            "fasta",
            "fai",
            "dict",
            "known_sites",
            "known_sites_tbi"
        ],
        "nb_inputs": 9,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::gatk4=4.2.6.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/gatk4:4.2.6.1--hdfd78af_0': 'quay.io/biocontainers/gatk4:4.2.6.1--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "CLONALFRAMEML": {
        "name_process": "CLONALFRAMEML",
        "string_process": "process CLONALFRAMEML {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::clonalframeml=1.12\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/clonalframeml:1.12--h7d875b9_1' :\n        'quay.io/biocontainers/clonalframeml:1.12--h7d875b9_1' }\"\n\n    input:\n    tuple val(meta), path(newick), path(msa)\n\n    output:\n    tuple val(meta), path(\"*.emsim.txt\")                   , emit: emsim, optional: true\n    tuple val(meta), path(\"*.em.txt\")                      , emit: em\n    tuple val(meta), path(\"*.importation_status.txt\")      , emit: status\n    tuple val(meta), path(\"*.labelled_tree.newick\")        , emit: newick\n    tuple val(meta), path(\"*.ML_sequence.fasta\")           , emit: fasta\n    tuple val(meta), path(\"*.position_cross_reference.txt\"), emit: pos_ref\n    path \"versions.yml\"                                    , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    ClonalFrameML \\\\\n        $newick \\\\\n        <(gzip -cdf $msa) \\\\\n        $prefix \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        clonalframeml: \\$( echo \\$(ClonalFrameML -version 2>&1) | sed 's/^.*ClonalFrameML v//' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 38,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    ClonalFrameML \\\\\n        $newick \\\\\n        <(gzip -cdf $msa) \\\\\n        $prefix \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        clonalframeml: \\$( echo \\$(ClonalFrameML -version 2>&1) | sed 's/^.*ClonalFrameML v//' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [
            "ClonalFrameML"
        ],
        "tools_url": [
            "https://bio.tools/clonalframeml"
        ],
        "tools_dico": [
            {
                "name": "ClonalFrameML",
                "uri": "https://bio.tools/clonalframeml",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acids"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0084",
                            "term": "Phylogeny"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0194",
                            "term": "Phylogenomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acid bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acid informatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0539",
                                    "term": "Phylogenetic inference (method centric)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2478",
                                    "term": "Nucleic acid sequence analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0539",
                                    "term": "Phylogenetic tree construction (method centric)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0539",
                                    "term": "Phylogenetic tree generation (method centric)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2478",
                                    "term": "Sequence analysis (nucleic acid)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "ClonalFrameML is a maximum likelihood implementation of the Bayesian software ClonalFrame which was previously described by Didelot and Falush (2007). The recombination model underpinning ClonalFrameML is exactly the same as for ClonalFrame, but this new implementation is a lot faster, is able to deal with much larger genomic dataset, and does not suffer from MCMC convergence issues",
                "homepage": "https://github.com/xavierdidelot/ClonalFrameML"
            }
        ],
        "inputs": [
            "meta",
            "newick",
            "msa"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::clonalframeml=1.12\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/clonalframeml:1.12--h7d875b9_1' : 'quay.io/biocontainers/clonalframeml:1.12--h7d875b9_1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "BWAMEM2_MEM": {
        "name_process": "BWAMEM2_MEM",
        "string_process": "process BWAMEM2_MEM {\n    tag \"$meta.id\"\n    label 'process_high'\n\n    conda (params.enable_conda ? \"bioconda::bwa-mem2=2.2.1 bioconda::samtools=1.15.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mulled-v2-e5d375990341c5aef3c9aff74f96f66f65375ef6:38aed4501da19db366dc7c8d52d31d94e760cfaf-0' :\n        'quay.io/biocontainers/mulled-v2-e5d375990341c5aef3c9aff74f96f66f65375ef6:38aed4501da19db366dc7c8d52d31d94e760cfaf-0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n    path  index\n    val   sort_bam\n\n    output:\n    tuple val(meta), path(\"*.bam\"), emit: bam\n    path  \"versions.yml\"          , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def samtools_command = sort_bam ? 'sort' : 'view'\n    \"\"\"\n    INDEX=`find -L ./ -name \"*.amb\" | sed 's/.amb//'`\n\n    bwa-mem2 \\\\\n        mem \\\\\n        $args \\\\\n        -t $task.cpus \\\\\n        \\$INDEX \\\\\n        $reads \\\\\n        | samtools $samtools_command $args2 -@ $task.cpus -o ${prefix}.bam -\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bwamem2: \\$(echo \\$(bwa-mem2 version 2>&1) | sed 's/.* //')\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.bam\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bwamem2: \\$(echo \\$(bwa-mem2 version 2>&1) | sed 's/.* //')\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 53,
        "string_script": "    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def samtools_command = sort_bam ? 'sort' : 'view'\n    \"\"\"\n    INDEX=`find -L ./ -name \"*.amb\" | sed 's/.amb//'`\n\n    bwa-mem2 \\\\\n        mem \\\\\n        $args \\\\\n        -t $task.cpus \\\\\n        \\$INDEX \\\\\n        $reads \\\\\n        | samtools $samtools_command $args2 -@ $task.cpus -o ${prefix}.bam -\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bwamem2: \\$(echo \\$(bwa-mem2 version 2>&1) | sed 's/.* //')\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 20,
        "language_script": "bash",
        "tools": [
            "MEMo",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/memo_cancer",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "MEMo",
                "uri": "https://bio.tools/memo_cancer",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0602",
                            "term": "Molecular interactions, pathways and networks"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2259",
                            "term": "Systems biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2640",
                            "term": "Oncology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_2640",
                            "term": "Cancer biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2640",
                            "term": "https://en.wikipedia.org/wiki/Oncology"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3439",
                                    "term": "Pathway or network prediction"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Method for identifying mutually exclusive driver networks in cancer. The method identifies networks defined by three properties: first, member genes are recurrently altered via somatic mutation or copy number changes; second, member genes are likely to participate in the same biological pathway or process, as determined from prior pathway and network knowledge; and third, genomic events within the network exhibit a statistically significant level of mutual exclusivity.",
                "homepage": "http://cbio.mskcc.org/tools/memo/"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "index",
            "sort_bam"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "conda (params.enable_conda ? \"bioconda::bwa-mem2=2.2.1 bioconda::samtools=1.15.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mulled-v2-e5d375990341c5aef3c9aff74f96f66f65375ef6:38aed4501da19db366dc7c8d52d31d94e760cfaf-0' : 'quay.io/biocontainers/mulled-v2-e5d375990341c5aef3c9aff74f96f66f65375ef6:38aed4501da19db366dc7c8d52d31d94e760cfaf-0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.bam\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bwamem2: \\$(echo \\$(bwa-mem2 version 2>&1) | sed 's/.* //')\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\""
    },
    "SAMTOOLS_FLAGSTAT": {
        "name_process": "SAMTOOLS_FLAGSTAT",
        "string_process": "process SAMTOOLS_FLAGSTAT {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::samtools=1.15.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/samtools:1.15.1--h1170115_0' :\n        'quay.io/biocontainers/samtools:1.15.1--h1170115_0' }\"\n\n    input:\n    tuple val(meta), path(bam), path(bai)\n\n    output:\n    tuple val(meta), path(\"*.flagstat\"), emit: flagstat\n    path  \"versions.yml\"               , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    samtools \\\\\n        flagstat \\\\\n        --threads ${task.cpus-1} \\\\\n        $bam \\\\\n        > ${bam}.flagstat\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    samtools \\\\\n        flagstat \\\\\n        --threads ${task.cpus-1} \\\\\n        $bam \\\\\n        > ${bam}.flagstat\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "bam",
            "bai"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::samtools=1.15.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/samtools:1.15.1--h1170115_0' : 'quay.io/biocontainers/samtools:1.15.1--h1170115_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "GATK4_APPLYBQSR": {
        "name_process": "GATK4_APPLYBQSR",
        "string_process": "process GATK4_APPLYBQSR {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::gatk4=4.2.6.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/gatk4:4.2.6.1--hdfd78af_0':\n        'quay.io/biocontainers/gatk4:4.2.6.1--hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(input), path(input_index), path(bqsr_table), path(intervals)\n    path  fasta\n    path  fai\n    path  dict\n\n    output:\n    tuple val(meta), path(\"*.bam\") , emit: bam,  optional: true\n    tuple val(meta), path(\"*.cram\"), emit: cram, optional: true\n    path \"versions.yml\"            , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def interval_command = intervals ? \"--intervals $intervals\" : \"\"\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[GATK ApplyBQSR] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    gatk --java-options \"-Xmx${avail_mem}g\" ApplyBQSR \\\\\n        --input $input \\\\\n        --output ${prefix}.${input.getExtension()} \\\\\n        --reference $fasta \\\\\n        --bqsr-recal-file $bqsr_table \\\\\n        $interval_command \\\\\n        --tmp-dir . \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 48,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def interval_command = intervals ? \"--intervals $intervals\" : \"\"\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[GATK ApplyBQSR] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    gatk --java-options \"-Xmx${avail_mem}g\" ApplyBQSR \\\\\n        --input $input \\\\\n        --output ${prefix}.${input.getExtension()} \\\\\n        --reference $fasta \\\\\n        --bqsr-recal-file $bqsr_table \\\\\n        $interval_command \\\\\n        --tmp-dir . \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 24,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "meta",
            "input",
            "input_index",
            "bqsr_table",
            "intervals",
            "fasta",
            "fai",
            "dict"
        ],
        "nb_inputs": 8,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::gatk4=4.2.6.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/gatk4:4.2.6.1--hdfd78af_0': 'quay.io/biocontainers/gatk4:4.2.6.1--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "AMRFINDERPLUS_UPDATE": {
        "name_process": "AMRFINDERPLUS_UPDATE",
        "string_process": "process AMRFINDERPLUS_UPDATE {\n    tag \"update\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::ncbi-amrfinderplus=3.10.23\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/ncbi-amrfinderplus%3A3.10.23--h17dc2d4_0':\n        'quay.io/biocontainers/ncbi-amrfinderplus:3.10.23--h17dc2d4_0' }\"\n\n    output:\n    path \"amrfinderdb.tar.gz\", emit: db\n    path \"versions.yml\"      , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    mkdir amrfinderdb\n    amrfinder_update -d amrfinderdb\n    tar czvf amrfinderdb.tar.gz -C \\$(readlink amrfinderdb/latest) ./\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        amrfinderplus: \\$(amrfinder --version)\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    mkdir amrfinderdb\n    amrfinder_update -d amrfinderdb\n    tar czvf amrfinderdb.tar.gz -C \\$(readlink amrfinderdb/latest) ./\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        amrfinderplus: \\$(amrfinder --version)\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"update\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::ncbi-amrfinderplus=3.10.23\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/ncbi-amrfinderplus%3A3.10.23--h17dc2d4_0': 'quay.io/biocontainers/ncbi-amrfinderplus:3.10.23--h17dc2d4_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "BISMARK_DEDUPLICATE": {
        "name_process": "BISMARK_DEDUPLICATE",
        "string_process": "process BISMARK_DEDUPLICATE {\n    tag \"$meta.id\"\n    label 'process_high'\n\n    conda (params.enable_conda ? \"bioconda::bismark=0.23.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bismark:0.23.0--0' :\n        'quay.io/biocontainers/bismark:0.23.0--0' }\"\n\n    input:\n    tuple val(meta), path(bam)\n\n    output:\n    tuple val(meta), path(\"*.deduplicated.bam\")        , emit: bam\n    tuple val(meta), path(\"*.deduplication_report.txt\"), emit: report\n    path  \"versions.yml\"                               , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def seqtype    = meta.single_end ? '-s' : '-p'\n    \"\"\"\n    deduplicate_bismark \\\\\n        $args \\\\\n        $seqtype \\\\\n        --bam $bam\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bismark: \\$(echo \\$(bismark -v 2>&1) | sed 's/^.*Bismark Version: v//; s/Copyright.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def seqtype    = meta.single_end ? '-s' : '-p'\n    \"\"\"\n    deduplicate_bismark \\\\\n        $args \\\\\n        $seqtype \\\\\n        --bam $bam\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bismark: \\$(echo \\$(bismark -v 2>&1) | sed 's/^.*Bismark Version: v//; s/Copyright.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "bam"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "conda (params.enable_conda ? \"bioconda::bismark=0.23.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bismark:0.23.0--0' : 'quay.io/biocontainers/bismark:0.23.0--0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "BISCUIT_EPIREAD": {
        "name_process": "BISCUIT_EPIREAD",
        "string_process": "process BISCUIT_EPIREAD {\n    tag \"$meta.id\"\n    label 'process_long'\n\n    conda (params.enable_conda ? \"bioconda::biscuit=1.0.2.20220113 bioconda::samtools=1.15\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mulled-v2-db16f1c237a26ea9245cf9924f858974ff321d6e:17fa66297f088a1bc7560b7b90dc273bf23f2d8c-0':\n        'quay.io/biocontainers/mulled-v2-db16f1c237a26ea9245cf9924f858974ff321d6e:17fa66297f088a1bc7560b7b90dc273bf23f2d8c-0' }\"\n\n    input:\n    tuple val(meta), path(bam), path(bai), path(snp_bed)\n    path(index)\n\n    output:\n    tuple val(meta), path(\"*.bed.gz\"), emit: epiread_bed\n    path \"versions.yml\"              , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def biscuit_cpus = (int) Math.max(Math.floor(task.cpus*0.9),1)\n    def samtools_cpus = task.cpus-biscuit_cpus\n                                                                              \n                                                                                           \n    def unzip_snp_bed = snp_bed && (snp_bed.toString() =~ /\\.gz$/) ? \"bgzip -d ${snp_bed}\" : \"\"\n    def unzipped_snp_bed = snp_bed ? snp_bed.toString() - ~/\\.gz$/: \"\"\n                                \n    def options_snp_bed = snp_bed ? \"-B ${unzipped_snp_bed}\" : \"\"\n    if (\"$options_snp_bed\" == \"${prefix}.bed.gz\") error \"Input and output names are the same, set prefix in module configuration to disambiguate!\"\n    \"\"\"\n    INDEX=`find -L ./ -name \"*.bis.amb\" | sed 's/.bis.amb//'`\n\n    $unzip_snp_bed\n\n    biscuit epiread \\\\\n        -@ $biscuit_cpus \\\\\n        $args \\\\\n        $options_snp_bed \\\\\n        \\$INDEX \\\\\n        $bam | \\\\\n    LC_ALL=C sort -k1,1 -k2,2n | \\\\\n    bgzip \\\\\n        -@ $samtools_cpus \\\\\n        $args2 \\\\\n        -c > ${prefix}.bed.gz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        biscuit: \\$( biscuit version |& sed '1!d; s/^.*BISCUIT Version: //' )\n        samtools: \\$( samtools --version |& sed '1!d; s/^.*samtools //' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 55,
        "string_script": "    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def biscuit_cpus = (int) Math.max(Math.floor(task.cpus*0.9),1)\n    def samtools_cpus = task.cpus-biscuit_cpus\n                                                                              \n                                                                                           \n    def unzip_snp_bed = snp_bed && (snp_bed.toString() =~ /\\.gz$/) ? \"bgzip -d ${snp_bed}\" : \"\"\n    def unzipped_snp_bed = snp_bed ? snp_bed.toString() - ~/\\.gz$/: \"\"\n                                \n    def options_snp_bed = snp_bed ? \"-B ${unzipped_snp_bed}\" : \"\"\n    if (\"$options_snp_bed\" == \"${prefix}.bed.gz\") error \"Input and output names are the same, set prefix in module configuration to disambiguate!\"\n    \"\"\"\n    INDEX=`find -L ./ -name \"*.bis.amb\" | sed 's/.bis.amb//'`\n\n    $unzip_snp_bed\n\n    biscuit epiread \\\\\n        -@ $biscuit_cpus \\\\\n        $args \\\\\n        $options_snp_bed \\\\\n        \\$INDEX \\\\\n        $bam | \\\\\n    LC_ALL=C sort -k1,1 -k2,2n | \\\\\n    bgzip \\\\\n        -@ $samtools_cpus \\\\\n        $args2 \\\\\n        -c > ${prefix}.bed.gz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        biscuit: \\$( biscuit version |& sed '1!d; s/^.*BISCUIT Version: //' )\n        samtools: \\$( samtools --version |& sed '1!d; s/^.*samtools //' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 34,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "bam",
            "bai",
            "snp_bed",
            "index"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_long'",
            "conda (params.enable_conda ? \"bioconda::biscuit=1.0.2.20220113 bioconda::samtools=1.15\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mulled-v2-db16f1c237a26ea9245cf9924f858974ff321d6e:17fa66297f088a1bc7560b7b90dc273bf23f2d8c-0': 'quay.io/biocontainers/mulled-v2-db16f1c237a26ea9245cf9924f858974ff321d6e:17fa66297f088a1bc7560b7b90dc273bf23f2d8c-0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "SAMTOOLS_DEPTH": {
        "name_process": "SAMTOOLS_DEPTH",
        "string_process": "process SAMTOOLS_DEPTH {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::samtools=1.15.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/samtools:1.15.1--h1170115_0' :\n        'quay.io/biocontainers/samtools:1.15.1--h1170115_0' }\"\n\n    input:\n    tuple val(meta), path(bam)\n\n    output:\n    tuple val(meta), path(\"*.tsv\"), emit: tsv\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    samtools \\\\\n        depth \\\\\n        $args \\\\\n        -o ${prefix}.tsv \\\\\n        $bam\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    samtools \\\\\n        depth \\\\\n        $args \\\\\n        -o ${prefix}.tsv \\\\\n        $bam\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [
            "SAMtools",
            "DEPTH"
        ],
        "tools_url": [
            "https://bio.tools/samtools",
            "https://bio.tools/depth"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "DEPTH",
                "uri": "https://bio.tools/depth",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0166",
                            "term": "Protein structural motifs and surfaces"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3534",
                            "term": "Protein binding sites"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0154",
                            "term": "Small molecules"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0130",
                            "term": "Protein folding, stability and design"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0601",
                            "term": "Protein modifications"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0166",
                            "term": "Protein 3D motifs"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0601",
                            "term": "Protein post-translational modification"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0601",
                            "term": "PTMs"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0601",
                            "term": "Post-translational modifications"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0387",
                                    "term": "Molecular surface calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3230",
                                    "term": "Read depth analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2575",
                                    "term": "Binding site prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0478",
                                    "term": "Molecular docking"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2950",
                                    "term": "Residue distance calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2575",
                                    "term": "Protein binding site prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2575",
                                    "term": "Protein binding site detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0478",
                                    "term": "Macromolecular docking"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0478",
                                    "term": "Docking simulation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "DEPTH web tool computes depth and solvent-accessible surface area values for the prediction of small molecule ligand binding cavities in proteins.",
                "homepage": "http://mspc.bii.a-star.edu.sg/depth"
            }
        ],
        "inputs": [
            "meta",
            "bam"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__modules",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::samtools=1.15.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/samtools:1.15.1--h1170115_0' : 'quay.io/biocontainers/samtools:1.15.1--h1170115_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    }
}
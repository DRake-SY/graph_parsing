{
    "NANOPLOT": {
        "name_process": "NANOPLOT",
        "string_process": "\nprocess NANOPLOT {\n    tag \"$meta.id\"\n    label 'process_low'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? 'bioconda::nanoplot=1.38.0' : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/nanoplot:1.38.0--pyhdfd78af_0\"\n    } else {\n        container \"quay.io/biocontainers/nanoplot:1.38.0--pyhdfd78af_0\"\n    }\n\n    input:\n    tuple val(meta), path(ontfile)\n\n    output:\n    tuple val(meta), path(\"*.html\"), emit: html\n    tuple val(meta), path(\"*.png\") , emit: png\n    tuple val(meta), path(\"*.txt\") , emit: txt\n    tuple val(meta), path(\"*.log\") , emit: log\n    path  \"*.version.txt\"          , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    def input_file = \"--fastq ${ontfile}\"\n    \"\"\"\n    NanoPlot \\\\\n        $options.args \\\\\n        -t $task.cpus \\\\\n        $input_file\n    echo \\$(NanoPlot --version 2>&1) | sed 's/^.*NanoPlot //; s/ .*\\$//' > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    def software = getSoftwareName(task.process)\n    def input_file = \"--fastq ${ontfile}\"\n    \"\"\"\n    NanoPlot \\\\\n        $options.args \\\\\n        -t $task.cpus \\\\\n        $input_file\n    echo \\$(NanoPlot --version 2>&1) | sed 's/^.*NanoPlot //; s/ .*\\$//' > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "ontfile"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__bacass",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? 'bioconda::nanoplot=1.38.0' : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/nanoplot:1.38.0--pyhdfd78af_0\" } else { container \"quay.io/biocontainers/nanoplot:1.38.0--pyhdfd78af_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "SAMTOOLS_INDEX": {
        "name_process": "SAMTOOLS_INDEX",
        "string_process": "\nprocess SAMTOOLS_INDEX {\n    tag \"$meta.id\"\n    label 'process_low'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? 'bioconda::samtools=1.13' : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/samtools:1.13--h8c37831_0\"\n    } else {\n        container \"quay.io/biocontainers/samtools:1.13--h8c37831_0\"\n    }\n\n    input:\n    tuple val(meta), path(bam)\n\n    output:\n    tuple val(meta), path(\"*.bai\"), optional:true, emit: bai\n    tuple val(meta), path(\"*.csi\"), optional:true, emit: csi\n    path  \"*.version.txt\"         , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    \"\"\"\n    samtools index $options.args $bam\n    echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//' > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "    def software = getSoftwareName(task.process)\n    \"\"\"\n    samtools index $options.args $bam\n    echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//' > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "bam"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__bacass",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? 'bioconda::samtools=1.13' : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/samtools:1.13--h8c37831_0\" } else { container \"quay.io/biocontainers/samtools:1.13--h8c37831_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "RACON": {
        "name_process": "RACON",
        "string_process": "\nprocess RACON {\n    tag \"$meta.id\"\n    label 'process_high'\n    label 'process_long'\n    label 'process_high_memory'\n    label 'error_retry'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? 'racon=1.4.20-1' : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/racon:1.4.20--h9a82719_1\"\n    } else {\n        container \"quay.io/biocontainers/racon:1.4.20--h9a82719_1\"\n    }\n\n    input:\n    tuple val(meta), val(reads), file(longreads), path('assembly.fasta'), path(paf)\n\n    output:\n    tuple val(meta), path('*_assembly_consensus.fasta') , emit: assembly\n    path  '*.version.txt'                     , emit: version\n\n    script:\n    def software    = getSoftwareName(task.process)\n    def prefix      = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    racon -t \"${task.cpus}\" \"${longreads}\" \"${paf}\" \"assembly.fasta\" > ${prefix}_assembly_consensus.fasta\n\n    echo \\$(racon --version 2>&1) | sed 's/^.*v//' > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "    def software    = getSoftwareName(task.process)\n    def prefix      = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    racon -t \"${task.cpus}\" \"${longreads}\" \"${paf}\" \"assembly.fasta\" > ${prefix}_assembly_consensus.fasta\n\n    echo \\$(racon --version 2>&1) | sed 's/^.*v//' > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "Racon"
        ],
        "tools_url": [
            "https://bio.tools/Racon"
        ],
        "tools_dico": [
            {
                "name": "Racon",
                "uri": "https://bio.tools/Racon",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0780",
                            "term": "Plant biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Whole genome sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0780",
                            "term": "Plant science"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0780",
                            "term": "Plants"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0780",
                            "term": "Botany"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0780",
                            "term": "Plant"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "WGS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0523",
                                    "term": "Mapping assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Sequence trimming"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0523",
                                    "term": "Sequence assembly (mapping assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Trimming"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Possibility to Use Oxford Nanopore Technology | Ultrafast consensus module for raw de novo genome assembly of long uncorrected reads. http://genome.cshlp.org/content/early/2017/01/18/gr.214270.116 Note: This was the original repository which will no longer be officially maintained. Please use the new official repository here: | Racon is intended as a standalone consensus module to correct raw contigs generated by rapid assembly methods which do not include a consensus step | Consensus module for raw de novo DNA assembly of long uncorrected reads",
                "homepage": "https://github.com/isovic/racon"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "longreads",
            "paf"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__bacass",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "label 'process_long'",
            "label 'process_high_memory'",
            "label 'error_retry'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? 'racon=1.4.20-1' : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/racon:1.4.20--h9a82719_1\" } else { container \"quay.io/biocontainers/racon:1.4.20--h9a82719_1\" }"
        ],
        "when": "",
        "stub": ""
    },
    "FASTQC": {
        "name_process": "FASTQC",
        "string_process": "\nprocess FASTQC {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"bioconda::fastqc=0.11.9\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/fastqc:0.11.9--0\"\n    } else {\n        container \"quay.io/biocontainers/fastqc:0.11.9--0\"\n    }\n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path(\"*.html\"), emit: html\n    tuple val(meta), path(\"*.zip\") , emit: zip\n    path  \"*.version.txt\"          , emit: version\n\n    script:\n                                                                          \n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    if (meta.single_end) {\n        \"\"\"\n        [ ! -f  ${prefix}.fastq.gz ] && ln -s $reads ${prefix}.fastq.gz\n        fastqc $options.args --threads $task.cpus ${prefix}.fastq.gz\n        fastqc --version | sed -e \"s/FastQC v//g\" > ${software}.version.txt\n        \"\"\"\n    } else {\n        \"\"\"\n        [ ! -f  ${prefix}_1.fastq.gz ] && ln -s ${reads[0]} ${prefix}_1.fastq.gz\n        [ ! -f  ${prefix}_2.fastq.gz ] && ln -s ${reads[1]} ${prefix}_2.fastq.gz\n        fastqc $options.args --threads $task.cpus ${prefix}_1.fastq.gz ${prefix}_2.fastq.gz\n        fastqc --version | sed -e \"s/FastQC v//g\" > ${software}.version.txt\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 40,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    if (meta.single_end) {\n        \"\"\"\n        [ ! -f  ${prefix}.fastq.gz ] && ln -s $reads ${prefix}.fastq.gz\n        fastqc $options.args --threads $task.cpus ${prefix}.fastq.gz\n        fastqc --version | sed -e \"s/FastQC v//g\" > ${software}.version.txt\n        \"\"\"\n    } else {\n        \"\"\"\n        [ ! -f  ${prefix}_1.fastq.gz ] && ln -s ${reads[0]} ${prefix}_1.fastq.gz\n        [ ! -f  ${prefix}_2.fastq.gz ] && ln -s ${reads[1]} ${prefix}_2.fastq.gz\n        fastqc $options.args --threads $task.cpus ${prefix}_1.fastq.gz ${prefix}_2.fastq.gz\n        fastqc --version | sed -e \"s/FastQC v//g\" > ${software}.version.txt\n        \"\"\"\n    }",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [
            "FastQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            }
        ],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__bacass",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"bioconda::fastqc=0.11.9\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/fastqc:0.11.9--0\" } else { container \"quay.io/biocontainers/fastqc:0.11.9--0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "MINIASM": {
        "name_process": "MINIASM",
        "string_process": "\nprocess MINIASM {\n    tag \"$meta.id\"\n    label 'process_high'\n    label 'process_long'\n    label 'process_high_memory'\n    label 'error_retry'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? 'bioconda::miniasm=0.3_r179' : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/miniasm:0.3_r179--h5bf99c6_2\"\n    } else {\n        container \"quay.io/biocontainers/miniasm:0.3_r179--h5bf99c6_2\"\n    }\n\n    input:\n    tuple val(meta), val(reads), file(longreads), file(assembly), path(paf)\n\n    output:\n    tuple val(meta), path('*_assembly.fasta') , emit: assembly\n    tuple val(meta), val(reads), file(longreads), path('*_assembly.fasta') , emit: all\n    path  '*.version.txt'                     , emit: version\n\n    script:\n    def software    = getSoftwareName(task.process)\n    def prefix      = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    miniasm -f \"${longreads}\" \"${paf}\" > \"${longreads}.gfa\"\n    awk '/^S/{print \">\"\\$2\"\\\\n\"\\$3}' \"${longreads}.gfa\" | fold > ${prefix}_assembly.fasta\n\n    echo \\$(miniasm -V 2>&1) > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    def software    = getSoftwareName(task.process)\n    def prefix      = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    miniasm -f \"${longreads}\" \"${paf}\" > \"${longreads}.gfa\"\n    awk '/^S/{print \">\"\\$2\"\\\\n\"\\$3}' \"${longreads}.gfa\" | fold > ${prefix}_assembly.fasta\n\n    echo \\$(miniasm -V 2>&1) > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "TFold"
        ],
        "tools_url": [
            "https://bio.tools/tfold"
        ],
        "tools_dico": [
            {
                "name": "TFold",
                "uri": "https://bio.tools/tfold",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0082",
                            "term": "Structure prediction"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0099",
                            "term": "RNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0659",
                            "term": "Functional, regulatory and non-coding RNA"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0278",
                                    "term": "RNA secondary structure prediction"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "An algorithm for predicting non-coding RNA secondary structures.",
                "homepage": "https://evryrna.ibisc.univ-evry.fr/evryrna/tfold"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "longreads",
            "assembly",
            "paf"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__bacass",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "label 'process_long'",
            "label 'process_high_memory'",
            "label 'error_retry'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? 'bioconda::miniasm=0.3_r179' : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/miniasm:0.3_r179--h5bf99c6_2\" } else { container \"quay.io/biocontainers/miniasm:0.3_r179--h5bf99c6_2\" }"
        ],
        "when": "",
        "stub": ""
    },
    "DFAST": {
        "name_process": "DFAST",
        "string_process": "\nprocess DFAST {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"dfast=1.2.14\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/dfast:1.2.14--h2e03b76_0\"\n    } else {\n        container \"quay.io/biocontainers/dfast:1.2.14--h2e03b76_0\"\n    }\n\n    input:\n    tuple val(meta), path(fasta)\n    file (config)\n\n    output:\n    tuple val(meta), path(\"RESULT*\"), emit: reads\n    path \"*.version.txt\"            , emit: version\n\n    script:\n    def software    = getSoftwareName(task.process)\n    \"\"\"\n    dfast_file_downloader.py --protein dfast --dbroot .\n    dfast --genome ${fasta} --config $config\n    dfast --version | sed -e \"s/DFAST ver. //g\"  > \"${software}.version.txt\"\n    \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "    def software    = getSoftwareName(task.process)\n    \"\"\"\n    dfast_file_downloader.py --protein dfast --dbroot .\n    dfast --genome ${fasta} --config $config\n    dfast --version | sed -e \"s/DFAST ver. //g\"  > \"${software}.version.txt\"\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "DFAST"
        ],
        "tools_url": [
            "https://bio.tools/dfast"
        ],
        "tools_dico": [
            {
                "name": "DFAST",
                "uri": "https://bio.tools/dfast",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0097",
                            "term": "Nucleic acid structure analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0097",
                            "term": "Nucleic acid structure"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0362",
                                    "term": "Genome annotation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Flexible prokaryotic genome annotation pipeline for faster genome publication.",
                "homepage": "https://dfast.nig.ac.jp/"
            }
        ],
        "inputs": [
            "meta",
            "fasta",
            "config"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__bacass",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"dfast=1.2.14\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/dfast:1.2.14--h2e03b76_0\" } else { container \"quay.io/biocontainers/dfast:1.2.14--h2e03b76_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "PROKKA": {
        "name_process": "PROKKA",
        "string_process": "\nprocess PROKKA {\n    tag \"$meta.id\"\n    label 'process_low'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"bioconda::prokka=1.14.6\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/prokka:1.14.6--pl526_0\"\n    } else {\n        container \"quay.io/biocontainers/prokka:1.14.6--pl526_0\"\n    }\n\n    input:\n    tuple val(meta), path(fasta)\n    path proteins\n    path prodigal_tf\n\n    output:\n    tuple val(meta), path(\"${prefix}/*.gff\"), emit: gff\n    tuple val(meta), path(\"${prefix}/*.gbk\"), emit: gbk\n    tuple val(meta), path(\"${prefix}/*.fna\"), emit: fna\n    tuple val(meta), path(\"${prefix}/*.faa\"), emit: faa\n    tuple val(meta), path(\"${prefix}/*.ffn\"), emit: ffn\n    tuple val(meta), path(\"${prefix}/*.sqn\"), emit: sqn\n    tuple val(meta), path(\"${prefix}/*.fsa\"), emit: fsa\n    tuple val(meta), path(\"${prefix}/*.tbl\"), emit: tbl\n    tuple val(meta), path(\"${prefix}/*.err\"), emit: err\n    tuple val(meta), path(\"${prefix}/*.log\"), emit: log\n    tuple val(meta), path(\"${prefix}/*.txt\"), emit: txt\n    tuple val(meta), path(\"${prefix}/*.tsv\"), emit: tsv\n    path \"*.version.txt\", emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def proteins_opt = proteins ? \"--proteins ${proteins[0]}\" : \"\"\n    def prodigal_opt = prodigal_tf ? \"--prodigaltf ${prodigal_tf[0]}\" : \"\"\n    \"\"\"\n    prokka \\\\\n        $options.args \\\\\n        --cpus $task.cpus \\\\\n        --prefix $prefix \\\\\n        $proteins_opt \\\\\n        $prodigal_tf \\\\\n        $fasta\n\n    echo \\$(prokka --version 2>&1) | sed 's/^.*prokka //' > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 50,
        "string_script": "    def software = getSoftwareName(task.process)\n    prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def proteins_opt = proteins ? \"--proteins ${proteins[0]}\" : \"\"\n    def prodigal_opt = prodigal_tf ? \"--prodigaltf ${prodigal_tf[0]}\" : \"\"\n    \"\"\"\n    prokka \\\\\n        $options.args \\\\\n        --cpus $task.cpus \\\\\n        --prefix $prefix \\\\\n        $proteins_opt \\\\\n        $prodigal_tf \\\\\n        $fasta\n\n    echo \\$(prokka --version 2>&1) | sed 's/^.*prokka //' > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "Prokka"
        ],
        "tools_url": [
            "https://bio.tools/prokka"
        ],
        "tools_dico": [
            {
                "name": "Prokka",
                "uri": "https://bio.tools/prokka",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Model organisms"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0781",
                            "term": "Virology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Organisms"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "Coding region prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0362",
                                    "term": "Genome annotation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "ORF prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "ORF finding"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene finding"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene calling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Software tool to annotate bacterial, archaeal and viral genomes quickly and produce standards-compliant output files.",
                "homepage": "https://github.com/tseemann/prokka"
            }
        ],
        "inputs": [
            "meta",
            "fasta",
            "proteins",
            "prodigal_tf"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__bacass",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"bioconda::prokka=1.14.6\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/prokka:1.14.6--pl526_0\" } else { container \"quay.io/biocontainers/prokka:1.14.6--pl526_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "GET_SOFTWARE_VERSIONS": {
        "name_process": "GET_SOFTWARE_VERSIONS",
        "string_process": "\nprocess GET_SOFTWARE_VERSIONS {\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'pipeline_info', meta:[:], publish_by_meta:[]) }\n\n    conda (params.enable_conda ? \"conda-forge::python=3.8.3\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/python:3.8.3\"\n    } else {\n        container \"quay.io/biocontainers/python:3.8.3\"\n    }\n\n    cache false\n\n    input:\n    path versions\n\n    output:\n    path \"software_versions.tsv\"     , emit: tsv\n    path 'software_versions_mqc.yaml', emit: yaml\n\n    script:                                                                    \n    \"\"\"\n    echo $workflow.manifest.version > pipeline.version.txt\n    echo $workflow.nextflow.version > nextflow.version.txt\n    scrape_software_versions.py &> software_versions_mqc.yaml\n    \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "    \"\"\"\n    echo $workflow.manifest.version > pipeline.version.txt\n    echo $workflow.nextflow.version > nextflow.version.txt\n    scrape_software_versions.py &> software_versions_mqc.yaml\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "versions"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__bacass",
        "directive": [
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'pipeline_info', meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"conda-forge::python=3.8.3\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/python:3.8.3\" } else { container \"quay.io/biocontainers/python:3.8.3\" }",
            "cache false"
        ],
        "when": "",
        "stub": ""
    },
    "PORECHOP": {
        "name_process": "PORECHOP",
        "string_process": "\nprocess PORECHOP {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"porechop=0.2.4\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/porechop:0.2.4--py38hed8969a_1\"\n    } else {\n        container \"quay.io/biocontainers/porechop:0.2.4--py38hed8969a_1\"\n    }\n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path('trimmed.fastq.gz'), emit: reads\n    path \"*.version.txt\"                  , emit: version\n\n    script:\n    def software    = getSoftwareName(task.process)\n    \"\"\"\n    porechop $options.args -i \"${reads}\" -t \"${task.cpus}\" -o trimmed.fastq.gz\n    porechop --version > \"${software}.version.txt\"\n    \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "    def software    = getSoftwareName(task.process)\n    \"\"\"\n    porechop $options.args -i \"${reads}\" -t \"${task.cpus}\" -o trimmed.fastq.gz\n    porechop --version > \"${software}.version.txt\"\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__bacass",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"porechop=0.2.4\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/porechop:0.2.4--py38hed8969a_1\" } else { container \"quay.io/biocontainers/porechop:0.2.4--py38hed8969a_1\" }"
        ],
        "when": "",
        "stub": ""
    },
    "CANU": {
        "name_process": "CANU",
        "string_process": "\nprocess CANU {\n    tag \"$meta.id\"\n    label 'process_high'\n    label 'process_long'\n    label 'process_high_memory'\n    label 'error_retry'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? 'canu=2.1.1-2' : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/canu:2.1.1--h1b792b2_2\"\n    } else {\n        container \"quay.io/biocontainers/canu:2.1.1--h1b792b2_2\"\n    }\n\n    input:\n    tuple val(meta), val(reads), file(longreads)\n\n    output:\n    tuple val(meta), path('*_assembly.fasta') , emit: assembly\n    tuple val(meta), path('*_assembly.report'), emit: log\n    path  '*.version.txt'                     , emit: version\n\n    script:\n    def software    = getSoftwareName(task.process)\n    def prefix      = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def genomeSize  = meta.genome_size == 'NA' ? \"5m\" : \"${meta.genome_size}\"\n    \"\"\"\n    canu -p assembly -d canu_out \\\n        ${options.args} \\\n        genomeSize=\"${genomeSize}\" -nanopore \"${longreads}\" \\\n        maxThreads=\"${task.cpus}\" merylMemory=\"${task.memory.toGiga()}G\" \\\n        merylThreads=\"${task.cpus}\" hapThreads=\"${task.cpus}\" batMemory=\"${task.memory.toGiga()}G\" \\\n        redMemory=\"${task.memory.toGiga()}G\" redThreads=\"${task.cpus}\" \\\n        oeaMemory=\"${task.memory.toGiga()}G\" oeaThreads=\"${task.cpus}\" \\\n        corMemory=\"${task.memory.toGiga()}G\" corThreads=\"${task.cpus}\"\n    mv canu_out/assembly.contigs.fasta ${prefix}_assembly.fasta\n    mv canu_out/assembly.report ${prefix}_assembly.report\n\n    echo \\$(canu --version 2>&1) | sed -e 's/Canu //g' > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 43,
        "string_script": "    def software    = getSoftwareName(task.process)\n    def prefix      = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def genomeSize  = meta.genome_size == 'NA' ? \"5m\" : \"${meta.genome_size}\"\n    \"\"\"\n    canu -p assembly -d canu_out \\\n        ${options.args} \\\n        genomeSize=\"${genomeSize}\" -nanopore \"${longreads}\" \\\n        maxThreads=\"${task.cpus}\" merylMemory=\"${task.memory.toGiga()}G\" \\\n        merylThreads=\"${task.cpus}\" hapThreads=\"${task.cpus}\" batMemory=\"${task.memory.toGiga()}G\" \\\n        redMemory=\"${task.memory.toGiga()}G\" redThreads=\"${task.cpus}\" \\\n        oeaMemory=\"${task.memory.toGiga()}G\" oeaThreads=\"${task.cpus}\" \\\n        corMemory=\"${task.memory.toGiga()}G\" corThreads=\"${task.cpus}\"\n    mv canu_out/assembly.contigs.fasta ${prefix}_assembly.fasta\n    mv canu_out/assembly.report ${prefix}_assembly.report\n\n    echo \\$(canu --version 2>&1) | sed -e 's/Canu //g' > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [
            "CANU"
        ],
        "tools_url": [
            "https://bio.tools/canu"
        ],
        "tools_dico": [
            {
                "name": "CANU",
                "uri": "https://bio.tools/canu",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De-novo assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De Bruijn graph"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "Sequence assembly (de-novo assembly)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "De-novo assembly tool for long read chemistry like Nanopore data and PacBio data.",
                "homepage": "https://github.com/marbl/canu"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "longreads"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__bacass",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "label 'process_long'",
            "label 'process_high_memory'",
            "label 'error_retry'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? 'canu=2.1.1-2' : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/canu:2.1.1--h1b792b2_2\" } else { container \"quay.io/biocontainers/canu:2.1.1--h1b792b2_2\" }"
        ],
        "when": "",
        "stub": ""
    },
    "KRAKEN2_DB_PREPARATION": {
        "name_process": "KRAKEN2_DB_PREPARATION",
        "string_process": "\nprocess KRAKEN2_DB_PREPARATION {\n    tag \"${db.simpleName}\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img\"\n    } else {\n        container \"biocontainers/biocontainers:v1.2.0_cv1\"\n    }\n\n    input:\n    path db\n\n    output:\n    tuple val(\"${db.simpleName}\"), path(\"database\"), emit: db\n\n    script:\n    \"\"\"\n    mkdir db_tmp\n    tar -xf \"${db}\" -C db_tmp\n    mkdir database\n    mv `find db_tmp/ -name \"*.k2d\"` database/\n    \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "    \"\"\"\n    mkdir db_tmp\n    tar -xf \"${db}\" -C db_tmp\n    mkdir database\n    mv `find db_tmp/ -name \"*.k2d\"` database/\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "db"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__bacass",
        "directive": [
            "tag \"${db.simpleName}\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img\" } else { container \"biocontainers/biocontainers:v1.2.0_cv1\" }"
        ],
        "when": "",
        "stub": ""
    },
    "PYCOQC": {
        "name_process": "PYCOQC",
        "string_process": "\nprocess PYCOQC {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"bioconda::pycoqc=2.5.2\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/pycoqc:2.5.2--py_0\"\n    } else {\n        container \"quay.io/biocontainers/pycoqc:2.5.2--py_0\"\n    }\n\n    input:\n    tuple val(meta), path(fast5)\n\n    output:\n    tuple val(meta), path('sequencing_summary.txt'), emit: summary\n    path \"*.html\"        , emit: html\n    path \"*.json\"        , emit: json\n    path  \"*.version.txt\", emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n                                                            \n    if(file(\"${fast5}/sequencing_summary.txt\").exists()){\n        run_summary = \"cp ${fast5}/sequencing_summary.txt ./sequencing_summary.txt\"\n    } else {\n        run_summary =  \"Fast5_to_seq_summary -f $fast5 -t ${task.cpus} -s './sequencing_summary.txt' --verbose_level 2\"\n    }\n                         \n    barcode_me = file(\"${fast5}/barcoding_sequencing.txt\").exists() ? \"-b ${fast5}/barcoding_sequencing.txt\" : ''\n    \"\"\"\n    $run_summary\n\n    pycoQC \\\\\n        $options.args \\\\\n        -f \"sequencing_summary.txt\" \\\\\n        $barcode_me \\\\\n        -o ${meta.id}_pycoqc.html \\\\\n        -j ${meta.id}_pycoqc.json\n\n    echo \\$(pycoQC --version 2>&1) | sed 's/^.*pycoQC v//; s/ .*\\$//' > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 45,
        "string_script": "    def software = getSoftwareName(task.process)\n                                                            \n    if(file(\"${fast5}/sequencing_summary.txt\").exists()){\n        run_summary = \"cp ${fast5}/sequencing_summary.txt ./sequencing_summary.txt\"\n    } else {\n        run_summary =  \"Fast5_to_seq_summary -f $fast5 -t ${task.cpus} -s './sequencing_summary.txt' --verbose_level 2\"\n    }\n                         \n    barcode_me = file(\"${fast5}/barcoding_sequencing.txt\").exists() ? \"-b ${fast5}/barcoding_sequencing.txt\" : ''\n    \"\"\"\n    $run_summary\n\n    pycoQC \\\\\n        $options.args \\\\\n        -f \"sequencing_summary.txt\" \\\\\n        $barcode_me \\\\\n        -o ${meta.id}_pycoqc.html \\\\\n        -j ${meta.id}_pycoqc.json\n\n    echo \\$(pycoQC --version 2>&1) | sed 's/^.*pycoQC v//; s/ .*\\$//' > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 20,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "fast5"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__bacass",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"bioconda::pycoqc=2.5.2\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/pycoqc:2.5.2--py_0\" } else { container \"quay.io/biocontainers/pycoqc:2.5.2--py_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "NANOPOLISH": {
        "name_process": "NANOPOLISH",
        "string_process": "\nprocess NANOPOLISH {\n    tag \"$meta.id\"\n    label 'process_high'\n    label 'process_long'\n    label 'process_high_memory'\n    label 'error_retry'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? 'nanopolish=0.13.2-5' : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/nanopolish:0.13.2--h8cec615_5\"\n    } else {\n        container \"quay.io/biocontainers/nanopolish:0.13.2--h8cec615_5\"\n    }\n\n    input:\n    tuple val(meta), val(reads), file(longreads), file(assembly), file(bam), file(bai), file(fast5)\n\n    output:\n    tuple val(meta), file('polished_genome.fa'), emit: assembly\n    path \"*.version.txt\", emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    nanopolish index -d \"${fast5}\" \"${longreads}\"\n\n    nanopolish variants \\\n        --consensus \\\n        -o polished.vcf \\\n        -r \"${longreads}\" \\\n        -b \"${bam}\" \\\n        -g \"${assembly}\" \\\n        -t \"${task.cpus}\" \\\n        --min-candidate-frequency 0.1\n\n    nanopolish vcf2fasta -g \"${assembly}\" polished.vcf > polished_genome.fa\n\n    nanopolish --version | sed -e \"s/nanopolish version //g\" | head -n 1 > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 43,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    nanopolish index -d \"${fast5}\" \"${longreads}\"\n\n    nanopolish variants \\\n        --consensus \\\n        -o polished.vcf \\\n        -r \"${longreads}\" \\\n        -b \"${bam}\" \\\n        -g \"${assembly}\" \\\n        -t \"${task.cpus}\" \\\n        --min-candidate-frequency 0.1\n\n    nanopolish vcf2fasta -g \"${assembly}\" polished.vcf > polished_genome.fa\n\n    nanopolish --version | sed -e \"s/nanopolish version //g\" | head -n 1 > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 17,
        "language_script": "bash",
        "tools": [
            "nanopolish"
        ],
        "tools_url": [
            "https://bio.tools/nanopolish"
        ],
        "tools_dico": [
            {
                "name": "nanopolish",
                "uri": "https://bio.tools/nanopolish",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2269",
                            "term": "Statistics and probability"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3204",
                                    "term": "Methylation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0310",
                                    "term": "Sequence assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Sequence variation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Variant analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation annotation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3204",
                                    "term": "Methylation profile analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2093",
                                "term": "Data reference"
                            },
                            {
                                "uri": "http://edamontology.org/data_0849",
                                "term": "Sequence record"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0867",
                                "term": "Sequence alignment report"
                            }
                        ]
                    }
                ],
                "description": "A package for detecting cytosine methylations and genetic variations from nanopore MinION sequencing data.",
                "homepage": "https://github.com/jts/nanopolish"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "longreads",
            "assembly",
            "bam",
            "bai",
            "fast5"
        ],
        "nb_inputs": 7,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__bacass",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "label 'process_long'",
            "label 'process_high_memory'",
            "label 'error_retry'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? 'nanopolish=0.13.2-5' : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/nanopolish:0.13.2--h8cec615_5\" } else { container \"quay.io/biocontainers/nanopolish:0.13.2--h8cec615_5\" }"
        ],
        "when": "",
        "stub": ""
    },
    "UNICYCLER": {
        "name_process": "UNICYCLER",
        "string_process": "\nprocess UNICYCLER {\n    tag \"$meta.id\"\n    label 'process_high'\n    label 'process_long'\n    label 'process_high_memory'\n    label 'error_retry'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? 'bioconda::unicycler=0.4.8' : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/unicycler:0.4.8--py38h8162308_3\"\n    } else {\n        container \"quay.io/biocontainers/unicycler:0.4.8--py38h8162308_3\"\n    }\n\n    input:\n    tuple val(meta), file(reads), file(longreads)\n\n    output:\n    tuple val(meta), path('*.scaffolds.fa'), emit: scaffolds\n    tuple val(meta), path('*.assembly.gfa'), emit: gfa\n    tuple val(meta), path('*.log')         , emit: log\n    path  '*.version.txt'                  , emit: version\n\n    script:\n    def software    = getSoftwareName(task.process)\n    def prefix      = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    if(params.assembly_type == 'long'){\n        input_reads = \"-l $longreads\"\n    } else if (params.assembly_type == 'short'){\n        input_reads = \"-1 ${reads[0]} -2 ${reads[1]}\"\n    } else if (params.assembly_type == 'hybrid'){\n        input_reads = \"-1 ${reads[0]} -2 ${reads[1]} -l $longreads\"\n    }\n    \"\"\"\n    unicycler \\\\\n        --threads $task.cpus \\\\\n        $options.args \\\\\n        $input_reads \\\\\n        --out ./\n\n    mv assembly.fasta ${prefix}.scaffolds.fa\n    mv assembly.gfa ${prefix}.assembly.gfa\n    mv unicycler.log ${prefix}.unicycler.log\n\n    echo \\$(unicycler --version 2>&1) | sed 's/^.*Unicycler v//; s/ .*\\$//' > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 49,
        "string_script": "    def software    = getSoftwareName(task.process)\n    def prefix      = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    if(params.assembly_type == 'long'){\n        input_reads = \"-l $longreads\"\n    } else if (params.assembly_type == 'short'){\n        input_reads = \"-1 ${reads[0]} -2 ${reads[1]}\"\n    } else if (params.assembly_type == 'hybrid'){\n        input_reads = \"-1 ${reads[0]} -2 ${reads[1]} -l $longreads\"\n    }\n    \"\"\"\n    unicycler \\\\\n        --threads $task.cpus \\\\\n        $options.args \\\\\n        $input_reads \\\\\n        --out ./\n\n    mv assembly.fasta ${prefix}.scaffolds.fa\n    mv assembly.gfa ${prefix}.assembly.gfa\n    mv unicycler.log ${prefix}.unicycler.log\n\n    echo \\$(unicycler --version 2>&1) | sed 's/^.*Unicycler v//; s/ .*\\$//' > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 21,
        "language_script": "bash",
        "tools": [
            "Unicycler"
        ],
        "tools_url": [
            "https://bio.tools/unicycler"
        ],
        "tools_dico": [
            {
                "name": "Unicycler",
                "uri": "https://bio.tools/unicycler",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3301",
                            "term": "Microbiology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3436",
                                    "term": "Aggregation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0925",
                                "term": "Sequence assembly"
                            }
                        ]
                    }
                ],
                "description": "A tool for assembling bacterial genomes from a combination of short (2nd generation) and long (3rd generation) sequencing reads.",
                "homepage": "https://github.com/rrwick/Unicycler"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "longreads"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__bacass",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "label 'process_long'",
            "label 'process_high_memory'",
            "label 'error_retry'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? 'bioconda::unicycler=0.4.8' : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/unicycler:0.4.8--py38h8162308_3\" } else { container \"quay.io/biocontainers/unicycler:0.4.8--py38h8162308_3\" }"
        ],
        "when": "",
        "stub": ""
    },
    "MINIMAP2_ALIGN": {
        "name_process": "MINIMAP2_ALIGN",
        "string_process": "\nprocess MINIMAP2_ALIGN {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? 'bioconda::minimap2=2.21' : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/minimap2:2.21--h5bf99c6_0\"\n    } else {\n        container \"quay.io/biocontainers/minimap2:2.21--h5bf99c6_0\"\n    }\n\n    input:\n    tuple val(meta), val(reads), file(longreads), file('reference')\n\n    output:\n    tuple val(meta), val(reads), file(longreads), file('reference'), path(\"*.paf\"), emit: paf\n    path \"*.version.txt\", emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    minimap2 \\\\\n        $options.args \\\\\n        -t $task.cpus \\\\\n        reference \\\\\n        $longreads \\\\\n        > ${prefix}.paf\n\n    echo \\$(minimap2 --version 2>&1) > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    minimap2 \\\\\n        $options.args \\\\\n        -t $task.cpus \\\\\n        reference \\\\\n        $longreads \\\\\n        > ${prefix}.paf\n\n    echo \\$(minimap2 --version 2>&1) > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "Minimap2"
        ],
        "tools_url": [
            "https://bio.tools/minimap2"
        ],
        "tools_dico": [
            {
                "name": "Minimap2",
                "uri": "https://bio.tools/minimap2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise alignment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Pairwise aligner for genomic and spliced nucleotide sequences",
                "homepage": "https://github.com/lh3/minimap2"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "longreads"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__bacass",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? 'bioconda::minimap2=2.21' : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/minimap2:2.21--h5bf99c6_0\" } else { container \"quay.io/biocontainers/minimap2:2.21--h5bf99c6_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "SAMTOOLS_SORT": {
        "name_process": "SAMTOOLS_SORT",
        "string_process": "\nprocess SAMTOOLS_SORT {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? 'bioconda::samtools=1.13' : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/samtools:1.13--h8c37831_0\"\n    } else {\n        container \"quay.io/biocontainers/samtools:1.13--h8c37831_0\"\n    }\n\n    input:\n    tuple val(meta), path(bam)\n\n    output:\n    tuple val(meta), path(\"*.bam\"), emit: bam\n    path  \"*.version.txt\"         , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    samtools sort $options.args -@ $task.cpus -o ${prefix}.bam -T $prefix $bam\n    echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//' > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    samtools sort $options.args -@ $task.cpus -o ${prefix}.bam -T $prefix $bam\n    echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//' > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "bam"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__bacass",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? 'bioconda::samtools=1.13' : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/samtools:1.13--h8c37831_0\" } else { container \"quay.io/biocontainers/samtools:1.13--h8c37831_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "KRAKEN2_KRAKEN2": {
        "name_process": "KRAKEN2_KRAKEN2",
        "string_process": "\nprocess KRAKEN2_KRAKEN2 {\n    tag \"$meta.id\"\n    label 'process_high'\n    label 'process_long'\n    label 'process_high_memory'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? 'bioconda::kraken2=2.1.1 conda-forge::pigz=2.6' : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container 'https://depot.galaxyproject.org/singularity/mulled-v2-5799ab18b5fc681e75923b2450abaa969907ec98:941789bd7fe00db16531c26de8bf3c5c985242a5-0'\n    } else {\n        container 'quay.io/biocontainers/mulled-v2-5799ab18b5fc681e75923b2450abaa969907ec98:941789bd7fe00db16531c26de8bf3c5c985242a5-0'\n    }\n\n    input:\n    tuple val(meta), path(reads)\n    path  db\n\n    output:\n    tuple val(meta), path('*classified*')  , emit: classified\n    tuple val(meta), path('*unclassified*'), emit: unclassified\n    tuple val(meta), path('*report.txt')   , emit: txt\n    path '*.version.txt'                   , emit: version\n\n    script:\n    def software     = getSoftwareName(task.process)\n    def prefix       = options.suffix  ? \"${meta.id}${options.suffix}\"  : \"${meta.id}\"\n    def paired       = meta.single_end ? \"\" : \"--paired\"\n    def classified   = meta.single_end ? \"${prefix}.classified.fastq\"   : \"${prefix}.classified#.fastq\"\n    def unclassified = meta.single_end ? \"${prefix}.unclassified.fastq\" : \"${prefix}.unclassified#.fastq\"\n    \"\"\"\n    kraken2 \\\\\n        --db $db \\\\\n        --threads $task.cpus \\\\\n        --unclassified-out $unclassified \\\\\n        --classified-out $classified \\\\\n        --report ${prefix}.kraken2.report.txt \\\\\n        --gzip-compressed \\\\\n        $paired \\\\\n        $options.args \\\\\n        $reads\n\n    pigz -p $task.cpus *.fastq\n\n    echo \\$(kraken2 --version 2>&1) | sed 's/^.*Kraken version //; s/ .*\\$//' > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 48,
        "string_script": "    def software     = getSoftwareName(task.process)\n    def prefix       = options.suffix  ? \"${meta.id}${options.suffix}\"  : \"${meta.id}\"\n    def paired       = meta.single_end ? \"\" : \"--paired\"\n    def classified   = meta.single_end ? \"${prefix}.classified.fastq\"   : \"${prefix}.classified#.fastq\"\n    def unclassified = meta.single_end ? \"${prefix}.unclassified.fastq\" : \"${prefix}.unclassified#.fastq\"\n    \"\"\"\n    kraken2 \\\\\n        --db $db \\\\\n        --threads $task.cpus \\\\\n        --unclassified-out $unclassified \\\\\n        --classified-out $classified \\\\\n        --report ${prefix}.kraken2.report.txt \\\\\n        --gzip-compressed \\\\\n        $paired \\\\\n        $options.args \\\\\n        $reads\n\n    pigz -p $task.cpus *.fastq\n\n    echo \\$(kraken2 --version 2>&1) | sed 's/^.*Kraken version //; s/ .*\\$//' > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 20,
        "language_script": "bash",
        "tools": [
            "kraken2"
        ],
        "tools_url": [
            "https://bio.tools/kraken2"
        ],
        "tools_dico": [
            {
                "name": "kraken2",
                "uri": "https://bio.tools/kraken2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0637",
                            "term": "Taxonomy"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomic classification"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomy assignment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3494",
                                "term": "DNA sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3028",
                                "term": "Taxonomy"
                            }
                        ]
                    }
                ],
                "description": "Kraken 2 is the newest version of Kraken, a taxonomic classification system using exact k-mer matches to achieve high accuracy and fast classification speeds. This classifier matches each k-mer within a query sequence to the lowest common ancestor (LCA) of all genomes containing the given k-mer. The k-mer assignments inform the classification algorithm.",
                "homepage": "https://ccb.jhu.edu/software/kraken2/"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "db"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__bacass",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "label 'process_long'",
            "label 'process_high_memory'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? 'bioconda::kraken2=2.1.1 conda-forge::pigz=2.6' : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container 'https://depot.galaxyproject.org/singularity/mulled-v2-5799ab18b5fc681e75923b2450abaa969907ec98:941789bd7fe00db16531c26de8bf3c5c985242a5-0' } else { container 'quay.io/biocontainers/mulled-v2-5799ab18b5fc681e75923b2450abaa969907ec98:941789bd7fe00db16531c26de8bf3c5c985242a5-0' }"
        ],
        "when": "",
        "stub": ""
    },
    "QUAST": {
        "name_process": "QUAST",
        "string_process": "\nprocess QUAST {\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }\n\n    conda (params.enable_conda ? 'bioconda::quast=5.0.2' : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container 'https://depot.galaxyproject.org/singularity/quast:5.0.2--py37pl526hb5aa323_2'\n    } else {\n        container 'quay.io/biocontainers/quast:5.0.2--py37pl526hb5aa323_2'\n    }\n\n    input:\n    path consensus\n    path fasta\n    path gff\n    val use_fasta\n    val use_gff\n\n    output:\n    path \"${prefix}\"    , emit: results\n    path '*.tsv'        , emit: tsv\n    path '*.version.txt', emit: version\n\n    script:\n    def software  = getSoftwareName(task.process)\n    prefix        = options.suffix ?: software\n    def features  = use_gff ? \"--features $gff\" : ''\n    def reference = use_fasta ? \"-r $fasta\" : ''\n    \"\"\"\n    quast.py \\\\\n        --output-dir $prefix \\\\\n        $reference \\\\\n        $features \\\\\n        --threads $task.cpus \\\\\n        $options.args \\\\\n        ${consensus.join(' ')}\n    ln -s ${prefix}/report.tsv\n    echo \\$(quast.py --version 2>&1) | sed 's/^.*QUAST v//; s/ .*\\$//' > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 41,
        "string_script": "    def software  = getSoftwareName(task.process)\n    prefix        = options.suffix ?: software\n    def features  = use_gff ? \"--features $gff\" : ''\n    def reference = use_fasta ? \"-r $fasta\" : ''\n    \"\"\"\n    quast.py \\\\\n        --output-dir $prefix \\\\\n        $reference \\\\\n        $features \\\\\n        --threads $task.cpus \\\\\n        $options.args \\\\\n        ${consensus.join(' ')}\n    ln -s ${prefix}/report.tsv\n    echo \\$(quast.py --version 2>&1) | sed 's/^.*QUAST v//; s/ .*\\$//' > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "consensus",
            "fasta",
            "gff",
            "use_fasta",
            "use_gff"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__bacass",
        "directive": [
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? 'bioconda::quast=5.0.2' : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container 'https://depot.galaxyproject.org/singularity/quast:5.0.2--py37pl526hb5aa323_2' } else { container 'quay.io/biocontainers/quast:5.0.2--py37pl526hb5aa323_2' }"
        ],
        "when": "",
        "stub": ""
    },
    "MULTIQC": {
        "name_process": "MULTIQC",
        "string_process": "\nprocess MULTIQC {\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }\n\n    conda (params.enable_conda ? \"bioconda::multiqc=1.10.1\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/multiqc:1.10.1--py_0\"\n    } else {\n        container \"quay.io/biocontainers/multiqc:1.10.1--py_0\"\n    }\n\n    input:\n    path multiqc_files\n\n    output:\n    path \"*multiqc_report.html\", emit: report\n    path \"*_data\"              , emit: data\n    path \"*_plots\"             , optional:true, emit: plots\n    path \"*.version.txt\"       , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    \"\"\"\n    multiqc -f $options.args .\n    multiqc --version | sed -e \"s/multiqc, version //g\" > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "    def software = getSoftwareName(task.process)\n    \"\"\"\n    multiqc -f $options.args .\n    multiqc --version | sed -e \"s/multiqc, version //g\" > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "MultiQC"
        ],
        "tools_url": [
            "https://bio.tools/multiqc"
        ],
        "tools_dico": [
            {
                "name": "MultiQC",
                "uri": "https://bio.tools/multiqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "MultiQC aggregates results from multiple bioinformatics analyses across many samples into a single report. It searches a given directory for analysis logs and compiles a HTML report. It's a general use tool, perfect for summarising the output from numerous bioinformatics tools.",
                "homepage": "http://multiqc.info/"
            }
        ],
        "inputs": [
            "multiqc_files"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__bacass",
        "directive": [
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"bioconda::multiqc=1.10.1\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/multiqc:1.10.1--py_0\" } else { container \"quay.io/biocontainers/multiqc:1.10.1--py_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "MEDAKA": {
        "name_process": "MEDAKA",
        "string_process": "\nprocess MEDAKA {\n    tag \"$meta.id\"\n    label 'process_high'\n    label 'process_long'\n    label 'process_high_memory'\n    label 'error_retry'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? 'medaka=1.4.3-0' : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/medaka:1.4.3--py38h130def0_0\"\n    } else {\n        container \"quay.io/biocontainers/medaka:1.4.3--py38h130def0_0\"\n    }\n\n    input:\n    tuple val(meta), file(assembly), val(reads), file(longreads)\n\n    output:\n    tuple val(meta), path('*_polished_genome.fa'), emit: assembly\n    path  '*.version.txt'                        , emit: version\n\n    script:\n    def software    = getSoftwareName(task.process)\n    def prefix      = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    medaka_consensus ${options.args} \\\n        -i ${longreads} \\\n        -d ${assembly} \\\n        -o \"${prefix}_polished_genome.fa\" \\\n        -t ${task.cpus}\n\n    echo \\$(medaka --version 2>&1) | sed -e 's/medaka //g' > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 36,
        "string_script": "    def software    = getSoftwareName(task.process)\n    def prefix      = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    medaka_consensus ${options.args} \\\n        -i ${longreads} \\\n        -d ${assembly} \\\n        -o \"${prefix}_polished_genome.fa\" \\\n        -t ${task.cpus}\n\n    echo \\$(medaka --version 2>&1) | sed -e 's/medaka //g' > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "reads",
            "assembly",
            "longreads"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__bacass",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "label 'process_long'",
            "label 'process_high_memory'",
            "label 'error_retry'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? 'medaka=1.4.3-0' : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/medaka:1.4.3--py38h130def0_0\" } else { container \"quay.io/biocontainers/medaka:1.4.3--py38h130def0_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "SKEWER": {
        "name_process": "SKEWER",
        "string_process": "\nprocess SKEWER {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"skewer=0.2.2-3\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/skewer:0.2.2--hc9558a2_3\"\n    } else {\n        container \"quay.io/biocontainers/skewer:0.2.2--hc9558a2_3\"\n    }\n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path(\"*_trm-cmb.R{1,2}.fastq.gz\"), emit: reads\n    path(\"*.log\")                                     , emit: log\n    path \"*.version.txt\"                              , emit: version\n\n    script:\n    def software    = getSoftwareName(task.process)\n    \"\"\"\n    # loop over readunits in pairs per sample\n    pairno=0\n    echo \"${reads[0]} ${reads[1]}\" | xargs -n2 | while read fq1 fq2; do\n        skewer $options.args -t ${task.cpus} \\$fq1 \\$fq2;\n    done\n\n    # gzip, because skewer's -z returns an error\n    gzip *.fastq\n\n    cat \\$(ls *trimmed-pair1.fastq.gz | sort) >> ${meta.id}_trm-cmb.R1.fastq.gz\n    cat \\$(ls *trimmed-pair2.fastq.gz | sort) >> ${meta.id}_trm-cmb.R2.fastq.gz\n\n    echo \\$(skewer --version 2>&1) | sed 's/^.*skewer version: //; s/ .*//' > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 39,
        "string_script": "    def software    = getSoftwareName(task.process)\n    \"\"\"\n    # loop over readunits in pairs per sample\n    pairno=0\n    echo \"${reads[0]} ${reads[1]}\" | xargs -n2 | while read fq1 fq2; do\n        skewer $options.args -t ${task.cpus} \\$fq1 \\$fq2;\n    done\n\n    # gzip, because skewer's -z returns an error\n    gzip *.fastq\n\n    cat \\$(ls *trimmed-pair1.fastq.gz | sort) >> ${meta.id}_trm-cmb.R1.fastq.gz\n    cat \\$(ls *trimmed-pair2.fastq.gz | sort) >> ${meta.id}_trm-cmb.R2.fastq.gz\n\n    echo \\$(skewer --version 2>&1) | sed 's/^.*skewer version: //; s/ .*//' > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [
            "Skewer"
        ],
        "tools_url": [
            "https://bio.tools/skewer"
        ],
        "tools_dico": [
            {
                "name": "Skewer",
                "uri": "https://bio.tools/skewer",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3219",
                                    "term": "Read pre-processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Sequence trimming"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3237",
                                    "term": "Primer removal"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3219",
                                    "term": "Sequence read pre-processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Trimming"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Skewer implements a novel dynamic programming algorithm dedicated to the task of adapter trimming and it is specially designed for processing illumina paired-end sequences.",
                "homepage": "https://sourceforge.net/projects/skewer/"
            }
        ],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__bacass",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"skewer=0.2.2-3\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/skewer:0.2.2--hc9558a2_3\" } else { container \"quay.io/biocontainers/skewer:0.2.2--hc9558a2_3\" }"
        ],
        "when": "",
        "stub": ""
    }
}
{
    "SYNAPSE_MERGE_SAMPLESHEET": {
        "name_process": "SYNAPSE_MERGE_SAMPLESHEET",
        "string_process": "\nprocess SYNAPSE_MERGE_SAMPLESHEET {\n\n    conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/ubuntu:20.04' :\n        'ubuntu:20.04' }\"\n\n    input:\n    path ('samplesheets/*')\n\n    output:\n    path \"samplesheet.csv\", emit: samplesheet\n    path \"versions.yml\"   , emit: versions\n\n    script:\n    \"\"\"\n    head -n 1 `ls ./samplesheets/* | head -n 1` > samplesheet.csv\n    for fileid in `ls ./samplesheets/*`; do\n        awk 'NR>1' \\$fileid >> samplesheet.csv\n    done\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        sed: \\$(echo \\$(sed --version 2>&1) | sed 's/^.*GNU sed) //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "    \"\"\"\n    head -n 1 `ls ./samplesheets/* | head -n 1` > samplesheet.csv\n    for fileid in `ls ./samplesheets/*`; do\n        awk 'NR>1' \\$fileid >> samplesheet.csv\n    done\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        sed: \\$(echo \\$(sed --version 2>&1) | sed 's/^.*GNU sed) //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__fetchngs",
        "directive": [
            "conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/ubuntu:20.04' : 'ubuntu:20.04' }\""
        ],
        "when": "",
        "stub": ""
    },
    "MULTIQC_MAPPINGS_CONFIG": {
        "name_process": "MULTIQC_MAPPINGS_CONFIG",
        "string_process": "\nprocess MULTIQC_MAPPINGS_CONFIG {\n\n    conda (params.enable_conda ? \"conda-forge::python=3.9.5\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/python:3.9--1' :\n        'quay.io/biocontainers/python:3.9--1' }\"\n\n    input:\n    path csv\n\n    output:\n    path \"*yml\"        , emit: yml\n    path \"versions.yml\", emit: versions\n\n    script:\n    \"\"\"\n    multiqc_mappings_config.py \\\\\n        $csv \\\\\n        multiqc_config.yml\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        python: \\$(python --version | sed 's/Python //g')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "    \"\"\"\n    multiqc_mappings_config.py \\\\\n        $csv \\\\\n        multiqc_config.yml\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        python: \\$(python --version | sed 's/Python //g')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "csv"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__fetchngs",
        "directive": [
            "conda (params.enable_conda ? \"conda-forge::python=3.9.5\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/python:3.9--1' : 'quay.io/biocontainers/python:3.9--1' }\""
        ],
        "when": "",
        "stub": ""
    },
    "CUSTOM_DUMPSOFTWAREVERSIONS": {
        "name_process": "CUSTOM_DUMPSOFTWAREVERSIONS",
        "string_process": "process CUSTOM_DUMPSOFTWAREVERSIONS {\n    label 'process_low'\n\n                                                                                                  \n    conda (params.enable_conda ? \"bioconda::multiqc=1.11\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/multiqc:1.11--pyhdfd78af_0' :\n        'quay.io/biocontainers/multiqc:1.11--pyhdfd78af_0' }\"\n\n    input:\n    path versions\n\n    output:\n    path \"software_versions.yml\"    , emit: yml\n    path \"software_versions_mqc.yml\", emit: mqc_yml\n    path \"versions.yml\"             , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    template 'dumpsoftwareversions.py'\n}",
        "nb_lignes_process": 22,
        "string_script": "    def args = task.ext.args ?: ''\n    template 'dumpsoftwareversions.py'",
        "nb_lignes_script": 1,
        "language_script": "bash",
        "tools": [
            "docxtemplate"
        ],
        "tools_url": [
            "https://bio.tools/docxtemplate"
        ],
        "tools_dico": [
            {
                "name": "docxtemplate",
                "uri": "https://bio.tools/docxtemplate",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3314",
                            "term": "Chemistry"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0176",
                            "term": "Molecular dynamics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3489",
                            "term": "Database management"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3489",
                            "term": "Database administration"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0249",
                                    "term": "Protein geometry calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0322",
                                    "term": "Molecular model refinement"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Deposition"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Data submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Database deposition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Database submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Data deposition"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "> VERY_LOW CONFIDENCE! | > CORRECT NAME OF TOOL COULD ALSO BE 'Phenix', 'restraints', 'Amber', 'refinement' | Improved chemistry restraints for crystallographic refinement by integrating the Amber force field into Phenix | Word templates and tools for Windows | The IUCr Word templates utilize the content management features and document styles of Word to format your manuscript and to store essential details for submission of your manuscript",
                "homepage": "http://journals.iucr.org/services/docxtemplate/"
            }
        ],
        "inputs": [
            "versions"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__fetchngs",
        "directive": [
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::multiqc=1.11\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/multiqc:1.11--pyhdfd78af_0' : 'quay.io/biocontainers/multiqc:1.11--pyhdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "SRA_RUNINFO_TO_FTP": {
        "name_process": "SRA_RUNINFO_TO_FTP",
        "string_process": "\nprocess SRA_RUNINFO_TO_FTP {\n\n    conda (params.enable_conda ? \"conda-forge::python=3.9.5\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/python:3.9--1' :\n        'quay.io/biocontainers/python:3.9--1' }\"\n\n    input:\n    path runinfo\n\n    output:\n    path \"*.tsv\"       , emit: tsv\n    path \"versions.yml\", emit: versions\n\n    script:\n    \"\"\"\n    sra_runinfo_to_ftp.py \\\\\n        ${runinfo.join(',')} \\\\\n        ${runinfo.toString().tokenize(\".\")[0]}.runinfo_ftp.tsv\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        python: \\$(python --version | sed 's/Python //g')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "    \"\"\"\n    sra_runinfo_to_ftp.py \\\\\n        ${runinfo.join(',')} \\\\\n        ${runinfo.toString().tokenize(\".\")[0]}.runinfo_ftp.tsv\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        python: \\$(python --version | sed 's/Python //g')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "runinfo"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__fetchngs",
        "directive": [
            "conda (params.enable_conda ? \"conda-forge::python=3.9.5\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/python:3.9--1' : 'quay.io/biocontainers/python:3.9--1' }\""
        ],
        "when": "",
        "stub": ""
    },
    "SRA_FASTQ_FTP": {
        "name_process": "SRA_FASTQ_FTP",
        "string_process": "\nprocess SRA_FASTQ_FTP {\n    tag \"$meta.id\"\n    label 'process_low'\n    label 'error_retry'\n\n    conda (params.enable_conda ? 'bioconda::sra-tools=2.11.0' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/sra-tools:2.11.0--pl5321ha49a11a_3' :\n        'quay.io/biocontainers/sra-tools:2.11.0--pl5321ha49a11a_3' }\"\n\n    input:\n    tuple val(meta), val(fastq)\n\n    output:\n    tuple val(meta), path(\"*fastq.gz\"), emit: fastq\n    tuple val(meta), path(\"*md5\")     , emit: md5\n    path \"versions.yml\"               , emit: versions\n\n    script:\n    def args = task.ext.args ?: ''\n    if (meta.single_end) {\n        \"\"\"\n        curl \\\\\n            $args \\\\\n            -L ${fastq[0]} \\\\\n            -o ${meta.id}.fastq.gz\n\n        echo \"${meta.md5_1}  ${meta.id}.fastq.gz\" > ${meta.id}.fastq.gz.md5\n        md5sum -c ${meta.id}.fastq.gz.md5\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            curl: \\$(echo \\$(curl --version | head -n 1 | sed 's/^curl //; s/ .*\\$//'))\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        curl \\\\\n            $args \\\\\n            -L ${fastq[0]} \\\\\n            -o ${meta.id}_1.fastq.gz\n\n        echo \"${meta.md5_1}  ${meta.id}_1.fastq.gz\" > ${meta.id}_1.fastq.gz.md5\n        md5sum -c ${meta.id}_1.fastq.gz.md5\n\n        curl \\\\\n            $args \\\\\n            -L ${fastq[1]} \\\\\n            -o ${meta.id}_2.fastq.gz\n\n        echo \"${meta.md5_2}  ${meta.id}_2.fastq.gz\" > ${meta.id}_2.fastq.gz.md5\n        md5sum -c ${meta.id}_2.fastq.gz.md5\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            curl: \\$(echo \\$(curl --version | head -n 1 | sed 's/^curl //; s/ .*\\$//'))\n        END_VERSIONS\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 59,
        "string_script": "    def args = task.ext.args ?: ''\n    if (meta.single_end) {\n        \"\"\"\n        curl \\\\\n            $args \\\\\n            -L ${fastq[0]} \\\\\n            -o ${meta.id}.fastq.gz\n\n        echo \"${meta.md5_1}  ${meta.id}.fastq.gz\" > ${meta.id}.fastq.gz.md5\n        md5sum -c ${meta.id}.fastq.gz.md5\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            curl: \\$(echo \\$(curl --version | head -n 1 | sed 's/^curl //; s/ .*\\$//'))\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        curl \\\\\n            $args \\\\\n            -L ${fastq[0]} \\\\\n            -o ${meta.id}_1.fastq.gz\n\n        echo \"${meta.md5_1}  ${meta.id}_1.fastq.gz\" > ${meta.id}_1.fastq.gz.md5\n        md5sum -c ${meta.id}_1.fastq.gz.md5\n\n        curl \\\\\n            $args \\\\\n            -L ${fastq[1]} \\\\\n            -o ${meta.id}_2.fastq.gz\n\n        echo \"${meta.md5_2}  ${meta.id}_2.fastq.gz\" > ${meta.id}_2.fastq.gz.md5\n        md5sum -c ${meta.id}_2.fastq.gz.md5\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            curl: \\$(echo \\$(curl --version | head -n 1 | sed 's/^curl //; s/ .*\\$//'))\n        END_VERSIONS\n        \"\"\"\n    }",
        "nb_lignes_script": 39,
        "language_script": "bash",
        "tools": [
            "CURLS"
        ],
        "tools_url": [
            "https://bio.tools/CURLS"
        ],
        "tools_dico": [
            {
                "name": "CURLS",
                "uri": "https://bio.tools/CURLS",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3335",
                            "term": "Cardiology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "Public health and epidemiology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3421",
                            "term": "Surgery"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "Pathology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3335",
                            "term": "Cardiovascular medicine"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Public_health"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Epidemiology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3421",
                            "term": "https://en.wikipedia.org/wiki/Surgery"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "Disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "https://en.wikipedia.org/wiki/Pathology"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "towards a wider use of basic echo applications in Africa.\n\nBACKGROUND:Point-of-care ultrasound is increasingly being used as a diagnostic tool in resource-limited settings. The majority of existing ultrasound protocols have been developed and implemented in high-resource settings. In sub-Saharan Africa (SSA), patients with heart failure of various etiologies commonly present late in the disease process, with a similar syndrome of dyspnea, edema and cardiomegaly on chest X-ray. The causes of heart failure in SSA differ from those in high-resource settings. Point-of-care ultrasound has the potential to identify the underlying etiology of heart failure, and lead to targeted therapy.\n\n||| HOMEPAGE MISSING!.\n\n||| CORRECT NAME OF TOOL COULD ALSO BE 'ultrasound', 'Cardiac ultrasound resource-limited settings', 'high-resource', 'cardiomegaly SSA'",
                "homepage": "https://www.ncbi.nlm.nih.gov/pubmed/?term=31883027"
            }
        ],
        "inputs": [
            "meta",
            "fastq"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__fetchngs",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "label 'error_retry'",
            "conda (params.enable_conda ? 'bioconda::sra-tools=2.11.0' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/sra-tools:2.11.0--pl5321ha49a11a_3' : 'quay.io/biocontainers/sra-tools:2.11.0--pl5321ha49a11a_3' }\""
        ],
        "when": "",
        "stub": ""
    },
    "SYNAPSE_GET": {
        "name_process": "SYNAPSE_GET",
        "string_process": "\nprocess SYNAPSE_GET {\n    tag \"$meta.id\"\n    label 'process_low'\n    label 'error_retry'\n\n    conda (params.enable_conda ? \"bioconda::synapseclient=2.6.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/synapseclient:2.6.0--pyh5e36f6f_0' :\n        'quay.io/biocontainers/synapseclient:2.6.0--pyh5e36f6f_0' }\"\n\n    input:\n    val meta\n    path config\n\n    output:\n    tuple val(meta), path(\"*.fastq.gz\"), emit: fastq\n    tuple val(meta), path(\"*md5\")      , emit: md5\n    path \"versions.yml\"                , emit: versions\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    synapse \\\\\n        -c $config \\\\\n        get \\\\\n        $args \\\\\n        $meta.id\n\n    echo \"${meta.md5} \\t ${meta.name}\" > ${meta.id}.md5\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        synapse: \\$(synapse --version | sed -e \"s/Synapse Client //g\")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    synapse \\\\\n        -c $config \\\\\n        get \\\\\n        $args \\\\\n        $meta.id\n\n    echo \"${meta.md5} \\t ${meta.name}\" > ${meta.id}.md5\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        synapse: \\$(synapse --version | sed -e \"s/Synapse Client //g\")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "WeGet"
        ],
        "tools_url": [
            "https://bio.tools/weget"
        ],
        "tools_dico": [
            {
                "name": "WeGet",
                "uri": "https://bio.tools/weget",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0224",
                                    "term": "Query and retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression data analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0224",
                                    "term": "Database retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "WeGET is a computational tool to find mammalian genes that strongly co-express with a human query gene set of interest.",
                "homepage": "http://weget.cmbi.umcn.nl/"
            }
        ],
        "inputs": [
            "meta",
            "config"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__fetchngs",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "label 'error_retry'",
            "conda (params.enable_conda ? \"bioconda::synapseclient=2.6.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/synapseclient:2.6.0--pyh5e36f6f_0' : 'quay.io/biocontainers/synapseclient:2.6.0--pyh5e36f6f_0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "SRA_IDS_TO_RUNINFO": {
        "name_process": "SRA_IDS_TO_RUNINFO",
        "string_process": "\nprocess SRA_IDS_TO_RUNINFO {\n    tag \"$id\"\n    label 'error_retry'\n\n    conda (params.enable_conda ? \"conda-forge::python=3.9.5\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/python:3.9--1' :\n        'quay.io/biocontainers/python:3.9--1' }\"\n\n    input:\n    val id\n    val fields\n\n    output:\n    path \"*.tsv\"       , emit: tsv\n    path \"versions.yml\", emit: versions\n\n    script:\n    def metadata_fields = fields ? \"--ena_metadata_fields ${fields}\" : ''\n    \"\"\"\n    echo $id > id.txt\n    sra_ids_to_runinfo.py \\\\\n        id.txt \\\\\n        ${id}.runinfo.tsv \\\\\n        $metadata_fields\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        python: \\$(python --version | sed 's/Python //g')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "    def metadata_fields = fields ? \"--ena_metadata_fields ${fields}\" : ''\n    \"\"\"\n    echo $id > id.txt\n    sra_ids_to_runinfo.py \\\\\n        id.txt \\\\\n        ${id}.runinfo.tsv \\\\\n        $metadata_fields\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        python: \\$(python --version | sed 's/Python //g')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "id",
            "fields"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__fetchngs",
        "directive": [
            "tag \"$id\"",
            "label 'error_retry'",
            "conda (params.enable_conda ? \"conda-forge::python=3.9.5\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/python:3.9--1' : 'quay.io/biocontainers/python:3.9--1' }\""
        ],
        "when": "",
        "stub": ""
    },
    "SYNAPSE_LIST": {
        "name_process": "SYNAPSE_LIST",
        "string_process": "\nprocess SYNAPSE_LIST {\n    tag \"$id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::synapseclient=2.6.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/synapseclient:2.6.0--pyh5e36f6f_0' :\n        'quay.io/biocontainers/synapseclient:2.6.0--pyh5e36f6f_0' }\"\n\n    input:\n    val id\n    path config\n\n    output:\n    path \"*.txt\"       , emit: txt\n    path \"versions.yml\", emit: versions\n\n    script:\n    def args  = task.ext.args  ?: ''\n    def args2 = task.ext.args2 ?: ''\n    \"\"\"\n    synapse \\\\\n        -c $config \\\\\n        list \\\\\n        $args \\\\\n        $id \\\\\n        $args2 \\\\\n        > ${id}.list.txt\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        syanpse: \\$(synapse --version | sed -e \"s/Synapse Client //g\")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    def args  = task.ext.args  ?: ''\n    def args2 = task.ext.args2 ?: ''\n    \"\"\"\n    synapse \\\\\n        -c $config \\\\\n        list \\\\\n        $args \\\\\n        $id \\\\\n        $args2 \\\\\n        > ${id}.list.txt\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        syanpse: \\$(synapse --version | sed -e \"s/Synapse Client //g\")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [
            "listor"
        ],
        "tools_url": [
            "https://bio.tools/listor"
        ],
        "tools_dico": [
            {
                "name": "listor",
                "uri": "https://bio.tools/listor",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0849",
                                "term": "Sequence record"
                            }
                        ],
                        "output": []
                    }
                ],
                "description": "Write a list file of the logical OR of two sets of sequences.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/listor.html"
            }
        ],
        "inputs": [
            "id",
            "config"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__fetchngs",
        "directive": [
            "tag \"$id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::synapseclient=2.6.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/synapseclient:2.6.0--pyh5e36f6f_0' : 'quay.io/biocontainers/synapseclient:2.6.0--pyh5e36f6f_0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "SYNAPSE_TO_SAMPLESHEET": {
        "name_process": "SYNAPSE_TO_SAMPLESHEET",
        "string_process": "\nprocess SYNAPSE_TO_SAMPLESHEET {\n    tag \"$meta.id\"\n\n    executor 'local'\n    memory 100.MB\n\n    input:\n    tuple val(meta), path(fastq)\n    val pipeline\n\n    output:\n    tuple val(meta), path(\"*.csv\"), emit: samplesheet\n\n    exec:\n\n                          \n    def meta_map = meta.clone()\n    meta_map.remove(\"id\")\n\n    def fastq_1 = \"${params.outdir}/fastq/${fastq}\"\n    def fastq_2 = ''\n    if (fastq instanceof List && fastq.size() == 2) {\n        fastq_1 = \"${params.outdir}/fastq/${fastq[0]}\"\n        fastq_2 = \"${params.outdir}/fastq/${fastq[1]}\"\n    }\n\n                                                      \n    pipeline_map = [\n        sample  : \"${meta.id}\",\n        fastq_1 : fastq_1,\n        fastq_2 : fastq_2\n    ]\n\n                                            \n    if (pipeline) {\n        if (pipeline == 'rnaseq') {\n            pipeline_map << [ strandedness: 'unstranded' ]\n        }\n    }\n    pipeline_map << meta_map\n\n                           \n    samplesheet  = pipeline_map.keySet().collect{ '\"' + it + '\"'}.join(\",\") + '\\n'\n    samplesheet += pipeline_map.values().collect{ '\"' + it + '\"'}.join(\",\")\n\n                                \n    def samplesheet_file = task.workDir.resolve(\"${meta.id}.samplesheet.csv\")\n    samplesheet_file.text = samplesheet\n}",
        "nb_lignes_process": 48,
        "string_script": "    def meta_map = meta.clone()\n    meta_map.remove(\"id\")\n\n    def fastq_1 = \"${params.outdir}/fastq/${fastq}\"\n    def fastq_2 = ''\n    if (fastq instanceof List && fastq.size() == 2) {\n        fastq_1 = \"${params.outdir}/fastq/${fastq[0]}\"\n        fastq_2 = \"${params.outdir}/fastq/${fastq[1]}\"\n    }\n\n                                                      \n    pipeline_map = [\n        sample  : \"${meta.id}\",\n        fastq_1 : fastq_1,\n        fastq_2 : fastq_2\n    ]\n\n                                            \n    if (pipeline) {\n        if (pipeline == 'rnaseq') {\n            pipeline_map << [ strandedness: 'unstranded' ]\n        }\n    }\n    pipeline_map << meta_map\n\n                           \n    samplesheet  = pipeline_map.keySet().collect{ '\"' + it + '\"'}.join(\",\") + '\\n'\n    samplesheet += pipeline_map.values().collect{ '\"' + it + '\"'}.join(\",\")\n\n                                \n    def samplesheet_file = task.workDir.resolve(\"${meta.id}.samplesheet.csv\")\n    samplesheet_file.text = samplesheet",
        "nb_lignes_script": 31,
        "language_script": "bash",
        "tools": [
            "SAMPLE"
        ],
        "tools_url": [
            "https://bio.tools/sample"
        ],
        "tools_dico": [
            {
                "name": "SAMPLE",
                "uri": "https://bio.tools/sample",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3053",
                            "term": "Genetics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0282",
                                    "term": "Genetic mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0282",
                                    "term": "Genetic map construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0282",
                                    "term": "Linkage mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0282",
                                    "term": "Functional mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0282",
                                    "term": "Genetic cartography"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0282",
                                    "term": "Genetic map generation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The tool is designed to identify regions that are linked to a recessive disease by analysing genotype data from the parents and unaffected sibs of affected individuals. Since this analysis does not use data from affected patients, it is suited to the identification of lethal recessive genes, when the patients may have died before DNA samples could be obtained.",
                "homepage": "http://dna.leeds.ac.uk/sample/"
            }
        ],
        "inputs": [
            "meta",
            "fastq",
            "pipeline"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__fetchngs",
        "directive": [
            "tag \"$meta.id\"",
            "executor 'local'",
            "memory 100.MB"
        ],
        "when": "",
        "stub": ""
    },
    "SRA_TO_SAMPLESHEET": {
        "name_process": "SRA_TO_SAMPLESHEET",
        "string_process": "\nprocess SRA_TO_SAMPLESHEET {\n    tag \"$meta.id\"\n\n    executor 'local'\n    memory 100.MB\n\n    input:\n    tuple val(meta), path(fastq)\n    val   pipeline\n    val   mapping_fields\n\n    output:\n    tuple val(meta), path(\"*samplesheet.csv\"), emit: samplesheet\n    tuple val(meta), path(\"*mappings.csv\")   , emit: mappings\n\n    exec:\n      \n                                             \n      \n\n                                                      \n    def meta_map = meta.clone()\n    meta_map.remove(\"id\")\n    meta_map.remove(\"fastq_1\")\n    meta_map.remove(\"fastq_2\")\n    meta_map.remove(\"md5_1\")\n    meta_map.remove(\"md5_2\")\n    meta_map.remove(\"single_end\")\n\n                                                      \n    pipeline_map = [\n        sample  : \"${meta.id.split('_')[0..-2].join('_')}\",\n        fastq_1 : \"${params.outdir}/fastq/${fastq[0]}\",\n        fastq_2 : meta.single_end ? '' : \"${params.outdir}/fastq/${fastq[1]}\"\n    ]\n\n                                            \n    if (pipeline) {\n        if (pipeline == 'rnaseq') {\n            pipeline_map << [ strandedness: 'unstranded' ]\n        }\n    }\n    pipeline_map << meta_map\n\n                           \n    samplesheet  = pipeline_map.keySet().collect{ '\"' + it + '\"'}.join(\",\") + '\\n'\n    samplesheet += pipeline_map.values().collect{ '\"' + it + '\"'}.join(\",\")\n\n                                \n    def samplesheet_file = task.workDir.resolve(\"${meta.id}.samplesheet.csv\")\n    samplesheet_file.text = samplesheet\n\n      \n                                     \n      \n    mappings_map = pipeline_map.clone()\n    def fields = mapping_fields ? ['sample'] + mapping_fields.split(',').collect{ it.trim().toLowerCase() } : []\n    if ((mappings_map.keySet() + fields).unique().size() != mappings_map.keySet().size()) {\n        error(\"Invalid option for '--sample_mapping_fields': ${mapping_fields}.\\nValid options: ${mappings_map.keySet().join(', ')}\")\n    }\n\n                      \n    mappings  = fields.collect{ '\"' + it + '\"'}.join(\",\") + '\\n'\n    mappings += mappings_map.subMap(fields).values().collect{ '\"' + it + '\"'}.join(\",\")\n\n                             \n    def mappings_file = task.workDir.resolve(\"${meta.id}.mappings.csv\")\n    mappings_file.text = mappings\n}",
        "nb_lignes_process": 68,
        "string_script": "    def meta_map = meta.clone()\n    meta_map.remove(\"id\")\n    meta_map.remove(\"fastq_1\")\n    meta_map.remove(\"fastq_2\")\n    meta_map.remove(\"md5_1\")\n    meta_map.remove(\"md5_2\")\n    meta_map.remove(\"single_end\")\n\n                                                      \n    pipeline_map = [\n        sample  : \"${meta.id.split('_')[0..-2].join('_')}\",\n        fastq_1 : \"${params.outdir}/fastq/${fastq[0]}\",\n        fastq_2 : meta.single_end ? '' : \"${params.outdir}/fastq/${fastq[1]}\"\n    ]\n\n                                            \n    if (pipeline) {\n        if (pipeline == 'rnaseq') {\n            pipeline_map << [ strandedness: 'unstranded' ]\n        }\n    }\n    pipeline_map << meta_map\n\n                           \n    samplesheet  = pipeline_map.keySet().collect{ '\"' + it + '\"'}.join(\",\") + '\\n'\n    samplesheet += pipeline_map.values().collect{ '\"' + it + '\"'}.join(\",\")\n\n                                \n    def samplesheet_file = task.workDir.resolve(\"${meta.id}.samplesheet.csv\")\n    samplesheet_file.text = samplesheet\n\n      \n                                     \n      \n    mappings_map = pipeline_map.clone()\n    def fields = mapping_fields ? ['sample'] + mapping_fields.split(',').collect{ it.trim().toLowerCase() } : []\n    if ((mappings_map.keySet() + fields).unique().size() != mappings_map.keySet().size()) {\n        error(\"Invalid option for '--sample_mapping_fields': ${mapping_fields}.\\nValid options: ${mappings_map.keySet().join(', ')}\")\n    }\n\n                      \n    mappings  = fields.collect{ '\"' + it + '\"'}.join(\",\") + '\\n'\n    mappings += mappings_map.subMap(fields).values().collect{ '\"' + it + '\"'}.join(\",\")\n\n                             \n    def mappings_file = task.workDir.resolve(\"${meta.id}.mappings.csv\")\n    mappings_file.text = mappings",
        "nb_lignes_script": 46,
        "language_script": "bash",
        "tools": [
            "SAMPLE"
        ],
        "tools_url": [
            "https://bio.tools/sample"
        ],
        "tools_dico": [
            {
                "name": "SAMPLE",
                "uri": "https://bio.tools/sample",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3053",
                            "term": "Genetics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0282",
                                    "term": "Genetic mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0282",
                                    "term": "Genetic map construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0282",
                                    "term": "Linkage mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0282",
                                    "term": "Functional mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0282",
                                    "term": "Genetic cartography"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0282",
                                    "term": "Genetic map generation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The tool is designed to identify regions that are linked to a recessive disease by analysing genotype data from the parents and unaffected sibs of affected individuals. Since this analysis does not use data from affected patients, it is suited to the identification of lethal recessive genes, when the patients may have died before DNA samples could be obtained.",
                "homepage": "http://dna.leeds.ac.uk/sample/"
            }
        ],
        "inputs": [
            "meta",
            "fastq",
            "pipeline",
            "mapping_fields"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__fetchngs",
        "directive": [
            "tag \"$meta.id\"",
            "executor 'local'",
            "memory 100.MB"
        ],
        "when": "",
        "stub": ""
    },
    "SRA_MERGE_SAMPLESHEET": {
        "name_process": "SRA_MERGE_SAMPLESHEET",
        "string_process": "process SRA_MERGE_SAMPLESHEET {\n\n    conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/ubuntu:20.04' :\n        'ubuntu:20.04' }\"\n\n    input:\n    path ('samplesheets/*')\n    path ('mappings/*')\n\n    output:\n    path \"samplesheet.csv\", emit: samplesheet\n    path \"id_mappings.csv\", emit: mappings\n    path \"versions.yml\"   , emit: versions\n\n    script:\n    \"\"\"\n    head -n 1 `ls ./samplesheets/* | head -n 1` > samplesheet.csv\n    for fileid in `ls ./samplesheets/*`; do\n        awk 'NR>1' \\$fileid >> samplesheet.csv\n    done\n\n    head -n 1 `ls ./mappings/* | head -n 1` > id_mappings.csv\n    for fileid in `ls ./mappings/*`; do\n        awk 'NR>1' \\$fileid >> id_mappings.csv\n    done\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        sed: \\$(echo \\$(sed --version 2>&1) | sed 's/^.*GNU sed) //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "    \"\"\"\n    head -n 1 `ls ./samplesheets/* | head -n 1` > samplesheet.csv\n    for fileid in `ls ./samplesheets/*`; do\n        awk 'NR>1' \\$fileid >> samplesheet.csv\n    done\n\n    head -n 1 `ls ./mappings/* | head -n 1` > id_mappings.csv\n    for fileid in `ls ./mappings/*`; do\n        awk 'NR>1' \\$fileid >> id_mappings.csv\n    done\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        sed: \\$(echo \\$(sed --version 2>&1) | sed 's/^.*GNU sed) //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__fetchngs",
        "directive": [
            "conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/ubuntu:20.04' : 'ubuntu:20.04' }\""
        ],
        "when": "",
        "stub": ""
    },
    "SYNAPSE_SHOW": {
        "name_process": "SYNAPSE_SHOW",
        "string_process": "\nprocess SYNAPSE_SHOW {\n    tag \"$id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::synapseclient=2.6.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/synapseclient:2.6.0--pyh5e36f6f_0' :\n        'quay.io/biocontainers/synapseclient:2.6.0--pyh5e36f6f_0' }\"\n\n    input:\n    val id\n    path config\n\n    output:\n    path \"*.txt\"       , emit: metadata\n    path \"versions.yml\", emit: versions\n\n    script:\n    def args  = task.ext.args  ?: ''\n    def args2 = task.ext.args2 ?: ''\n    \"\"\"\n    synapse \\\\\n        -c $config \\\\\n        show \\\\\n        $args \\\\\n        $id \\\\\n        $args2 \\\\\n        > ${id}.metadata.txt\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        synapse: \\$(synapse --version | sed -e \"s/Synapse Client //g\")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    def args  = task.ext.args  ?: ''\n    def args2 = task.ext.args2 ?: ''\n    \"\"\"\n    synapse \\\\\n        -c $config \\\\\n        show \\\\\n        $args \\\\\n        $id \\\\\n        $args2 \\\\\n        > ${id}.metadata.txt\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        synapse: \\$(synapse --version | sed -e \"s/Synapse Client //g\")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [
            "SHOW"
        ],
        "tools_url": [
            "https://bio.tools/show"
        ],
        "tools_dico": [
            {
                "name": "SHOW",
                "uri": "https://bio.tools/show",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3320",
                            "term": "RNA splicing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0160",
                            "term": "Sequence sites, features and motifs"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Software engineering"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3320",
                            "term": "Alternative splicing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Computer programming"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Software development"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2423",
                                    "term": "Prediction and recognition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene prediction"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene finding"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene calling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Enables self-learning of HMM on a set of sequences, sequence segmentation based on the Baum-Welch or the Viterbi algorithms,and sequence simulation under a given HMM. Allows the user to specify any highly structured model and also to process large sets of sequences. Successfully used in diverse tasks such as DNA segmentation in homogeneous segments, bacterial gene prediction and human splice sites detection.",
                "homepage": "http://genome.jouy.inra.fr/ssb/SHOW/"
            }
        ],
        "inputs": [
            "id",
            "config"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__fetchngs",
        "directive": [
            "tag \"$id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::synapseclient=2.6.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/synapseclient:2.6.0--pyh5e36f6f_0' : 'quay.io/biocontainers/synapseclient:2.6.0--pyh5e36f6f_0' }\""
        ],
        "when": "",
        "stub": ""
    }
}
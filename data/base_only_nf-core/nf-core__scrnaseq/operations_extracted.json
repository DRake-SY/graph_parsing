{
    "OPERATION_1": {
        "string": "star_index = Channel\n        .fromPath(params.star_index)\n        .ifEmpty { exit 1, \"STAR index not found: ${params.star_index}\" }",
        "origin": [
            [
                "params.star_index",
                "A"
            ]
        ],
        "gives": [
            [
                "star_index",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "Channel\n        .fromPath(params.gtf)\n        .ifEmpty { exit 1, \"GTF annotation file not found: ${params.gtf}\" }\n        .into { gtf_extract_transcriptome; gtf_alevin; gtf_makeSTARindex; gtf_star; gtf_gene_map }",
        "origin": [
            [
                "params.gtf",
                "A"
            ]
        ],
        "gives": [
            [
                "gtf_extract_transcriptome",
                "P"
            ],
            [
                "gtf_alevin",
                "P"
            ],
            [
                "gtf_makeSTARindex",
                "P"
            ],
            [
                "gtf_star",
                "P"
            ],
            [
                "gtf_gene_map",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "Channel\n        .fromPath(params.fasta)\n        .ifEmpty { exit 1, \"Fasta file not found: ${params.fasta}\" }\n        .into { genome_fasta_extract_transcriptome ; genome_fasta_makeSTARindex }",
        "origin": [
            [
                "params.fasta",
                "A"
            ]
        ],
        "gives": [
            [
                "genome_fasta_extract_transcriptome",
                "P"
            ],
            [
                "genome_fasta_makeSTARindex",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "genome_fasta_extract_transcriptome = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "genome_fasta_extract_transcriptome",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "genome_fasta_makeSTARindex = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "genome_fasta_makeSTARindex",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "Channel\n        .fromPath(params.transcript_fasta)\n        .ifEmpty { exit 1, \"Fasta file not found: ${params.transcript_fasta}\" }\n        .into { transcriptome_fasta_alevin; transcriptome_fasta_kallisto }",
        "origin": [
            [
                "params.transcript_fasta",
                "A"
            ]
        ],
        "gives": [
            [
                "transcriptome_fasta_alevin",
                "P"
            ],
            [
                "transcriptome_fasta_kallisto",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "transcriptome_fasta_alevin = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "transcriptome_fasta_alevin",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "transcriptome_fasta_kallisto = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "transcriptome_fasta_kallisto",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "Channel\n        .fromPath(params.salmon_index)\n        .ifEmpty { exit 1, \"Salmon index not found: ${params.salmon_index}\" }\n        .set { salmon_index_alevin }",
        "origin": [
            [
                "params.salmon_index",
                "A"
            ]
        ],
        "gives": [
            [
                "salmon_index_alevin",
                "P"
            ]
        ]
    },
    "OPERATION_10": {
        "string": "ch_multiqc_custom_config = Channel.fromPath(params.multiqc_config, checkIfExists: true)",
        "origin": [
            [
                "params.multiqc_config, checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_multiqc_custom_config",
                "P"
            ]
        ]
    },
    "OPERATION_11": {
        "string": "ch_multiqc_custom_config = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "ch_multiqc_custom_config",
                "P"
            ]
        ]
    },
    "OPERATION_12": {
        "string": "Channel\n             .from(params.input_paths)\n             .map { row -> [ row[0], [file(row[1][0]), file(row[1][1])]] }\n             .ifEmpty { exit 1, \"params.input_paths was empty - no input files supplied\" }\n             .into { read_files_alevin; read_files_star; read_files_kallisto}",
        "origin": [
            [
                "params.input_paths",
                "V"
            ]
        ],
        "gives": [
            [
                "read_files_alevin",
                "P"
            ],
            [
                "read_files_star",
                "P"
            ],
            [
                "read_files_kallisto",
                "P"
            ]
        ]
    },
    "OPERATION_13": {
        "string": "Channel\n            .fromFilePairs( params.input )\n            .ifEmpty { exit 1, \"Cannot find any reads matching: ${params.input}\\nNB: Path needs to be enclosed in quotes!\\nNB: Path requires at least one * wildcard!\\n\" }\n            .into { read_files_alevin; read_files_star; read_files_kallisto }",
        "origin": [
            [
                "params.input",
                "A"
            ]
        ],
        "gives": [
            [
                "read_files_alevin",
                "P"
            ],
            [
                "read_files_star",
                "P"
            ],
            [
                "read_files_kallisto",
                "P"
            ]
        ]
    },
    "OPERATION_14": {
        "string": "Channel.fromPath(barcode_filename)\n         .ifEmpty{ exit 1, \"Cannot find ${params.type} barcode whitelist: $barcode_filename\" }\n         .set{ barcode_whitelist_gzipped }",
        "origin": [
            [
                "barcode_filename",
                "A"
            ]
        ],
        "gives": [
            [
                "barcode_whitelist_gzipped",
                "P"
            ]
        ]
    },
    "OPERATION_15": {
        "string": "Channel.empty().into{ barcode_whitelist_star; barcode_whitelist_kallisto; barcode_whitelist_alevinqc }",
        "origin": [],
        "gives": [
            [
                "barcode_whitelist_star",
                "P"
            ],
            [
                "barcode_whitelist_kallisto",
                "P"
            ],
            [
                "barcode_whitelist_alevinqc",
                "P"
            ]
        ]
    },
    "OPERATION_16": {
        "string": "Channel.fromPath(params.barcode_whitelist)\n         .ifEmpty{ exit 1, \"Cannot find ${params.type} barcode whitelist: $barcode_filename\" }\n         .into{ barcode_whitelist_star; barcode_whitelist_kallisto; barcode_whitelist_alevinqc }",
        "origin": [
            [
                "params.barcode_whitelist",
                "A"
            ]
        ],
        "gives": [
            [
                "barcode_whitelist_star",
                "P"
            ],
            [
                "barcode_whitelist_kallisto",
                "P"
            ],
            [
                "barcode_whitelist_alevinqc",
                "P"
            ]
        ]
    },
    "OPERATION_17": {
        "string": "barcode_whitelist_gzipped = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "barcode_whitelist_gzipped",
                "P"
            ]
        ]
    },
    "OPERATION_18": {
        "string": "Channel.from(summary.collect{ [it.key, it.value] })\n    .map { k,v -> \"<dt>$k</dt><dd><samp>${v ?: '<span style=\\\"color:#999999;\\\">N/A</a>'}</samp></dd>\" }\n    .reduce { a, b -> return [a, b].join(\"\\n            \") }\n    .map { x -> \"\"\"\n    id: 'nf-core-scrnaseq-summary'\n    description: \" - this information is collected when the pipeline is started.\"\n    section_name: 'nf-core/scrnaseq Workflow Summary'\n    section_href: 'https://github.com/nf-core/scrnaseq'\n    plot_type: 'html'\n    data: |\n        <dl class=\\\"dl-horizontal\\\">\n            $x\n        </dl>\n    \"\"\".stripIndent() }\n    .set { ch_workflow_summary }",
        "origin": [
            [
                "summary.collect{ [it.key, it.value] }",
                "V"
            ]
        ],
        "gives": [
            [
                "ch_workflow_summary",
                "P"
            ]
        ]
    },
    "OPERATION_19": {
        "string": "configFiles.join(', ')",
        "origin": [
            [
                "configFiles",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_20": {
        "string": "star_aligned\n    .flatMap {  logs, bams -> bams }\n.into { bam_count; bam_rseqc; bam_preseq; bam_markduplicates; bam_htseqcount; bam_stringtieFPKM; bam_for_genebody; bam_dexseq; leafcutter_bam }",
        "origin": [
            [
                "star_aligned",
                "P"
            ]
        ],
        "gives": [
            [
                "bam_count",
                "P"
            ],
            [
                "bam_rseqc",
                "P"
            ],
            [
                "bam_preseq",
                "P"
            ],
            [
                "bam_markduplicates",
                "P"
            ],
            [
                "bam_htseqcount",
                "P"
            ],
            [
                "bam_stringtieFPKM",
                "P"
            ],
            [
                "bam_for_genebody",
                "P"
            ],
            [
                "bam_dexseq",
                "P"
            ],
            [
                "leafcutter_bam",
                "P"
            ]
        ]
    }
}
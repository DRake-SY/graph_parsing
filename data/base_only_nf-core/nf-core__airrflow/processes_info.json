{
    "RENAME_FASTQ": {
        "name_process": "RENAME_FASTQ",
        "string_process": "\nprocess RENAME_FASTQ {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"conda-forge::python=3.8.0 conda-forge::biopython=1.74\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mulled-v2-adc9bb9edc31eb38b3c24786a83b7dfa530e2bea:47d6d7765d7537847ced7dac873190d164146022-0' :\n        'quay.io/biocontainers/mulled-v2-adc9bb9edc31eb38b3c24786a83b7dfa530e2bea:47d6d7765d7537847ced7dac873190d164146022-0' }\"\n\n    input:\n    tuple val(meta), path(R1), path(R2)\n\n    output:\n    tuple val(meta), path('*_R1.fastq.gz'), path('*_R2.fastq.gz')   , emit: reads\n\n    script:\n    \"\"\"\n    mv \"${R1}\" \"${meta.id}_R1.fastq.gz\"\n    mv \"${R2}\" \"${meta.id}_R2.fastq.gz\"\n    \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "    \"\"\"\n    mv \"${R1}\" \"${meta.id}_R1.fastq.gz\"\n    mv \"${R2}\" \"${meta.id}_R2.fastq.gz\"\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "R1",
            "R2"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__airrflow",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"conda-forge::python=3.8.0 conda-forge::biopython=1.74\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mulled-v2-adc9bb9edc31eb38b3c24786a83b7dfa530e2bea:47d6d7765d7537847ced7dac873190d164146022-0' : 'quay.io/biocontainers/mulled-v2-adc9bb9edc31eb38b3c24786a83b7dfa530e2bea:47d6d7765d7537847ced7dac873190d164146022-0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "PRESTO_CLUSTERSETS": {
        "name_process": "PRESTO_CLUSTERSETS",
        "string_process": "process PRESTO_CLUSTERSETS {\n    tag \"$meta.id\"\n    label \"process_long_parallelized\"\n\n    conda (params.enable_conda ? \"bioconda::presto=0.7.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/presto:0.7.0--pyhdfd78af_0' :\n        'quay.io/biocontainers/presto:0.7.0--pyhdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(R1), path(R2)\n\n    output:\n    tuple val(meta), path(\"*_R1_cluster-pass.fastq\"), path(\"*_R2_cluster-pass.fastq\"), emit: reads\n    path \"*_command_log.txt\", emit: logs\n    path \"*.log\"\n    path \"*.tab\", emit: log_tab\n    path(\"versions.yml\"), emit: versions\n\n    script:\n    \"\"\"\n    ClusterSets.py set --nproc ${task.cpus} -s $R1 --outname ${meta.id}_R1 --exec vsearch --log ${meta.id}_R1.log > \"${meta.id}_command_log.txt\"\n    ClusterSets.py set --nproc ${task.cpus} -s $R2 --outname ${meta.id}_R2 --exec vsearch --log ${meta.id}_R2.log >> \"${meta.id}_command_log.txt\"\n    ParseLog.py -l \"${meta.id}_R1.log\" \"${meta.id}_R2.log\" -f ID BARCODE SEQCOUNT CLUSTERS\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        presto: \\$( ClusterSets.py --version | awk -F' '  '{print \\$2}' )\n        vsearch: \\$( vsearch --version &> vsearch.txt; cat vsearch.txt | head -n 1 | grep -o 'v[0-9\\\\.]\\\\+' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "    \"\"\"\n    ClusterSets.py set --nproc ${task.cpus} -s $R1 --outname ${meta.id}_R1 --exec vsearch --log ${meta.id}_R1.log > \"${meta.id}_command_log.txt\"\n    ClusterSets.py set --nproc ${task.cpus} -s $R2 --outname ${meta.id}_R2 --exec vsearch --log ${meta.id}_R2.log >> \"${meta.id}_command_log.txt\"\n    ParseLog.py -l \"${meta.id}_R1.log\" \"${meta.id}_R2.log\" -f ID BARCODE SEQCOUNT CLUSTERS\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        presto: \\$( ClusterSets.py --version | awk -F' '  '{print \\$2}' )\n        vsearch: \\$( vsearch --version &> vsearch.txt; cat vsearch.txt | head -n 1 | grep -o 'v[0-9\\\\.]\\\\+' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "R1",
            "R2"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__airrflow",
        "directive": [
            "tag \"$meta.id\"",
            "label \"process_long_parallelized\"",
            "conda (params.enable_conda ? \"bioconda::presto=0.7.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/presto:0.7.0--pyhdfd78af_0' : 'quay.io/biocontainers/presto:0.7.0--pyhdfd78af_0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "PRESTO_MASKPRIMERS": {
        "name_process": "PRESTO_MASKPRIMERS",
        "string_process": "process PRESTO_MASKPRIMERS {\n    tag \"$meta.id\"\n    label \"process_high\"\n\n    conda (params.enable_conda ? \"bioconda::presto=0.7.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/presto:0.7.0--pyhdfd78af_0' :\n        'quay.io/biocontainers/presto:0.7.0--pyhdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(R1), path(R2)\n    path(cprimers)\n    path(vprimers)\n\n    output:\n    tuple val(meta), path(\"*_R1_primers-pass.fastq\"), path(\"*_R2_primers-pass.fastq\") , emit: reads\n    path \"*_command_log.txt\", emit: logs\n    path \"*_R1.log\"\n    path \"*_R2.log\"\n    path \"*.tab\", emit: log_tab\n    path \"versions.yml\" , emit: versions\n\n\n    script:\n    def revpr = params.primer_revpr ? '--revpr' : ''\n    if (params.cprimer_position == \"R1\") {\n        def primer_start_R1 = (params.index_file | params.umi_position == 'R1') ? \"--start ${params.umi_length + params.cprimer_start} --barcode\" : \"--start ${params.cprimer_start}\"\n        def primer_start_R2 = (params.umi_position == 'R2') ? \"--start ${params.umi_length + params.vprimer_start} --barcode\" : \"--start ${params.vprimer_start}\"\n        \"\"\"\n        MaskPrimers.py score --nproc ${task.cpus} -s $R1 -p ${cprimers} $primer_start_R1 $revpr --maxerror ${params.primer_maxerror} --mode ${params.primer_mask_mode} --outname ${meta.id}_R1 --log ${meta.id}_R1.log > \"${meta.id}_command_log.txt\"\n        MaskPrimers.py score --nproc ${task.cpus} -s $R2 -p ${vprimers} $primer_start_R2 $revpr --maxerror ${params.primer_maxerror} --mode ${params.primer_mask_mode} --outname ${meta.id}_R2 --log ${meta.id}_R2.log >> \"${meta.id}_command_log.txt\"\n        ParseLog.py -l \"${meta.id}_R1.log\" \"${meta.id}_R2.log\" -f ID PRIMER ERROR\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            presto: \\$( MaskPrimers.py --version | awk -F' '  '{print \\$2}' )\n        END_VERSIONS\n        \"\"\"\n    } else if (params.cprimer_position == \"R2\") {\n        def primer_start_R1 = (params.index_file | params.umi_position == 'R1') ? \"--start ${params.umi_length + params.vprimer_start} --barcode\" : \"--start ${params.vprimer_start}\"\n        def primer_start_R2 = (params.umi_position == 'R2') ? \"--start ${params.umi_length + params.cprimer_start} --barcode\" : \"--start ${params.cprimer_start}\"\n        \"\"\"\n        MaskPrimers.py score --nproc ${task.cpus} -s $R1 -p ${vprimers} $primer_start_R1 $revpr --maxerror ${params.primer_maxerror} --mode ${params.primer_mask_mode} --outname ${meta.id}_R1 --log ${meta.id}_R1.log > \"${meta.id}_command_log.txt\"\n        MaskPrimers.py score --nproc ${task.cpus} -s $R2 -p ${cprimers} $primer_start_R2 $revpr --maxerror ${params.primer_maxerror} --mode ${params.primer_mask_mode} --outname ${meta.id}_R2 --log ${meta.id}_R2.log >> \"${meta.id}_command_log.txt\"\n        ParseLog.py -l \"${meta.id}_R1.log\" \"${meta.id}_R2.log\" -f ID PRIMER ERROR\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            presto: \\$( MaskPrimers.py --version | awk -F' '  '{print \\$2}' )\n        END_VERSIONS\n        \"\"\"\n    } else {\n        exit 1, \"Error in determining cprimer position. Please choose R1 or R2.\"\n    }\n\n}",
        "nb_lignes_process": 54,
        "string_script": "    def revpr = params.primer_revpr ? '--revpr' : ''\n    if (params.cprimer_position == \"R1\") {\n        def primer_start_R1 = (params.index_file | params.umi_position == 'R1') ? \"--start ${params.umi_length + params.cprimer_start} --barcode\" : \"--start ${params.cprimer_start}\"\n        def primer_start_R2 = (params.umi_position == 'R2') ? \"--start ${params.umi_length + params.vprimer_start} --barcode\" : \"--start ${params.vprimer_start}\"\n        \"\"\"\n        MaskPrimers.py score --nproc ${task.cpus} -s $R1 -p ${cprimers} $primer_start_R1 $revpr --maxerror ${params.primer_maxerror} --mode ${params.primer_mask_mode} --outname ${meta.id}_R1 --log ${meta.id}_R1.log > \"${meta.id}_command_log.txt\"\n        MaskPrimers.py score --nproc ${task.cpus} -s $R2 -p ${vprimers} $primer_start_R2 $revpr --maxerror ${params.primer_maxerror} --mode ${params.primer_mask_mode} --outname ${meta.id}_R2 --log ${meta.id}_R2.log >> \"${meta.id}_command_log.txt\"\n        ParseLog.py -l \"${meta.id}_R1.log\" \"${meta.id}_R2.log\" -f ID PRIMER ERROR\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            presto: \\$( MaskPrimers.py --version | awk -F' '  '{print \\$2}' )\n        END_VERSIONS\n        \"\"\"\n    } else if (params.cprimer_position == \"R2\") {\n        def primer_start_R1 = (params.index_file | params.umi_position == 'R1') ? \"--start ${params.umi_length + params.vprimer_start} --barcode\" : \"--start ${params.vprimer_start}\"\n        def primer_start_R2 = (params.umi_position == 'R2') ? \"--start ${params.umi_length + params.cprimer_start} --barcode\" : \"--start ${params.cprimer_start}\"\n        \"\"\"\n        MaskPrimers.py score --nproc ${task.cpus} -s $R1 -p ${vprimers} $primer_start_R1 $revpr --maxerror ${params.primer_maxerror} --mode ${params.primer_mask_mode} --outname ${meta.id}_R1 --log ${meta.id}_R1.log > \"${meta.id}_command_log.txt\"\n        MaskPrimers.py score --nproc ${task.cpus} -s $R2 -p ${cprimers} $primer_start_R2 $revpr --maxerror ${params.primer_maxerror} --mode ${params.primer_mask_mode} --outname ${meta.id}_R2 --log ${meta.id}_R2.log >> \"${meta.id}_command_log.txt\"\n        ParseLog.py -l \"${meta.id}_R1.log\" \"${meta.id}_R2.log\" -f ID PRIMER ERROR\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            presto: \\$( MaskPrimers.py --version | awk -F' '  '{print \\$2}' )\n        END_VERSIONS\n        \"\"\"\n    } else {\n        exit 1, \"Error in determining cprimer position. Please choose R1 or R2.\"\n    }",
        "nb_lignes_script": 29,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "R1",
            "R2",
            "cprimers",
            "vprimers"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__airrflow",
        "directive": [
            "tag \"$meta.id\"",
            "label \"process_high\"",
            "conda (params.enable_conda ? \"bioconda::presto=0.7.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/presto:0.7.0--pyhdfd78af_0' : 'quay.io/biocontainers/presto:0.7.0--pyhdfd78af_0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "ALAKAZAM_LINEAGE": {
        "name_process": "ALAKAZAM_LINEAGE",
        "string_process": "process ALAKAZAM_LINEAGE {\n    tag \"$meta.id\"\n    label 'process_high'\n\n    conda (params.enable_conda ? \"conda-forge::r-base=4.1.2 bioconda::r-alakazam=1.2.0 bioconda::changeo=1.2.0 bioconda::phylip=3.697\" : null)                                                                                                                    \n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mulled-v2-afe1e5f3879e265b14ec08dd3a1875df9c23630d:d6b54b0fae81ec8e55d41b5ea9cc8f39d75cf2d7-0' :\n        'quay.io/biocontainers/mulled-v2-afe1e5f3879e265b14ec08dd3a1875df9c23630d:d6b54b0fae81ec8e55d41b5ea9cc8f39d75cf2d7-0' }\"\n\n    input:\n    tuple val(meta), path(tab)                                     \n\n    output:\n    tuple val(meta), path(\"${tab}\"), emit: tab\n    path \"versions.yml\" , emit: versions\n    path(\"*.tsv\")\n    path(\"Clone_tree_plots/*.pdf\")\n    path(\"Graphml_trees/All_graphs_patient.graphml\")\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    which dnapars > dnapars_exec.txt\n    lineage_reconstruction.R ${tab} $args\n    merge_graphs.sh\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        R: \\$(echo \\$(R --version 2>&1) | awk -F' '  '{print \\$3}')\n        alakazam: \\$(Rscript -e \"library(alakazam); cat(paste(packageVersion('alakazam'), collapse='.'))\")\n        changeo: \\$( AssignGenes.py --version | awk -F' '  '{print \\$2}' )\n        pyhlip: 3.697\n    END_VERSIONS\n    \"\"\"\n\n}",
        "nb_lignes_process": 34,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    which dnapars > dnapars_exec.txt\n    lineage_reconstruction.R ${tab} $args\n    merge_graphs.sh\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        R: \\$(echo \\$(R --version 2>&1) | awk -F' '  '{print \\$3}')\n        alakazam: \\$(Rscript -e \"library(alakazam); cat(paste(packageVersion('alakazam'), collapse='.'))\")\n        changeo: \\$( AssignGenes.py --version | awk -F' '  '{print \\$2}' )\n        pyhlip: 3.697\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [
            "whichdb"
        ],
        "tools_url": [
            "https://bio.tools/whichdb"
        ],
        "tools_dico": [
            {
                "name": "whichdb",
                "uri": "https://bio.tools/whichdb",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3077",
                            "term": "Data acquisition"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3077",
                            "term": "Data collection"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0957",
                                "term": "Database metadata"
                            }
                        ]
                    }
                ],
                "description": "Search all sequence databases for an entry and retrieve it.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/whichdb.html"
            }
        ],
        "inputs": [
            "meta",
            "tab"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__airrflow",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "conda (params.enable_conda ? \"conda-forge::r-base=4.1.2 bioconda::r-alakazam=1.2.0 bioconda::changeo=1.2.0 bioconda::phylip=3.697\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mulled-v2-afe1e5f3879e265b14ec08dd3a1875df9c23630d:d6b54b0fae81ec8e55d41b5ea9cc8f39d75cf2d7-0' : 'quay.io/biocontainers/mulled-v2-afe1e5f3879e265b14ec08dd3a1875df9c23630d:d6b54b0fae81ec8e55d41b5ea9cc8f39d75cf2d7-0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "CHANGEO_CONVERTDB_FASTA": {
        "name_process": "CHANGEO_CONVERTDB_FASTA",
        "string_process": "process CHANGEO_CONVERTDB_FASTA {\n    tag \"$meta.id\"\n    label 'process_low'\n    label 'immcantation'\n\n    conda (params.enable_conda ? \"bioconda::changeo=1.2.0 bioconda::igblast=1.17.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mulled-v2-2665a8a48fa054ad1fcccf53e711669939b3eac1:f479475bceae84156e57e303cfe804ab5629d62b-0' :\n        'quay.io/biocontainers/mulled-v2-2665a8a48fa054ad1fcccf53e711669939b3eac1:f479475bceae84156e57e303cfe804ab5629d62b-0' }\"\n\n    input:\n    tuple val(meta), path(tab)                               \n\n    output:\n    tuple val(meta), path(\"*.fasta\"), emit: fasta                               \n    path \"versions.yml\" , emit: versions\n    path \"*_command_log.txt\" , emit: logs\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    ConvertDb.py fasta -d $tab $args > \"${meta.id}_command_log.txt\"\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        igblastn: \\$( igblastn -version | grep -o \"igblast[0-9\\\\. ]\\\\+\" | grep -o \"[0-9\\\\. ]\\\\+\" )\n        changeo: \\$( ConvertDb.py --version | awk -F' '  '{print \\$2}' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    ConvertDb.py fasta -d $tab $args > \"${meta.id}_command_log.txt\"\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        igblastn: \\$( igblastn -version | grep -o \"igblast[0-9\\\\. ]\\\\+\" | grep -o \"[0-9\\\\. ]\\\\+\" )\n        changeo: \\$( ConvertDb.py --version | awk -F' '  '{print \\$2}' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "tab"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__airrflow",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "label 'immcantation'",
            "conda (params.enable_conda ? \"bioconda::changeo=1.2.0 bioconda::igblast=1.17.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mulled-v2-2665a8a48fa054ad1fcccf53e711669939b3eac1:f479475bceae84156e57e303cfe804ab5629d62b-0' : 'quay.io/biocontainers/mulled-v2-2665a8a48fa054ad1fcccf53e711669939b3eac1:f479475bceae84156e57e303cfe804ab5629d62b-0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "CHANGEO_CREATEGERMLINES": {
        "name_process": "CHANGEO_CREATEGERMLINES",
        "string_process": "process CHANGEO_CREATEGERMLINES {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::changeo=1.2.0 bioconda::igblast=1.17.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mulled-v2-2665a8a48fa054ad1fcccf53e711669939b3eac1:f479475bceae84156e57e303cfe804ab5629d62b-0' :\n        'quay.io/biocontainers/mulled-v2-2665a8a48fa054ad1fcccf53e711669939b3eac1:f479475bceae84156e57e303cfe804ab5629d62b-0' }\"\n\n    input:\n    tuple val(meta), path(tab)                                     \n    path(imgt_base)           \n\n    output:\n    tuple val(meta), path(\"*germ-pass.tsv\"), emit: tab\n    path(\"*_command_log.txt\"), emit: logs\n    path \"versions.yml\" , emit: versions\n\n    script:\n    \"\"\"\n    CreateGermlines.py -d ${tab} -g dmask --cloned \\\\\n    -r ${imgt_base}/${meta.species}/vdj/ \\\\\n    --format airr \\\\\n    --log ${meta.id}.log --outname ${meta.id} > ${meta.id}_command_log.txt\n    ParseLog.py -l ${meta.id}.log -f ID V_CALL D_CALL J_CALL\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        igblastn: \\$( igblastn -version | grep -o \"igblast[0-9\\\\. ]\\\\+\" | grep -o \"[0-9\\\\. ]\\\\+\" )\n        changeo: \\$( CreateGermlines.py --version | awk -F' '  '{print \\$2}' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "    \"\"\"\n    CreateGermlines.py -d ${tab} -g dmask --cloned \\\\\n    -r ${imgt_base}/${meta.species}/vdj/ \\\\\n    --format airr \\\\\n    --log ${meta.id}.log --outname ${meta.id} > ${meta.id}_command_log.txt\n    ParseLog.py -l ${meta.id}.log -f ID V_CALL D_CALL J_CALL\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        igblastn: \\$( igblastn -version | grep -o \"igblast[0-9\\\\. ]\\\\+\" | grep -o \"[0-9\\\\. ]\\\\+\" )\n        changeo: \\$( CreateGermlines.py --version | awk -F' '  '{print \\$2}' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "tab",
            "imgt_base"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__airrflow",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::changeo=1.2.0 bioconda::igblast=1.17.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mulled-v2-2665a8a48fa054ad1fcccf53e711669939b3eac1:f479475bceae84156e57e303cfe804ab5629d62b-0' : 'quay.io/biocontainers/mulled-v2-2665a8a48fa054ad1fcccf53e711669939b3eac1:f479475bceae84156e57e303cfe804ab5629d62b-0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "MERGE_TABLES": {
        "name_process": "MERGE_TABLES",
        "string_process": "process MERGE_TABLES {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img' :\n        'biocontainers/biocontainers:v1.2.0_cv1' }\"\n\n    input:\n    tuple val(meta), path(tab)                               \n\n    output:\n    tuple val(meta), path(\"${meta.id}.tsv\"), emit: tab                               \n\n    script:\n    \"\"\"\n    echo \"${meta.id}\"\n    echo \"${meta.samples}\"\n    echo \"${tab}\"\n    echo \"${tab.join('\\n')}\" > tab.list\n\n    head -n 1 ${tab[0]} > ${meta.id}.tsv\n    tail -n +2 ${tab} >> ${meta.id}.tsv\n    sed -i '/==>/d' ${meta.id}.tsv\n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "    \"\"\"\n    echo \"${meta.id}\"\n    echo \"${meta.samples}\"\n    echo \"${tab}\"\n    echo \"${tab.join('\\n')}\" > tab.list\n\n    head -n 1 ${tab[0]} > ${meta.id}.tsv\n    tail -n +2 ${tab} >> ${meta.id}.tsv\n    sed -i '/==>/d' ${meta.id}.tsv\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "tab"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__airrflow",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img' : 'biocontainers/biocontainers:v1.2.0_cv1' }\""
        ],
        "when": "",
        "stub": ""
    },
    "FETCH_DATABASES": {
        "name_process": "FETCH_DATABASES",
        "string_process": "process FETCH_DATABASES {\n    tag \"IMGT IGBLAST\"\n    label 'process_low'\n    label 'immcantation'\n\n    conda (params.enable_conda ? \"bioconda::changeo=1.0.2 bioconda::igblast=1.15.0\" : null)                              \n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mulled-v2-7d8e418eb73acc6a80daea8e111c94cf19a4ecfd:e5bd866a6803c301bf10b82e697c5dd2e49810a1-1' :\n        'quay.io/biocontainers/mulled-v2-7d8e418eb73acc6a80daea8e111c94cf19a4ecfd:e5bd866a6803c301bf10b82e697c5dd2e49810a1-1' }\"\n\n    output:\n    path(\"igblast_base\"), emit: igblast\n    path(\"imgtdb_base\"), emit: imgt\n    path \"versions.yml\" , emit: versions\n\n    script:\n    \"\"\"\n    fetch_databases.sh\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        IMGT download date: \\$( echo \\$(date \"+%F\") )\n        igblastn: \\$( igblastn -version | grep -o \"igblast[0-9\\\\. ]\\\\+\" | grep -o \"[0-9\\\\. ]\\\\+\" )\n        changeo: \\$( AssignGenes.py --version | awk -F' '  '{print \\$2}' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "    \"\"\"\n    fetch_databases.sh\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        IMGT download date: \\$( echo \\$(date \"+%F\") )\n        igblastn: \\$( igblastn -version | grep -o \"igblast[0-9\\\\. ]\\\\+\" | grep -o \"[0-9\\\\. ]\\\\+\" )\n        changeo: \\$( AssignGenes.py --version | awk -F' '  '{print \\$2}' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__airrflow",
        "directive": [
            "tag \"IMGT IGBLAST\"",
            "label 'process_low'",
            "label 'immcantation'",
            "conda (params.enable_conda ? \"bioconda::changeo=1.0.2 bioconda::igblast=1.15.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mulled-v2-7d8e418eb73acc6a80daea8e111c94cf19a4ecfd:e5bd866a6803c301bf10b82e697c5dd2e49810a1-1' : 'quay.io/biocontainers/mulled-v2-7d8e418eb73acc6a80daea8e111c94cf19a4ecfd:e5bd866a6803c301bf10b82e697c5dd2e49810a1-1' }\""
        ],
        "when": "",
        "stub": ""
    },
    "CHANGEO_PARSEDB_SPLIT": {
        "name_process": "CHANGEO_PARSEDB_SPLIT",
        "string_process": "process CHANGEO_PARSEDB_SPLIT {\n    tag \"$meta.id\"\n    label 'process_low'\n    label 'immcantation'\n\n    conda (params.enable_conda ? \"bioconda::changeo=1.2.0 bioconda::igblast=1.17.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mulled-v2-2665a8a48fa054ad1fcccf53e711669939b3eac1:f479475bceae84156e57e303cfe804ab5629d62b-0' :\n        'quay.io/biocontainers/mulled-v2-2665a8a48fa054ad1fcccf53e711669939b3eac1:f479475bceae84156e57e303cfe804ab5629d62b-0' }\"\n\n    input:\n    tuple val(meta), path(tab)                               \n\n    output:\n    tuple val(meta), path(\"*productive-T.tsv\"), emit: tab                               \n    path(\"*_command_log.txt\"), emit: logs               \n    path \"versions.yml\" , emit: versions\n\n    script:\n    \"\"\"\n    ParseDb.py split -d $tab -f productive --outname ${meta.id} > \"${meta.id}_split_command_log.txt\"\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        changeo: \\$( ParseDb.py --version | awk -F' '  '{print \\$2}' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "    \"\"\"\n    ParseDb.py split -d $tab -f productive --outname ${meta.id} > \"${meta.id}_split_command_log.txt\"\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        changeo: \\$( ParseDb.py --version | awk -F' '  '{print \\$2}' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "tab"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__airrflow",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "label 'immcantation'",
            "conda (params.enable_conda ? \"bioconda::changeo=1.2.0 bioconda::igblast=1.17.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mulled-v2-2665a8a48fa054ad1fcccf53e711669939b3eac1:f479475bceae84156e57e303cfe804ab5629d62b-0' : 'quay.io/biocontainers/mulled-v2-2665a8a48fa054ad1fcccf53e711669939b3eac1:f479475bceae84156e57e303cfe804ab5629d62b-0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "PRESTO_PARSEHEADERS_METADATA": {
        "name_process": "PRESTO_PARSEHEADERS_METADATA",
        "string_process": "process PRESTO_PARSEHEADERS_METADATA {\n    tag \"$meta.id\"\n    label \"process_low\"\n\n    conda (params.enable_conda ? \"bioconda::presto=0.7.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/presto:0.7.0--pyhdfd78af_0' :\n        'quay.io/biocontainers/presto:0.7.0--pyhdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path(\"*_reheader-pass.fastq\"), emit: reads\n    path \"versions.yml\" , emit: versions\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    ParseHeaders.py add -s $reads -o \"${reads.baseName}_reheader-pass.fastq\" $args -u ${meta.id} ${meta.subject} ${meta.species} ${meta.locus}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        presto: \\$( ParseHeaders.py --version | awk -F' '  '{print \\$2}' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    ParseHeaders.py add -s $reads -o \"${reads.baseName}_reheader-pass.fastq\" $args -u ${meta.id} ${meta.subject} ${meta.species} ${meta.locus}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        presto: \\$( ParseHeaders.py --version | awk -F' '  '{print \\$2}' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__airrflow",
        "directive": [
            "tag \"$meta.id\"",
            "label \"process_low\"",
            "conda (params.enable_conda ? \"bioconda::presto=0.7.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/presto:0.7.0--pyhdfd78af_0' : 'quay.io/biocontainers/presto:0.7.0--pyhdfd78af_0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "PRESTO_PAIRSEQ": {
        "name_process": "PRESTO_PAIRSEQ",
        "string_process": "process PRESTO_PAIRSEQ {\n    tag \"$meta.id\"\n    label \"process_low\"\n\n    conda (params.enable_conda ? \"bioconda::presto=0.7.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/presto:0.7.0--pyhdfd78af_0' :\n        'quay.io/biocontainers/presto:0.7.0--pyhdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(\"${meta.id}_R1.fastq\"), path(\"${meta.id}_R2.fastq\")\n\n    output:\n    tuple val(meta), path(\"*R1_pair-pass.fastq\"), path(\"*R2_pair-pass.fastq\") , emit: reads\n    path \"*_command_log.txt\", emit: logs\n    path \"versions.yml\" , emit: versions\n\n    script:\n    def copyfield = (params.index_file | params.umi_position == 'R1') ? \"--1f BARCODE\" : \"--2f BARCODE\"\n    \"\"\"\n    PairSeq.py -1 '${meta.id}_R1.fastq' -2 '${meta.id}_R2.fastq' $copyfield --coord illumina > \"${meta.id}_command_log.txt\"\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        presto: \\$( PairSeq.py --version | awk -F' '  '{print \\$2}' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "    def copyfield = (params.index_file | params.umi_position == 'R1') ? \"--1f BARCODE\" : \"--2f BARCODE\"\n    \"\"\"\n    PairSeq.py -1 '${meta.id}_R1.fastq' -2 '${meta.id}_R2.fastq' $copyfield --coord illumina > \"${meta.id}_command_log.txt\"\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        presto: \\$( PairSeq.py --version | awk -F' '  '{print \\$2}' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__airrflow",
        "directive": [
            "tag \"$meta.id\"",
            "label \"process_low\"",
            "conda (params.enable_conda ? \"bioconda::presto=0.7.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/presto:0.7.0--pyhdfd78af_0' : 'quay.io/biocontainers/presto:0.7.0--pyhdfd78af_0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "GUNZIP": {
        "name_process": "GUNZIP",
        "string_process": "process GUNZIP {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img' :\n        'biocontainers/biocontainers:v1.2.0_cv1' }\"\n\n    input:\n    tuple val(meta), path(R1), path(R2)\n\n    output:\n    tuple val(meta), path(\"${R1.simpleName}*\"), path(\"${R2.simpleName}*\")   , emit: reads\n    path \"versions.yml\", emit: versions\n\n    script:\n    \"\"\"\n    gunzip -f \"${R1}\"\n    gunzip -f \"${R2}\"\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gunzip: \\$(echo \\$(gunzip --version 2>&1) | sed 's/^.*(gzip) //; s/ Copyright.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "    \"\"\"\n    gunzip -f \"${R1}\"\n    gunzip -f \"${R2}\"\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gunzip: \\$(echo \\$(gunzip --version 2>&1) | sed 's/^.*(gzip) //; s/ Copyright.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "R1",
            "R2"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__airrflow",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img' : 'biocontainers/biocontainers:v1.2.0_cv1' }\""
        ],
        "when": "",
        "stub": ""
    },
    "CHANGEO_PARSEDB_SELECT": {
        "name_process": "CHANGEO_PARSEDB_SELECT",
        "string_process": "process CHANGEO_PARSEDB_SELECT {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::changeo=1.2.0 bioconda::igblast=1.17.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mulled-v2-2665a8a48fa054ad1fcccf53e711669939b3eac1:f479475bceae84156e57e303cfe804ab5629d62b-0' :\n        'quay.io/biocontainers/mulled-v2-2665a8a48fa054ad1fcccf53e711669939b3eac1:f479475bceae84156e57e303cfe804ab5629d62b-0' }\"\n\n    input:\n    tuple val(meta), path(tab)                               \n\n    output:\n    tuple val(meta), path(\"*parse-select.tsv\"), emit: tab                               \n    path(\"*_command_log.txt\"), emit: logs               \n    path \"versions.yml\" , emit: versions\n\n    script:\n    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    if (meta.locus == 'IG'){\n        \"\"\"\n        ParseDb.py select -d $tab $args --outname ${meta.id} > \"${meta.id}_command_log.txt\"\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            igblastn: \\$( igblastn -version | grep -o \"igblast[0-9\\\\. ]\\\\+\" | grep -o \"[0-9\\\\. ]\\\\+\" )\n            changeo: \\$( ParseDb.py --version | awk -F' '  '{print \\$2}' )\n        END_VERSIONS\n        \"\"\"\n    } else if (meta.locus == 'TR'){\n        \"\"\"\n        ParseDb.py select -d $tab $args2 --outname ${meta.id} > \"${meta.id}_command_log.txt\"\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            igblastn: \\$( igblastn -version | grep -o \"igblast[0-9\\\\. ]\\\\+\" | grep -o \"[0-9\\\\. ]\\\\+\" )\n            changeo: \\$( ParseDb.py --version | awk -F' '  '{print \\$2}' )\n        END_VERSIONS\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 40,
        "string_script": "    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    if (meta.locus == 'IG'){\n        \"\"\"\n        ParseDb.py select -d $tab $args --outname ${meta.id} > \"${meta.id}_command_log.txt\"\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            igblastn: \\$( igblastn -version | grep -o \"igblast[0-9\\\\. ]\\\\+\" | grep -o \"[0-9\\\\. ]\\\\+\" )\n            changeo: \\$( ParseDb.py --version | awk -F' '  '{print \\$2}' )\n        END_VERSIONS\n        \"\"\"\n    } else if (meta.locus == 'TR'){\n        \"\"\"\n        ParseDb.py select -d $tab $args2 --outname ${meta.id} > \"${meta.id}_command_log.txt\"\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            igblastn: \\$( igblastn -version | grep -o \"igblast[0-9\\\\. ]\\\\+\" | grep -o \"[0-9\\\\. ]\\\\+\" )\n            changeo: \\$( ParseDb.py --version | awk -F' '  '{print \\$2}' )\n        END_VERSIONS\n        \"\"\"\n    }",
        "nb_lignes_script": 22,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "tab"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__airrflow",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::changeo=1.2.0 bioconda::igblast=1.17.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mulled-v2-2665a8a48fa054ad1fcccf53e711669939b3eac1:f479475bceae84156e57e303cfe804ab5629d62b-0' : 'quay.io/biocontainers/mulled-v2-2665a8a48fa054ad1fcccf53e711669939b3eac1:f479475bceae84156e57e303cfe804ab5629d62b-0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "FASTQC": {
        "name_process": "FASTQC",
        "string_process": "process FASTQC {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::fastqc=0.11.9\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/fastqc:0.11.9--0' :\n        'quay.io/biocontainers/fastqc:0.11.9--0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path(\"*.html\"), emit: html\n    tuple val(meta), path(\"*.zip\") , emit: zip\n    path  \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n                                                                          \n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (meta.single_end) {\n        \"\"\"\n        [ ! -f  ${prefix}.fastq.gz ] && ln -s $reads ${prefix}.fastq.gz\n        fastqc $args --threads $task.cpus ${prefix}.fastq.gz\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            fastqc: \\$( fastqc --version | sed -e \"s/FastQC v//g\" )\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        [ ! -f  ${prefix}_1.fastq.gz ] && ln -s ${reads[0]} ${prefix}_1.fastq.gz\n        [ ! -f  ${prefix}_2.fastq.gz ] && ln -s ${reads[1]} ${prefix}_2.fastq.gz\n        fastqc $args --threads $task.cpus ${prefix}_1.fastq.gz ${prefix}_2.fastq.gz\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            fastqc: \\$( fastqc --version | sed -e \"s/FastQC v//g\" )\n        END_VERSIONS\n        \"\"\"\n    }\n\n    stub:\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.html\n    touch ${prefix}.zip\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        fastqc: \\$( fastqc --version | sed -e \"s/FastQC v//g\" )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 57,
        "string_script": "    def args = task.ext.args ?: ''\n                                                                          \n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (meta.single_end) {\n        \"\"\"\n        [ ! -f  ${prefix}.fastq.gz ] && ln -s $reads ${prefix}.fastq.gz\n        fastqc $args --threads $task.cpus ${prefix}.fastq.gz\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            fastqc: \\$( fastqc --version | sed -e \"s/FastQC v//g\" )\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        [ ! -f  ${prefix}_1.fastq.gz ] && ln -s ${reads[0]} ${prefix}_1.fastq.gz\n        [ ! -f  ${prefix}_2.fastq.gz ] && ln -s ${reads[1]} ${prefix}_2.fastq.gz\n        fastqc $args --threads $task.cpus ${prefix}_1.fastq.gz ${prefix}_2.fastq.gz\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            fastqc: \\$( fastqc --version | sed -e \"s/FastQC v//g\" )\n        END_VERSIONS\n        \"\"\"\n    }",
        "nb_lignes_script": 24,
        "language_script": "bash",
        "tools": [
            "FastQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            }
        ],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__airrflow",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::fastqc=0.11.9\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/fastqc:0.11.9--0' : 'quay.io/biocontainers/fastqc:0.11.9--0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.html\n    touch ${prefix}.zip\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        fastqc: \\$( fastqc --version | sed -e \"s/FastQC v//g\" )\n    END_VERSIONS\n    \"\"\""
    },
    "PRESTO_FILTERSEQ": {
        "name_process": "PRESTO_FILTERSEQ",
        "string_process": "process PRESTO_FILTERSEQ {\n    tag \"$meta.id\"\n    label \"process_medium\"\n\n    conda (params.enable_conda ? \"bioconda::presto=0.7.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/presto:0.7.0--pyhdfd78af_0' :\n        'quay.io/biocontainers/presto:0.7.0--pyhdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(R1), path(R2)\n\n    output:\n    tuple val(meta), path(\"*R1_quality-pass.fastq\"), path(\"*R2_quality-pass.fastq\") ,  emit: reads\n    path \"*_command_log.txt\" , emit: logs\n    path \"versions.yml\" , emit: versions\n    path \"*_R1.log\"\n    path \"*_R2.log\"\n    path \"*.tab\" , emit: log_tab\n\n    script:\n    \"\"\"\n    FilterSeq.py quality -s $R1 -q ${params.filterseq_q} --outname \"${meta.id}_R1\" --log \"${R1.baseName}_R1.log\" --nproc ${task.cpus} > \"${meta.id}_command_log.txt\"\n    FilterSeq.py quality -s $R2 -q ${params.filterseq_q} --outname \"${meta.id}_R2\" --log \"${R2.baseName}_R2.log\" --nproc ${task.cpus} >> \"${meta.id}_command_log.txt\"\n    ParseLog.py -l \"${R1.baseName}_R1.log\" \"${R2.baseName}_R2.log\" -f ID QUALITY\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        presto: \\$( FilterSeq.py --version | awk -F' '  '{print \\$2}' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "    \"\"\"\n    FilterSeq.py quality -s $R1 -q ${params.filterseq_q} --outname \"${meta.id}_R1\" --log \"${R1.baseName}_R1.log\" --nproc ${task.cpus} > \"${meta.id}_command_log.txt\"\n    FilterSeq.py quality -s $R2 -q ${params.filterseq_q} --outname \"${meta.id}_R2\" --log \"${R2.baseName}_R2.log\" --nproc ${task.cpus} >> \"${meta.id}_command_log.txt\"\n    ParseLog.py -l \"${R1.baseName}_R1.log\" \"${R2.baseName}_R2.log\" -f ID QUALITY\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        presto: \\$( FilterSeq.py --version | awk -F' '  '{print \\$2}' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "R1",
            "R2"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__airrflow",
        "directive": [
            "tag \"$meta.id\"",
            "label \"process_medium\"",
            "conda (params.enable_conda ? \"bioconda::presto=0.7.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/presto:0.7.0--pyhdfd78af_0' : 'quay.io/biocontainers/presto:0.7.0--pyhdfd78af_0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "PRESTO_PARSEHEADERS_PRIMERS": {
        "name_process": "PRESTO_PARSEHEADERS_PRIMERS",
        "string_process": "process PRESTO_PARSEHEADERS_PRIMERS {\n    tag \"$meta.id\"\n    label \"process_low\"\n\n    conda (params.enable_conda ? \"bioconda::presto=0.7.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/presto:0.7.0--pyhdfd78af_0' :\n        'quay.io/biocontainers/presto:0.7.0--pyhdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path(\"*_reheader-pass.fastq\"), emit: reads\n    path \"versions.yml\" , emit: versions\n\n    script:\n    def args = task.ext.args ?: ''\n    if (params.cprimer_position == \"R1\") {\n        \"\"\"\n        ParseHeaders.py copy -s $reads -o \"${reads.baseName}_reheader-pass.fastq\" -f $args --act first last -k C_PRIMER V_PRIMER\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            presto: \\$( ParseHeaders.py --version | awk -F' '  '{print \\$2}' )\n        END_VERSIONS\n        \"\"\"\n    } else if (params.cprimer_position == \"R2\") {\n        \"\"\"\n        ParseHeaders.py copy -s $reads -o \"${reads.baseName}_reheader-pass.fastq\" -f $args --act first last -k V_PRIMER C_PRIMER\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            presto: \\$( ParseHeaders.py --version | awk -F' '  '{print \\$2}' )\n        END_VERSIONS\n        \"\"\"\n    }\n\n}",
        "nb_lignes_process": 37,
        "string_script": "    def args = task.ext.args ?: ''\n    if (params.cprimer_position == \"R1\") {\n        \"\"\"\n        ParseHeaders.py copy -s $reads -o \"${reads.baseName}_reheader-pass.fastq\" -f $args --act first last -k C_PRIMER V_PRIMER\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            presto: \\$( ParseHeaders.py --version | awk -F' '  '{print \\$2}' )\n        END_VERSIONS\n        \"\"\"\n    } else if (params.cprimer_position == \"R2\") {\n        \"\"\"\n        ParseHeaders.py copy -s $reads -o \"${reads.baseName}_reheader-pass.fastq\" -f $args --act first last -k V_PRIMER C_PRIMER\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            presto: \\$( ParseHeaders.py --version | awk -F' '  '{print \\$2}' )\n        END_VERSIONS\n        \"\"\"\n    }",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__airrflow",
        "directive": [
            "tag \"$meta.id\"",
            "label \"process_low\"",
            "conda (params.enable_conda ? \"bioconda::presto=0.7.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/presto:0.7.0--pyhdfd78af_0' : 'quay.io/biocontainers/presto:0.7.0--pyhdfd78af_0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "PRESTO_ASSEMBLEPAIRS": {
        "name_process": "PRESTO_ASSEMBLEPAIRS",
        "string_process": "process PRESTO_ASSEMBLEPAIRS {\n    tag \"$meta.id\"\n    label 'process_long_parallelized'\n\n    conda (params.enable_conda ? \"bioconda::presto=0.7.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/presto:0.7.0--pyhdfd78af_0' :\n        'quay.io/biocontainers/presto:0.7.0--pyhdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(R1), path(R2)\n\n    output:\n    tuple val(meta), path(\"*_assemble-pass.fastq\"), emit: reads\n    path(\"*_command_log.txt\"), emit: logs\n    path(\"*.log\")\n    path(\"*_table.tab\")\n    path \"versions.yml\" , emit: versions\n\n    script:\n    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    \"\"\"\n    AssemblePairs.py align -1 $R1 -2 $R2 --nproc ${task.cpus} \\\\\n        $args \\\\\n        --outname ${meta.id} --log ${meta.id}.log > ${meta.id}_command_log.txt\n    ParseLog.py -l \"${meta.id}.log\" $args2\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        presto: \\$( AssemblePairs.py --version | awk -F' '  '{print \\$2}' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    \"\"\"\n    AssemblePairs.py align -1 $R1 -2 $R2 --nproc ${task.cpus} \\\\\n        $args \\\\\n        --outname ${meta.id} --log ${meta.id}.log > ${meta.id}_command_log.txt\n    ParseLog.py -l \"${meta.id}.log\" $args2\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        presto: \\$( AssemblePairs.py --version | awk -F' '  '{print \\$2}' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "R1",
            "R2"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__airrflow",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_long_parallelized'",
            "conda (params.enable_conda ? \"bioconda::presto=0.7.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/presto:0.7.0--pyhdfd78af_0' : 'quay.io/biocontainers/presto:0.7.0--pyhdfd78af_0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "SAMPLESHEET_CHECK": {
        "name_process": "SAMPLESHEET_CHECK",
        "string_process": "process SAMPLESHEET_CHECK {\n    tag \"$samplesheet\"\n    label 'single_cpu'\n\n    conda (params.enable_conda ? \"conda-forge::pandas=1.1.5\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/pandas:1.1.5' :\n        'quay.io/biocontainers/pandas:1.1.5' }\"\n\n    input:\n    path samplesheet\n\n    output:\n    path '*.tsv', emit: tsv\n    path \"versions.yml\", emit: versions\n\n    script:                                                                         \n    \"\"\"\n    check_samplesheet.py $samplesheet\n    cp $samplesheet samplesheet.valid.tsv\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        python: \\$( echo \\$(python --version | grep -o \"[0-9\\\\. ]\\\\+\") )\n        pandas: \\$(echo \\$(python -c \"import pkg_resources; print(pkg_resources.get_distribution('pandas').version)\"))\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "    \"\"\"\n    check_samplesheet.py $samplesheet\n    cp $samplesheet samplesheet.valid.tsv\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        python: \\$( echo \\$(python --version | grep -o \"[0-9\\\\. ]\\\\+\") )\n        pandas: \\$(echo \\$(python -c \"import pkg_resources; print(pkg_resources.get_distribution('pandas').version)\"))\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "samplesheet"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__airrflow",
        "directive": [
            "tag \"$samplesheet\"",
            "label 'single_cpu'",
            "conda (params.enable_conda ? \"conda-forge::pandas=1.1.5\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/pandas:1.1.5' : 'quay.io/biocontainers/pandas:1.1.5' }\""
        ],
        "when": "",
        "stub": ""
    },
    "CHANGEO_ASSIGNGENES": {
        "name_process": "CHANGEO_ASSIGNGENES",
        "string_process": "process CHANGEO_ASSIGNGENES {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::changeo=1.2.0 bioconda::igblast=1.17.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mulled-v2-2665a8a48fa054ad1fcccf53e711669939b3eac1:f479475bceae84156e57e303cfe804ab5629d62b-0' :\n        'quay.io/biocontainers/mulled-v2-2665a8a48fa054ad1fcccf53e711669939b3eac1:f479475bceae84156e57e303cfe804ab5629d62b-0' }\"\n\n    input:\n    tuple val(meta), path(reads)                         \n    path(igblast)                 \n\n    output:\n    path(\"*igblast.fmt7\"), emit: blast\n    tuple val(meta), path(\"$reads\"), emit: fasta\n    path \"versions.yml\" , emit: versions\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    AssignGenes.py igblast -s $reads -b $igblast --organism $meta.species --loci ${meta.locus.toLowerCase()} $args --nproc $task.cpus --outname \"$meta.id\"\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        igblastn: \\$( igblastn -version | grep -o \"igblast[0-9\\\\. ]\\\\+\" | grep -o \"[0-9\\\\. ]\\\\+\" )\n        changeo: \\$( AssignGenes.py --version | awk -F' '  '{print \\$2}' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    AssignGenes.py igblast -s $reads -b $igblast --organism $meta.species --loci ${meta.locus.toLowerCase()} $args --nproc $task.cpus --outname \"$meta.id\"\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        igblastn: \\$( igblastn -version | grep -o \"igblast[0-9\\\\. ]\\\\+\" | grep -o \"[0-9\\\\. ]\\\\+\" )\n        changeo: \\$( AssignGenes.py --version | awk -F' '  '{print \\$2}' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "reads",
            "igblast"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__airrflow",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::changeo=1.2.0 bioconda::igblast=1.17.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mulled-v2-2665a8a48fa054ad1fcccf53e711669939b3eac1:f479475bceae84156e57e303cfe804ab5629d62b-0' : 'quay.io/biocontainers/mulled-v2-2665a8a48fa054ad1fcccf53e711669939b3eac1:f479475bceae84156e57e303cfe804ab5629d62b-0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "PRESTO_PARSEHEADERS": {
        "name_process": "PRESTO_PARSEHEADERS",
        "string_process": "process PRESTO_PARSEHEADERS {\n    tag \"$meta.id\"\n    label \"process_low\"\n\n    conda (params.enable_conda ? \"bioconda::presto=0.7.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/presto:0.7.0--pyhdfd78af_0' :\n        'quay.io/biocontainers/presto:0.7.0--pyhdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path(\"*_reheader-pass.fastq\"), emit: reads\n    path \"versions.yml\" , emit: versions\n\n    script:\n    def subcommand = task.ext.subcommand?: ''\n    def args = task.ext.args?: ''\n    \"\"\"\n    ParseHeaders.py $subcommand -s $reads -o \"${reads.baseName}_reheader-pass.fastq\" $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        presto: \\$( ParseHeaders.py --version | awk -F' '  '{print \\$2}' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "    def subcommand = task.ext.subcommand?: ''\n    def args = task.ext.args?: ''\n    \"\"\"\n    ParseHeaders.py $subcommand -s $reads -o \"${reads.baseName}_reheader-pass.fastq\" $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        presto: \\$( ParseHeaders.py --version | awk -F' '  '{print \\$2}' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__airrflow",
        "directive": [
            "tag \"$meta.id\"",
            "label \"process_low\"",
            "conda (params.enable_conda ? \"bioconda::presto=0.7.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/presto:0.7.0--pyhdfd78af_0' : 'quay.io/biocontainers/presto:0.7.0--pyhdfd78af_0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "PARSE_LOGS": {
        "name_process": "PARSE_LOGS",
        "string_process": "\nprocess PARSE_LOGS {\n    tag \"logs\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::pandas=1.1.5\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/pandas:1.1.5' :\n        'quay.io/biocontainers/pandas:1.1.5' }\"\n\n    input:\n    path('filter_by_sequence_quality/*')                        \n    path('mask_primers/*')                          \n    path('pair_sequences/*')                      \n    path('cluster_sets/*')                          \n    path('build_consensus/*')                             \n    path('repair_mates/*')                                   \n    path('assemble_pairs/*')                            \n    path('deduplicates/*')                          \n    path('filter_representative_2/*')                       \n    path('igblast/*')                              \n    path('define_clones/*')                            \n    path('create_germlines/*')                               \n    path('metadata.tsv')           \n\n    output:\n    path \"Table_sequences_process.tsv\", emit: logs\n    path \"Table*.tsv\", emit:tables\n    path \"versions.yml\" , emit: versions\n\n    script:\n    if (params.umi_length == 0) {\n        \"\"\"\n        log_parsing_no-umi.py\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            python: \\$( echo \\$(python --version | grep -o \"[0-9\\\\. ]\\\\+\") )\n            pandas: \\$(echo \\$(python -c \"import pkg_resources; print(pkg_resources.get_distribution('pandas').version)\"))\n        END_VERSIONS\n        \"\"\"\n    } else {\n        def clustersets = params.cluster_sets? \"--cluster_sets\":\"\"\n        \"\"\"\n        log_parsing.py $clustersets\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            python: \\$( echo \\$(python --version | grep -o \"[0-9\\\\. ]\\\\+\") )\n            pandas: \\$(echo \\$(python -c \"import pkg_resources; print(pkg_resources.get_distribution('pandas').version)\"))\n        END_VERSIONS\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 52,
        "string_script": "    if (params.umi_length == 0) {\n        \"\"\"\n        log_parsing_no-umi.py\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            python: \\$( echo \\$(python --version | grep -o \"[0-9\\\\. ]\\\\+\") )\n            pandas: \\$(echo \\$(python -c \"import pkg_resources; print(pkg_resources.get_distribution('pandas').version)\"))\n        END_VERSIONS\n        \"\"\"\n    } else {\n        def clustersets = params.cluster_sets? \"--cluster_sets\":\"\"\n        \"\"\"\n        log_parsing.py $clustersets\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            python: \\$( echo \\$(python --version | grep -o \"[0-9\\\\. ]\\\\+\") )\n            pandas: \\$(echo \\$(python -c \"import pkg_resources; print(pkg_resources.get_distribution('pandas').version)\"))\n        END_VERSIONS\n        \"\"\"\n    }",
        "nb_lignes_script": 21,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__airrflow",
        "directive": [
            "tag \"logs\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::pandas=1.1.5\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/pandas:1.1.5' : 'quay.io/biocontainers/pandas:1.1.5' }\""
        ],
        "when": "",
        "stub": ""
    },
    "MULTIQC": {
        "name_process": "MULTIQC",
        "string_process": "process MULTIQC {\n    label 'process_medium'\n\n    conda (params.enable_conda ? 'bioconda::multiqc=1.12' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/multiqc:1.12--pyhdfd78af_0' :\n        'quay.io/biocontainers/multiqc:1.12--pyhdfd78af_0' }\"\n\n    input:\n    path multiqc_files\n\n    output:\n    path \"*multiqc_report.html\", emit: report\n    path \"*_data\"              , emit: data\n    path \"*_plots\"             , optional:true, emit: plots\n    path \"versions.yml\"        , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    multiqc -f $args .\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        multiqc: \\$( multiqc --version | sed -e \"s/multiqc, version //g\" )\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    \"\"\"\n    touch multiqc_data\n    touch multiqc_plots\n    touch multiqc_report.html\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        multiqc: \\$( multiqc --version | sed -e \"s/multiqc, version //g\" )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 41,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    multiqc -f $args .\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        multiqc: \\$( multiqc --version | sed -e \"s/multiqc, version //g\" )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "MultiQC"
        ],
        "tools_url": [
            "https://bio.tools/multiqc"
        ],
        "tools_dico": [
            {
                "name": "MultiQC",
                "uri": "https://bio.tools/multiqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "MultiQC aggregates results from multiple bioinformatics analyses across many samples into a single report. It searches a given directory for analysis logs and compiles a HTML report. It's a general use tool, perfect for summarising the output from numerous bioinformatics tools.",
                "homepage": "http://multiqc.info/"
            }
        ],
        "inputs": [
            "multiqc_files"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__airrflow",
        "directive": [
            "label 'process_medium'",
            "conda (params.enable_conda ? 'bioconda::multiqc=1.12' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/multiqc:1.12--pyhdfd78af_0' : 'quay.io/biocontainers/multiqc:1.12--pyhdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    \"\"\"\n    touch multiqc_data\n    touch multiqc_plots\n    touch multiqc_report.html\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        multiqc: \\$( multiqc --version | sed -e \"s/multiqc, version //g\" )\n    END_VERSIONS\n    \"\"\""
    },
    "CHANGEO_DEFINECLONES": {
        "name_process": "CHANGEO_DEFINECLONES",
        "string_process": "process CHANGEO_DEFINECLONES {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::changeo=1.2.0 bioconda::igblast=1.17.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mulled-v2-2665a8a48fa054ad1fcccf53e711669939b3eac1:f479475bceae84156e57e303cfe804ab5629d62b-0' :\n        'quay.io/biocontainers/mulled-v2-2665a8a48fa054ad1fcccf53e711669939b3eac1:f479475bceae84156e57e303cfe804ab5629d62b-0' }\"\n\n    input:\n    tuple val(meta), path(tab)                                     \n    val(threshold)                  \n\n    output:\n    tuple val(meta), path(\"*clone-pass.tsv\"), emit: tab                                     \n    path \"*_command_log.txt\" , emit: logs\n    path \"versions.yml\" , emit: versions\n\n    script:\n    if (params.set_cluster_threshold) {\n        thr = params.cluster_threshold\n    } else {\n        thr = file(threshold).text\n        thr = thr.trim()\n    }\n    \"\"\"\n    DefineClones.py -d $tab --act set --model ham --norm len --nproc $task.cpus --dist $thr --outname ${meta.id} --log ${meta.id}.log > \"${meta.id}_command_log.txt\"\n    ParseLog.py -l \"${meta.id}.log\" -f id v_call j_call junction_length cloned filtered clones\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        igblastn: \\$( igblastn -version | grep -o \"igblast[0-9\\\\. ]\\\\+\" | grep -o \"[0-9\\\\. ]\\\\+\" )\n        changeo: \\$( DefineClones.py --version | awk -F' '  '{print \\$2}' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    if (params.set_cluster_threshold) {\n        thr = params.cluster_threshold\n    } else {\n        thr = file(threshold).text\n        thr = thr.trim()\n    }\n    \"\"\"\n    DefineClones.py -d $tab --act set --model ham --norm len --nproc $task.cpus --dist $thr --outname ${meta.id} --log ${meta.id}.log > \"${meta.id}_command_log.txt\"\n    ParseLog.py -l \"${meta.id}.log\" -f id v_call j_call junction_length cloned filtered clones\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        igblastn: \\$( igblastn -version | grep -o \"igblast[0-9\\\\. ]\\\\+\" | grep -o \"[0-9\\\\. ]\\\\+\" )\n        changeo: \\$( DefineClones.py --version | awk -F' '  '{print \\$2}' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [
            "Thrive"
        ],
        "tools_url": [
            "https://bio.tools/Thrive"
        ],
        "tools_dico": [
            {
                "name": "Thrive",
                "uri": "https://bio.tools/Thrive",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3418",
                            "term": "Paediatrics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3418",
                            "term": "Child health"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3418",
                            "term": "https://en.wikipedia.org/wiki/Pediatrics"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A Novel Health Education Mobile Application for Mothers Who Have Experienced Intimate Partner Violence.\n\nIntimate partner violence (IPV) has well-documented adverse impact on survivors and their children. In this article, we describe the development and formative evaluation of a trauma-informed, user-friendly Smartphone-based mobile application (app) to address the unmet health needs and improve the well-being of mothers who have experienced IPV. A multidisciplinary team of IPV experts developed the app (called Thrive) in partnership with software developers. Thrive includes three sections: Myself (maternal self-care, stress coping skills), My Child (stress signs in children, talking to children about IPV, mother-child dyadic communication), and My Life (hospital- and community-based resources). Sixteen providers (social workers, IPV advocates, and health care providers) and eight IPV survivors provided feedback about Thrive via structured interviews.\n\n||| HOMEPAGE MISSING!",
                "homepage": "https://www.ncbi.nlm.nih.gov/pubmed/?term=31874566"
            }
        ],
        "inputs": [
            "meta",
            "tab",
            "threshold"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__airrflow",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::changeo=1.2.0 bioconda::igblast=1.17.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mulled-v2-2665a8a48fa054ad1fcccf53e711669939b3eac1:f479475bceae84156e57e303cfe804ab5629d62b-0' : 'quay.io/biocontainers/mulled-v2-2665a8a48fa054ad1fcccf53e711669939b3eac1:f479475bceae84156e57e303cfe804ab5629d62b-0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "PRESTO_PARSE_CLUSTER": {
        "name_process": "PRESTO_PARSE_CLUSTER",
        "string_process": "process PRESTO_PARSE_CLUSTER {\n    tag \"$meta.id\"\n    label \"process_low\"\n\n    conda (params.enable_conda ? \"bioconda::presto=0.7.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/presto:0.7.0--pyhdfd78af_0' :\n        'quay.io/biocontainers/presto:0.7.0--pyhdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(R1), path(R2)\n\n    output:\n    tuple val(meta), path(\"*R1_cluster-pass_reheader.fastq\"), path(\"*R2_cluster-pass_reheader.fastq\"), emit: reads\n    path(\"*_log.txt\"), emit: logs\n    path \"versions.yml\" , emit: versions\n\n\n    script:\n    \"\"\"\n    ParseHeaders.py copy -s $R1 -f BARCODE -k CLUSTER --act cat > \"${meta.id}_command_log.txt\"\n    ParseHeaders.py copy -s $R2 -f BARCODE -k CLUSTER --act cat >> \"${meta.id}_command_log.txt\"\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        presto: \\$( ParseHeaders.py --version | awk -F' '  '{print \\$2}' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "    \"\"\"\n    ParseHeaders.py copy -s $R1 -f BARCODE -k CLUSTER --act cat > \"${meta.id}_command_log.txt\"\n    ParseHeaders.py copy -s $R2 -f BARCODE -k CLUSTER --act cat >> \"${meta.id}_command_log.txt\"\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        presto: \\$( ParseHeaders.py --version | awk -F' '  '{print \\$2}' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "R1",
            "R2"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__airrflow",
        "directive": [
            "tag \"$meta.id\"",
            "label \"process_low\"",
            "conda (params.enable_conda ? \"bioconda::presto=0.7.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/presto:0.7.0--pyhdfd78af_0' : 'quay.io/biocontainers/presto:0.7.0--pyhdfd78af_0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "PRESTO_COLLAPSESEQ": {
        "name_process": "PRESTO_COLLAPSESEQ",
        "string_process": "process PRESTO_COLLAPSESEQ {\n    tag \"$meta.id\"\n    label \"process_medium\"\n\n    conda (params.enable_conda ? \"bioconda::presto=0.7.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/presto:0.7.0--pyhdfd78af_0' :\n        'quay.io/biocontainers/presto:0.7.0--pyhdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path(\"*_collapse-unique.fastq\") , emit: reads\n    path(\"*_command_log.txt\") , emit: logs\n    path(\"*.log\")\n    path(\"*_table.tab\")\n    path(\"versions.yml\"), emit: versions\n\n\n\n    script:\n    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    \"\"\"\n    CollapseSeq.py -s $reads $args --outname ${meta.id} --log ${meta.id}.log > \"${meta.id}_command_log.txt\"\n    ParseLog.py -l \"${meta.id}.log\" $args2\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        presto: \\$( CollapseSeq.py --version | awk -F' '  '{print \\$2}' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    \"\"\"\n    CollapseSeq.py -s $reads $args --outname ${meta.id} --log ${meta.id}.log > \"${meta.id}_command_log.txt\"\n    ParseLog.py -l \"${meta.id}.log\" $args2\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        presto: \\$( CollapseSeq.py --version | awk -F' '  '{print \\$2}' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__airrflow",
        "directive": [
            "tag \"$meta.id\"",
            "label \"process_medium\"",
            "conda (params.enable_conda ? \"bioconda::presto=0.7.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/presto:0.7.0--pyhdfd78af_0' : 'quay.io/biocontainers/presto:0.7.0--pyhdfd78af_0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "PRESTO_BUILDCONSENSUS": {
        "name_process": "PRESTO_BUILDCONSENSUS",
        "string_process": "process PRESTO_BUILDCONSENSUS {\n    tag \"$meta.id\"\n    label \"process_long_parallelized\"\n\n    conda (params.enable_conda ? \"bioconda::presto=0.7.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/presto:0.7.0--pyhdfd78af_0' :\n        'quay.io/biocontainers/presto:0.7.0--pyhdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(R1), path(R2)\n\n    output:\n    tuple val(meta), path(\"*_R1_consensus-pass.fastq\"), path(\"*_R2_consensus-pass.fastq\"), emit: reads\n    path(\"*_command_log.txt\"), emit: logs\n    path(\"*_R1.log\")\n    path(\"*_R2.log\")\n    path(\"*.tab\"), emit: log_tab\n    path \"versions.yml\" , emit: versions\n\n    script:\n    def barcode_field = params.cluster_sets ? \"CLUSTER\" : \"BARCODE\"\n    \"\"\"\n    BuildConsensus.py -s $R1 --bf ${barcode_field} --nproc ${task.cpus} --pf PRIMER --prcons $params.primer_consensus --maxerror $params.buildconsensus_maxerror --maxgap $params.buildconsensus_maxgap --outname ${meta.id}_R1 --log ${meta.id}_R1.log > \"${meta.id}_command_log.txt\"\n    BuildConsensus.py -s $R2 --bf ${barcode_field} --nproc ${task.cpus} --pf PRIMER --prcons $params.primer_consensus --maxerror $params.buildconsensus_maxerror --maxgap $params.buildconsensus_maxgap --outname ${meta.id}_R2 --log ${meta.id}_R2.log >> \"${meta.id}_command_log.txt\"\n    ParseLog.py -l \"${meta.id}_R1.log\" \"${meta.id}_R2.log\" -f ID BARCODE SEQCOUNT PRIMER PRCOUNT PRCONS PRFREQ CONSCOUNT\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        presto: \\$( BuildConsensus.py --version | awk -F' '  '{print \\$2}' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "    def barcode_field = params.cluster_sets ? \"CLUSTER\" : \"BARCODE\"\n    \"\"\"\n    BuildConsensus.py -s $R1 --bf ${barcode_field} --nproc ${task.cpus} --pf PRIMER --prcons $params.primer_consensus --maxerror $params.buildconsensus_maxerror --maxgap $params.buildconsensus_maxgap --outname ${meta.id}_R1 --log ${meta.id}_R1.log > \"${meta.id}_command_log.txt\"\n    BuildConsensus.py -s $R2 --bf ${barcode_field} --nproc ${task.cpus} --pf PRIMER --prcons $params.primer_consensus --maxerror $params.buildconsensus_maxerror --maxgap $params.buildconsensus_maxgap --outname ${meta.id}_R2 --log ${meta.id}_R2.log >> \"${meta.id}_command_log.txt\"\n    ParseLog.py -l \"${meta.id}_R1.log\" \"${meta.id}_R2.log\" -f ID BARCODE SEQCOUNT PRIMER PRCOUNT PRCONS PRFREQ CONSCOUNT\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        presto: \\$( BuildConsensus.py --version | awk -F' '  '{print \\$2}' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "R1",
            "R2"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__airrflow",
        "directive": [
            "tag \"$meta.id\"",
            "label \"process_long_parallelized\"",
            "conda (params.enable_conda ? \"bioconda::presto=0.7.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/presto:0.7.0--pyhdfd78af_0' : 'quay.io/biocontainers/presto:0.7.0--pyhdfd78af_0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "CHANGEO_BUILDTREES": {
        "name_process": "CHANGEO_BUILDTREES",
        "string_process": "process CHANGEO_BUILDTREES {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"conda-forge::r-base=4.1.2 bioconda:r-alakazam=1.2.0 bioconda::changeo=1.2.0 bioconda::igphyml=1.1.3\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mulled-v2-d432bd3f78aaba1be2f7eb105c18998acb64d739:2c83ca89e577c8839f746f0fe4a6c63ef5984b99-0' :\n        'quay.io/biocontainers/mulled-v2-d432bd3f78aaba1be2f7eb105c18998acb64d739:2c83ca89e577c8839f746f0fe4a6c63ef5984b99-0' }\"\n\n    input:\n    tuple val(meta), path(tab)                                     \n\n    output:\n    tuple val(meta), path(\"*_lineages.tsv\")\n    path \"versions.yml\" , emit: versions\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    BuildTrees.py -d ${tab} --outname ${meta.id} --log ${meta.id}.log --nproc $task.cpus $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        R: \\$(echo \\$(R --version 2>&1) | awk -F' '  '{print \\$3}')\n        alakazam: \\$(Rscript -e \"library(alakazam); cat(paste(packageVersion('alakazam'), collapse='.'))\")\n        changeo: \\$(AssignGenes.py --version | awk -F' '  '{print \\$2}')\n        igphyml: \\$(igphyml --version | grep -o \"IgPhyML [0-9\\\\. ]\\\\+\" | grep -o \"[0-9\\\\. ]\\\\+\")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    BuildTrees.py -d ${tab} --outname ${meta.id} --log ${meta.id}.log --nproc $task.cpus $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        R: \\$(echo \\$(R --version 2>&1) | awk -F' '  '{print \\$3}')\n        alakazam: \\$(Rscript -e \"library(alakazam); cat(paste(packageVersion('alakazam'), collapse='.'))\")\n        changeo: \\$(AssignGenes.py --version | awk -F' '  '{print \\$2}')\n        igphyml: \\$(igphyml --version | grep -o \"IgPhyML [0-9\\\\. ]\\\\+\" | grep -o \"[0-9\\\\. ]\\\\+\")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "tab"
        ],
        "nb_inputs": 2,
        "outputs": [
            "meta"
        ],
        "nb_outputs": 1,
        "name_workflow": "nf-core__airrflow",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"conda-forge::r-base=4.1.2 bioconda:r-alakazam=1.2.0 bioconda::changeo=1.2.0 bioconda::igphyml=1.1.3\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mulled-v2-d432bd3f78aaba1be2f7eb105c18998acb64d739:2c83ca89e577c8839f746f0fe4a6c63ef5984b99-0' : 'quay.io/biocontainers/mulled-v2-d432bd3f78aaba1be2f7eb105c18998acb64d739:2c83ca89e577c8839f746f0fe4a6c63ef5984b99-0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "CHANGEO_MAKEDB": {
        "name_process": "CHANGEO_MAKEDB",
        "string_process": "process CHANGEO_MAKEDB {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::changeo=1.2.0 bioconda::igblast=1.17.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mulled-v2-2665a8a48fa054ad1fcccf53e711669939b3eac1:f479475bceae84156e57e303cfe804ab5629d62b-0' :\n        'quay.io/biocontainers/mulled-v2-2665a8a48fa054ad1fcccf53e711669939b3eac1:f479475bceae84156e57e303cfe804ab5629d62b-0' }\"\n\n\n    input:\n    tuple val(meta), path(reads)                         \n    path(igblast)                                                                                                             \n    path(imgt_base)\n\n    output:\n    tuple val(meta), path(\"*db-pass.tsv\"), emit: tab                                \n    path(\"*_command_log.txt\"), emit: logs               \n    path \"versions.yml\" , emit: versions\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    MakeDb.py igblast -i $igblast -s $reads -r \\\\\n    ${imgt_base}/${meta.species.toLowerCase()}/vdj/ \\\\\n    $args \\\\\n    --outname \"${meta.id}\" > \"${meta.id}_command_log.txt\"\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        igblastn: \\$( igblastn -version | grep -o \"igblast[0-9\\\\. ]\\\\+\" | grep -o \"[0-9\\\\. ]\\\\+\" )\n        changeo: \\$( MakeDb.py --version | awk -F' '  '{print \\$2}' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    MakeDb.py igblast -i $igblast -s $reads -r \\\\\n    ${imgt_base}/${meta.species.toLowerCase()}/vdj/ \\\\\n    $args \\\\\n    --outname \"${meta.id}\" > \"${meta.id}_command_log.txt\"\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        igblastn: \\$( igblastn -version | grep -o \"igblast[0-9\\\\. ]\\\\+\" | grep -o \"[0-9\\\\. ]\\\\+\" )\n        changeo: \\$( MakeDb.py --version | awk -F' '  '{print \\$2}' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [
            "VDJdb"
        ],
        "tools_url": [
            "https://bio.tools/VDJdb"
        ],
        "tools_dico": [
            {
                "name": "VDJdb",
                "uri": "https://bio.tools/VDJdb",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0219",
                            "term": "Data submission, annotation and curation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2830",
                            "term": "Immunoproteins and antigens"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0160",
                            "term": "Sequence sites, features and motifs"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0416",
                                    "term": "Epitope mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0224",
                                    "term": "Query and retrieval"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0238",
                                    "term": "Sequence motif discovery"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0416",
                                    "term": "Antibody epitope prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0416",
                                    "term": "Epitope prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0224",
                                    "term": "Database retrieval"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0238",
                                    "term": "Motif discovery"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "VDJdb is a database extension, new analysis infrastructure and a T-cell receptor motif compendium.",
                "homepage": "https://vdjdb.cdr3.net"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "igblast",
            "imgt_base"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__airrflow",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::changeo=1.2.0 bioconda::igblast=1.17.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mulled-v2-2665a8a48fa054ad1fcccf53e711669939b3eac1:f479475bceae84156e57e303cfe804ab5629d62b-0' : 'quay.io/biocontainers/mulled-v2-2665a8a48fa054ad1fcccf53e711669939b3eac1:f479475bceae84156e57e303cfe804ab5629d62b-0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "MERGE_UMI": {
        "name_process": "MERGE_UMI",
        "string_process": "\nprocess MERGE_UMI {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"conda-forge::python=3.8.0 conda-forge::biopython=1.74\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mulled-v2-adc9bb9edc31eb38b3c24786a83b7dfa530e2bea:47d6d7765d7537847ced7dac873190d164146022-0' :\n        'quay.io/biocontainers/mulled-v2-adc9bb9edc31eb38b3c24786a83b7dfa530e2bea:47d6d7765d7537847ced7dac873190d164146022-0' }\"\n\n    input:\n    tuple val(meta), path(R1), path(R2), path(I1)\n\n    output:\n    tuple val(meta), path('*_R1.fastq.gz'), path('*_R2.fastq.gz')   , emit: reads\n    path \"versions.yml\" , emit: versions\n\n    script:\n    \"\"\"\n    merge_R1_umi.py -R1 \"${R1}\" -I1 \"${I1}\" -o UMI_R1.fastq.gz --umi_start $params.umi_start --umi_length $params.umi_length\n    mv \"UMI_R1.fastq.gz\" \"${meta.id}_UMI_R1.fastq.gz\"\n    mv \"${R2}\" \"${meta.id}_R2.fastq.gz\"\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        python: \\$( echo \\$(python --version | grep -o \"[0-9\\\\. ]\\\\+\") )\n        biopython: \\$(echo \\$(python -c \"import pkg_resources; print(pkg_resources.get_distribution('biopython').version)\"))\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "    \"\"\"\n    merge_R1_umi.py -R1 \"${R1}\" -I1 \"${I1}\" -o UMI_R1.fastq.gz --umi_start $params.umi_start --umi_length $params.umi_length\n    mv \"UMI_R1.fastq.gz\" \"${meta.id}_UMI_R1.fastq.gz\"\n    mv \"${R2}\" \"${meta.id}_R2.fastq.gz\"\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        python: \\$( echo \\$(python --version | grep -o \"[0-9\\\\. ]\\\\+\") )\n        biopython: \\$(echo \\$(python -c \"import pkg_resources; print(pkg_resources.get_distribution('biopython').version)\"))\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "R1",
            "R2",
            "I1"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__airrflow",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"conda-forge::python=3.8.0 conda-forge::biopython=1.74\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mulled-v2-adc9bb9edc31eb38b3c24786a83b7dfa530e2bea:47d6d7765d7537847ced7dac873190d164146022-0' : 'quay.io/biocontainers/mulled-v2-adc9bb9edc31eb38b3c24786a83b7dfa530e2bea:47d6d7765d7537847ced7dac873190d164146022-0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "PRESTO_POSTCONSENSUS_PAIRSEQ": {
        "name_process": "PRESTO_POSTCONSENSUS_PAIRSEQ",
        "string_process": "process PRESTO_POSTCONSENSUS_PAIRSEQ {\n    tag \"$meta.id\"\n    label \"process_low\"\n\n    conda (params.enable_conda ? \"bioconda::presto=0.7.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/presto:0.7.0--pyhdfd78af_0' :\n        'quay.io/biocontainers/presto:0.7.0--pyhdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(\"${meta.id}_R1.fastq\"), path(\"${meta.id}_R2.fastq\")\n\n    output:\n    tuple val(meta), path(\"*R1_pair-pass.fastq\"), path(\"*R2_pair-pass.fastq\") , emit: reads\n    path \"*_command_log.txt\", emit: logs\n    path \"versions.yml\" , emit: versions\n\n    script:\n    \"\"\"\n    PairSeq.py -1 '${meta.id}_R1.fastq' -2 '${meta.id}_R2.fastq' --coord presto > \"${meta.id}_command_log.txt\"\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        presto: \\$( PairSeq.py --version | awk -F' '  '{print \\$2}' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "    \"\"\"\n    PairSeq.py -1 '${meta.id}_R1.fastq' -2 '${meta.id}_R2.fastq' --coord presto > \"${meta.id}_command_log.txt\"\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        presto: \\$( PairSeq.py --version | awk -F' '  '{print \\$2}' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__airrflow",
        "directive": [
            "tag \"$meta.id\"",
            "label \"process_low\"",
            "conda (params.enable_conda ? \"bioconda::presto=0.7.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/presto:0.7.0--pyhdfd78af_0' : 'quay.io/biocontainers/presto:0.7.0--pyhdfd78af_0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "PRESTO_SPLITSEQ": {
        "name_process": "PRESTO_SPLITSEQ",
        "string_process": "process PRESTO_SPLITSEQ {\n    tag \"$meta.id\"\n    label \"process_low\"\n\n    conda (params.enable_conda ? \"bioconda::presto=0.7.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/presto:0.7.0--pyhdfd78af_0' :\n        'quay.io/biocontainers/presto:0.7.0--pyhdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path(\"*_atleast-2.fasta\"), emit: fasta\n    path(\"*_command_log.txt\"), emit: logs\n    path \"versions.yml\" , emit: versions\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    SplitSeq.py group -s $reads \\\\\n    $args \\\\\n    --outname ${meta.id} \\\\\n    --fasta > \"${meta.id}_command_log.txt\"\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        presto: \\$( SplitSeq.py --version | awk -F' '  '{print \\$2}' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    SplitSeq.py group -s $reads \\\\\n    $args \\\\\n    --outname ${meta.id} \\\\\n    --fasta > \"${meta.id}_command_log.txt\"\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        presto: \\$( SplitSeq.py --version | awk -F' '  '{print \\$2}' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__airrflow",
        "directive": [
            "tag \"$meta.id\"",
            "label \"process_low\"",
            "conda (params.enable_conda ? \"bioconda::presto=0.7.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/presto:0.7.0--pyhdfd78af_0' : 'quay.io/biocontainers/presto:0.7.0--pyhdfd78af_0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "ALAKAZAM_SHAZAM_REPERTOIRES": {
        "name_process": "ALAKAZAM_SHAZAM_REPERTOIRES",
        "string_process": "process ALAKAZAM_SHAZAM_REPERTOIRES {\n    tag \"report\"\n    label 'process_high'\n\n    conda (params.enable_conda ? \"conda-forge::r-base=4.1.2 bioconda::r-alakazam=1.2.0 bioconda::r-shazam=1.1.0 conda-forge::r-kableextra=1.3.4 conda-forge::r-knitr=1.33 conda-forge::r-stringr=1.4.0 conda-forge::r-dplyr=1.0.6 conda-forge::r-optparse=1.7.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mulled-v2-7da73314bcc47157b442d16c3dcfbe81e75a404f:9bb35f8114dffcd97b3afb5de8587355aca16b66-0' :\n        'quay.io/biocontainers/mulled-v2-7da73314bcc47157b442d16c3dcfbe81e75a404f:9bb35f8114dffcd97b3afb5de8587355aca16b66-0' }\"\n\n    input:\n    path(tab)                                     \n    path(\"Table_sequences.tsv\")\n    tuple path(repertoire_report), path(css), path(logo)\n\n    output:\n    path \"versions.yml\" , emit: versions\n    path(\"repertoire_comparison\")\n    path(\"Bcellmagic_report.html\")\n\n    script:\n    \"\"\"\n    execute_report.R --report_file ${repertoire_report}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        alakazam: \\$(Rscript -e \"library(alakazam); cat(paste(packageVersion('alakazam'), collapse='.'))\")\n        shazam: \\$(Rscript -e \"library(shazam); cat(paste(packageVersion('shazam'), collapse='.'))\")\n        stringr: \\$(Rscript -e \"library(stringr); cat(paste(packageVersion('stringr'), collapse='.'))\")\n        dplyr: \\$(Rscript -e \"library(dplyr); cat(paste(packageVersion('dplyr'), collapse='.'))\")\n        knitr: \\$(Rscript -e \"library(knitr); cat(paste(packageVersion('knitr'), collapse='.'))\")\n        R: \\$(echo \\$(R --version 2>&1) | awk -F' '  '{print \\$3}')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "    \"\"\"\n    execute_report.R --report_file ${repertoire_report}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        alakazam: \\$(Rscript -e \"library(alakazam); cat(paste(packageVersion('alakazam'), collapse='.'))\")\n        shazam: \\$(Rscript -e \"library(shazam); cat(paste(packageVersion('shazam'), collapse='.'))\")\n        stringr: \\$(Rscript -e \"library(stringr); cat(paste(packageVersion('stringr'), collapse='.'))\")\n        dplyr: \\$(Rscript -e \"library(dplyr); cat(paste(packageVersion('dplyr'), collapse='.'))\")\n        knitr: \\$(Rscript -e \"library(knitr); cat(paste(packageVersion('knitr'), collapse='.'))\")\n        R: \\$(echo \\$(R --version 2>&1) | awk -F' '  '{print \\$3}')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "tab",
            "repertoire_report",
            "css",
            "logo"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__airrflow",
        "directive": [
            "tag \"report\"",
            "label 'process_high'",
            "conda (params.enable_conda ? \"conda-forge::r-base=4.1.2 bioconda::r-alakazam=1.2.0 bioconda::r-shazam=1.1.0 conda-forge::r-kableextra=1.3.4 conda-forge::r-knitr=1.33 conda-forge::r-stringr=1.4.0 conda-forge::r-dplyr=1.0.6 conda-forge::r-optparse=1.7.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mulled-v2-7da73314bcc47157b442d16c3dcfbe81e75a404f:9bb35f8114dffcd97b3afb5de8587355aca16b66-0' : 'quay.io/biocontainers/mulled-v2-7da73314bcc47157b442d16c3dcfbe81e75a404f:9bb35f8114dffcd97b3afb5de8587355aca16b66-0' }\""
        ],
        "when": "",
        "stub": ""
    }
}
{
    "DADA2_QUALITY": {
        "name_process": "DADA2_QUALITY",
        "string_process": "process DADA2_QUALITY {\n    tag \"$meta\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconductor-dada2=1.22.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bioconductor-dada2:1.22.0--r41h399db7b_0' :\n        'quay.io/biocontainers/bioconductor-dada2:1.22.0--r41h399db7b_0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    path \"${meta}_qual_stats.pdf\"            , emit: pdf\n    tuple val(meta), path(\"*_qual_stats.tsv\"), emit: tsv\n    path \"versions.yml\"                      , emit: versions\n    path \"*.args.txt\"                        , emit: args\n    path \"*plotQualityProfile.txt\"           , emit: warning\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    #!/usr/bin/env Rscript\n\n    suppressPackageStartupMessages(library(dada2))\n    suppressPackageStartupMessages(library(ShortRead))\n\n    readfiles <- sort(list.files(\".\", pattern = \".fastq.gz\", full.names = TRUE))\n\n    #make list of number of sequences\n    readfiles_length <- countLines(readfiles) / 4\n    sum_readfiles_length <- sum(readfiles_length)\n\n    #use only the first x files when read number gets above 2147483647, read numbers above that do not fit into an INT and crash the process!\n    if ( sum_readfiles_length > 2147483647 ) {\n        max_files = length(which(cumsum(readfiles_length) <= 2147483647 ))\n        write.table(max_files, file = paste0(\"WARNING Only \",max_files,\" of \",length(readfiles),\" files and \",sum(readfiles_length[1:max_files]),\" of \",sum_readfiles_length,\" reads were used for ${meta} plotQualityProfile.txt\"), row.names = FALSE, col.names = FALSE, quote = FALSE, na = '')\n        readfiles <- readfiles[1:max_files]\n    } else {\n        max_files <- length(readfiles)\n        write.table(max_files, file = paste0(max_files,\" files were used for ${meta} plotQualityProfile.txt\"), row.names = FALSE, col.names = FALSE, quote = FALSE, na = '')\n    }\n\n    plot <- plotQualityProfile(readfiles$args)\n    data <- plot\\$data\n\n    #aggregate data for each sequencing cycle\n    df <- data.frame(\n        Count = aggregate(data\\$Count, list(data\\$Cycle), sum),\n        Median = aggregate(rep(data\\$Score, data\\$Count), list(rep(data\\$Cycle, data\\$Count)), median)[2]\n    )\n    colnames(df) <- c(\"Cycle\", \"Count\", \"Median\")\n\n    #write output\n    write.table( t(df), file = paste0(\"${meta}_qual_stats\",\".tsv\"), sep = \"\\t\", row.names = TRUE, col.names = FALSE, quote = FALSE)\n    pdf(paste0(\"${meta}_qual_stats\",\".pdf\"))\n    plot\n    dev.off()\n\n    write.table(paste0('plotQualityProfile\\t$args\\nmax_files\\t',max_files), file = \"plotQualityProfile.args.txt\", row.names = FALSE, col.names = FALSE, quote = FALSE, na = '')\n    writeLines(c(\"\\\\\"${task.process}\\\\\":\", paste0(\"    R: \", paste0(R.Version()[c(\"major\",\"minor\")], collapse = \".\")),paste0(\"    dada2: \", packageVersion(\"dada2\")),paste0(\"    ShortRead: \", packageVersion(\"ShortRead\")) ), \"versions.yml\")\n    \"\"\"\n}",
        "nb_lignes_process": 61,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    #!/usr/bin/env Rscript\n\n    suppressPackageStartupMessages(library(dada2))\n    suppressPackageStartupMessages(library(ShortRead))\n\n    readfiles <- sort(list.files(\".\", pattern = \".fastq.gz\", full.names = TRUE))\n\n    #make list of number of sequences\n    readfiles_length <- countLines(readfiles) / 4\n    sum_readfiles_length <- sum(readfiles_length)\n\n    #use only the first x files when read number gets above 2147483647, read numbers above that do not fit into an INT and crash the process!\n    if ( sum_readfiles_length > 2147483647 ) {\n        max_files = length(which(cumsum(readfiles_length) <= 2147483647 ))\n        write.table(max_files, file = paste0(\"WARNING Only \",max_files,\" of \",length(readfiles),\" files and \",sum(readfiles_length[1:max_files]),\" of \",sum_readfiles_length,\" reads were used for ${meta} plotQualityProfile.txt\"), row.names = FALSE, col.names = FALSE, quote = FALSE, na = '')\n        readfiles <- readfiles[1:max_files]\n    } else {\n        max_files <- length(readfiles)\n        write.table(max_files, file = paste0(max_files,\" files were used for ${meta} plotQualityProfile.txt\"), row.names = FALSE, col.names = FALSE, quote = FALSE, na = '')\n    }\n\n    plot <- plotQualityProfile(readfiles$args)\n    data <- plot\\$data\n\n    #aggregate data for each sequencing cycle\n    df <- data.frame(\n        Count = aggregate(data\\$Count, list(data\\$Cycle), sum),\n        Median = aggregate(rep(data\\$Score, data\\$Count), list(rep(data\\$Cycle, data\\$Count)), median)[2]\n    )\n    colnames(df) <- c(\"Cycle\", \"Count\", \"Median\")\n\n    #write output\n    write.table( t(df), file = paste0(\"${meta}_qual_stats\",\".tsv\"), sep = \"\\t\", row.names = TRUE, col.names = FALSE, quote = FALSE)\n    pdf(paste0(\"${meta}_qual_stats\",\".pdf\"))\n    plot\n    dev.off()\n\n    write.table(paste0('plotQualityProfile\\t$args\\nmax_files\\t',max_files), file = \"plotQualityProfile.args.txt\", row.names = FALSE, col.names = FALSE, quote = FALSE, na = '')\n    writeLines(c(\"\\\\\"${task.process}\\\\\":\", paste0(\"    R: \", paste0(R.Version()[c(\"major\",\"minor\")], collapse = \".\")),paste0(\"    dada2: \", packageVersion(\"dada2\")),paste0(\"    ShortRead: \", packageVersion(\"ShortRead\")) ), \"versions.yml\")\n    \"\"\"",
        "nb_lignes_script": 41,
        "language_script": "Rscript",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__ampliseq",
        "directive": [
            "tag \"$meta\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconductor-dada2=1.22.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bioconductor-dada2:1.22.0--r41h399db7b_0' : 'quay.io/biocontainers/bioconductor-dada2:1.22.0--r41h399db7b_0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "QIIME2_BARPLOT": {
        "name_process": "QIIME2_BARPLOT",
        "string_process": "process QIIME2_BARPLOT {\n    label 'process_low'\n\n    conda (params.enable_conda ? { exit 1 \"QIIME2 has no conda package\" } : null)\n    container \"quay.io/qiime2/core:2021.8\"\n\n    input:\n    path(metadata)\n    path(table)\n    path(taxonomy)\n\n    output:\n    path(\"barplot/*\")   , emit: folder\n    path \"versions.yml\" , emit: versions\n\n    script:\n    \"\"\"\n    export XDG_CONFIG_HOME=\"\\${PWD}/HOME\"\n\n    qiime taxa barplot  \\\n        --i-table ${table}  \\\n        --i-taxonomy ${taxonomy}  \\\n        --m-metadata-file ${metadata}  \\\n        --o-visualization taxa-bar-plots.qzv  \\\n        --verbose\n    qiime tools export --input-path taxa-bar-plots.qzv  \\\n        --output-path barplot\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        qiime2: \\$( qiime --version | sed -e \"s/q2cli version //g\" | tr -d '`' | sed -e \"s/Run qiime info for more version details.//g\" )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "    \"\"\"\n    export XDG_CONFIG_HOME=\"\\${PWD}/HOME\"\n\n    qiime taxa barplot  \\\n        --i-table ${table}  \\\n        --i-taxonomy ${taxonomy}  \\\n        --m-metadata-file ${metadata}  \\\n        --o-visualization taxa-bar-plots.qzv  \\\n        --verbose\n    qiime tools export --input-path taxa-bar-plots.qzv  \\\n        --output-path barplot\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        qiime2: \\$( qiime --version | sed -e \"s/q2cli version //g\" | tr -d '`' | sed -e \"s/Run qiime info for more version details.//g\" )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [
            "QIIME"
        ],
        "tools_url": [
            "https://bio.tools/qiime"
        ],
        "tools_dico": [
            {
                "name": "QIIME",
                "uri": "https://bio.tools/qiime",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biological science"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2945",
                                    "term": "Analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Open-source bioinformatics pipeline for performing microbiome analysis from raw DNA sequencing data. The pipeline is designed to take users from raw sequencing data generated on the Illumina or other platforms through publication quality graphics and statistics. This includes demultiplexing and quality filtering, OTU picking, taxonomic assignment, and phylogenetic reconstruction, and diversity analyses and visualizations.",
                "homepage": "http://qiime.org/"
            }
        ],
        "inputs": [
            "metadata",
            "table",
            "taxonomy"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__ampliseq",
        "directive": [
            "label 'process_low'",
            "conda (params.enable_conda ? { exit 1 \"QIIME2 has no conda package\" } : null)",
            "container \"quay.io/qiime2/core:2021.8\""
        ],
        "when": "",
        "stub": ""
    },
    "QIIME2_DIVERSITY_ALPHA": {
        "name_process": "QIIME2_DIVERSITY_ALPHA",
        "string_process": "process QIIME2_DIVERSITY_ALPHA {\n    tag \"${core.baseName}\"\n    label 'process_low'\n\n    conda (params.enable_conda ? { exit 1 \"QIIME2 has no conda package\" } : null)\n    container \"quay.io/qiime2/core:2021.8\"\n\n    input:\n    tuple path(metadata), path(core), val(category)\n\n    output:\n    path(\"alpha_diversity/*\"), emit: alpha\n    path \"versions.yml\"      , emit: versions\n\n    script:\n    if ( category.length() > 0 ) {\n        \"\"\"\n        export XDG_CONFIG_HOME=\"\\${PWD}/HOME\"\n\n        qiime diversity alpha-group-significance \\\n            --i-alpha-diversity ${core} \\\n            --m-metadata-file ${metadata} \\\n            --o-visualization ${core.baseName}-vis.qzv\n        qiime tools export --input-path ${core.baseName}-vis.qzv \\\n            --output-path \"alpha_diversity/${core.baseName}\"\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            qiime2: \\$( qiime --version | sed -e \"s/q2cli version //g\" | tr -d '`' | sed -e \"s/Run qiime info for more version details.//g\" )\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        mkdir alpha_diversity\n        echo \"\" > \"alpha_diversity/WARNING No column in ${metadata.baseName} seemed suitable.txt\"\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            qiime2: \\$( qiime --version | sed -e \"s/q2cli version //g\" | tr -d '`' | sed -e \"s/Run qiime info for more version details.//g\" )\n        END_VERSIONS\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 41,
        "string_script": "    if ( category.length() > 0 ) {\n        \"\"\"\n        export XDG_CONFIG_HOME=\"\\${PWD}/HOME\"\n\n        qiime diversity alpha-group-significance \\\n            --i-alpha-diversity ${core} \\\n            --m-metadata-file ${metadata} \\\n            --o-visualization ${core.baseName}-vis.qzv\n        qiime tools export --input-path ${core.baseName}-vis.qzv \\\n            --output-path \"alpha_diversity/${core.baseName}\"\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            qiime2: \\$( qiime --version | sed -e \"s/q2cli version //g\" | tr -d '`' | sed -e \"s/Run qiime info for more version details.//g\" )\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        mkdir alpha_diversity\n        echo \"\" > \"alpha_diversity/WARNING No column in ${metadata.baseName} seemed suitable.txt\"\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            qiime2: \\$( qiime --version | sed -e \"s/q2cli version //g\" | tr -d '`' | sed -e \"s/Run qiime info for more version details.//g\" )\n        END_VERSIONS\n        \"\"\"\n    }",
        "nb_lignes_script": 26,
        "language_script": "bash",
        "tools": [
            "QIIME"
        ],
        "tools_url": [
            "https://bio.tools/qiime"
        ],
        "tools_dico": [
            {
                "name": "QIIME",
                "uri": "https://bio.tools/qiime",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biological science"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2945",
                                    "term": "Analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Open-source bioinformatics pipeline for performing microbiome analysis from raw DNA sequencing data. The pipeline is designed to take users from raw sequencing data generated on the Illumina or other platforms through publication quality graphics and statistics. This includes demultiplexing and quality filtering, OTU picking, taxonomic assignment, and phylogenetic reconstruction, and diversity analyses and visualizations.",
                "homepage": "http://qiime.org/"
            }
        ],
        "inputs": [
            "category",
            "metadata",
            "core"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__ampliseq",
        "directive": [
            "tag \"${core.baseName}\"",
            "label 'process_low'",
            "conda (params.enable_conda ? { exit 1 \"QIIME2 has no conda package\" } : null)",
            "container \"quay.io/qiime2/core:2021.8\""
        ],
        "when": "",
        "stub": ""
    },
    "RENAME_RAW_DATA_FILES": {
        "name_process": "RENAME_RAW_DATA_FILES",
        "string_process": "process RENAME_RAW_DATA_FILES {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img' :\n        'biocontainers/biocontainers:v1.2.0_cv1' }\"\n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path(\"${meta.id}{_1,_2,}.fastq.gz\", includeInputs: true), emit: fastq\n    path \"versions.yml\"                                                      , emit: versions\n\n    script:\n                                                                          \n    def args        = task.ext.args ?: 'ln -s'\n    if (meta.single_end) {\n        \"\"\"\n        if [ ! -f  ${meta.id}.fastq.gz ]; then\n            $args $reads ${meta.id}.fastq.gz\n        else\n            touch ${meta.id}.fastq.gz\n        fi\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            sed: \\$(sed --version 2>&1 | sed -n 1p | sed 's/sed (GNU sed) //')\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        [ -f \"${meta.id}_1.fastq.gz\" ] || $args \"${reads[0]}\" \"${meta.id}_1.fastq.gz\"\n        [ -f \"${meta.id}_2.fastq.gz\" ] || $args \"${reads[1]}\" \"${meta.id}_2.fastq.gz\"\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            sed: \\$(sed --version 2>&1 | sed -n 1p | sed 's/sed (GNU sed) //')\n        END_VERSIONS\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 42,
        "string_script": "    def args        = task.ext.args ?: 'ln -s'\n    if (meta.single_end) {\n        \"\"\"\n        if [ ! -f  ${meta.id}.fastq.gz ]; then\n            $args $reads ${meta.id}.fastq.gz\n        else\n            touch ${meta.id}.fastq.gz\n        fi\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            sed: \\$(sed --version 2>&1 | sed -n 1p | sed 's/sed (GNU sed) //')\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        [ -f \"${meta.id}_1.fastq.gz\" ] || $args \"${reads[0]}\" \"${meta.id}_1.fastq.gz\"\n        [ -f \"${meta.id}_2.fastq.gz\" ] || $args \"${reads[1]}\" \"${meta.id}_2.fastq.gz\"\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            sed: \\$(sed --version 2>&1 | sed -n 1p | sed 's/sed (GNU sed) //')\n        END_VERSIONS\n        \"\"\"\n    }",
        "nb_lignes_script": 24,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__ampliseq",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img' : 'biocontainers/biocontainers:v1.2.0_cv1' }\""
        ],
        "when": "",
        "stub": ""
    },
    "FILTER_STATS": {
        "name_process": "FILTER_STATS",
        "string_process": "process FILTER_STATS {\n    label 'process_low'\n\n    conda (params.enable_conda ? \"pandas=1.1.5\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/pandas:1.1.5' :\n        'quay.io/biocontainers/pandas:1.1.5' }\"\n\n    input:\n    path(unfiltered)\n    path(filtered)\n\n    output:\n    path(\"count_table_filter_stats.tsv\"), emit: tsv\n    path \"versions.yml\"                 , emit: versions\n\n    script:\n    \"\"\"\n    filter_stats.py $unfiltered $filtered\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        python: \\$(python --version 2>&1 | sed 's/Python //g')\n        pandas: \\$(python -c \"import pkg_resources; print(pkg_resources.get_distribution('pandas').version)\")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "    \"\"\"\n    filter_stats.py $unfiltered $filtered\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        python: \\$(python --version 2>&1 | sed 's/Python //g')\n        pandas: \\$(python -c \"import pkg_resources; print(pkg_resources.get_distribution('pandas').version)\")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "unfiltered",
            "filtered"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__ampliseq",
        "directive": [
            "label 'process_low'",
            "conda (params.enable_conda ? \"pandas=1.1.5\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/pandas:1.1.5' : 'quay.io/biocontainers/pandas:1.1.5' }\""
        ],
        "when": "",
        "stub": ""
    },
    "CUTADAPT_SUMMARY_MERGE": {
        "name_process": "CUTADAPT_SUMMARY_MERGE",
        "string_process": "process CUTADAPT_SUMMARY_MERGE {\n    tag \"${files}\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconductor-dada2=1.22.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bioconductor-dada2:1.22.0--r41h399db7b_0' :\n        'quay.io/biocontainers/bioconductor-dada2:1.22.0--r41h399db7b_0' }\"\n\n    input:\n    val(action)\n    path(files)\n\n    output:\n    path(\"cutadapt_summary.tsv\")      , emit: tsv\n    path \"versions.yml\", optional:true, emit: versions\n\n    script:\n    if (action == \"merge\") {\n        \"\"\"\n        #!/usr/bin/env Rscript\n        standard <- read.table(\\\"${files[0]}\\\", header = TRUE, sep = \"\\\\t\", stringsAsFactors = FALSE)\n        doubleprimer <- read.table(\\\"${files[1]}\\\", header = TRUE, sep = \"\\\\t\", stringsAsFactors = FALSE)\n        colnames(doubleprimer) <- c(\"sample\", \"cutadapt_doubleprimer_total_processed\", \"cutadapt_doubleprimer_reverse_complemented\", \"cutadapt_doubleprimer_passing_filters\", \"cutadapt_doubleprimer_passing_filters_percent\")\n\n        #merge\n        df <- merge(standard, doubleprimer, by = \"sample\")\n\n        #filter columns\n        remove_columns <- c(\"cutadapt_doubleprimer_total_processed\")\n        for(column in remove_columns) df[column]<-NULL\n\n        #write\n        write.table(df, file = \\\"cutadapt_summary.tsv\\\", quote=FALSE, col.names=TRUE, row.names=FALSE, sep=\"\\\\t\")\n\n        writeLines(c(\"\\\\\"${task.process}\\\\\":\", paste0(\"    R: \", paste0(R.Version()[c(\"major\",\"minor\")], collapse = \".\")) ), \"versions.yml\")\n        \"\"\"\n    } else {\n        \"\"\"\n        cp $files cutadapt_summary.tsv\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 41,
        "string_script": "    if (action == \"merge\") {\n        \"\"\"\n        #!/usr/bin/env Rscript\n        standard <- read.table(\\\"${files[0]}\\\", header = TRUE, sep = \"\\\\t\", stringsAsFactors = FALSE)\n        doubleprimer <- read.table(\\\"${files[1]}\\\", header = TRUE, sep = \"\\\\t\", stringsAsFactors = FALSE)\n        colnames(doubleprimer) <- c(\"sample\", \"cutadapt_doubleprimer_total_processed\", \"cutadapt_doubleprimer_reverse_complemented\", \"cutadapt_doubleprimer_passing_filters\", \"cutadapt_doubleprimer_passing_filters_percent\")\n\n        #merge\n        df <- merge(standard, doubleprimer, by = \"sample\")\n\n        #filter columns\n        remove_columns <- c(\"cutadapt_doubleprimer_total_processed\")\n        for(column in remove_columns) df[column]<-NULL\n\n        #write\n        write.table(df, file = \\\"cutadapt_summary.tsv\\\", quote=FALSE, col.names=TRUE, row.names=FALSE, sep=\"\\\\t\")\n\n        writeLines(c(\"\\\\\"${task.process}\\\\\":\", paste0(\"    R: \", paste0(R.Version()[c(\"major\",\"minor\")], collapse = \".\")) ), \"versions.yml\")\n        \"\"\"\n    } else {\n        \"\"\"\n        cp $files cutadapt_summary.tsv\n        \"\"\"\n    }",
        "nb_lignes_script": 23,
        "language_script": "Rscript",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "action",
            "files"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__ampliseq",
        "directive": [
            "tag \"${files}\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconductor-dada2=1.22.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bioconductor-dada2:1.22.0--r41h399db7b_0' : 'quay.io/biocontainers/bioconductor-dada2:1.22.0--r41h399db7b_0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "ITSX_CUTASV": {
        "name_process": "ITSX_CUTASV",
        "string_process": "process ITSX_CUTASV {\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::itsx=1.1.3\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/itsx:1.1.3--hdfd78af_1' :\n        'quay.io/biocontainers/itsx:1.1.3--hdfd78af_1' }\"\n\n    input:\n    path fasta\n    val outfile\n\n    output:\n    path outfile         , emit: fasta\n    path \"ASV_ITS_seqs.summary.txt\", emit: summary\n    path \"ASV_ITS_seqs.*fasta\", emit: fastas\n    path \"versions.yml\"  , emit: versions\n    path \"*.args.txt\"    , emit: args\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    ITSx \\\\\n        -i $fasta \\\\\n        $args \\\\\n        --cpu $task.cpus \\\\\n        -o ASV_ITS_seqs\n\n    if [ ! -s $outfile ]; then\n        echo \"ERROR: No ITS regions found by ITSx. You might want to modify --cut_its and/or --its_partial\" >&2\n        exit 1\n    fi\n\n    echo -e \"ITSx\\t$args\" > ITSx.args.txt\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        ITSx: \\$( ITSx -h 2>&1 > /dev/null | tail -n 2 | head -n 1 | cut -f 2 -d ' ' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 38,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    ITSx \\\\\n        -i $fasta \\\\\n        $args \\\\\n        --cpu $task.cpus \\\\\n        -o ASV_ITS_seqs\n\n    if [ ! -s $outfile ]; then\n        echo \"ERROR: No ITS regions found by ITSx. You might want to modify --cut_its and/or --its_partial\" >&2\n        exit 1\n    fi\n\n    echo -e \"ITSx\\t$args\" > ITSx.args.txt\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        ITSx: \\$( ITSx -h 2>&1 > /dev/null | tail -n 2 | head -n 1 | cut -f 2 -d ' ' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [
            "ITSxpress",
            "NullSeq"
        ],
        "tools_url": [
            "https://bio.tools/itsxpress",
            "https://bio.tools/nullseq"
        ],
        "tools_dico": [
            {
                "name": "ITSxpress",
                "uri": "https://bio.tools/itsxpress",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3697",
                            "term": "Microbial ecology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3697",
                            "term": "Environmental microbiology"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Sequence trimming"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Trimming"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2975",
                                "term": "Nucleic acid sequence (raw)"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2975",
                                "term": "Nucleic acid sequence (raw)"
                            }
                        ]
                    }
                ],
                "description": "ITSxpress: Software to rapidly trim the Internally transcribed spacer (ITS) region of FASTQ files",
                "homepage": "https://github.com/USDA-ARS-GBRU/itsxpress"
            },
            {
                "name": "NullSeq",
                "uri": "https://bio.tools/nullseq",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0364",
                                    "term": "Random sequence generation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Creates Random Coding Sequences with specified GC content and Amino Acid usage.",
                "homepage": "https://github.com/amarallab/NullSeq"
            }
        ],
        "inputs": [
            "fasta",
            "outfile"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__ampliseq",
        "directive": [
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::itsx=1.1.3\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/itsx:1.1.3--hdfd78af_1' : 'quay.io/biocontainers/itsx:1.1.3--hdfd78af_1' }\""
        ],
        "when": "",
        "stub": ""
    },
    "MERGE_STATS": {
        "name_process": "MERGE_STATS",
        "string_process": "process MERGE_STATS {\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconductor-dada2=1.22.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bioconductor-dada2:1.22.0--r41h399db7b_0' :\n        'quay.io/biocontainers/bioconductor-dada2:1.22.0--r41h399db7b_0' }\"\n\n    input:\n    path('file1.tsv')\n    path('file2.tsv')\n\n    output:\n    path(\"overall_summary.tsv\") , emit: tsv\n    path \"versions.yml\"         , emit: versions\n\n    script:\n    \"\"\"\n    #!/usr/bin/env Rscript\n    x <- read.table(\\\"file1.tsv\\\", header = TRUE, sep = \"\\t\", stringsAsFactors = FALSE)\n    y <- read.table(\\\"file2.tsv\\\", header = TRUE, sep = \"\\t\", stringsAsFactors = FALSE)\n\n    #merge\n    df <- merge(x, y, by = \"sample\", all = TRUE)\n\n    #write\n    write.table(df, file = \\\"overall_summary.tsv\\\", quote=FALSE, col.names=TRUE, row.names=FALSE, sep=\"\\t\")\n\n    writeLines(c(\"\\\\\"${task.process}\\\\\":\", paste0(\"    R: \", paste0(R.Version()[c(\"major\",\"minor\")], collapse = \".\")) ), \"versions.yml\")\n    \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "    \"\"\"\n    #!/usr/bin/env Rscript\n    x <- read.table(\\\"file1.tsv\\\", header = TRUE, sep = \"\\t\", stringsAsFactors = FALSE)\n    y <- read.table(\\\"file2.tsv\\\", header = TRUE, sep = \"\\t\", stringsAsFactors = FALSE)\n\n    #merge\n    df <- merge(x, y, by = \"sample\", all = TRUE)\n\n    #write\n    write.table(df, file = \\\"overall_summary.tsv\\\", quote=FALSE, col.names=TRUE, row.names=FALSE, sep=\"\\t\")\n\n    writeLines(c(\"\\\\\"${task.process}\\\\\":\", paste0(\"    R: \", paste0(R.Version()[c(\"major\",\"minor\")], collapse = \".\")) ), \"versions.yml\")\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "Rscript",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__ampliseq",
        "directive": [
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconductor-dada2=1.22.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bioconductor-dada2:1.22.0--r41h399db7b_0' : 'quay.io/biocontainers/bioconductor-dada2:1.22.0--r41h399db7b_0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "MULTIQC": {
        "name_process": "MULTIQC",
        "string_process": "process MULTIQC {\n    label 'process_medium'\n\n    conda (params.enable_conda ? 'bioconda::multiqc=1.12' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/multiqc:1.12--pyhdfd78af_0' :\n        'quay.io/biocontainers/multiqc:1.12--pyhdfd78af_0' }\"\n\n    input:\n    path multiqc_files\n\n    output:\n    path \"*multiqc_report.html\", emit: report\n    path \"*_data\"              , emit: data\n    path \"*_plots\"             , optional:true, emit: plots\n    path \"versions.yml\"        , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    multiqc -f $args .\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        multiqc: \\$( multiqc --version | sed -e \"s/multiqc, version //g\" )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    multiqc -f $args .\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        multiqc: \\$( multiqc --version | sed -e \"s/multiqc, version //g\" )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "MultiQC"
        ],
        "tools_url": [
            "https://bio.tools/multiqc"
        ],
        "tools_dico": [
            {
                "name": "MultiQC",
                "uri": "https://bio.tools/multiqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "MultiQC aggregates results from multiple bioinformatics analyses across many samples into a single report. It searches a given directory for analysis logs and compiles a HTML report. It's a general use tool, perfect for summarising the output from numerous bioinformatics tools.",
                "homepage": "http://multiqc.info/"
            }
        ],
        "inputs": [
            "multiqc_files"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__ampliseq",
        "directive": [
            "label 'process_medium'",
            "conda (params.enable_conda ? 'bioconda::multiqc=1.12' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/multiqc:1.12--pyhdfd78af_0' : 'quay.io/biocontainers/multiqc:1.12--pyhdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "DADA2_FILTNTRIM": {
        "name_process": "DADA2_FILTNTRIM",
        "string_process": "process DADA2_FILTNTRIM {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconductor-dada2=1.22.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bioconductor-dada2:1.22.0--r41h399db7b_0' :\n        'quay.io/biocontainers/bioconductor-dada2:1.22.0--r41h399db7b_0' }\"\n\n    input:\n    tuple val(meta), path(reads), val(trunclenf), val(trunclenr)\n\n    output:\n    tuple val(meta), path(\"*.filter_stats.tsv\"), emit: log\n    tuple val(meta), path(\"*.filt.fastq.gz\")   , emit: reads\n    path \"versions.yml\"                        , emit: versions\n    path \"*.args.txt\"                          , emit: args\n\n    script:\n    def args        = task.ext.args ?: ''\n    def in_and_out  = meta.single_end ? \"\\\"${reads}\\\", \\\"${meta.id}.filt.fastq.gz\\\"\" : \"\\\"${reads[0]}\\\", \\\"${meta.id}_1.filt.fastq.gz\\\", \\\"${reads[1]}\\\", \\\"${meta.id}_2.filt.fastq.gz\\\"\"\n    def trunclenf   = trunclenf[1].toInteger()\n    def trunclenr   = trunclenr[1].toInteger()\n    def trunc_args  = meta.single_end ? \"truncLen = $trunclenf\" : \"truncLen = c($trunclenf, $trunclenr)\"\n    \"\"\"\n    #!/usr/bin/env Rscript\n    suppressPackageStartupMessages(library(dada2))\n\n    out <- filterAndTrim($in_and_out,\n        $trunc_args,\n        $args,\n        compress = TRUE,\n        multithread = $task.cpus,\n        verbose = TRUE)\n    out <- cbind(out, ID = row.names(out))\n\n    write.table( out, file = \"${meta.id}.filter_stats.tsv\", sep = \"\\\\t\", row.names = FALSE, quote = FALSE, na = '')\n    write.table(paste('filterAndTrim\\t$trunc_args','$args',sep=\",\"), file = \"filterAndTrim.args.txt\", row.names = FALSE, col.names = FALSE, quote = FALSE, na = '')\n    writeLines(c(\"\\\\\"${task.process}\\\\\":\", paste0(\"    R: \", paste0(R.Version()[c(\"major\",\"minor\")], collapse = \".\")),paste0(\"    dada2: \", packageVersion(\"dada2\")) ), \"versions.yml\")\n    \"\"\"\n}",
        "nb_lignes_process": 39,
        "string_script": "    def args        = task.ext.args ?: ''\n    def in_and_out  = meta.single_end ? \"\\\"${reads}\\\", \\\"${meta.id}.filt.fastq.gz\\\"\" : \"\\\"${reads[0]}\\\", \\\"${meta.id}_1.filt.fastq.gz\\\", \\\"${reads[1]}\\\", \\\"${meta.id}_2.filt.fastq.gz\\\"\"\n    def trunclenf   = trunclenf[1].toInteger()\n    def trunclenr   = trunclenr[1].toInteger()\n    def trunc_args  = meta.single_end ? \"truncLen = $trunclenf\" : \"truncLen = c($trunclenf, $trunclenr)\"\n    \"\"\"\n    #!/usr/bin/env Rscript\n    suppressPackageStartupMessages(library(dada2))\n\n    out <- filterAndTrim($in_and_out,\n        $trunc_args,\n        $args,\n        compress = TRUE,\n        multithread = $task.cpus,\n        verbose = TRUE)\n    out <- cbind(out, ID = row.names(out))\n\n    write.table( out, file = \"${meta.id}.filter_stats.tsv\", sep = \"\\\\t\", row.names = FALSE, quote = FALSE, na = '')\n    write.table(paste('filterAndTrim\\t$trunc_args','$args',sep=\",\"), file = \"filterAndTrim.args.txt\", row.names = FALSE, col.names = FALSE, quote = FALSE, na = '')\n    writeLines(c(\"\\\\\"${task.process}\\\\\":\", paste0(\"    R: \", paste0(R.Version()[c(\"major\",\"minor\")], collapse = \".\")),paste0(\"    dada2: \", packageVersion(\"dada2\")) ), \"versions.yml\")\n    \"\"\"",
        "nb_lignes_script": 20,
        "language_script": "Rscript",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "trunclenf",
            "trunclenr",
            "reads"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__ampliseq",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconductor-dada2=1.22.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bioconductor-dada2:1.22.0--r41h399db7b_0' : 'quay.io/biocontainers/bioconductor-dada2:1.22.0--r41h399db7b_0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "CUTADAPT_SUMMARY": {
        "name_process": "CUTADAPT_SUMMARY",
        "string_process": "process CUTADAPT_SUMMARY {\n    tag \"${name}\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"conda-forge::python=3.8.3\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/python:3.8.3' :\n        'quay.io/biocontainers/python:3.8.3' }\"\n\n    input:\n    val(name)\n    tuple val(meta), path(logs)\n\n    output:\n    path(\"*_summary.tsv\") , emit: tsv\n    path \"versions.yml\"   , emit: versions\n\n    script:\n    def mode  = meta.single_end ? \"single_end\" : \"paired_end\"\n    \"\"\"\n    cutadapt_summary.py $mode *.cutadapt.log > ${name}_summary.tsv\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        python: \\$( python --version )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "    def mode  = meta.single_end ? \"single_end\" : \"paired_end\"\n    \"\"\"\n    cutadapt_summary.py $mode *.cutadapt.log > ${name}_summary.tsv\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        python: \\$( python --version )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "name",
            "meta",
            "logs"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__ampliseq",
        "directive": [
            "tag \"${name}\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"conda-forge::python=3.8.3\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/python:3.8.3' : 'quay.io/biocontainers/python:3.8.3' }\""
        ],
        "when": "",
        "stub": ""
    },
    "QIIME2_ALPHARAREFACTION": {
        "name_process": "QIIME2_ALPHARAREFACTION",
        "string_process": "process QIIME2_ALPHARAREFACTION {\n    label 'process_low'\n\n    conda (params.enable_conda ? { exit 1 \"QIIME2 has no conda package\" } : null)\n    container \"quay.io/qiime2/core:2021.8\"\n\n    input:\n    path(metadata)\n    path(table)\n    path(tree)\n    path(stats)\n\n    output:\n    path(\"alpha-rarefaction/*\"), emit: rarefaction\n    path \"versions.yml\"        , emit: versions\n\n    script:\n    \"\"\"\n    export XDG_CONFIG_HOME=\"\\${PWD}/HOME\"\n\n    maxdepth=\\$(count_table_minmax_reads.py $stats maximum 2>&1)\n\n    #check values\n    if [ \\\"\\$maxdepth\\\" -gt \\\"75000\\\" ]; then maxdepth=\\\"75000\\\"; fi\n    if [ \\\"\\$maxdepth\\\" -gt \\\"5000\\\" ]; then maxsteps=\\\"250\\\"; else maxsteps=\\$((maxdepth/20)); fi\n    qiime diversity alpha-rarefaction  \\\n        --i-table ${table}  \\\n        --i-phylogeny ${tree}  \\\n        --p-max-depth \\$maxdepth  \\\n        --m-metadata-file ${metadata}  \\\n        --p-steps \\$maxsteps  \\\n        --p-iterations 10  \\\n        --o-visualization alpha-rarefaction.qzv\n    qiime tools export --input-path alpha-rarefaction.qzv  \\\n        --output-path alpha-rarefaction\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        qiime2: \\$( qiime --version | sed -e \"s/q2cli version //g\" | tr -d '`' | sed -e \"s/Run qiime info for more version details.//g\" )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 40,
        "string_script": "    \"\"\"\n    export XDG_CONFIG_HOME=\"\\${PWD}/HOME\"\n\n    maxdepth=\\$(count_table_minmax_reads.py $stats maximum 2>&1)\n\n    #check values\n    if [ \\\"\\$maxdepth\\\" -gt \\\"75000\\\" ]; then maxdepth=\\\"75000\\\"; fi\n    if [ \\\"\\$maxdepth\\\" -gt \\\"5000\\\" ]; then maxsteps=\\\"250\\\"; else maxsteps=\\$((maxdepth/20)); fi\n    qiime diversity alpha-rarefaction  \\\n        --i-table ${table}  \\\n        --i-phylogeny ${tree}  \\\n        --p-max-depth \\$maxdepth  \\\n        --m-metadata-file ${metadata}  \\\n        --p-steps \\$maxsteps  \\\n        --p-iterations 10  \\\n        --o-visualization alpha-rarefaction.qzv\n    qiime tools export --input-path alpha-rarefaction.qzv  \\\n        --output-path alpha-rarefaction\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        qiime2: \\$( qiime --version | sed -e \"s/q2cli version //g\" | tr -d '`' | sed -e \"s/Run qiime info for more version details.//g\" )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 23,
        "language_script": "bash",
        "tools": [
            "QIIME"
        ],
        "tools_url": [
            "https://bio.tools/qiime"
        ],
        "tools_dico": [
            {
                "name": "QIIME",
                "uri": "https://bio.tools/qiime",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biological science"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2945",
                                    "term": "Analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Open-source bioinformatics pipeline for performing microbiome analysis from raw DNA sequencing data. The pipeline is designed to take users from raw sequencing data generated on the Illumina or other platforms through publication quality graphics and statistics. This includes demultiplexing and quality filtering, OTU picking, taxonomic assignment, and phylogenetic reconstruction, and diversity analyses and visualizations.",
                "homepage": "http://qiime.org/"
            }
        ],
        "inputs": [
            "metadata",
            "table",
            "tree",
            "stats"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__ampliseq",
        "directive": [
            "label 'process_low'",
            "conda (params.enable_conda ? { exit 1 \"QIIME2 has no conda package\" } : null)",
            "container \"quay.io/qiime2/core:2021.8\""
        ],
        "when": "",
        "stub": ""
    },
    "DADA2_ADDSPECIES": {
        "name_process": "DADA2_ADDSPECIES",
        "string_process": "process DADA2_ADDSPECIES {\n    tag \"${taxtable},${database}\"\n    label 'process_high'\n    label 'single_cpu'\n\n    conda (params.enable_conda ? \"bioconductor-dada2=1.22.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bioconductor-dada2:1.22.0--r41h399db7b_0' :\n        'quay.io/biocontainers/bioconductor-dada2:1.22.0--r41h399db7b_0' }\"\n\n    input:\n    path(taxtable)\n    path(database)\n    val(outfile)\n\n    output:\n    path(outfile)       , emit: tsv\n    path \"versions.yml\" , emit: versions\n    path \"*.args.txt\"   , emit: args\n\n    script:\n    def args = task.ext.args ?: ''\n    def seed = task.ext.seed ?: '100'\n    \"\"\"\n    #!/usr/bin/env Rscript\n    suppressPackageStartupMessages(library(dada2))\n    set.seed($seed) # Initialize random number generator for reproducibility\n\n    taxtable <- readRDS(\\\"$taxtable\\\")\n\n    tx <- addSpecies(taxtable, \\\"$database\\\", $args, verbose=TRUE)\n\n    # Create a table with specified column order\n    tmp <- data.frame(row.names(tx)) # To separate ASV_ID from sequence\n    taxa <- data.frame(\n        ASV_ID = tx[,\"ASV_ID\"],\n        Domain = tx[,\"Domain\"],\n        Kingdom = tx[,\"Kingdom\"],\n        Phylum = tx[,\"Phylum\"],\n        Class = tx[,\"Class\"],\n        Order = tx[,\"Order\"],\n        Family = tx[,\"Family\"],\n        Genus = tx[,\"Genus\"],\n        Species = tx[,\"Species\"],\n        confidence = tx[,\"confidence\"],\n        sequence = tmp[,],\n        row.names=row.names(tmp)\n    )\n\n    write.table(taxa, file = \\\"$outfile\\\", sep = \"\\\\t\", row.names = FALSE, col.names = TRUE, quote = FALSE, na = '')\n\n    write.table('addSpecies\\t$args\\nseed\\t$seed', file = \"addSpecies.args.txt\", row.names = FALSE, col.names = FALSE, quote = FALSE, na = '')\n    writeLines(c(\"\\\\\"${task.process}\\\\\":\", paste0(\"    R: \", paste0(R.Version()[c(\"major\",\"minor\")], collapse = \".\")),paste0(\"    dada2: \", packageVersion(\"dada2\")) ), \"versions.yml\")\n    \"\"\"\n}",
        "nb_lignes_process": 53,
        "string_script": "    def args = task.ext.args ?: ''\n    def seed = task.ext.seed ?: '100'\n    \"\"\"\n    #!/usr/bin/env Rscript\n    suppressPackageStartupMessages(library(dada2))\n    set.seed($seed) # Initialize random number generator for reproducibility\n\n    taxtable <- readRDS(\\\"$taxtable\\\")\n\n    tx <- addSpecies(taxtable, \\\"$database\\\", $args, verbose=TRUE)\n\n    # Create a table with specified column order\n    tmp <- data.frame(row.names(tx)) # To separate ASV_ID from sequence\n    taxa <- data.frame(\n        ASV_ID = tx[,\"ASV_ID\"],\n        Domain = tx[,\"Domain\"],\n        Kingdom = tx[,\"Kingdom\"],\n        Phylum = tx[,\"Phylum\"],\n        Class = tx[,\"Class\"],\n        Order = tx[,\"Order\"],\n        Family = tx[,\"Family\"],\n        Genus = tx[,\"Genus\"],\n        Species = tx[,\"Species\"],\n        confidence = tx[,\"confidence\"],\n        sequence = tmp[,],\n        row.names=row.names(tmp)\n    )\n\n    write.table(taxa, file = \\\"$outfile\\\", sep = \"\\\\t\", row.names = FALSE, col.names = TRUE, quote = FALSE, na = '')\n\n    write.table('addSpecies\\t$args\\nseed\\t$seed', file = \"addSpecies.args.txt\", row.names = FALSE, col.names = FALSE, quote = FALSE, na = '')\n    writeLines(c(\"\\\\\"${task.process}\\\\\":\", paste0(\"    R: \", paste0(R.Version()[c(\"major\",\"minor\")], collapse = \".\")),paste0(\"    dada2: \", packageVersion(\"dada2\")) ), \"versions.yml\")\n    \"\"\"",
        "nb_lignes_script": 32,
        "language_script": "Rscript",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "taxtable",
            "database",
            "outfile"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__ampliseq",
        "directive": [
            "tag \"${taxtable},${database}\"",
            "label 'process_high'",
            "label 'single_cpu'",
            "conda (params.enable_conda ? \"bioconductor-dada2=1.22.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bioconductor-dada2:1.22.0--r41h399db7b_0' : 'quay.io/biocontainers/bioconductor-dada2:1.22.0--r41h399db7b_0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "DADA2_STATS": {
        "name_process": "DADA2_STATS",
        "string_process": "process DADA2_STATS {\n    tag \"$meta.run\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconductor-dada2=1.22.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bioconductor-dada2:1.22.0--r41h399db7b_0' :\n        'quay.io/biocontainers/bioconductor-dada2:1.22.0--r41h399db7b_0' }\"\n\n    input:\n    tuple val(meta), path(\"filter_and_trim_files/*\"), path(denoised), path(mergers), path(seqtab_nochim)\n\n    output:\n    tuple val(meta), path(\"*.stats.tsv\"), emit: stats\n    path \"versions.yml\"                 , emit: versions\n\n    script:\n    if (!meta.single_end) {\n        \"\"\"\n        #!/usr/bin/env Rscript\n        suppressPackageStartupMessages(library(dada2))\n\n        #combine filter_and_trim files\n        for (data in list.files(\"./filter_and_trim_files\", full.names=TRUE)){\n            if (!exists(\"filter_and_trim\")){ filter_and_trim <- read.csv(data, header=TRUE, sep=\"\\\\t\") }\n            if (exists(\"filter_and_trim\")){\n                tempory <-read.csv(data, header=TRUE, sep=\"\\\\t\")\n                filter_and_trim <-unique(rbind(filter_and_trim, tempory))\n                rm(tempory)\n            }\n        }\n        rownames(filter_and_trim) <- filter_and_trim\\$ID\n        filter_and_trim[\"ID\"] <- NULL\n        #write.table( filter_and_trim, file = \"${meta.run}.filter_and_trim.tsv\", sep = \"\\\\t\", row.names = TRUE, quote = FALSE, na = '')\n\n        #read data\n        dadaFs = readRDS(\"${denoised[0]}\")\n        dadaRs = readRDS(\"${denoised[1]}\")\n        mergers = readRDS(\"$mergers\")\n        seqtab.nochim = readRDS(\"$seqtab_nochim\")\n\n        #track reads through pipeline\n        getN <- function(x) sum(getUniques(x))\n        if ( nrow(filter_and_trim) == 1 ) {\n            track <- cbind(filter_and_trim, getN(dadaFs), getN(dadaRs), getN(mergers), rowSums(seqtab.nochim))\n        } else {\n            track <- cbind(filter_and_trim, sapply(dadaFs, getN), sapply(dadaRs, getN), sapply(mergers, getN), rowSums(seqtab.nochim))\n        }\n        colnames(track) <- c(\"DADA2_input\", \"filtered\", \"denoisedF\", \"denoisedR\", \"merged\", \"nonchim\")\n        rownames(track) <- sub(pattern = \"_1.fastq.gz\\$\", replacement = \"\", rownames(track)) #this is when cutadapt is skipped!\n        track <- cbind(sample = sub(pattern = \"(.*?)\\\\\\\\..*\\$\", replacement = \"\\\\\\\\1\", rownames(track)), track)\n        write.table( track, file = \"${meta.run}.stats.tsv\", sep = \"\\\\t\", row.names = FALSE, quote = FALSE, na = '')\n\n        writeLines(c(\"\\\\\"${task.process}\\\\\":\", paste0(\"    R: \", paste0(R.Version()[c(\"major\",\"minor\")], collapse = \".\")),paste0(\"    dada2: \", packageVersion(\"dada2\")) ), \"versions.yml\")\n        \"\"\"\n    } else {\n        \"\"\"\n        #!/usr/bin/env Rscript\n        suppressPackageStartupMessages(library(dada2))\n\n        #combine filter_and_trim files\n        for (data in list.files(\"./filter_and_trim_files\", full.names=TRUE)){\n            if (!exists(\"filter_and_trim\")){ filter_and_trim <- read.csv(data, header=TRUE, sep=\"\\\\t\") }\n            if (exists(\"filter_and_trim\")){\n                tempory <-read.csv(data, header=TRUE, sep=\"\\\\t\")\n                filter_and_trim <-unique(rbind(filter_and_trim, tempory))\n                rm(tempory)\n            }\n        }\n        rownames(filter_and_trim) <- filter_and_trim\\$ID\n        filter_and_trim[\"ID\"] <- NULL\n        #write.table( filter_and_trim, file = \"${meta.run}.filter_and_trim.tsv\", sep = \"\\\\t\", row.names = TRUE, quote = FALSE, na = '')\n\n        #read data\n        dadaFs = readRDS(\"${denoised[0]}\")\n        seqtab.nochim = readRDS(\"$seqtab_nochim\")\n\n        #track reads through pipeline\n        getN <- function(x) sum(getUniques(x))\n        if ( nrow(filter_and_trim) == 1 ) {\n            track <- cbind(filter_and_trim, getN(dadaFs), rowSums(seqtab.nochim))\n        } else {\n            track <- cbind(filter_and_trim, sapply(dadaFs, getN), rowSums(seqtab.nochim))\n        }\n        colnames(track) <- c(\"input\", \"filtered\", \"denoised\", \"nonchim\")\n        track <- cbind(sample = sub(pattern = \"(.*?)\\\\\\\\..*\\$\", replacement = \"\\\\\\\\1\", rownames(track)), track)\n        write.table( track, file = \"${meta.run}.stats.tsv\", sep = \"\\\\t\", row.names = FALSE, quote = FALSE, na = '')\n\n        writeLines(c(\"\\\\\"${task.process}\\\\\":\", paste0(\"    R: \", paste0(R.Version()[c(\"major\",\"minor\")], collapse = \".\")),paste0(\"    dada2: \", packageVersion(\"dada2\")) ), \"versions.yml\")\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 90,
        "string_script": "    if (!meta.single_end) {\n        \"\"\"\n        #!/usr/bin/env Rscript\n        suppressPackageStartupMessages(library(dada2))\n\n        #combine filter_and_trim files\n        for (data in list.files(\"./filter_and_trim_files\", full.names=TRUE)){\n            if (!exists(\"filter_and_trim\")){ filter_and_trim <- read.csv(data, header=TRUE, sep=\"\\\\t\") }\n            if (exists(\"filter_and_trim\")){\n                tempory <-read.csv(data, header=TRUE, sep=\"\\\\t\")\n                filter_and_trim <-unique(rbind(filter_and_trim, tempory))\n                rm(tempory)\n            }\n        }\n        rownames(filter_and_trim) <- filter_and_trim\\$ID\n        filter_and_trim[\"ID\"] <- NULL\n        #write.table( filter_and_trim, file = \"${meta.run}.filter_and_trim.tsv\", sep = \"\\\\t\", row.names = TRUE, quote = FALSE, na = '')\n\n        #read data\n        dadaFs = readRDS(\"${denoised[0]}\")\n        dadaRs = readRDS(\"${denoised[1]}\")\n        mergers = readRDS(\"$mergers\")\n        seqtab.nochim = readRDS(\"$seqtab_nochim\")\n\n        #track reads through pipeline\n        getN <- function(x) sum(getUniques(x))\n        if ( nrow(filter_and_trim) == 1 ) {\n            track <- cbind(filter_and_trim, getN(dadaFs), getN(dadaRs), getN(mergers), rowSums(seqtab.nochim))\n        } else {\n            track <- cbind(filter_and_trim, sapply(dadaFs, getN), sapply(dadaRs, getN), sapply(mergers, getN), rowSums(seqtab.nochim))\n        }\n        colnames(track) <- c(\"DADA2_input\", \"filtered\", \"denoisedF\", \"denoisedR\", \"merged\", \"nonchim\")\n        rownames(track) <- sub(pattern = \"_1.fastq.gz\\$\", replacement = \"\", rownames(track)) #this is when cutadapt is skipped!\n        track <- cbind(sample = sub(pattern = \"(.*?)\\\\\\\\..*\\$\", replacement = \"\\\\\\\\1\", rownames(track)), track)\n        write.table( track, file = \"${meta.run}.stats.tsv\", sep = \"\\\\t\", row.names = FALSE, quote = FALSE, na = '')\n\n        writeLines(c(\"\\\\\"${task.process}\\\\\":\", paste0(\"    R: \", paste0(R.Version()[c(\"major\",\"minor\")], collapse = \".\")),paste0(\"    dada2: \", packageVersion(\"dada2\")) ), \"versions.yml\")\n        \"\"\"\n    } else {\n        \"\"\"\n        #!/usr/bin/env Rscript\n        suppressPackageStartupMessages(library(dada2))\n\n        #combine filter_and_trim files\n        for (data in list.files(\"./filter_and_trim_files\", full.names=TRUE)){\n            if (!exists(\"filter_and_trim\")){ filter_and_trim <- read.csv(data, header=TRUE, sep=\"\\\\t\") }\n            if (exists(\"filter_and_trim\")){\n                tempory <-read.csv(data, header=TRUE, sep=\"\\\\t\")\n                filter_and_trim <-unique(rbind(filter_and_trim, tempory))\n                rm(tempory)\n            }\n        }\n        rownames(filter_and_trim) <- filter_and_trim\\$ID\n        filter_and_trim[\"ID\"] <- NULL\n        #write.table( filter_and_trim, file = \"${meta.run}.filter_and_trim.tsv\", sep = \"\\\\t\", row.names = TRUE, quote = FALSE, na = '')\n\n        #read data\n        dadaFs = readRDS(\"${denoised[0]}\")\n        seqtab.nochim = readRDS(\"$seqtab_nochim\")\n\n        #track reads through pipeline\n        getN <- function(x) sum(getUniques(x))\n        if ( nrow(filter_and_trim) == 1 ) {\n            track <- cbind(filter_and_trim, getN(dadaFs), rowSums(seqtab.nochim))\n        } else {\n            track <- cbind(filter_and_trim, sapply(dadaFs, getN), rowSums(seqtab.nochim))\n        }\n        colnames(track) <- c(\"input\", \"filtered\", \"denoised\", \"nonchim\")\n        track <- cbind(sample = sub(pattern = \"(.*?)\\\\\\\\..*\\$\", replacement = \"\\\\\\\\1\", rownames(track)), track)\n        write.table( track, file = \"${meta.run}.stats.tsv\", sep = \"\\\\t\", row.names = FALSE, quote = FALSE, na = '')\n\n        writeLines(c(\"\\\\\"${task.process}\\\\\":\", paste0(\"    R: \", paste0(R.Version()[c(\"major\",\"minor\")], collapse = \".\")),paste0(\"    dada2: \", packageVersion(\"dada2\")) ), \"versions.yml\")\n        \"\"\"\n    }",
        "nb_lignes_script": 73,
        "language_script": "Rscript",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "denoised",
            "mergers",
            "seqtab_nochim"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__ampliseq",
        "directive": [
            "tag \"$meta.run\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconductor-dada2=1.22.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bioconductor-dada2:1.22.0--r41h399db7b_0' : 'quay.io/biocontainers/bioconductor-dada2:1.22.0--r41h399db7b_0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "QIIME2_TRAIN": {
        "name_process": "QIIME2_TRAIN",
        "string_process": "process QIIME2_TRAIN {\n    tag \"${meta.FW_primer}-${meta.RV_primer}\"\n    label 'process_high'\n    label 'single_cpu'\n\n    conda (params.enable_conda ? { exit 1 \"QIIME2 has no conda package\" } : null)\n    container \"quay.io/qiime2/core:2021.8\"\n\n    input:\n    tuple val(meta), path(qza)\n\n    output:\n    path(\"*-classifier.qza\"), emit: qza\n    path \"versions.yml\"    , emit: versions\n\n    script:\n    \"\"\"\n    export XDG_CONFIG_HOME=\"\\${PWD}/HOME\"\n\n    #Train classifier\n    qiime feature-classifier fit-classifier-naive-bayes \\\n        --i-reference-reads ${meta.FW_primer}-${meta.RV_primer}-ref-seq.qza \\\n        --i-reference-taxonomy ref-taxonomy.qza \\\n        --o-classifier ${meta.FW_primer}-${meta.RV_primer}-classifier.qza \\\n        --quiet\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        qiime2: \\$( qiime --version | sed -e \"s/q2cli version //g\" | tr -d '`' | sed -e \"s/Run qiime info for more version details.//g\" )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "    \"\"\"\n    export XDG_CONFIG_HOME=\"\\${PWD}/HOME\"\n\n    #Train classifier\n    qiime feature-classifier fit-classifier-naive-bayes \\\n        --i-reference-reads ${meta.FW_primer}-${meta.RV_primer}-ref-seq.qza \\\n        --i-reference-taxonomy ref-taxonomy.qza \\\n        --o-classifier ${meta.FW_primer}-${meta.RV_primer}-classifier.qza \\\n        --quiet\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        qiime2: \\$( qiime --version | sed -e \"s/q2cli version //g\" | tr -d '`' | sed -e \"s/Run qiime info for more version details.//g\" )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "QIIME"
        ],
        "tools_url": [
            "https://bio.tools/qiime"
        ],
        "tools_dico": [
            {
                "name": "QIIME",
                "uri": "https://bio.tools/qiime",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biological science"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2945",
                                    "term": "Analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Open-source bioinformatics pipeline for performing microbiome analysis from raw DNA sequencing data. The pipeline is designed to take users from raw sequencing data generated on the Illumina or other platforms through publication quality graphics and statistics. This includes demultiplexing and quality filtering, OTU picking, taxonomic assignment, and phylogenetic reconstruction, and diversity analyses and visualizations.",
                "homepage": "http://qiime.org/"
            }
        ],
        "inputs": [
            "meta",
            "qza"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__ampliseq",
        "directive": [
            "tag \"${meta.FW_primer}-${meta.RV_primer}\"",
            "label 'process_high'",
            "label 'single_cpu'",
            "conda (params.enable_conda ? { exit 1 \"QIIME2 has no conda package\" } : null)",
            "container \"quay.io/qiime2/core:2021.8\""
        ],
        "when": "",
        "stub": ""
    },
    "QIIME2_FILTERASV": {
        "name_process": "QIIME2_FILTERASV",
        "string_process": "process QIIME2_FILTERASV {\n    tag \"${category}\"\n    label 'process_low'\n\n    conda (params.enable_conda ? { exit 1 \"QIIME2 has no conda package\" } : null)\n    container \"quay.io/qiime2/core:2021.8\"\n\n    input:\n    path(metadata)\n    path(table)\n    val(category)\n\n    output:\n    path(\"*.qza\")       , emit: qza\n    path \"versions.yml\" , emit: versions\n\n    script:\n    if ( category.length() > 0 ) {\n        \"\"\"\n        export XDG_CONFIG_HOME=\"\\${PWD}/HOME\"\n\n        IFS=',' read -r -a metacategory <<< \\\"$category\\\"\n\n        #remove samples that do not have any value\n        for j in \\\"\\${metacategory[@]}\\\"\n        do\n            qiime feature-table filter-samples \\\n                --i-table ${table} \\\n                --m-metadata-file ${metadata} \\\n                --p-where \\\"\\$j<>\\'\\'\\\" \\\n                --o-filtered-table \\$j.qza\n        done\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            qiime2: \\$( qiime --version | sed -e \"s/q2cli version //g\" | tr -d '`' | sed -e \"s/Run qiime info for more version details.//g\" )\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        mkdir beta_diversity\n        echo \"\" > \"WARNING No column in ${metadata.baseName} seemed suitable.qza\"\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            qiime2: \\$( qiime --version | sed -e \"s/q2cli version //g\" | tr -d '`' | sed -e \"s/Run qiime info for more version details.//g\" )\n        END_VERSIONS\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 47,
        "string_script": "    if ( category.length() > 0 ) {\n        \"\"\"\n        export XDG_CONFIG_HOME=\"\\${PWD}/HOME\"\n\n        IFS=',' read -r -a metacategory <<< \\\"$category\\\"\n\n        #remove samples that do not have any value\n        for j in \\\"\\${metacategory[@]}\\\"\n        do\n            qiime feature-table filter-samples \\\n                --i-table ${table} \\\n                --m-metadata-file ${metadata} \\\n                --p-where \\\"\\$j<>\\'\\'\\\" \\\n                --o-filtered-table \\$j.qza\n        done\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            qiime2: \\$( qiime --version | sed -e \"s/q2cli version //g\" | tr -d '`' | sed -e \"s/Run qiime info for more version details.//g\" )\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        mkdir beta_diversity\n        echo \"\" > \"WARNING No column in ${metadata.baseName} seemed suitable.qza\"\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            qiime2: \\$( qiime --version | sed -e \"s/q2cli version //g\" | tr -d '`' | sed -e \"s/Run qiime info for more version details.//g\" )\n        END_VERSIONS\n        \"\"\"\n    }",
        "nb_lignes_script": 30,
        "language_script": "bash",
        "tools": [
            "QIIME"
        ],
        "tools_url": [
            "https://bio.tools/qiime"
        ],
        "tools_dico": [
            {
                "name": "QIIME",
                "uri": "https://bio.tools/qiime",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biological science"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2945",
                                    "term": "Analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Open-source bioinformatics pipeline for performing microbiome analysis from raw DNA sequencing data. The pipeline is designed to take users from raw sequencing data generated on the Illumina or other platforms through publication quality graphics and statistics. This includes demultiplexing and quality filtering, OTU picking, taxonomic assignment, and phylogenetic reconstruction, and diversity analyses and visualizations.",
                "homepage": "http://qiime.org/"
            }
        ],
        "inputs": [
            "metadata",
            "table",
            "category"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__ampliseq",
        "directive": [
            "tag \"${category}\"",
            "label 'process_low'",
            "conda (params.enable_conda ? { exit 1 \"QIIME2 has no conda package\" } : null)",
            "container \"quay.io/qiime2/core:2021.8\""
        ],
        "when": "",
        "stub": ""
    },
    "QIIME2_EXPORT_ABSOLUTE": {
        "name_process": "QIIME2_EXPORT_ABSOLUTE",
        "string_process": "process QIIME2_EXPORT_ABSOLUTE {\n    label 'process_low'\n\n    conda (params.enable_conda ? { exit 1 \"QIIME2 has no conda package\" } : null)\n    container \"quay.io/qiime2/core:2021.8\"\n\n    input:\n    path(table)\n    path(repseq)\n    path(taxonomy)\n    val(tax_agglom_min)\n    val(tax_agglom_max)\n\n    output:\n    path(\"rep-seq.fasta\")            , emit: fasta\n    path(\"feature-table.tsv\")        , emit: tsv\n    path(\"feature-table.biom\")       , emit: biom\n    path(\"seven_number_summary.tsv\") , emit: summary\n    path(\"descriptive_stats.tsv\")    , emit: descr\n    path(\"abs-abund-table-*.tsv\")    , emit: abundtable\n    path \"versions.yml\"              , emit: versions\n\n    script:\n    \"\"\"\n    export XDG_CONFIG_HOME=\"\\${PWD}/HOME\"\n\n    #produce raw count table in biom format \"table/feature-table.biom\"\n    qiime tools export --input-path ${table}  \\\n        --output-path table\n    cp table/feature-table.biom .\n\n    #produce raw count table \"table/feature-table.tsv\"\n    biom convert -i table/feature-table.biom \\\n        -o feature-table.tsv  \\\n        --to-tsv\n\n    #produce representative sequence fasta file \"sequences.fasta\"\n    qiime feature-table tabulate-seqs  \\\n        --i-data ${repseq}  \\\n        --o-visualization rep-seqs.qzv\n    qiime tools export --input-path rep-seqs.qzv  \\\n        --output-path representative_sequences\n    cp representative_sequences/sequences.fasta rep-seq.fasta\n    cp representative_sequences/*.tsv .\n\n    ##on several taxa level\n    array=(\\$(seq ${tax_agglom_min} 1 ${tax_agglom_max}))\n    for i in \\${array[@]}\n    do\n        #collapse taxa\n        qiime taxa collapse \\\n            --i-table ${table} \\\n            --i-taxonomy ${taxonomy} \\\n            --p-level \\$i \\\n            --o-collapsed-table table-\\$i.qza\n        #export to biom\n        qiime tools export --input-path table-\\$i.qza \\\n            --output-path table-\\$i\n        #convert to tab separated text file\n        biom convert \\\n            -i table-\\$i/feature-table.biom \\\n            -o abs-abund-table-\\$i.tsv --to-tsv\n    done\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        qiime2: \\$( qiime --version | sed -e \"s/q2cli version //g\" | tr -d '`' | sed -e \"s/Run qiime info for more version details.//g\" )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 68,
        "string_script": "    \"\"\"\n    export XDG_CONFIG_HOME=\"\\${PWD}/HOME\"\n\n    #produce raw count table in biom format \"table/feature-table.biom\"\n    qiime tools export --input-path ${table}  \\\n        --output-path table\n    cp table/feature-table.biom .\n\n    #produce raw count table \"table/feature-table.tsv\"\n    biom convert -i table/feature-table.biom \\\n        -o feature-table.tsv  \\\n        --to-tsv\n\n    #produce representative sequence fasta file \"sequences.fasta\"\n    qiime feature-table tabulate-seqs  \\\n        --i-data ${repseq}  \\\n        --o-visualization rep-seqs.qzv\n    qiime tools export --input-path rep-seqs.qzv  \\\n        --output-path representative_sequences\n    cp representative_sequences/sequences.fasta rep-seq.fasta\n    cp representative_sequences/*.tsv .\n\n    ##on several taxa level\n    array=(\\$(seq ${tax_agglom_min} 1 ${tax_agglom_max}))\n    for i in \\${array[@]}\n    do\n        #collapse taxa\n        qiime taxa collapse \\\n            --i-table ${table} \\\n            --i-taxonomy ${taxonomy} \\\n            --p-level \\$i \\\n            --o-collapsed-table table-\\$i.qza\n        #export to biom\n        qiime tools export --input-path table-\\$i.qza \\\n            --output-path table-\\$i\n        #convert to tab separated text file\n        biom convert \\\n            -i table-\\$i/feature-table.biom \\\n            -o abs-abund-table-\\$i.tsv --to-tsv\n    done\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        qiime2: \\$( qiime --version | sed -e \"s/q2cli version //g\" | tr -d '`' | sed -e \"s/Run qiime info for more version details.//g\" )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 45,
        "language_script": "bash",
        "tools": [
            "QIIME",
            "BioMe"
        ],
        "tools_url": [
            "https://bio.tools/qiime",
            "https://bio.tools/biome"
        ],
        "tools_dico": [
            {
                "name": "QIIME",
                "uri": "https://bio.tools/qiime",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biological science"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2945",
                                    "term": "Analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Open-source bioinformatics pipeline for performing microbiome analysis from raw DNA sequencing data. The pipeline is designed to take users from raw sequencing data generated on the Illumina or other platforms through publication quality graphics and statistics. This includes demultiplexing and quality filtering, OTU picking, taxonomic assignment, and phylogenetic reconstruction, and diversity analyses and visualizations.",
                "homepage": "http://qiime.org/"
            },
            {
                "name": "BioMe",
                "uri": "https://bio.tools/biome",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3534",
                            "term": "Protein binding sites"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2269",
                            "term": "Statistics and probability"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_1834",
                                    "term": "Protein-metal contact calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1831",
                                    "term": "Metal-bound cysteine detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2950",
                                    "term": "Residue distance calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0249",
                                    "term": "Protein geometry calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_1834",
                                    "term": "Residue-metal contact calculation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Biologically Relevant Metals (BioMe) is a web based platform for calculation of various statistical properties of metal binding sites including distribution of coordinate geometry and other descriptive statistics for a metal ion. The underlying database contains for each metal ion: PDB code, structure determination method, types of metal binding chains and names and coordinates of bound ligands, among other details.",
                "homepage": "http://metals.zesoi.fer.hr"
            }
        ],
        "inputs": [
            "table",
            "repseq",
            "taxonomy",
            "tax_agglom_min",
            "tax_agglom_max"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__ampliseq",
        "directive": [
            "label 'process_low'",
            "conda (params.enable_conda ? { exit 1 \"QIIME2 has no conda package\" } : null)",
            "container \"quay.io/qiime2/core:2021.8\""
        ],
        "when": "",
        "stub": ""
    },
    "COMBINE_TABLE": {
        "name_process": "COMBINE_TABLE",
        "string_process": "process COMBINE_TABLE {\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconductor::biostrings=2.58.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bioconductor-biostrings:2.58.0--r40h037d062_0' :\n        'quay.io/biocontainers/bioconductor-biostrings:2.58.0--r40h037d062_0' }\"\n\n    input:\n    path(table)\n    path(seq)\n    path(tax)\n    val(outfile)\n\n    output:\n    path(\"${outfile}\")  , emit: tsv\n    path \"versions.yml\" , emit: versions\n\n    script:\n    \"\"\"\n    combine_table.r ${table} ${seq} ${tax}\n    mv combined_ASV_table.tsv ${outfile}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        R: \\$(R --version 2>&1 | sed -n 1p | sed 's/R version //' | sed 's/ (.*//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "    \"\"\"\n    combine_table.r ${table} ${seq} ${tax}\n    mv combined_ASV_table.tsv ${outfile}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        R: \\$(R --version 2>&1 | sed -n 1p | sed 's/R version //' | sed 's/ (.*//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "table",
            "seq",
            "tax",
            "outfile"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__ampliseq",
        "directive": [
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconductor::biostrings=2.58.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bioconductor-biostrings:2.58.0--r40h037d062_0' : 'quay.io/biocontainers/bioconductor-biostrings:2.58.0--r40h037d062_0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "QIIME2_DIVERSITY_BETA": {
        "name_process": "QIIME2_DIVERSITY_BETA",
        "string_process": "process QIIME2_DIVERSITY_BETA {\n    tag \"${core.baseName}\"\n    label 'process_low'\n\n    conda (params.enable_conda ? { exit 1 \"QIIME2 has no conda package\" } : null)\n    container \"quay.io/qiime2/core:2021.8\"\n\n    input:\n    tuple path(metadata), path(core), val(category)\n\n    output:\n    path(\"beta_diversity/*\"), emit: beta\n    path \"versions.yml\"     , emit: versions\n\n    script:\n    if ( category.length() > 0 ) {\n        \"\"\"\n        export XDG_CONFIG_HOME=\"\\${PWD}/HOME\"\n\n        IFS=',' read -r -a metacategory <<< \\\"$category\\\"\n        for j in \\\"\\${metacategory[@]}\\\"\n        do\n            qiime diversity beta-group-significance \\\n                --i-distance-matrix ${core} \\\n                --m-metadata-file ${metadata} \\\n                --m-metadata-column \\\"\\$j\\\" \\\n                --o-visualization ${core.baseName}-\\$j.qzv \\\n                --p-pairwise\n            qiime tools export --input-path ${core.baseName}-\\$j.qzv \\\n                --output-path beta_diversity/${core.baseName}-\\$j\n        done\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            qiime2: \\$( qiime --version | sed -e \"s/q2cli version //g\" | tr -d '`' | sed -e \"s/Run qiime info for more version details.//g\" )\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        mkdir beta_diversity\n        echo \"\" > \"beta_diversity/WARNING No column in ${metadata.baseName} seemed suitable.txt\"\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            qiime2: \\$( qiime --version | sed -e \"s/q2cli version //g\" | tr -d '`' | sed -e \"s/Run qiime info for more version details.//g\" )\n        END_VERSIONS\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 47,
        "string_script": "    if ( category.length() > 0 ) {\n        \"\"\"\n        export XDG_CONFIG_HOME=\"\\${PWD}/HOME\"\n\n        IFS=',' read -r -a metacategory <<< \\\"$category\\\"\n        for j in \\\"\\${metacategory[@]}\\\"\n        do\n            qiime diversity beta-group-significance \\\n                --i-distance-matrix ${core} \\\n                --m-metadata-file ${metadata} \\\n                --m-metadata-column \\\"\\$j\\\" \\\n                --o-visualization ${core.baseName}-\\$j.qzv \\\n                --p-pairwise\n            qiime tools export --input-path ${core.baseName}-\\$j.qzv \\\n                --output-path beta_diversity/${core.baseName}-\\$j\n        done\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            qiime2: \\$( qiime --version | sed -e \"s/q2cli version //g\" | tr -d '`' | sed -e \"s/Run qiime info for more version details.//g\" )\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        mkdir beta_diversity\n        echo \"\" > \"beta_diversity/WARNING No column in ${metadata.baseName} seemed suitable.txt\"\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            qiime2: \\$( qiime --version | sed -e \"s/q2cli version //g\" | tr -d '`' | sed -e \"s/Run qiime info for more version details.//g\" )\n        END_VERSIONS\n        \"\"\"\n    }",
        "nb_lignes_script": 32,
        "language_script": "bash",
        "tools": [
            "QIIME"
        ],
        "tools_url": [
            "https://bio.tools/qiime"
        ],
        "tools_dico": [
            {
                "name": "QIIME",
                "uri": "https://bio.tools/qiime",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biological science"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2945",
                                    "term": "Analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Open-source bioinformatics pipeline for performing microbiome analysis from raw DNA sequencing data. The pipeline is designed to take users from raw sequencing data generated on the Illumina or other platforms through publication quality graphics and statistics. This includes demultiplexing and quality filtering, OTU picking, taxonomic assignment, and phylogenetic reconstruction, and diversity analyses and visualizations.",
                "homepage": "http://qiime.org/"
            }
        ],
        "inputs": [
            "category",
            "metadata",
            "core"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__ampliseq",
        "directive": [
            "tag \"${core.baseName}\"",
            "label 'process_low'",
            "conda (params.enable_conda ? { exit 1 \"QIIME2 has no conda package\" } : null)",
            "container \"quay.io/qiime2/core:2021.8\""
        ],
        "when": "",
        "stub": ""
    },
    "DADA2_DENOISING": {
        "name_process": "DADA2_DENOISING",
        "string_process": "process DADA2_DENOISING {\n    tag \"$meta.run\"\n    label 'process_medium'\n    label 'process_long'\n\n    conda (params.enable_conda ? \"bioconductor-dada2=1.22.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bioconductor-dada2:1.22.0--r41h399db7b_0' :\n        'quay.io/biocontainers/bioconductor-dada2:1.22.0--r41h399db7b_0' }\"\n\n    input:\n    tuple val(meta), path(\"filtered/*\"), path(errormodel)\n\n    output:\n    tuple val(meta), path(\"*.dada.rds\")   , emit: denoised\n    tuple val(meta), path(\"*.seqtab.rds\") , emit: seqtab\n    tuple val(meta), path(\"*.mergers.rds\"), emit: mergers\n    tuple val(meta), path(\"*.log\")        , emit: log\n    path \"versions.yml\"                   , emit: versions\n    path \"*.args.txt\"                     , emit: args\n\n    script:\n    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    if (!meta.single_end) {\n        \"\"\"\n        #!/usr/bin/env Rscript\n        suppressPackageStartupMessages(library(dada2))\n\n        errF = readRDS(\"${errormodel[0]}\")\n        errR = readRDS(\"${errormodel[1]}\")\n\n        filtFs <- sort(list.files(\"./filtered/\", pattern = \"_1.filt.fastq.gz\", full.names = TRUE))\n        filtRs <- sort(list.files(\"./filtered/\", pattern = \"_2.filt.fastq.gz\", full.names = TRUE))\n\n        #denoising\n        sink(file = \"${meta.run}.dada.log\")\n        dadaFs <- dada(filtFs, err = errF, $args, multithread = $task.cpus)\n        saveRDS(dadaFs, \"${meta.run}_1.dada.rds\")\n        dadaRs <- dada(filtRs, err = errR, $args, multithread = $task.cpus)\n        saveRDS(dadaRs, \"${meta.run}_2.dada.rds\")\n        sink(file = NULL)\n\n        #make table\n        mergers <- mergePairs(dadaFs, filtFs, dadaRs, filtRs, $args2, verbose=TRUE)\n        saveRDS(mergers, \"${meta.run}.mergers.rds\")\n        seqtab <- makeSequenceTable(mergers)\n        saveRDS(seqtab, \"${meta.run}.seqtab.rds\")\n\n        write.table('dada\\t$args', file = \"dada.args.txt\", row.names = FALSE, col.names = FALSE, quote = FALSE, na = '')\n        write.table('mergePairs\\t$args2', file = \"mergePairs.args.txt\", row.names = FALSE, col.names = FALSE, quote = FALSE, na = '')\n        writeLines(c(\"\\\\\"${task.process}\\\\\":\", paste0(\"    R: \", paste0(R.Version()[c(\"major\",\"minor\")], collapse = \".\")),paste0(\"    dada2: \", packageVersion(\"dada2\")) ), \"versions.yml\")\n        \"\"\"\n    } else {\n        \"\"\"\n        #!/usr/bin/env Rscript\n        suppressPackageStartupMessages(library(dada2))\n\n        errF = readRDS(\"${errormodel}\")\n\n        filtFs <- sort(list.files(\"./filtered/\", pattern = \".fastq.gz\", full.names = TRUE))\n\n        #denoising\n        sink(file = \"${meta.run}.dada.log\")\n        dadaFs <- dada(filtFs, err = errF, $args, multithread = $task.cpus)\n        saveRDS(dadaFs, \"${meta.run}.dada.rds\")\n        sink(file = NULL)\n\n        #make table\n        seqtab <- makeSequenceTable(dadaFs)\n        saveRDS(seqtab, \"${meta.run}.seqtab.rds\")\n\n        #dummy file to fulfill output rules\n        saveRDS(\"dummy\", \"dummy_${meta.run}.mergers.rds\")\n\n        write.table('dada\\t$args', file = \"dada.args.txt\", row.names = FALSE, col.names = FALSE, quote = FALSE, na = '')\n        writeLines(c(\"\\\\\"${task.process}\\\\\":\", paste0(\"    R: \", paste0(R.Version()[c(\"major\",\"minor\")], collapse = \".\")),paste0(\"    dada2: \", packageVersion(\"dada2\")) ), \"versions.yml\")\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 78,
        "string_script": "    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    if (!meta.single_end) {\n        \"\"\"\n        #!/usr/bin/env Rscript\n        suppressPackageStartupMessages(library(dada2))\n\n        errF = readRDS(\"${errormodel[0]}\")\n        errR = readRDS(\"${errormodel[1]}\")\n\n        filtFs <- sort(list.files(\"./filtered/\", pattern = \"_1.filt.fastq.gz\", full.names = TRUE))\n        filtRs <- sort(list.files(\"./filtered/\", pattern = \"_2.filt.fastq.gz\", full.names = TRUE))\n\n        #denoising\n        sink(file = \"${meta.run}.dada.log\")\n        dadaFs <- dada(filtFs, err = errF, $args, multithread = $task.cpus)\n        saveRDS(dadaFs, \"${meta.run}_1.dada.rds\")\n        dadaRs <- dada(filtRs, err = errR, $args, multithread = $task.cpus)\n        saveRDS(dadaRs, \"${meta.run}_2.dada.rds\")\n        sink(file = NULL)\n\n        #make table\n        mergers <- mergePairs(dadaFs, filtFs, dadaRs, filtRs, $args2, verbose=TRUE)\n        saveRDS(mergers, \"${meta.run}.mergers.rds\")\n        seqtab <- makeSequenceTable(mergers)\n        saveRDS(seqtab, \"${meta.run}.seqtab.rds\")\n\n        write.table('dada\\t$args', file = \"dada.args.txt\", row.names = FALSE, col.names = FALSE, quote = FALSE, na = '')\n        write.table('mergePairs\\t$args2', file = \"mergePairs.args.txt\", row.names = FALSE, col.names = FALSE, quote = FALSE, na = '')\n        writeLines(c(\"\\\\\"${task.process}\\\\\":\", paste0(\"    R: \", paste0(R.Version()[c(\"major\",\"minor\")], collapse = \".\")),paste0(\"    dada2: \", packageVersion(\"dada2\")) ), \"versions.yml\")\n        \"\"\"\n    } else {\n        \"\"\"\n        #!/usr/bin/env Rscript\n        suppressPackageStartupMessages(library(dada2))\n\n        errF = readRDS(\"${errormodel}\")\n\n        filtFs <- sort(list.files(\"./filtered/\", pattern = \".fastq.gz\", full.names = TRUE))\n\n        #denoising\n        sink(file = \"${meta.run}.dada.log\")\n        dadaFs <- dada(filtFs, err = errF, $args, multithread = $task.cpus)\n        saveRDS(dadaFs, \"${meta.run}.dada.rds\")\n        sink(file = NULL)\n\n        #make table\n        seqtab <- makeSequenceTable(dadaFs)\n        saveRDS(seqtab, \"${meta.run}.seqtab.rds\")\n\n        #dummy file to fulfill output rules\n        saveRDS(\"dummy\", \"dummy_${meta.run}.mergers.rds\")\n\n        write.table('dada\\t$args', file = \"dada.args.txt\", row.names = FALSE, col.names = FALSE, quote = FALSE, na = '')\n        writeLines(c(\"\\\\\"${task.process}\\\\\":\", paste0(\"    R: \", paste0(R.Version()[c(\"major\",\"minor\")], collapse = \".\")),paste0(\"    dada2: \", packageVersion(\"dada2\")) ), \"versions.yml\")\n        \"\"\"\n    }",
        "nb_lignes_script": 56,
        "language_script": "Rscript",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "errormodel"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__ampliseq",
        "directive": [
            "tag \"$meta.run\"",
            "label 'process_medium'",
            "label 'process_long'",
            "conda (params.enable_conda ? \"bioconductor-dada2=1.22.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bioconductor-dada2:1.22.0--r41h399db7b_0' : 'quay.io/biocontainers/bioconductor-dada2:1.22.0--r41h399db7b_0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "DADA2_TAXONOMY": {
        "name_process": "DADA2_TAXONOMY",
        "string_process": "process DADA2_TAXONOMY {\n    tag \"${fasta},${database}\"\n    label 'process_high'\n\n    conda (params.enable_conda ? \"bioconductor-dada2=1.22.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bioconductor-dada2:1.22.0--r41h399db7b_0' :\n        'quay.io/biocontainers/bioconductor-dada2:1.22.0--r41h399db7b_0' }\"\n\n    input:\n    path(fasta)\n    path(database)\n    val(outfile)\n\n    output:\n    path(outfile), emit: tsv\n    path( \"ASV_tax.rds\" ), emit: rds\n    path \"versions.yml\"  , emit: versions\n    path \"*.args.txt\"    , emit: args\n\n    script:\n    def args = task.ext.args ?: ''\n    def seed = task.ext.seed ?: '100'\n    \"\"\"\n    #!/usr/bin/env Rscript\n    suppressPackageStartupMessages(library(dada2))\n    set.seed($seed) # Initialize random number generator for reproducibility\n\n    seq <- getSequences(\\\"$fasta\\\", collapse = TRUE, silence = FALSE)\n    taxa <- assignTaxonomy(seq, \\\"$database\\\", taxLevels = c(\"Domain\", \"Kingdom\", \"Phylum\", \"Class\", \"Order\", \"Family\", \"Genus\", \"Species\"), $args, multithread = $task.cpus, verbose=TRUE, outputBootstraps = TRUE)\n\n    # Make a data frame, add ASV_ID from seq, set confidence to the bootstrap for the most specific taxon and reorder columns before writing to file\n    tx <- data.frame(ASV_ID = names(seq), taxa, sequence = row.names(taxa\\$tax), row.names = names(seq))\n    tx\\$confidence <- with(tx,\n        ifelse(!is.na(tax.Genus), boot.Genus,\n            ifelse(!is.na(tax.Family), boot.Family,\n                ifelse(!is.na(tax.Order), boot.Order,\n                    ifelse(!is.na(tax.Class), boot.Class,\n                        ifelse(!is.na(tax.Phylum), boot.Phylum,\n                            ifelse(!is.na(tax.Kingdom), boot.Kingdom,\n                                ifelse(!is.na(tax.Domain), boot.Domain, 0)\n                            )\n                        )\n                    )\n                )\n            )\n        )\n    )/100\n    taxa_export <- data.frame(\n        ASV_ID = tx\\$ASV_ID,\n        Domain = tx\\$tax.Domain,\n        Kingdom = tx\\$tax.Kingdom,\n        Phylum = tx\\$tax.Phylum,\n        Class = tx\\$tax.Class,\n        Order = tx\\$tax.Order,\n        Family = tx\\$tax.Family,\n        Genus = tx\\$tax.Genus,\n        confidence = tx\\$confidence,\n        sequence = tx\\$sequence,\n        row.names = names(seq)\n    )\n\n    write.table(taxa_export, file = \\\"$outfile\\\", sep = \"\\\\t\", row.names = FALSE, col.names = TRUE, quote = FALSE, na = '')\n\n    # Save a version with rownames for addSpecies\n    taxa_export <- cbind( ASV_ID = tx\\$ASV_ID, taxa\\$tax, confidence = tx\\$confidence)\n    saveRDS(taxa_export, \"ASV_tax.rds\")\n\n    write.table('assignTaxonomy\\t$args\\nseed\\t$seed', file = \"assignTaxonomy.args.txt\", row.names = FALSE, col.names = FALSE, quote = FALSE, na = '')\n    writeLines(c(\"\\\\\"${task.process}\\\\\":\", paste0(\"    R: \", paste0(R.Version()[c(\"major\",\"minor\")], collapse = \".\")),paste0(\"    dada2: \", packageVersion(\"dada2\")) ), \"versions.yml\")\n    \"\"\"\n}",
        "nb_lignes_process": 70,
        "string_script": "    def args = task.ext.args ?: ''\n    def seed = task.ext.seed ?: '100'\n    \"\"\"\n    #!/usr/bin/env Rscript\n    suppressPackageStartupMessages(library(dada2))\n    set.seed($seed) # Initialize random number generator for reproducibility\n\n    seq <- getSequences(\\\"$fasta\\\", collapse = TRUE, silence = FALSE)\n    taxa <- assignTaxonomy(seq, \\\"$database\\\", taxLevels = c(\"Domain\", \"Kingdom\", \"Phylum\", \"Class\", \"Order\", \"Family\", \"Genus\", \"Species\"), $args, multithread = $task.cpus, verbose=TRUE, outputBootstraps = TRUE)\n\n    # Make a data frame, add ASV_ID from seq, set confidence to the bootstrap for the most specific taxon and reorder columns before writing to file\n    tx <- data.frame(ASV_ID = names(seq), taxa, sequence = row.names(taxa\\$tax), row.names = names(seq))\n    tx\\$confidence <- with(tx,\n        ifelse(!is.na(tax.Genus), boot.Genus,\n            ifelse(!is.na(tax.Family), boot.Family,\n                ifelse(!is.na(tax.Order), boot.Order,\n                    ifelse(!is.na(tax.Class), boot.Class,\n                        ifelse(!is.na(tax.Phylum), boot.Phylum,\n                            ifelse(!is.na(tax.Kingdom), boot.Kingdom,\n                                ifelse(!is.na(tax.Domain), boot.Domain, 0)\n                            )\n                        )\n                    )\n                )\n            )\n        )\n    )/100\n    taxa_export <- data.frame(\n        ASV_ID = tx\\$ASV_ID,\n        Domain = tx\\$tax.Domain,\n        Kingdom = tx\\$tax.Kingdom,\n        Phylum = tx\\$tax.Phylum,\n        Class = tx\\$tax.Class,\n        Order = tx\\$tax.Order,\n        Family = tx\\$tax.Family,\n        Genus = tx\\$tax.Genus,\n        confidence = tx\\$confidence,\n        sequence = tx\\$sequence,\n        row.names = names(seq)\n    )\n\n    write.table(taxa_export, file = \\\"$outfile\\\", sep = \"\\\\t\", row.names = FALSE, col.names = TRUE, quote = FALSE, na = '')\n\n    # Save a version with rownames for addSpecies\n    taxa_export <- cbind( ASV_ID = tx\\$ASV_ID, taxa\\$tax, confidence = tx\\$confidence)\n    saveRDS(taxa_export, \"ASV_tax.rds\")\n\n    write.table('assignTaxonomy\\t$args\\nseed\\t$seed', file = \"assignTaxonomy.args.txt\", row.names = FALSE, col.names = FALSE, quote = FALSE, na = '')\n    writeLines(c(\"\\\\\"${task.process}\\\\\":\", paste0(\"    R: \", paste0(R.Version()[c(\"major\",\"minor\")], collapse = \".\")),paste0(\"    dada2: \", packageVersion(\"dada2\")) ), \"versions.yml\")\n    \"\"\"",
        "nb_lignes_script": 49,
        "language_script": "Rscript",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fasta",
            "database",
            "outfile"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__ampliseq",
        "directive": [
            "tag \"${fasta},${database}\"",
            "label 'process_high'",
            "conda (params.enable_conda ? \"bioconductor-dada2=1.22.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bioconductor-dada2:1.22.0--r41h399db7b_0' : 'quay.io/biocontainers/bioconductor-dada2:1.22.0--r41h399db7b_0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "PICRUST": {
        "name_process": "PICRUST",
        "string_process": "process PICRUST {\n    tag \"${seq},${abund}\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::picrust2=2.4.2\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/picrust2:2.4.2--pyhdfd78af_0' :\n        'quay.io/biocontainers/picrust2:2.4.2--pyhdfd78af_0' }\"\n\n    input:\n    path(seq)\n    path(abund)\n    val(source)\n    val(message)\n\n    output:\n    path(\"all_output/*\") , emit: outfolder\n    path(\"*_descrip.tsv\"), emit: pathways\n    path \"versions.yml\"  , emit: versions\n    path \"*.args.txt\"    , emit: args\n    path \"${message}.txt\"\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    #If input is QIIME2 file, than (1) the first line and (2) the first character (#) of the second line need to be removed\n    if [ \"$source\" == 'QIIME2' ]\n    then\n        tail -n +2 \"$abund\" > \"${abund}.tmp\" && mv \"${abund}.tmp\" \"$abund\"\n    fi\n\n    picrust2_pipeline.py \\\\\n        $args \\\\\n        -s $seq \\\\\n        -i $abund \\\\\n        -o all_output \\\\\n        -p $task.cpus \\\\\n        --in_traits EC,KO \\\\\n        --verbose\n\n    #Add descriptions to identifiers\n    add_descriptions.py -i all_output/EC_metagenome_out/pred_metagenome_unstrat.tsv.gz -m EC \\\n                    -o EC_pred_metagenome_unstrat_descrip.tsv\n    add_descriptions.py -i all_output/KO_metagenome_out/pred_metagenome_unstrat.tsv.gz -m KO \\\n                    -o KO_pred_metagenome_unstrat_descrip.tsv\n    add_descriptions.py -i all_output/pathways_out/path_abun_unstrat.tsv.gz -m METACYC \\\n                    -o METACYC_path_abun_unstrat_descrip.tsv\n\n    echo \"$message\" > \"${message}.txt\"\n    echo -e \"picrust\\t$args\" > \"picrust.args.txt\"\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        python: \\$(python --version 2>&1 | sed 's/Python //g')\n        picrust2: \\$( picrust2_pipeline.py -v | sed -e \"s/picrust2_pipeline.py //g\" )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 56,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    #If input is QIIME2 file, than (1) the first line and (2) the first character (#) of the second line need to be removed\n    if [ \"$source\" == 'QIIME2' ]\n    then\n        tail -n +2 \"$abund\" > \"${abund}.tmp\" && mv \"${abund}.tmp\" \"$abund\"\n    fi\n\n    picrust2_pipeline.py \\\\\n        $args \\\\\n        -s $seq \\\\\n        -i $abund \\\\\n        -o all_output \\\\\n        -p $task.cpus \\\\\n        --in_traits EC,KO \\\\\n        --verbose\n\n    #Add descriptions to identifiers\n    add_descriptions.py -i all_output/EC_metagenome_out/pred_metagenome_unstrat.tsv.gz -m EC \\\n                    -o EC_pred_metagenome_unstrat_descrip.tsv\n    add_descriptions.py -i all_output/KO_metagenome_out/pred_metagenome_unstrat.tsv.gz -m KO \\\n                    -o KO_pred_metagenome_unstrat_descrip.tsv\n    add_descriptions.py -i all_output/pathways_out/path_abun_unstrat.tsv.gz -m METACYC \\\n                    -o METACYC_path_abun_unstrat_descrip.tsv\n\n    echo \"$message\" > \"${message}.txt\"\n    echo -e \"picrust\\t$args\" > \"picrust.args.txt\"\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        python: \\$(python --version 2>&1 | sed 's/Python //g')\n        picrust2: \\$( picrust2_pipeline.py -v | sed -e \"s/picrust2_pipeline.py //g\" )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 33,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "seq",
            "abund",
            "source",
            "message"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__ampliseq",
        "directive": [
            "tag \"${seq},${abund}\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::picrust2=2.4.2\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/picrust2:2.4.2--pyhdfd78af_0' : 'quay.io/biocontainers/picrust2:2.4.2--pyhdfd78af_0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "QIIME2_INASV": {
        "name_process": "QIIME2_INASV",
        "string_process": "process QIIME2_INASV {\n    tag \"${asv}\"\n    label 'process_low'\n\n    conda (params.enable_conda ? { exit 1 \"QIIME2 has no conda package\" } : null)\n    container \"quay.io/qiime2/core:2021.8\"\n\n    input:\n    path(asv)\n\n    output:\n    path(\"table.qza\")    , emit: qza\n    path \"versions.yml\"  , emit: versions\n\n    script:\n    \"\"\"\n    echo -n \"#OTU Table\" | cat - \"$asv\" > biom-table.txt\n    biom convert -i biom-table.txt -o table.biom --table-type=\"OTU table\" --to-hdf5\n    qiime tools import \\\n        --input-path table.biom \\\n        --type 'FeatureTable[Frequency]' \\\n        --input-format BIOMV210Format \\\n        --output-path table.qza\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        qiime2: \\$( qiime --version | sed -e \"s/q2cli version //g\" | tr -d '`' | sed -e \"s/Run qiime info for more version details.//g\" )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "    \"\"\"\n    echo -n \"#OTU Table\" | cat - \"$asv\" > biom-table.txt\n    biom convert -i biom-table.txt -o table.biom --table-type=\"OTU table\" --to-hdf5\n    qiime tools import \\\n        --input-path table.biom \\\n        --type 'FeatureTable[Frequency]' \\\n        --input-format BIOMV210Format \\\n        --output-path table.qza\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        qiime2: \\$( qiime --version | sed -e \"s/q2cli version //g\" | tr -d '`' | sed -e \"s/Run qiime info for more version details.//g\" )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [
            "BioMe",
            "QIIME"
        ],
        "tools_url": [
            "https://bio.tools/biome",
            "https://bio.tools/qiime"
        ],
        "tools_dico": [
            {
                "name": "BioMe",
                "uri": "https://bio.tools/biome",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3534",
                            "term": "Protein binding sites"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2269",
                            "term": "Statistics and probability"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_1834",
                                    "term": "Protein-metal contact calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1831",
                                    "term": "Metal-bound cysteine detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2950",
                                    "term": "Residue distance calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0249",
                                    "term": "Protein geometry calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_1834",
                                    "term": "Residue-metal contact calculation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Biologically Relevant Metals (BioMe) is a web based platform for calculation of various statistical properties of metal binding sites including distribution of coordinate geometry and other descriptive statistics for a metal ion. The underlying database contains for each metal ion: PDB code, structure determination method, types of metal binding chains and names and coordinates of bound ligands, among other details.",
                "homepage": "http://metals.zesoi.fer.hr"
            },
            {
                "name": "QIIME",
                "uri": "https://bio.tools/qiime",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biological science"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2945",
                                    "term": "Analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Open-source bioinformatics pipeline for performing microbiome analysis from raw DNA sequencing data. The pipeline is designed to take users from raw sequencing data generated on the Illumina or other platforms through publication quality graphics and statistics. This includes demultiplexing and quality filtering, OTU picking, taxonomic assignment, and phylogenetic reconstruction, and diversity analyses and visualizations.",
                "homepage": "http://qiime.org/"
            }
        ],
        "inputs": [
            "asv"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__ampliseq",
        "directive": [
            "tag \"${asv}\"",
            "label 'process_low'",
            "conda (params.enable_conda ? { exit 1 \"QIIME2 has no conda package\" } : null)",
            "container \"quay.io/qiime2/core:2021.8\""
        ],
        "when": "",
        "stub": ""
    },
    "QIIME2_DIVERSITY_ADONIS": {
        "name_process": "QIIME2_DIVERSITY_ADONIS",
        "string_process": "process QIIME2_DIVERSITY_ADONIS {\n    tag \"${core.baseName} - ${params.qiime_adonis_formula}\"\n    label 'process_low'\n\n    conda (params.enable_conda ? { exit 1 \"QIIME2 has no conda package\" } : null)\n    container \"quay.io/qiime2/core:2021.8\"\n\n    input:\n    tuple path(metadata), path(core)\n\n    output:\n    path(\"adonis/*\")     , emit: html\n    path \"versions.yml\"  , emit: versions\n\n    script:\n    def args = task.ext.args ?: ''\n    def formula = params.qiime_adonis_formula\n    \"\"\"\n    export XDG_CONFIG_HOME=\"\\${PWD}/HOME\"\n\n    qiime diversity adonis \\\\\n        --p-n-jobs $task.cpus \\\\\n        --i-distance-matrix ${core} \\\\\n        --m-metadata-file ${metadata} \\\\\n        --o-visualization ${core.baseName}_adonis.qzv \\\\\n        $args \\\\\n        --p-formula \"${formula}\"\n    qiime tools export --input-path ${core.baseName}_adonis.qzv \\\\\n        --output-path adonis/${core.baseName}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        qiime2: \\$( qiime --version | sed -e \"s/q2cli version //g\" | tr -d '`' | sed -e \"s/Run qiime info for more version details.//g\" )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    def args = task.ext.args ?: ''\n    def formula = params.qiime_adonis_formula\n    \"\"\"\n    export XDG_CONFIG_HOME=\"\\${PWD}/HOME\"\n\n    qiime diversity adonis \\\\\n        --p-n-jobs $task.cpus \\\\\n        --i-distance-matrix ${core} \\\\\n        --m-metadata-file ${metadata} \\\\\n        --o-visualization ${core.baseName}_adonis.qzv \\\\\n        $args \\\\\n        --p-formula \"${formula}\"\n    qiime tools export --input-path ${core.baseName}_adonis.qzv \\\\\n        --output-path adonis/${core.baseName}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        qiime2: \\$( qiime --version | sed -e \"s/q2cli version //g\" | tr -d '`' | sed -e \"s/Run qiime info for more version details.//g\" )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [
            "QIIME"
        ],
        "tools_url": [
            "https://bio.tools/qiime"
        ],
        "tools_dico": [
            {
                "name": "QIIME",
                "uri": "https://bio.tools/qiime",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biological science"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2945",
                                    "term": "Analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Open-source bioinformatics pipeline for performing microbiome analysis from raw DNA sequencing data. The pipeline is designed to take users from raw sequencing data generated on the Illumina or other platforms through publication quality graphics and statistics. This includes demultiplexing and quality filtering, OTU picking, taxonomic assignment, and phylogenetic reconstruction, and diversity analyses and visualizations.",
                "homepage": "http://qiime.org/"
            }
        ],
        "inputs": [
            "metadata",
            "core"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__ampliseq",
        "directive": [
            "tag \"${core.baseName} - ${params.qiime_adonis_formula}\"",
            "label 'process_low'",
            "conda (params.enable_conda ? { exit 1 \"QIIME2 has no conda package\" } : null)",
            "container \"quay.io/qiime2/core:2021.8\""
        ],
        "when": "",
        "stub": ""
    },
    "CUSTOM_DUMPSOFTWAREVERSIONS": {
        "name_process": "CUSTOM_DUMPSOFTWAREVERSIONS",
        "string_process": "process CUSTOM_DUMPSOFTWAREVERSIONS {\n    label 'process_low'\n\n                                                                                                  \n    conda (params.enable_conda ? \"bioconda::multiqc=1.11\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/multiqc:1.11--pyhdfd78af_0' :\n        'quay.io/biocontainers/multiqc:1.11--pyhdfd78af_0' }\"\n\n    input:\n    path versions\n\n    output:\n    path \"software_versions.yml\"    , emit: yml\n    path \"software_versions_mqc.yml\", emit: mqc_yml\n    path \"versions.yml\"             , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    template 'dumpsoftwareversions.py'\n}",
        "nb_lignes_process": 22,
        "string_script": "    def args = task.ext.args ?: ''\n    template 'dumpsoftwareversions.py'",
        "nb_lignes_script": 1,
        "language_script": "bash",
        "tools": [
            "docxtemplate"
        ],
        "tools_url": [
            "https://bio.tools/docxtemplate"
        ],
        "tools_dico": [
            {
                "name": "docxtemplate",
                "uri": "https://bio.tools/docxtemplate",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3314",
                            "term": "Chemistry"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0176",
                            "term": "Molecular dynamics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3489",
                            "term": "Database management"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3489",
                            "term": "Database administration"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0249",
                                    "term": "Protein geometry calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0322",
                                    "term": "Molecular model refinement"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Deposition"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Data submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Database deposition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Database submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Data deposition"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "> VERY_LOW CONFIDENCE! | > CORRECT NAME OF TOOL COULD ALSO BE 'Phenix', 'restraints', 'Amber', 'refinement' | Improved chemistry restraints for crystallographic refinement by integrating the Amber force field into Phenix | Word templates and tools for Windows | The IUCr Word templates utilize the content management features and document styles of Word to format your manuscript and to store essential details for submission of your manuscript",
                "homepage": "http://journals.iucr.org/services/docxtemplate/"
            }
        ],
        "inputs": [
            "versions"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__ampliseq",
        "directive": [
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::multiqc=1.11\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/multiqc:1.11--pyhdfd78af_0' : 'quay.io/biocontainers/multiqc:1.11--pyhdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "QIIME2_EXPORT_RELASV": {
        "name_process": "QIIME2_EXPORT_RELASV",
        "string_process": "process QIIME2_EXPORT_RELASV {\n    label 'process_low'\n\n    conda (params.enable_conda ? { exit 1 \"QIIME2 has no conda package\" } : null)\n    container \"quay.io/qiime2/core:2021.8\"\n\n    input:\n    path(table)\n\n    output:\n    path(\"rel-table-ASV.tsv\"), emit: tsv\n    path \"versions.yml\"      , emit: versions\n\n    script:\n    \"\"\"\n    export XDG_CONFIG_HOME=\"\\${PWD}/HOME\"\n\n    #convert to relative abundances\n    qiime feature-table relative-frequency \\\n        --i-table ${table} \\\n        --o-relative-frequency-table relative-table-ASV.qza\n\n    #export to biom\n    qiime tools export --input-path relative-table-ASV.qza --output-path relative-table-ASV\n\n    #convert to tab separated text file \"rel-table-ASV.tsv\"\n    biom convert -i relative-table-ASV/feature-table.biom \\\n        -o rel-table-ASV.tsv --to-tsv\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        qiime2: \\$( qiime --version | sed -e \"s/q2cli version //g\" | tr -d '`' | sed -e \"s/Run qiime info for more version details.//g\" )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    \"\"\"\n    export XDG_CONFIG_HOME=\"\\${PWD}/HOME\"\n\n    #convert to relative abundances\n    qiime feature-table relative-frequency \\\n        --i-table ${table} \\\n        --o-relative-frequency-table relative-table-ASV.qza\n\n    #export to biom\n    qiime tools export --input-path relative-table-ASV.qza --output-path relative-table-ASV\n\n    #convert to tab separated text file \"rel-table-ASV.tsv\"\n    biom convert -i relative-table-ASV/feature-table.biom \\\n        -o rel-table-ASV.tsv --to-tsv\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        qiime2: \\$( qiime --version | sed -e \"s/q2cli version //g\" | tr -d '`' | sed -e \"s/Run qiime info for more version details.//g\" )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [
            "QIIME",
            "BioMe"
        ],
        "tools_url": [
            "https://bio.tools/qiime",
            "https://bio.tools/biome"
        ],
        "tools_dico": [
            {
                "name": "QIIME",
                "uri": "https://bio.tools/qiime",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biological science"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2945",
                                    "term": "Analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Open-source bioinformatics pipeline for performing microbiome analysis from raw DNA sequencing data. The pipeline is designed to take users from raw sequencing data generated on the Illumina or other platforms through publication quality graphics and statistics. This includes demultiplexing and quality filtering, OTU picking, taxonomic assignment, and phylogenetic reconstruction, and diversity analyses and visualizations.",
                "homepage": "http://qiime.org/"
            },
            {
                "name": "BioMe",
                "uri": "https://bio.tools/biome",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3534",
                            "term": "Protein binding sites"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2269",
                            "term": "Statistics and probability"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_1834",
                                    "term": "Protein-metal contact calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1831",
                                    "term": "Metal-bound cysteine detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2950",
                                    "term": "Residue distance calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0249",
                                    "term": "Protein geometry calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_1834",
                                    "term": "Residue-metal contact calculation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Biologically Relevant Metals (BioMe) is a web based platform for calculation of various statistical properties of metal binding sites including distribution of coordinate geometry and other descriptive statistics for a metal ion. The underlying database contains for each metal ion: PDB code, structure determination method, types of metal binding chains and names and coordinates of bound ligands, among other details.",
                "homepage": "http://metals.zesoi.fer.hr"
            }
        ],
        "inputs": [
            "table"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__ampliseq",
        "directive": [
            "label 'process_low'",
            "conda (params.enable_conda ? { exit 1 \"QIIME2 has no conda package\" } : null)",
            "container \"quay.io/qiime2/core:2021.8\""
        ],
        "when": "",
        "stub": ""
    },
    "QIIME2_ANCOM_ASV": {
        "name_process": "QIIME2_ANCOM_ASV",
        "string_process": "process QIIME2_ANCOM_ASV {\n    tag \"${table.baseName}\"\n    label 'process_medium'\n    label 'single_cpu'\n    label 'process_long'\n    label 'error_ignore'\n\n    conda (params.enable_conda ? { exit 1 \"QIIME2 has no conda package\" } : null)\n    container \"quay.io/qiime2/core:2021.8\"\n\n    input:\n    tuple path(metadata), path(table)\n\n    output:\n    path(\"ancom/*\")     , emit: ancom\n    path \"versions.yml\" , emit: versions\n\n    script:\n    \"\"\"\n    export XDG_CONFIG_HOME=\"\\${PWD}/HOME\"\n\n    qiime composition add-pseudocount \\\n        --i-table ${table} \\\n        --o-composition-table comp-${table}\n    qiime composition ancom \\\n        --i-table comp-${table} \\\n        --m-metadata-file ${metadata} \\\n        --m-metadata-column ${table.baseName} \\\n        --o-visualization comp-${table.baseName}.qzv\n    qiime tools export --input-path comp-${table.baseName}.qzv \\\n        --output-path ancom/Category-${table.baseName}-ASV\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        qiime2: \\$( qiime --version | sed -e \"s/q2cli version //g\" | tr -d '`' | sed -e \"s/Run qiime info for more version details.//g\" )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 36,
        "string_script": "    \"\"\"\n    export XDG_CONFIG_HOME=\"\\${PWD}/HOME\"\n\n    qiime composition add-pseudocount \\\n        --i-table ${table} \\\n        --o-composition-table comp-${table}\n    qiime composition ancom \\\n        --i-table comp-${table} \\\n        --m-metadata-file ${metadata} \\\n        --m-metadata-column ${table.baseName} \\\n        --o-visualization comp-${table.baseName}.qzv\n    qiime tools export --input-path comp-${table.baseName}.qzv \\\n        --output-path ancom/Category-${table.baseName}-ASV\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        qiime2: \\$( qiime --version | sed -e \"s/q2cli version //g\" | tr -d '`' | sed -e \"s/Run qiime info for more version details.//g\" )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [
            "QIIME"
        ],
        "tools_url": [
            "https://bio.tools/qiime"
        ],
        "tools_dico": [
            {
                "name": "QIIME",
                "uri": "https://bio.tools/qiime",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biological science"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2945",
                                    "term": "Analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Open-source bioinformatics pipeline for performing microbiome analysis from raw DNA sequencing data. The pipeline is designed to take users from raw sequencing data generated on the Illumina or other platforms through publication quality graphics and statistics. This includes demultiplexing and quality filtering, OTU picking, taxonomic assignment, and phylogenetic reconstruction, and diversity analyses and visualizations.",
                "homepage": "http://qiime.org/"
            }
        ],
        "inputs": [
            "metadata",
            "table"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__ampliseq",
        "directive": [
            "tag \"${table.baseName}\"",
            "label 'process_medium'",
            "label 'single_cpu'",
            "label 'process_long'",
            "label 'error_ignore'",
            "conda (params.enable_conda ? { exit 1 \"QIIME2 has no conda package\" } : null)",
            "container \"quay.io/qiime2/core:2021.8\""
        ],
        "when": "",
        "stub": ""
    },
    "QIIME2_TREE": {
        "name_process": "QIIME2_TREE",
        "string_process": "process QIIME2_TREE {\n    label 'process_medium'\n\n    conda (params.enable_conda ? { exit 1 \"QIIME2 has no conda package\" } : null)\n    container \"quay.io/qiime2/core:2021.8\"\n\n    input:\n    path(repseq)\n\n    output:\n    path(\"rooted-tree.qza\"), emit: qza\n    path(\"tree.nwk\")       , emit: nwk\n    path \"versions.yml\"    , emit: versions\n\n    script:\n    \"\"\"\n    export XDG_CONFIG_HOME=\"\\${PWD}/HOME\"\n\n    qiime alignment mafft \\\n        --i-sequences ${repseq} \\\n        --o-alignment aligned-rep-seqs.qza \\\n        --p-n-threads ${task.cpus}\n    qiime alignment mask \\\n        --i-alignment aligned-rep-seqs.qza \\\n        --o-masked-alignment masked-aligned-rep-seqs.qza\n    qiime phylogeny fasttree \\\n        --i-alignment masked-aligned-rep-seqs.qza \\\n        --p-n-threads ${task.cpus} \\\n        --o-tree unrooted-tree.qza\n    qiime phylogeny midpoint-root \\\n        --i-tree unrooted-tree.qza \\\n        --o-rooted-tree rooted-tree.qza\n    qiime tools export --input-path rooted-tree.qza  \\\n        --output-path phylogenetic_tree\n    cp phylogenetic_tree/tree.nwk .\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        qiime2: \\$( qiime --version | sed -e \"s/q2cli version //g\" | tr -d '`' | sed -e \"s/Run qiime info for more version details.//g\" )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 40,
        "string_script": "    \"\"\"\n    export XDG_CONFIG_HOME=\"\\${PWD}/HOME\"\n\n    qiime alignment mafft \\\n        --i-sequences ${repseq} \\\n        --o-alignment aligned-rep-seqs.qza \\\n        --p-n-threads ${task.cpus}\n    qiime alignment mask \\\n        --i-alignment aligned-rep-seqs.qza \\\n        --o-masked-alignment masked-aligned-rep-seqs.qza\n    qiime phylogeny fasttree \\\n        --i-alignment masked-aligned-rep-seqs.qza \\\n        --p-n-threads ${task.cpus} \\\n        --o-tree unrooted-tree.qza\n    qiime phylogeny midpoint-root \\\n        --i-tree unrooted-tree.qza \\\n        --o-rooted-tree rooted-tree.qza\n    qiime tools export --input-path rooted-tree.qza  \\\n        --output-path phylogenetic_tree\n    cp phylogenetic_tree/tree.nwk .\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        qiime2: \\$( qiime --version | sed -e \"s/q2cli version //g\" | tr -d '`' | sed -e \"s/Run qiime info for more version details.//g\" )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 25,
        "language_script": "bash",
        "tools": [
            "QIIME"
        ],
        "tools_url": [
            "https://bio.tools/qiime"
        ],
        "tools_dico": [
            {
                "name": "QIIME",
                "uri": "https://bio.tools/qiime",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biological science"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2945",
                                    "term": "Analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Open-source bioinformatics pipeline for performing microbiome analysis from raw DNA sequencing data. The pipeline is designed to take users from raw sequencing data generated on the Illumina or other platforms through publication quality graphics and statistics. This includes demultiplexing and quality filtering, OTU picking, taxonomic assignment, and phylogenetic reconstruction, and diversity analyses and visualizations.",
                "homepage": "http://qiime.org/"
            }
        ],
        "inputs": [
            "repseq"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__ampliseq",
        "directive": [
            "label 'process_medium'",
            "conda (params.enable_conda ? { exit 1 \"QIIME2 has no conda package\" } : null)",
            "container \"quay.io/qiime2/core:2021.8\""
        ],
        "when": "",
        "stub": ""
    },
    "TRUNCLEN": {
        "name_process": "TRUNCLEN",
        "string_process": "process TRUNCLEN {\n    tag \"$meta\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"pandas=1.1.5\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/pandas:1.1.5' :\n        'quay.io/biocontainers/pandas:1.1.5' }\"\n\n    input:\n    tuple val(meta), path(qual_stats)\n\n    output:\n    tuple val(meta), stdout, emit: trunc\n    path \"versions.yml\"    , emit: versions\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    trunclen.py $qual_stats $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        python: \\$(python --version 2>&1 | sed 's/Python //g')\n        pandas: \\$(python -c \"import pkg_resources; print(pkg_resources.get_distribution('pandas').version)\")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    trunclen.py $qual_stats $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        python: \\$(python --version 2>&1 | sed 's/Python //g')\n        pandas: \\$(python -c \"import pkg_resources; print(pkg_resources.get_distribution('pandas').version)\")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "qual_stats"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__ampliseq",
        "directive": [
            "tag \"$meta\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"pandas=1.1.5\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/pandas:1.1.5' : 'quay.io/biocontainers/pandas:1.1.5' }\""
        ],
        "when": "",
        "stub": ""
    },
    "SBDIEXPORTREANNOTATE": {
        "name_process": "SBDIEXPORTREANNOTATE",
        "string_process": "process SBDIEXPORTREANNOTATE {\n    tag \"${taxonomytable}\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::r-tidyverse=1.2.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/r-tidyverse:1.2.1' :\n        'quay.io/biocontainers/r-tidyverse:1.2.1' }\"\n\n    input:\n    path taxonomytable\n\n    output:\n    path \"*.tsv\"       , emit: sbdiannottables\n    path \"versions.yml\", emit: versions\n\n    script:\n    \"\"\"\n    sbdiexportreannotate.R ${params.dada_ref_databases[params.dada_ref_taxonomy][\"dbversion\"]} $taxonomytable\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        R: \\$(R --version 2>&1 | sed -n 1p | sed 's/R version //' | sed 's/ (.*//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "    \"\"\"\n    sbdiexportreannotate.R ${params.dada_ref_databases[params.dada_ref_taxonomy][\"dbversion\"]} $taxonomytable\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        R: \\$(R --version 2>&1 | sed -n 1p | sed 's/R version //' | sed 's/ (.*//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "taxonomytable"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__ampliseq",
        "directive": [
            "tag \"${taxonomytable}\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::r-tidyverse=1.2.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/r-tidyverse:1.2.1' : 'quay.io/biocontainers/r-tidyverse:1.2.1' }\""
        ],
        "when": "",
        "stub": ""
    },
    "CUTADAPT": {
        "name_process": "CUTADAPT",
        "string_process": "process CUTADAPT {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? 'bioconda::cutadapt=3.4' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/cutadapt:3.4--py39h38f01e4_1' :\n        'quay.io/biocontainers/cutadapt:3.4--py39h38f01e4_1' }\"\n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path('*.trim.fastq.gz'), emit: reads\n    tuple val(meta), path('*.log')          , emit: log\n    path \"versions.yml\"                     , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def trimmed  = meta.single_end ? \"-o ${prefix}.trim.fastq.gz\" : \"-o ${prefix}_1.trim.fastq.gz -p ${prefix}_2.trim.fastq.gz\"\n    \"\"\"\n    cutadapt \\\\\n        --cores $task.cpus \\\\\n        $args \\\\\n        $trimmed \\\\\n        $reads \\\\\n        > ${prefix}.cutadapt.log\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        cutadapt: \\$(cutadapt --version)\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def trimmed  = meta.single_end ? \"-o ${prefix}.trim.fastq.gz\" : \"-o ${prefix}_1.trim.fastq.gz -p ${prefix}_2.trim.fastq.gz\"\n    \"\"\"\n    cutadapt \\\\\n        --cores $task.cpus \\\\\n        $args \\\\\n        $trimmed \\\\\n        $reads \\\\\n        > ${prefix}.cutadapt.log\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        cutadapt: \\$(cutadapt --version)\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "Cutadapt"
        ],
        "tools_url": [
            "https://bio.tools/cutadapt"
        ],
        "tools_dico": [
            {
                "name": "Cutadapt",
                "uri": "https://bio.tools/cutadapt",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0632",
                            "term": "Probes and primers"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Sequence trimming"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Trimming"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3495",
                                "term": "RNA sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3495",
                                "term": "RNA sequence"
                            }
                        ]
                    }
                ],
                "description": "Find and remove adapter sequences, primers, poly-A tails and other types of unwanted sequence from your high-throughput sequencing reads.",
                "homepage": "https://pypi.python.org/pypi/cutadapt"
            }
        ],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__ampliseq",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? 'bioconda::cutadapt=3.4' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/cutadapt:3.4--py39h38f01e4_1' : 'quay.io/biocontainers/cutadapt:3.4--py39h38f01e4_1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "DADA2_RMCHIMERA": {
        "name_process": "DADA2_RMCHIMERA",
        "string_process": "process DADA2_RMCHIMERA {\n    tag \"$meta.run\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconductor-dada2=1.22.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bioconductor-dada2:1.22.0--r41h399db7b_0' :\n        'quay.io/biocontainers/bioconductor-dada2:1.22.0--r41h399db7b_0' }\"\n\n    input:\n    tuple val(meta), path(seqtab)\n\n    output:\n    tuple val(meta), path(\"*.ASVtable.rds\"), emit: rds\n    path \"versions.yml\"                    , emit: versions\n    path \"*.args.txt\"                      , emit: args\n\n    script:\n    def args = task.ext.args ?: ''\n    def no_samples    = meta.id.size()\n    def first_sample  = meta.id.first()\n    \"\"\"\n    #!/usr/bin/env Rscript\n    suppressPackageStartupMessages(library(dada2))\n\n    seqtab = readRDS(\"${seqtab}\")\n\n    #remove chimera\n    seqtab.nochim <- removeBimeraDenovo(seqtab, $args, multithread=$task.cpus, verbose=TRUE)\n    if ( ${no_samples} == 1 ) { rownames(seqtab.nochim) <- \"${first_sample}\" }\n    saveRDS(seqtab.nochim,\"${meta.run}.ASVtable.rds\")\n\n    write.table('removeBimeraDenovo\\t$args', file = \"removeBimeraDenovo.args.txt\", row.names = FALSE, col.names = FALSE, quote = FALSE, na = '')\n    writeLines(c(\"\\\\\"${task.process}\\\\\":\", paste0(\"    R: \", paste0(R.Version()[c(\"major\",\"minor\")], collapse = \".\")),paste0(\"    dada2: \", packageVersion(\"dada2\")) ), \"versions.yml\")\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    def args = task.ext.args ?: ''\n    def no_samples    = meta.id.size()\n    def first_sample  = meta.id.first()\n    \"\"\"\n    #!/usr/bin/env Rscript\n    suppressPackageStartupMessages(library(dada2))\n\n    seqtab = readRDS(\"${seqtab}\")\n\n    #remove chimera\n    seqtab.nochim <- removeBimeraDenovo(seqtab, $args, multithread=$task.cpus, verbose=TRUE)\n    if ( ${no_samples} == 1 ) { rownames(seqtab.nochim) <- \"${first_sample}\" }\n    saveRDS(seqtab.nochim,\"${meta.run}.ASVtable.rds\")\n\n    write.table('removeBimeraDenovo\\t$args', file = \"removeBimeraDenovo.args.txt\", row.names = FALSE, col.names = FALSE, quote = FALSE, na = '')\n    writeLines(c(\"\\\\\"${task.process}\\\\\":\", paste0(\"    R: \", paste0(R.Version()[c(\"major\",\"minor\")], collapse = \".\")),paste0(\"    dada2: \", packageVersion(\"dada2\")) ), \"versions.yml\")\n    \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "Rscript",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "seqtab"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__ampliseq",
        "directive": [
            "tag \"$meta.run\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconductor-dada2=1.22.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bioconductor-dada2:1.22.0--r41h399db7b_0' : 'quay.io/biocontainers/bioconductor-dada2:1.22.0--r41h399db7b_0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "FORMAT_TAXONOMY_QIIME": {
        "name_process": "FORMAT_TAXONOMY_QIIME",
        "string_process": "\nprocess FORMAT_TAXONOMY_QIIME {\n    label 'process_low'\n\n    conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img' :\n        'biocontainers/biocontainers:v1.2.0_cv1' }\"\n\n    input:\n    path(database)\n\n    output:\n    path( \"*.tax\" ), emit: tax\n    path( \"*.fna\" ), emit: fasta\n    path( \"ref_taxonomy.txt\"), emit: ref_tax_info\n\n    script:\n    \"\"\"\n    ${params.qiime_ref_databases[params.qiime_ref_taxonomy][\"fmtscript\"]}\n\n    #Giving out information\n    echo -e \"--qiime_ref_taxonomy: ${params.qiime_ref_taxonomy}\\n\" >ref_taxonomy.txt\n    echo -e \"Title: ${params.qiime_ref_databases[params.qiime_ref_taxonomy][\"title\"]}\\n\" >>ref_taxonomy.txt\n    echo -e \"Citation: ${params.qiime_ref_databases[params.qiime_ref_taxonomy][\"citation\"]}\\n\" >>ref_taxonomy.txt\n    echo \"All entries: ${params.qiime_ref_databases[params.qiime_ref_taxonomy]}\" >>ref_taxonomy.txt\n    \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "    \"\"\"\n    ${params.qiime_ref_databases[params.qiime_ref_taxonomy][\"fmtscript\"]}\n\n    #Giving out information\n    echo -e \"--qiime_ref_taxonomy: ${params.qiime_ref_taxonomy}\\n\" >ref_taxonomy.txt\n    echo -e \"Title: ${params.qiime_ref_databases[params.qiime_ref_taxonomy][\"title\"]}\\n\" >>ref_taxonomy.txt\n    echo -e \"Citation: ${params.qiime_ref_databases[params.qiime_ref_taxonomy][\"citation\"]}\\n\" >>ref_taxonomy.txt\n    echo \"All entries: ${params.qiime_ref_databases[params.qiime_ref_taxonomy]}\" >>ref_taxonomy.txt\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "database"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__ampliseq",
        "directive": [
            "label 'process_low'",
            "conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img' : 'biocontainers/biocontainers:v1.2.0_cv1' }\""
        ],
        "when": "",
        "stub": ""
    },
    "QIIME2_DIVERSITY_CORE": {
        "name_process": "QIIME2_DIVERSITY_CORE",
        "string_process": "process QIIME2_DIVERSITY_CORE {\n    label 'process_low'\n\n    conda (params.enable_conda ? { exit 1 \"QIIME2 has no conda package\" } : null)\n    container \"quay.io/qiime2/core:2021.8\"\n\n    input:\n    path(metadata)\n    path(table)\n    path(tree)\n    path(stats)\n\n    output:\n    path(\"diversity_core/*_pcoa_results.qza\")   , emit: pcoa\n    path(\"diversity_core/*_vector.qza\")         , emit: vector\n    path(\"diversity_core/*_distance_matrix.qza\"), emit: distance\n    path \"versions.yml\"                         , emit: versions\n    path(\"*rarefaction.txt\")                    , emit: depth\n\n    script:\n    \"\"\"\n    export XDG_CONFIG_HOME=\"\\${PWD}/HOME\"\n\n    mindepth=\\$(count_table_minmax_reads.py $stats minimum 2>&1)\n    if [ \\\"\\$mindepth\\\" -gt \\\"10000\\\" ]; then echo \\$mindepth >\\\"Use the sampling depth of \\$mindepth for rarefaction.txt\\\" ; fi\n    if [ \\\"\\$mindepth\\\" -lt \\\"10000\\\" -a \\\"\\$mindepth\\\" -gt \\\"5000\\\" ]; then echo \\$mindepth >\\\"WARNING The sampling depth of \\$mindepth is quite small for rarefaction.txt\\\" ; fi\n    if [ \\\"\\$mindepth\\\" -lt \\\"5000\\\" -a \\\"\\$mindepth\\\" -gt \\\"1000\\\" ]; then echo \\$mindepth >\\\"WARNING The sampling depth of \\$mindepth is very small for rarefaction.txt\\\" ; fi\n    if [ \\\"\\$mindepth\\\" -lt \\\"1000\\\" ]; then echo \\$mindepth >\\\"WARNING The sampling depth of \\$mindepth seems too small for rarefaction.txt\\\" ; fi\n\n    qiime diversity core-metrics-phylogenetic \\\n        --m-metadata-file ${metadata} \\\n        --i-phylogeny ${tree} \\\n        --i-table ${table} \\\n        --p-sampling-depth \\$mindepth \\\n        --output-dir diversity_core \\\n        --p-n-jobs-or-threads ${task.cpus} \\\n        --verbose\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        qiime2: \\$( qiime --version | sed -e \"s/q2cli version //g\" | tr -d '`' | sed -e \"s/Run qiime info for more version details.//g\" )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 42,
        "string_script": "    \"\"\"\n    export XDG_CONFIG_HOME=\"\\${PWD}/HOME\"\n\n    mindepth=\\$(count_table_minmax_reads.py $stats minimum 2>&1)\n    if [ \\\"\\$mindepth\\\" -gt \\\"10000\\\" ]; then echo \\$mindepth >\\\"Use the sampling depth of \\$mindepth for rarefaction.txt\\\" ; fi\n    if [ \\\"\\$mindepth\\\" -lt \\\"10000\\\" -a \\\"\\$mindepth\\\" -gt \\\"5000\\\" ]; then echo \\$mindepth >\\\"WARNING The sampling depth of \\$mindepth is quite small for rarefaction.txt\\\" ; fi\n    if [ \\\"\\$mindepth\\\" -lt \\\"5000\\\" -a \\\"\\$mindepth\\\" -gt \\\"1000\\\" ]; then echo \\$mindepth >\\\"WARNING The sampling depth of \\$mindepth is very small for rarefaction.txt\\\" ; fi\n    if [ \\\"\\$mindepth\\\" -lt \\\"1000\\\" ]; then echo \\$mindepth >\\\"WARNING The sampling depth of \\$mindepth seems too small for rarefaction.txt\\\" ; fi\n\n    qiime diversity core-metrics-phylogenetic \\\n        --m-metadata-file ${metadata} \\\n        --i-phylogeny ${tree} \\\n        --i-table ${table} \\\n        --p-sampling-depth \\$mindepth \\\n        --output-dir diversity_core \\\n        --p-n-jobs-or-threads ${task.cpus} \\\n        --verbose\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        qiime2: \\$( qiime --version | sed -e \"s/q2cli version //g\" | tr -d '`' | sed -e \"s/Run qiime info for more version details.//g\" )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 22,
        "language_script": "bash",
        "tools": [
            "QIIME"
        ],
        "tools_url": [
            "https://bio.tools/qiime"
        ],
        "tools_dico": [
            {
                "name": "QIIME",
                "uri": "https://bio.tools/qiime",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biological science"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2945",
                                    "term": "Analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Open-source bioinformatics pipeline for performing microbiome analysis from raw DNA sequencing data. The pipeline is designed to take users from raw sequencing data generated on the Illumina or other platforms through publication quality graphics and statistics. This includes demultiplexing and quality filtering, OTU picking, taxonomic assignment, and phylogenetic reconstruction, and diversity analyses and visualizations.",
                "homepage": "http://qiime.org/"
            }
        ],
        "inputs": [
            "metadata",
            "table",
            "tree",
            "stats"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__ampliseq",
        "directive": [
            "label 'process_low'",
            "conda (params.enable_conda ? { exit 1 \"QIIME2 has no conda package\" } : null)",
            "container \"quay.io/qiime2/core:2021.8\""
        ],
        "when": "",
        "stub": ""
    },
    "DADA2_MERGE": {
        "name_process": "DADA2_MERGE",
        "string_process": "process DADA2_MERGE {\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconductor-dada2=1.22.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bioconductor-dada2:1.22.0--r41h399db7b_0' :\n        'quay.io/biocontainers/bioconductor-dada2:1.22.0--r41h399db7b_0' }\"\n\n    input:\n    path(files)\n    path(rds)\n\n    output:\n    path( \"DADA2_stats.tsv\" ), emit: dada2stats\n    path( \"DADA2_table.tsv\" ), emit: dada2asv\n    path( \"ASV_table.tsv\" )  , emit: asv\n    path( \"ASV_seqs.fasta\" ) , emit: fasta\n    path( \"DADA2_table.rds\" ), emit: rds\n    path \"versions.yml\"      , emit: versions\n\n    script:\n    \"\"\"\n    #!/usr/bin/env Rscript\n    suppressPackageStartupMessages(library(dada2))\n    suppressPackageStartupMessages(library(digest))\n\n    #combine stats files\n    for (data in sort(list.files(\".\", pattern = \".stats.tsv\", full.names = TRUE))) {\n        if (!exists(\"stats\")){ stats <- read.csv(data, header=TRUE, sep=\"\\\\t\") }\n        if (exists(\"stats\")){\n            temp <-read.csv(data, header=TRUE, sep=\"\\\\t\")\n            stats <-unique(rbind(stats, temp))\n            rm(temp)\n        }\n    }\n    write.table( stats, file = \"DADA2_stats.tsv\", sep = \"\\\\t\", row.names = FALSE, col.names = TRUE, quote = FALSE, na = '')\n\n    #combine dada-class objects\n    files <- sort(list.files(\".\", pattern = \".ASVtable.rds\", full.names = TRUE))\n    if ( length(files) == 1 ) {\n        ASVtab = readRDS(files[1])\n    } else {\n        ASVtab <- mergeSequenceTables(tables=files, repeats = \"error\", orderBy = \"abundance\", tryRC = FALSE)\n    }\n    saveRDS(ASVtab, \"DADA2_table.rds\")\n\n    df <- t(ASVtab)\n    colnames(df) <- gsub('_1.filt.fastq.gz', '', colnames(df))\n    colnames(df) <- gsub('.filt.fastq.gz', '', colnames(df))\n    df <- data.frame(sequence = rownames(df), df)\n    # Create an md5 sum of the sequences as ASV_ID and rearrange columns\n    df\\$ASV_ID <- sapply(df\\$sequence, digest, algo='md5', serialize = FALSE)\n    df <- df[,c(ncol(df),3:ncol(df)-1,1)]\n\n    # file to publish\n    write.table(df, file = \"DADA2_table.tsv\", sep = \"\\\\t\", row.names = FALSE, quote = FALSE, na = '')\n\n    # Write fasta file with ASV sequences to file\n    write.table(data.frame(s = sprintf(\">%s\\n%s\", df\\$ASV_ID, df\\$sequence)), 'ASV_seqs.fasta', col.names = FALSE, row.names = FALSE, quote = FALSE, na = '')\n\n    # Write ASV file with ASV abundances to file\n    df\\$sequence <- NULL\n    write.table(df, file = \"ASV_table.tsv\", sep=\"\\\\t\", row.names = FALSE, quote = FALSE, na = '')\n\n    writeLines(c(\"\\\\\"${task.process}\\\\\":\", paste0(\"    R: \", paste0(R.Version()[c(\"major\",\"minor\")], collapse = \".\")),paste0(\"    dada2: \", packageVersion(\"dada2\")) ), \"versions.yml\")\n    \"\"\"\n}",
        "nb_lignes_process": 65,
        "string_script": "    \"\"\"\n    #!/usr/bin/env Rscript\n    suppressPackageStartupMessages(library(dada2))\n    suppressPackageStartupMessages(library(digest))\n\n    #combine stats files\n    for (data in sort(list.files(\".\", pattern = \".stats.tsv\", full.names = TRUE))) {\n        if (!exists(\"stats\")){ stats <- read.csv(data, header=TRUE, sep=\"\\\\t\") }\n        if (exists(\"stats\")){\n            temp <-read.csv(data, header=TRUE, sep=\"\\\\t\")\n            stats <-unique(rbind(stats, temp))\n            rm(temp)\n        }\n    }\n    write.table( stats, file = \"DADA2_stats.tsv\", sep = \"\\\\t\", row.names = FALSE, col.names = TRUE, quote = FALSE, na = '')\n\n    #combine dada-class objects\n    files <- sort(list.files(\".\", pattern = \".ASVtable.rds\", full.names = TRUE))\n    if ( length(files) == 1 ) {\n        ASVtab = readRDS(files[1])\n    } else {\n        ASVtab <- mergeSequenceTables(tables=files, repeats = \"error\", orderBy = \"abundance\", tryRC = FALSE)\n    }\n    saveRDS(ASVtab, \"DADA2_table.rds\")\n\n    df <- t(ASVtab)\n    colnames(df) <- gsub('_1.filt.fastq.gz', '', colnames(df))\n    colnames(df) <- gsub('.filt.fastq.gz', '', colnames(df))\n    df <- data.frame(sequence = rownames(df), df)\n    # Create an md5 sum of the sequences as ASV_ID and rearrange columns\n    df\\$ASV_ID <- sapply(df\\$sequence, digest, algo='md5', serialize = FALSE)\n    df <- df[,c(ncol(df),3:ncol(df)-1,1)]\n\n    # file to publish\n    write.table(df, file = \"DADA2_table.tsv\", sep = \"\\\\t\", row.names = FALSE, quote = FALSE, na = '')\n\n    # Write fasta file with ASV sequences to file\n    write.table(data.frame(s = sprintf(\">%s\\n%s\", df\\$ASV_ID, df\\$sequence)), 'ASV_seqs.fasta', col.names = FALSE, row.names = FALSE, quote = FALSE, na = '')\n\n    # Write ASV file with ASV abundances to file\n    df\\$sequence <- NULL\n    write.table(df, file = \"ASV_table.tsv\", sep=\"\\\\t\", row.names = FALSE, quote = FALSE, na = '')\n\n    writeLines(c(\"\\\\\"${task.process}\\\\\":\", paste0(\"    R: \", paste0(R.Version()[c(\"major\",\"minor\")], collapse = \".\")),paste0(\"    dada2: \", packageVersion(\"dada2\")) ), \"versions.yml\")\n    \"\"\"",
        "nb_lignes_script": 44,
        "language_script": "Rscript",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "files",
            "rds"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__ampliseq",
        "directive": [
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconductor-dada2=1.22.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bioconductor-dada2:1.22.0--r41h399db7b_0' : 'quay.io/biocontainers/bioconductor-dada2:1.22.0--r41h399db7b_0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "QIIME2_INSEQ": {
        "name_process": "QIIME2_INSEQ",
        "string_process": "process QIIME2_INSEQ {\n    tag \"${seq}\"\n    label 'process_low'\n\n    conda (params.enable_conda ? { exit 1 \"QIIME2 has no conda package\" } : null)\n    container \"quay.io/qiime2/core:2021.8\"\n\n    input:\n    path(seq)\n\n    output:\n    path(\"rep-seqs.qza\"), emit: qza\n    path \"versions.yml\", emit: versions\n\n    script:\n    \"\"\"\n    qiime tools import \\\n        --input-path \"$seq\" \\\n        --type 'FeatureData[Sequence]' \\\n        --output-path rep-seqs.qza\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        qiime2: \\$( qiime --version | sed -e \"s/q2cli version //g\" | tr -d '`' | sed -e \"s/Run qiime info for more version details.//g\" )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "    \"\"\"\n    qiime tools import \\\n        --input-path \"$seq\" \\\n        --type 'FeatureData[Sequence]' \\\n        --output-path rep-seqs.qza\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        qiime2: \\$( qiime --version | sed -e \"s/q2cli version //g\" | tr -d '`' | sed -e \"s/Run qiime info for more version details.//g\" )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [
            "QIIME"
        ],
        "tools_url": [
            "https://bio.tools/qiime"
        ],
        "tools_dico": [
            {
                "name": "QIIME",
                "uri": "https://bio.tools/qiime",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biological science"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2945",
                                    "term": "Analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Open-source bioinformatics pipeline for performing microbiome analysis from raw DNA sequencing data. The pipeline is designed to take users from raw sequencing data generated on the Illumina or other platforms through publication quality graphics and statistics. This includes demultiplexing and quality filtering, OTU picking, taxonomic assignment, and phylogenetic reconstruction, and diversity analyses and visualizations.",
                "homepage": "http://qiime.org/"
            }
        ],
        "inputs": [
            "seq"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__ampliseq",
        "directive": [
            "tag \"${seq}\"",
            "label 'process_low'",
            "conda (params.enable_conda ? { exit 1 \"QIIME2 has no conda package\" } : null)",
            "container \"quay.io/qiime2/core:2021.8\""
        ],
        "when": "",
        "stub": ""
    },
    "QIIME2_INTAX": {
        "name_process": "QIIME2_INTAX",
        "string_process": "process QIIME2_INTAX {\n    tag \"${tax}\"\n    label 'process_low'\n\n    conda (params.enable_conda ? { exit 1 \"QIIME2 has no conda package\" } : null)\n    container \"quay.io/qiime2/core:2021.8\"\n\n    input:\n    path(tax)                      \n\n    output:\n    path(\"taxonomy.qza\") , emit: qza\n    path \"versions.yml\"  , emit: versions\n\n    script:\n    \"\"\"\n    parse_dada2_taxonomy.r $tax\n\n    qiime tools import \\\n        --type 'FeatureData[Taxonomy]' \\\n        --input-format HeaderlessTSVTaxonomyFormat \\\n        --input-path tax.tsv \\\n        --output-path taxonomy.qza\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        qiime2: \\$( qiime --version | sed -e \"s/q2cli version //g\" | tr -d '`' | sed -e \"s/Run qiime info for more version details.//g\" )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "    \"\"\"\n    parse_dada2_taxonomy.r $tax\n\n    qiime tools import \\\n        --type 'FeatureData[Taxonomy]' \\\n        --input-format HeaderlessTSVTaxonomyFormat \\\n        --input-path tax.tsv \\\n        --output-path taxonomy.qza\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        qiime2: \\$( qiime --version | sed -e \"s/q2cli version //g\" | tr -d '`' | sed -e \"s/Run qiime info for more version details.//g\" )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [
            "QIIME"
        ],
        "tools_url": [
            "https://bio.tools/qiime"
        ],
        "tools_dico": [
            {
                "name": "QIIME",
                "uri": "https://bio.tools/qiime",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biological science"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2945",
                                    "term": "Analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Open-source bioinformatics pipeline for performing microbiome analysis from raw DNA sequencing data. The pipeline is designed to take users from raw sequencing data generated on the Illumina or other platforms through publication quality graphics and statistics. This includes demultiplexing and quality filtering, OTU picking, taxonomic assignment, and phylogenetic reconstruction, and diversity analyses and visualizations.",
                "homepage": "http://qiime.org/"
            }
        ],
        "inputs": [
            "tax"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__ampliseq",
        "directive": [
            "tag \"${tax}\"",
            "label 'process_low'",
            "conda (params.enable_conda ? { exit 1 \"QIIME2 has no conda package\" } : null)",
            "container \"quay.io/qiime2/core:2021.8\""
        ],
        "when": "",
        "stub": ""
    },
    "QIIME2_FILTERTAXA": {
        "name_process": "QIIME2_FILTERTAXA",
        "string_process": "process QIIME2_FILTERTAXA {\n    tag \"taxa:${exclude_taxa};min-freq:${min_frequency};min-samples:${min_samples}\"\n    label 'process_low'\n\n    conda (params.enable_conda ? { exit 1 \"QIIME2 has no conda package\" } : null)\n    container \"quay.io/qiime2/core:2021.8\"\n\n    input:\n    path(table)\n    path(repseq)\n    path(taxonomy)\n    val(min_frequency)\n    val(min_samples)\n    val(exclude_taxa)\n\n    output:\n    path(\"filtered-table.qza\"), emit: asv\n    path(\"filtered-table.tsv\"), emit: tsv\n    path(\"filtered-sequences.qza\"), emit: seq\n    path \"versions.yml\"       , emit: versions\n\n    script:\n    \"\"\"\n    export XDG_CONFIG_HOME=\"\\${PWD}/HOME\"\n\n    if ! [ \\\"${exclude_taxa}\\\" = \\\"none\\\" ]; then\n        #filter sequences\n        qiime taxa filter-seqs \\\n            --i-sequences ${repseq} \\\n            --i-taxonomy ${taxonomy} \\\n            --p-exclude ${exclude_taxa} --p-mode contains \\\n            --o-filtered-sequences tax_filtered-sequences.qza\n        #filter abundance table\n        qiime taxa filter-table \\\n            --i-table ${table} \\\n            --i-taxonomy ${taxonomy} \\\n            --p-exclude ${exclude_taxa} --p-mode contains \\\n            --o-filtered-table tax_filtered-table.qza\n        filtered_table=\"tax_filtered-table.qza\"\n        filtered_sequences=\"tax_filtered-sequences.qza\"\n    else\n        filtered_table=${table}\n        filtered_sequences=${repseq}\n    fi\n    qiime feature-table filter-features \\\n        --i-table \\$filtered_table \\\n        --p-min-frequency ${min_frequency} \\\n        --p-min-samples ${min_samples} \\\n        --o-filtered-table filtered-table.qza\n\n    qiime feature-table filter-seqs \\\n        --i-data \\$filtered_sequences \\\n        --i-table filtered-table.qza \\\n        --o-filtered-data filtered-sequences.qza\n\n    #produce raw count table in biom format \"table/feature-table.biom\"\n    qiime tools export --input-path filtered-table.qza  \\\n        --output-path table\n    #produce raw count table\n    biom convert -i table/feature-table.biom \\\n        -o table/feature-table.tsv  \\\n        --to-tsv\n    cp table/feature-table.tsv filtered-table.tsv\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        qiime2: \\$( qiime --version | sed -e \"s/q2cli version //g\" | tr -d '`' | sed -e \"s/Run qiime info for more version details.//g\" )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 68,
        "string_script": "    \"\"\"\n    export XDG_CONFIG_HOME=\"\\${PWD}/HOME\"\n\n    if ! [ \\\"${exclude_taxa}\\\" = \\\"none\\\" ]; then\n        #filter sequences\n        qiime taxa filter-seqs \\\n            --i-sequences ${repseq} \\\n            --i-taxonomy ${taxonomy} \\\n            --p-exclude ${exclude_taxa} --p-mode contains \\\n            --o-filtered-sequences tax_filtered-sequences.qza\n        #filter abundance table\n        qiime taxa filter-table \\\n            --i-table ${table} \\\n            --i-taxonomy ${taxonomy} \\\n            --p-exclude ${exclude_taxa} --p-mode contains \\\n            --o-filtered-table tax_filtered-table.qza\n        filtered_table=\"tax_filtered-table.qza\"\n        filtered_sequences=\"tax_filtered-sequences.qza\"\n    else\n        filtered_table=${table}\n        filtered_sequences=${repseq}\n    fi\n    qiime feature-table filter-features \\\n        --i-table \\$filtered_table \\\n        --p-min-frequency ${min_frequency} \\\n        --p-min-samples ${min_samples} \\\n        --o-filtered-table filtered-table.qza\n\n    qiime feature-table filter-seqs \\\n        --i-data \\$filtered_sequences \\\n        --i-table filtered-table.qza \\\n        --o-filtered-data filtered-sequences.qza\n\n    #produce raw count table in biom format \"table/feature-table.biom\"\n    qiime tools export --input-path filtered-table.qza  \\\n        --output-path table\n    #produce raw count table\n    biom convert -i table/feature-table.biom \\\n        -o table/feature-table.tsv  \\\n        --to-tsv\n    cp table/feature-table.tsv filtered-table.tsv\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        qiime2: \\$( qiime --version | sed -e \"s/q2cli version //g\" | tr -d '`' | sed -e \"s/Run qiime info for more version details.//g\" )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 46,
        "language_script": "bash",
        "tools": [
            "QIIME",
            "BioMe"
        ],
        "tools_url": [
            "https://bio.tools/qiime",
            "https://bio.tools/biome"
        ],
        "tools_dico": [
            {
                "name": "QIIME",
                "uri": "https://bio.tools/qiime",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biological science"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2945",
                                    "term": "Analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Open-source bioinformatics pipeline for performing microbiome analysis from raw DNA sequencing data. The pipeline is designed to take users from raw sequencing data generated on the Illumina or other platforms through publication quality graphics and statistics. This includes demultiplexing and quality filtering, OTU picking, taxonomic assignment, and phylogenetic reconstruction, and diversity analyses and visualizations.",
                "homepage": "http://qiime.org/"
            },
            {
                "name": "BioMe",
                "uri": "https://bio.tools/biome",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3534",
                            "term": "Protein binding sites"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2269",
                            "term": "Statistics and probability"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_1834",
                                    "term": "Protein-metal contact calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1831",
                                    "term": "Metal-bound cysteine detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2950",
                                    "term": "Residue distance calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0249",
                                    "term": "Protein geometry calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_1834",
                                    "term": "Residue-metal contact calculation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Biologically Relevant Metals (BioMe) is a web based platform for calculation of various statistical properties of metal binding sites including distribution of coordinate geometry and other descriptive statistics for a metal ion. The underlying database contains for each metal ion: PDB code, structure determination method, types of metal binding chains and names and coordinates of bound ligands, among other details.",
                "homepage": "http://metals.zesoi.fer.hr"
            }
        ],
        "inputs": [
            "table",
            "repseq",
            "taxonomy",
            "min_frequency",
            "min_samples",
            "exclude_taxa"
        ],
        "nb_inputs": 6,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__ampliseq",
        "directive": [
            "tag \"taxa:${exclude_taxa};min-freq:${min_frequency};min-samples:${min_samples}\"",
            "label 'process_low'",
            "conda (params.enable_conda ? { exit 1 \"QIIME2 has no conda package\" } : null)",
            "container \"quay.io/qiime2/core:2021.8\""
        ],
        "when": "",
        "stub": ""
    },
    "METADATA_ALL": {
        "name_process": "METADATA_ALL",
        "string_process": "process METADATA_ALL {\n    tag \"$metadata\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconductor-dada2=1.22.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bioconductor-dada2:1.22.0--r41h399db7b_0' :\n        'quay.io/biocontainers/bioconductor-dada2:1.22.0--r41h399db7b_0' }\"\n\n    input:\n    path(metadata)\n    val(metadata_category)\n\n    output:\n    stdout\n\n    script:\n    if( !metadata_category ) {\n        \"\"\"\n        metadata_all.r ${metadata}\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            R: \\$(R --version 2>&1 | sed -n 1p | sed 's/R version //' | sed 's/ (.*//')\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        printf ${metadata_category}\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 30,
        "string_script": "    if( !metadata_category ) {\n        \"\"\"\n        metadata_all.r ${metadata}\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            R: \\$(R --version 2>&1 | sed -n 1p | sed 's/R version //' | sed 's/ (.*//')\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        printf ${metadata_category}\n        \"\"\"\n    }",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "metadata",
            "metadata_category"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__ampliseq",
        "directive": [
            "tag \"$metadata\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconductor-dada2=1.22.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bioconductor-dada2:1.22.0--r41h399db7b_0' : 'quay.io/biocontainers/bioconductor-dada2:1.22.0--r41h399db7b_0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "QIIME2_DIVERSITY_BETAORD": {
        "name_process": "QIIME2_DIVERSITY_BETAORD",
        "string_process": "process QIIME2_DIVERSITY_BETAORD {\n    tag \"${core.baseName}\"\n    label 'process_low'\n\n    conda (params.enable_conda ? { exit 1 \"QIIME2 has no conda package\" } : null)\n    container \"quay.io/qiime2/core:2021.8\"\n\n    input:\n    tuple path(metadata), path(core)\n\n    output:\n    path(\"beta_diversity/*\"), emit: beta\n    path \"versions.yml\"     , emit: versions\n\n    script:\n    \"\"\"\n    export XDG_CONFIG_HOME=\"\\${PWD}/HOME\"\n    mkdir beta_diversity\n\n    qiime emperor plot \\\n        --i-pcoa ${core} \\\n        --m-metadata-file ${metadata} \\\n        --o-visualization ${core.baseName}-vis.qzv\n    qiime tools export --input-path ${core.baseName}-vis.qzv \\\n        --output-path beta_diversity/${core.baseName}-PCoA\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        qiime2: \\$( qiime --version | sed -e \"s/q2cli version //g\" | tr -d '`' | sed -e \"s/Run qiime info for more version details.//g\" )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "    \"\"\"\n    export XDG_CONFIG_HOME=\"\\${PWD}/HOME\"\n    mkdir beta_diversity\n\n    qiime emperor plot \\\n        --i-pcoa ${core} \\\n        --m-metadata-file ${metadata} \\\n        --o-visualization ${core.baseName}-vis.qzv\n    qiime tools export --input-path ${core.baseName}-vis.qzv \\\n        --output-path beta_diversity/${core.baseName}-PCoA\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        qiime2: \\$( qiime --version | sed -e \"s/q2cli version //g\" | tr -d '`' | sed -e \"s/Run qiime info for more version details.//g\" )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [
            "QIIME"
        ],
        "tools_url": [
            "https://bio.tools/qiime"
        ],
        "tools_dico": [
            {
                "name": "QIIME",
                "uri": "https://bio.tools/qiime",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biological science"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2945",
                                    "term": "Analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Open-source bioinformatics pipeline for performing microbiome analysis from raw DNA sequencing data. The pipeline is designed to take users from raw sequencing data generated on the Illumina or other platforms through publication quality graphics and statistics. This includes demultiplexing and quality filtering, OTU picking, taxonomic assignment, and phylogenetic reconstruction, and diversity analyses and visualizations.",
                "homepage": "http://qiime.org/"
            }
        ],
        "inputs": [
            "metadata",
            "core"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__ampliseq",
        "directive": [
            "tag \"${core.baseName}\"",
            "label 'process_low'",
            "conda (params.enable_conda ? { exit 1 \"QIIME2 has no conda package\" } : null)",
            "container \"quay.io/qiime2/core:2021.8\""
        ],
        "when": "",
        "stub": ""
    },
    "QIIME2_CLASSIFY": {
        "name_process": "QIIME2_CLASSIFY",
        "string_process": "process QIIME2_CLASSIFY {\n    tag \"${repseq},${trained_classifier}\"\n    label 'process_high'\n\n    conda (params.enable_conda ? { exit 1 \"QIIME2 has no conda package\" } : null)\n    container \"quay.io/qiime2/core:2021.8\"\n\n    input:\n    path(trained_classifier)\n    path(repseq)\n\n    output:\n    path(\"taxonomy.qza\"), emit: qza\n    path(\"taxonomy.tsv\"), emit: tsv\n    path \"versions.yml\" , emit: versions\n\n    script:\n    \"\"\"\n    export XDG_CONFIG_HOME=\"\\${PWD}/HOME\"\n\n    qiime feature-classifier classify-sklearn  \\\n        --i-classifier ${trained_classifier}  \\\n        --p-n-jobs ${task.cpus}  \\\n        --i-reads ${repseq}  \\\n        --o-classification taxonomy.qza  \\\n        --verbose\n    qiime metadata tabulate  \\\n        --m-input-file taxonomy.qza  \\\n        --o-visualization taxonomy.qzv  \\\n        --verbose\n    #produce \"taxonomy/taxonomy.tsv\"\n    qiime tools export --input-path taxonomy.qza  \\\n        --output-path taxonomy\n    qiime tools export --input-path taxonomy.qzv  \\\n        --output-path taxonomy\n    cp taxonomy/taxonomy.tsv .\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        qiime2: \\$( qiime --version | sed -e \"s/q2cli version //g\" | tr -d '`' | sed -e \"s/Run qiime info for more version details.//g\" )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 41,
        "string_script": "    \"\"\"\n    export XDG_CONFIG_HOME=\"\\${PWD}/HOME\"\n\n    qiime feature-classifier classify-sklearn  \\\n        --i-classifier ${trained_classifier}  \\\n        --p-n-jobs ${task.cpus}  \\\n        --i-reads ${repseq}  \\\n        --o-classification taxonomy.qza  \\\n        --verbose\n    qiime metadata tabulate  \\\n        --m-input-file taxonomy.qza  \\\n        --o-visualization taxonomy.qzv  \\\n        --verbose\n    #produce \"taxonomy/taxonomy.tsv\"\n    qiime tools export --input-path taxonomy.qza  \\\n        --output-path taxonomy\n    qiime tools export --input-path taxonomy.qzv  \\\n        --output-path taxonomy\n    cp taxonomy/taxonomy.tsv .\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        qiime2: \\$( qiime --version | sed -e \"s/q2cli version //g\" | tr -d '`' | sed -e \"s/Run qiime info for more version details.//g\" )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 24,
        "language_script": "bash",
        "tools": [
            "QIIME"
        ],
        "tools_url": [
            "https://bio.tools/qiime"
        ],
        "tools_dico": [
            {
                "name": "QIIME",
                "uri": "https://bio.tools/qiime",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biological science"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2945",
                                    "term": "Analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Open-source bioinformatics pipeline for performing microbiome analysis from raw DNA sequencing data. The pipeline is designed to take users from raw sequencing data generated on the Illumina or other platforms through publication quality graphics and statistics. This includes demultiplexing and quality filtering, OTU picking, taxonomic assignment, and phylogenetic reconstruction, and diversity analyses and visualizations.",
                "homepage": "http://qiime.org/"
            }
        ],
        "inputs": [
            "trained_classifier",
            "repseq"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__ampliseq",
        "directive": [
            "tag \"${repseq},${trained_classifier}\"",
            "label 'process_high'",
            "conda (params.enable_conda ? { exit 1 \"QIIME2 has no conda package\" } : null)",
            "container \"quay.io/qiime2/core:2021.8\""
        ],
        "when": "",
        "stub": ""
    },
    "QIIME2_ANCOM_TAX": {
        "name_process": "QIIME2_ANCOM_TAX",
        "string_process": "process QIIME2_ANCOM_TAX {\n    tag \"${table.baseName} - taxonomic level: ${taxlevel}\"\n    label 'process_medium'\n    label 'single_cpu'\n\n    conda (params.enable_conda ? { exit 1 \"QIIME2 has no conda package\" } : null)\n    container \"quay.io/qiime2/core:2021.8\"\n\n    input:\n    tuple path(metadata), path(table), path(taxonomy) ,val(taxlevel)\n\n    output:\n    path \"ancom/*\"      , emit: ancom\n    path \"versions.yml\" , emit: versions\n\n    script:\n    \"\"\"\n    export XDG_CONFIG_HOME=\"\\${PWD}/HOME\"\n    mkdir ancom\n\n    # Sum data at the specified level\n    qiime taxa collapse \\\n            --i-table ${table} \\\n            --i-taxonomy ${taxonomy} \\\n            --p-level ${taxlevel} \\\n            --o-collapsed-table lvl${taxlevel}-${table}\n\n    # Extract summarised table and output a file with the number of taxa\n    qiime tools export --input-path lvl${taxlevel}-${table} --output-path exported/\n    biom convert -i exported/feature-table.biom -o ${table.baseName}-level-${taxlevel}.feature-table.tsv --to-tsv\n\n    if [ \\$(grep -v '^#' -c ${table.baseName}-level-${taxlevel}.feature-table.tsv) -lt 2 ]; then\n        echo ${taxlevel} > ancom/\\\"WARNING Summing your data at taxonomic level ${taxlevel} produced less than two rows (taxa), ANCOM can't proceed -- did you specify a bad reference taxonomy?\\\".txt\n    else\n        qiime composition add-pseudocount \\\n                --i-table lvl${taxlevel}-${table} \\\n                --o-composition-table comp-lvl${taxlevel}-${table}\n        qiime composition ancom \\\n                --i-table comp-lvl${taxlevel}-${table} \\\n                --m-metadata-file ${metadata} \\\n                --m-metadata-column ${table.baseName} \\\n                --o-visualization comp-lvl${taxlevel}-${table.baseName}.qzv\n        qiime tools export --input-path comp-lvl${taxlevel}-${table.baseName}.qzv \\\n                --output-path ancom/Category-${table.baseName}-level-${taxlevel}\n    fi\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        qiime2: \\$( qiime --version | sed -e \"s/q2cli version //g\" | tr -d '`' | sed -e \"s/Run qiime info for more version details.//g\" )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 50,
        "string_script": "    \"\"\"\n    export XDG_CONFIG_HOME=\"\\${PWD}/HOME\"\n    mkdir ancom\n\n    # Sum data at the specified level\n    qiime taxa collapse \\\n            --i-table ${table} \\\n            --i-taxonomy ${taxonomy} \\\n            --p-level ${taxlevel} \\\n            --o-collapsed-table lvl${taxlevel}-${table}\n\n    # Extract summarised table and output a file with the number of taxa\n    qiime tools export --input-path lvl${taxlevel}-${table} --output-path exported/\n    biom convert -i exported/feature-table.biom -o ${table.baseName}-level-${taxlevel}.feature-table.tsv --to-tsv\n\n    if [ \\$(grep -v '^#' -c ${table.baseName}-level-${taxlevel}.feature-table.tsv) -lt 2 ]; then\n        echo ${taxlevel} > ancom/\\\"WARNING Summing your data at taxonomic level ${taxlevel} produced less than two rows (taxa), ANCOM can't proceed -- did you specify a bad reference taxonomy?\\\".txt\n    else\n        qiime composition add-pseudocount \\\n                --i-table lvl${taxlevel}-${table} \\\n                --o-composition-table comp-lvl${taxlevel}-${table}\n        qiime composition ancom \\\n                --i-table comp-lvl${taxlevel}-${table} \\\n                --m-metadata-file ${metadata} \\\n                --m-metadata-column ${table.baseName} \\\n                --o-visualization comp-lvl${taxlevel}-${table.baseName}.qzv\n        qiime tools export --input-path comp-lvl${taxlevel}-${table.baseName}.qzv \\\n                --output-path ancom/Category-${table.baseName}-level-${taxlevel}\n    fi\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        qiime2: \\$( qiime --version | sed -e \"s/q2cli version //g\" | tr -d '`' | sed -e \"s/Run qiime info for more version details.//g\" )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 34,
        "language_script": "bash",
        "tools": [
            "QIIME",
            "BioMe"
        ],
        "tools_url": [
            "https://bio.tools/qiime",
            "https://bio.tools/biome"
        ],
        "tools_dico": [
            {
                "name": "QIIME",
                "uri": "https://bio.tools/qiime",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biological science"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2945",
                                    "term": "Analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Open-source bioinformatics pipeline for performing microbiome analysis from raw DNA sequencing data. The pipeline is designed to take users from raw sequencing data generated on the Illumina or other platforms through publication quality graphics and statistics. This includes demultiplexing and quality filtering, OTU picking, taxonomic assignment, and phylogenetic reconstruction, and diversity analyses and visualizations.",
                "homepage": "http://qiime.org/"
            },
            {
                "name": "BioMe",
                "uri": "https://bio.tools/biome",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3534",
                            "term": "Protein binding sites"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2269",
                            "term": "Statistics and probability"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_1834",
                                    "term": "Protein-metal contact calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1831",
                                    "term": "Metal-bound cysteine detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2950",
                                    "term": "Residue distance calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0249",
                                    "term": "Protein geometry calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_1834",
                                    "term": "Residue-metal contact calculation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Biologically Relevant Metals (BioMe) is a web based platform for calculation of various statistical properties of metal binding sites including distribution of coordinate geometry and other descriptive statistics for a metal ion. The underlying database contains for each metal ion: PDB code, structure determination method, types of metal binding chains and names and coordinates of bound ligands, among other details.",
                "homepage": "http://metals.zesoi.fer.hr"
            }
        ],
        "inputs": [
            "taxlevel",
            "metadata",
            "table",
            "taxonomy"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__ampliseq",
        "directive": [
            "tag \"${table.baseName} - taxonomic level: ${taxlevel}\"",
            "label 'process_medium'",
            "label 'single_cpu'",
            "conda (params.enable_conda ? { exit 1 \"QIIME2 has no conda package\" } : null)",
            "container \"quay.io/qiime2/core:2021.8\""
        ],
        "when": "",
        "stub": ""
    },
    "FORMAT_TAXRESULTS": {
        "name_process": "FORMAT_TAXRESULTS",
        "string_process": "process FORMAT_TAXRESULTS {\n    label 'process_low'\n\n    conda (params.enable_conda ? \"pandas=1.1.5\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/pandas:1.1.5' :\n        'quay.io/biocontainers/pandas:1.1.5' }\"\n\n    input:\n    path(taxtable)\n    path(fastafile)\n    val(outfile)\n\n    output:\n    path(outfile)      , emit: tsv\n    path \"versions.yml\", emit: versions\n\n    script:\n    \"\"\"\n    add_full_sequence_to_taxfile.py $taxtable $fastafile $outfile\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        python: \\$(python --version 2>&1 | sed 's/Python //g')\n        pandas: \\$(python -c \"import pkg_resources; print(pkg_resources.get_distribution('pandas').version)\")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "    \"\"\"\n    add_full_sequence_to_taxfile.py $taxtable $fastafile $outfile\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        python: \\$(python --version 2>&1 | sed 's/Python //g')\n        pandas: \\$(python -c \"import pkg_resources; print(pkg_resources.get_distribution('pandas').version)\")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "taxtable",
            "fastafile",
            "outfile"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__ampliseq",
        "directive": [
            "label 'process_low'",
            "conda (params.enable_conda ? \"pandas=1.1.5\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/pandas:1.1.5' : 'quay.io/biocontainers/pandas:1.1.5' }\""
        ],
        "when": "",
        "stub": ""
    },
    "METADATA_PAIRWISE": {
        "name_process": "METADATA_PAIRWISE",
        "string_process": "process METADATA_PAIRWISE {\n    tag \"$metadata\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconductor-dada2=1.22.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bioconductor-dada2:1.22.0--r41h399db7b_0' :\n        'quay.io/biocontainers/bioconductor-dada2:1.22.0--r41h399db7b_0' }\"\n\n    input:\n    path(metadata)\n\n    output:\n    stdout\n\n    script:\n    \"\"\"\n    metadata_pairwise.r ${metadata}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        R: \\$(R --version 2>&1 | sed -n 1p | sed 's/R version //' | sed 's/ (.*//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "    \"\"\"\n    metadata_pairwise.r ${metadata}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        R: \\$(R --version 2>&1 | sed -n 1p | sed 's/R version //' | sed 's/ (.*//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "metadata"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__ampliseq",
        "directive": [
            "tag \"$metadata\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconductor-dada2=1.22.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bioconductor-dada2:1.22.0--r41h399db7b_0' : 'quay.io/biocontainers/bioconductor-dada2:1.22.0--r41h399db7b_0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "FASTQC": {
        "name_process": "FASTQC",
        "string_process": "process FASTQC {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::fastqc=0.11.9\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/fastqc:0.11.9--0' :\n        'quay.io/biocontainers/fastqc:0.11.9--0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path(\"*.html\"), emit: html\n    tuple val(meta), path(\"*.zip\") , emit: zip\n    path  \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n                                                                          \n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (meta.single_end) {\n        \"\"\"\n        [ ! -f  ${prefix}.fastq.gz ] && ln -s $reads ${prefix}.fastq.gz\n        fastqc $args --threads $task.cpus ${prefix}.fastq.gz\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            fastqc: \\$( fastqc --version | sed -e \"s/FastQC v//g\" )\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        [ ! -f  ${prefix}_1.fastq.gz ] && ln -s ${reads[0]} ${prefix}_1.fastq.gz\n        [ ! -f  ${prefix}_2.fastq.gz ] && ln -s ${reads[1]} ${prefix}_2.fastq.gz\n        fastqc $args --threads $task.cpus ${prefix}_1.fastq.gz ${prefix}_2.fastq.gz\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            fastqc: \\$( fastqc --version | sed -e \"s/FastQC v//g\" )\n        END_VERSIONS\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 45,
        "string_script": "    def args = task.ext.args ?: ''\n                                                                          \n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (meta.single_end) {\n        \"\"\"\n        [ ! -f  ${prefix}.fastq.gz ] && ln -s $reads ${prefix}.fastq.gz\n        fastqc $args --threads $task.cpus ${prefix}.fastq.gz\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            fastqc: \\$( fastqc --version | sed -e \"s/FastQC v//g\" )\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        [ ! -f  ${prefix}_1.fastq.gz ] && ln -s ${reads[0]} ${prefix}_1.fastq.gz\n        [ ! -f  ${prefix}_2.fastq.gz ] && ln -s ${reads[1]} ${prefix}_2.fastq.gz\n        fastqc $args --threads $task.cpus ${prefix}_1.fastq.gz ${prefix}_2.fastq.gz\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            fastqc: \\$( fastqc --version | sed -e \"s/FastQC v//g\" )\n        END_VERSIONS\n        \"\"\"\n    }",
        "nb_lignes_script": 24,
        "language_script": "bash",
        "tools": [
            "FastQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            }
        ],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__ampliseq",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::fastqc=0.11.9\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/fastqc:0.11.9--0' : 'quay.io/biocontainers/fastqc:0.11.9--0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "DADA2_ERR": {
        "name_process": "DADA2_ERR",
        "string_process": "process DADA2_ERR {\n    tag \"$meta.run\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconductor-dada2=1.22.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bioconductor-dada2:1.22.0--r41h399db7b_0' :\n        'quay.io/biocontainers/bioconductor-dada2:1.22.0--r41h399db7b_0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path(\"*.err.rds\"), emit: errormodel\n    tuple val(meta), path(\"*.err.pdf\"), emit: pdf\n    tuple val(meta), path(\"*.err.log\"), emit: log\n    tuple val(meta), path(\"*.err.convergence.txt\"), emit: convergence\n    path \"versions.yml\"               , emit: versions\n    path \"*.args.txt\"                 , emit: args\n\n    script:\n    def args = task.ext.args ?: ''\n    if (!meta.single_end) {\n        \"\"\"\n        #!/usr/bin/env Rscript\n        suppressPackageStartupMessages(library(dada2))\n\n        fnFs <- sort(list.files(\".\", pattern = \"_1.filt.fastq.gz\", full.names = TRUE))\n        fnRs <- sort(list.files(\".\", pattern = \"_2.filt.fastq.gz\", full.names = TRUE))\n\n        sink(file = \"${meta.run}.err.log\")\n        errF <- learnErrors(fnFs, $args, multithread = $task.cpus, verbose = TRUE)\n        saveRDS(errF, \"${meta.run}_1.err.rds\")\n        errR <- learnErrors(fnRs, $args, multithread = $task.cpus, verbose = TRUE)\n        saveRDS(errR, \"${meta.run}_2.err.rds\")\n        sink(file = NULL)\n\n        pdf(\"${meta.run}_1.err.pdf\")\n        plotErrors(errF, nominalQ = TRUE)\n        dev.off()\n\n        pdf(\"${meta.run}_2.err.pdf\")\n        plotErrors(errR, nominalQ = TRUE)\n        dev.off()\n\n        sink(file = \"${meta.run}_1.err.convergence.txt\")\n        dada2:::checkConvergence(errF)\n        sink(file = NULL)\n\n        sink(file = \"${meta.run}_2.err.convergence.txt\")\n        dada2:::checkConvergence(errR)\n        sink(file = NULL)\n\n        write.table('learnErrors\\t$args', file = \"learnErrors.args.txt\", row.names = FALSE, col.names = FALSE, quote = FALSE, na = '')\n        writeLines(c(\"\\\\\"${task.process}\\\\\":\", paste0(\"    R: \", paste0(R.Version()[c(\"major\",\"minor\")], collapse = \".\")),paste0(\"    dada2: \", packageVersion(\"dada2\")) ), \"versions.yml\")\n        \"\"\"\n    } else {\n        \"\"\"\n        #!/usr/bin/env Rscript\n        suppressPackageStartupMessages(library(dada2))\n\n        fnFs <- sort(list.files(\".\", pattern = \".filt.fastq.gz\", full.names = TRUE))\n\n        sink(file = \"${meta.run}.err.log\")\n        errF <- learnErrors(fnFs, $args, multithread = $task.cpus, verbose = TRUE)\n        saveRDS(errF, \"${meta.run}.err.rds\")\n        sink(file = NULL)\n\n        pdf(\"${meta.run}.err.pdf\")\n        plotErrors(errF, nominalQ = TRUE)\n        dev.off()\n\n        sink(file = \"${meta.run}.err.convergence.txt\")\n        dada2:::checkConvergence(errF)\n        sink(file = NULL)\n\n        write.table('learnErrors\\t$args', file = \"learnErrors.args.txt\", row.names = FALSE, col.names = FALSE, quote = FALSE, na = '')\n        writeLines(c(\"\\\\\"${task.process}\\\\\":\", paste0(\"    R: \", paste0(R.Version()[c(\"major\",\"minor\")], collapse = \".\")),paste0(\"    dada2: \", packageVersion(\"dada2\")) ), \"versions.yml\")\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 79,
        "string_script": "    def args = task.ext.args ?: ''\n    if (!meta.single_end) {\n        \"\"\"\n        #!/usr/bin/env Rscript\n        suppressPackageStartupMessages(library(dada2))\n\n        fnFs <- sort(list.files(\".\", pattern = \"_1.filt.fastq.gz\", full.names = TRUE))\n        fnRs <- sort(list.files(\".\", pattern = \"_2.filt.fastq.gz\", full.names = TRUE))\n\n        sink(file = \"${meta.run}.err.log\")\n        errF <- learnErrors(fnFs, $args, multithread = $task.cpus, verbose = TRUE)\n        saveRDS(errF, \"${meta.run}_1.err.rds\")\n        errR <- learnErrors(fnRs, $args, multithread = $task.cpus, verbose = TRUE)\n        saveRDS(errR, \"${meta.run}_2.err.rds\")\n        sink(file = NULL)\n\n        pdf(\"${meta.run}_1.err.pdf\")\n        plotErrors(errF, nominalQ = TRUE)\n        dev.off()\n\n        pdf(\"${meta.run}_2.err.pdf\")\n        plotErrors(errR, nominalQ = TRUE)\n        dev.off()\n\n        sink(file = \"${meta.run}_1.err.convergence.txt\")\n        dada2:::checkConvergence(errF)\n        sink(file = NULL)\n\n        sink(file = \"${meta.run}_2.err.convergence.txt\")\n        dada2:::checkConvergence(errR)\n        sink(file = NULL)\n\n        write.table('learnErrors\\t$args', file = \"learnErrors.args.txt\", row.names = FALSE, col.names = FALSE, quote = FALSE, na = '')\n        writeLines(c(\"\\\\\"${task.process}\\\\\":\", paste0(\"    R: \", paste0(R.Version()[c(\"major\",\"minor\")], collapse = \".\")),paste0(\"    dada2: \", packageVersion(\"dada2\")) ), \"versions.yml\")\n        \"\"\"\n    } else {\n        \"\"\"\n        #!/usr/bin/env Rscript\n        suppressPackageStartupMessages(library(dada2))\n\n        fnFs <- sort(list.files(\".\", pattern = \".filt.fastq.gz\", full.names = TRUE))\n\n        sink(file = \"${meta.run}.err.log\")\n        errF <- learnErrors(fnFs, $args, multithread = $task.cpus, verbose = TRUE)\n        saveRDS(errF, \"${meta.run}.err.rds\")\n        sink(file = NULL)\n\n        pdf(\"${meta.run}.err.pdf\")\n        plotErrors(errF, nominalQ = TRUE)\n        dev.off()\n\n        sink(file = \"${meta.run}.err.convergence.txt\")\n        dada2:::checkConvergence(errF)\n        sink(file = NULL)\n\n        write.table('learnErrors\\t$args', file = \"learnErrors.args.txt\", row.names = FALSE, col.names = FALSE, quote = FALSE, na = '')\n        writeLines(c(\"\\\\\"${task.process}\\\\\":\", paste0(\"    R: \", paste0(R.Version()[c(\"major\",\"minor\")], collapse = \".\")),paste0(\"    dada2: \", packageVersion(\"dada2\")) ), \"versions.yml\")\n        \"\"\"\n    }",
        "nb_lignes_script": 58,
        "language_script": "Rscript",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__ampliseq",
        "directive": [
            "tag \"$meta.run\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconductor-dada2=1.22.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bioconductor-dada2:1.22.0--r41h399db7b_0' : 'quay.io/biocontainers/bioconductor-dada2:1.22.0--r41h399db7b_0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "SBDIEXPORT": {
        "name_process": "SBDIEXPORT",
        "string_process": "process SBDIEXPORT {\n    tag \"${asvtable},${taxonomytable},${metadata}\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::r-tidyverse=1.2.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/r-tidyverse:1.2.1' :\n        'quay.io/biocontainers/r-tidyverse:1.2.1' }\"\n\n    input:\n    path asvtable\n    path taxonomytable\n    path metadata\n\n    output:\n    path \"*.tsv\"       , emit: sbditables\n    path \"versions.yml\", emit: versions\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    sbdiexport.R $args $asvtable $taxonomytable $metadata\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        R: \\$(R --version 2>&1 | sed -n 1p | sed 's/R version //' | sed 's/ (.*//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    sbdiexport.R $args $asvtable $taxonomytable $metadata\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        R: \\$(R --version 2>&1 | sed -n 1p | sed 's/R version //' | sed 's/ (.*//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "asvtable",
            "taxonomytable",
            "metadata"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__ampliseq",
        "directive": [
            "tag \"${asvtable},${taxonomytable},${metadata}\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::r-tidyverse=1.2.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/r-tidyverse:1.2.1' : 'quay.io/biocontainers/r-tidyverse:1.2.1' }\""
        ],
        "when": "",
        "stub": ""
    },
    "QIIME2_EXPORT_RELTAX": {
        "name_process": "QIIME2_EXPORT_RELTAX",
        "string_process": "process QIIME2_EXPORT_RELTAX {\n    label 'process_low'\n\n    conda (params.enable_conda ? { exit 1 \"QIIME2 has no conda package\" } : null)\n    container \"quay.io/qiime2/core:2021.8\"\n\n    input:\n    path(table)\n    path(taxonomy)\n    val(tax_agglom_min)\n    val(tax_agglom_max)\n\n    output:\n    path(\"*.tsv\")        , emit: tsv\n    path \"versions.yml\"  , emit: versions\n\n    script:\n    \"\"\"\n    export XDG_CONFIG_HOME=\"\\${PWD}/HOME\"\n\n    ##on several taxa level\n    array=(\\$(seq ${tax_agglom_min} 1 ${tax_agglom_max}))\n\n    for i in \\${array[@]}\n    do\n        #collapse taxa\n        qiime taxa collapse \\\n            --i-table ${table} \\\n            --i-taxonomy ${taxonomy} \\\n            --p-level \\$i \\\n            --o-collapsed-table table-\\$i.qza\n        #convert to relative abundances\n        qiime feature-table relative-frequency \\\n            --i-table table-\\$i.qza \\\n            --o-relative-frequency-table relative-table-\\$i.qza\n        #export to biom\n        qiime tools export --input-path relative-table-\\$i.qza \\\n            --output-path relative-table-\\$i\n        #convert to tab separated text file\n        biom convert \\\n            -i relative-table-\\$i/feature-table.biom \\\n            -o rel-table-\\$i.tsv --to-tsv\n    done\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        qiime2: \\$( qiime --version | sed -e \"s/q2cli version //g\" | tr -d '`' | sed -e \"s/Run qiime info for more version details.//g\" )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 48,
        "string_script": "    \"\"\"\n    export XDG_CONFIG_HOME=\"\\${PWD}/HOME\"\n\n    ##on several taxa level\n    array=(\\$(seq ${tax_agglom_min} 1 ${tax_agglom_max}))\n\n    for i in \\${array[@]}\n    do\n        #collapse taxa\n        qiime taxa collapse \\\n            --i-table ${table} \\\n            --i-taxonomy ${taxonomy} \\\n            --p-level \\$i \\\n            --o-collapsed-table table-\\$i.qza\n        #convert to relative abundances\n        qiime feature-table relative-frequency \\\n            --i-table table-\\$i.qza \\\n            --o-relative-frequency-table relative-table-\\$i.qza\n        #export to biom\n        qiime tools export --input-path relative-table-\\$i.qza \\\n            --output-path relative-table-\\$i\n        #convert to tab separated text file\n        biom convert \\\n            -i relative-table-\\$i/feature-table.biom \\\n            -o rel-table-\\$i.tsv --to-tsv\n    done\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        qiime2: \\$( qiime --version | sed -e \"s/q2cli version //g\" | tr -d '`' | sed -e \"s/Run qiime info for more version details.//g\" )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 31,
        "language_script": "bash",
        "tools": [
            "QIIME",
            "BioMe"
        ],
        "tools_url": [
            "https://bio.tools/qiime",
            "https://bio.tools/biome"
        ],
        "tools_dico": [
            {
                "name": "QIIME",
                "uri": "https://bio.tools/qiime",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biological science"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2945",
                                    "term": "Analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Open-source bioinformatics pipeline for performing microbiome analysis from raw DNA sequencing data. The pipeline is designed to take users from raw sequencing data generated on the Illumina or other platforms through publication quality graphics and statistics. This includes demultiplexing and quality filtering, OTU picking, taxonomic assignment, and phylogenetic reconstruction, and diversity analyses and visualizations.",
                "homepage": "http://qiime.org/"
            },
            {
                "name": "BioMe",
                "uri": "https://bio.tools/biome",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3534",
                            "term": "Protein binding sites"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2269",
                            "term": "Statistics and probability"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_1834",
                                    "term": "Protein-metal contact calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1831",
                                    "term": "Metal-bound cysteine detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2950",
                                    "term": "Residue distance calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0249",
                                    "term": "Protein geometry calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_1834",
                                    "term": "Residue-metal contact calculation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Biologically Relevant Metals (BioMe) is a web based platform for calculation of various statistical properties of metal binding sites including distribution of coordinate geometry and other descriptive statistics for a metal ion. The underlying database contains for each metal ion: PDB code, structure determination method, types of metal binding chains and names and coordinates of bound ligands, among other details.",
                "homepage": "http://metals.zesoi.fer.hr"
            }
        ],
        "inputs": [
            "table",
            "taxonomy",
            "tax_agglom_min",
            "tax_agglom_max"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__ampliseq",
        "directive": [
            "label 'process_low'",
            "conda (params.enable_conda ? { exit 1 \"QIIME2 has no conda package\" } : null)",
            "container \"quay.io/qiime2/core:2021.8\""
        ],
        "when": "",
        "stub": ""
    },
    "QIIME2_EXTRACT": {
        "name_process": "QIIME2_EXTRACT",
        "string_process": "process QIIME2_EXTRACT {\n    tag \"${meta.FW_primer}-${meta.RV_primer}\"\n    label 'process_low'\n    label 'single_cpu'\n\n    conda (params.enable_conda ? { exit 1 \"QIIME2 has no conda package\" } : null)\n    container \"quay.io/qiime2/core:2021.8\"\n\n    input:\n    tuple val(meta), path(database)\n\n    output:\n    tuple val(meta), path(\"*.qza\"), emit: qza\n    path \"versions.yml\"          , emit: versions\n\n    script:\n    \"\"\"\n    export XDG_CONFIG_HOME=\"\\${PWD}/HOME\"\n\n    ### Import\n    qiime tools import --type \\'FeatureData[Sequence]\\' \\\n        --input-path ${database[0]} \\\n        --output-path ref-seq.qza\n    qiime tools import --type \\'FeatureData[Taxonomy]\\' \\\n        --input-format HeaderlessTSVTaxonomyFormat \\\n        --input-path ${database[1]} \\\n        --output-path ref-taxonomy.qza\n    #Extract sequences based on primers\n    qiime feature-classifier extract-reads \\\n        --i-sequences ref-seq.qza \\\n        --p-f-primer ${meta.FW_primer} \\\n        --p-r-primer ${meta.RV_primer} \\\n        --o-reads ${meta.FW_primer}-${meta.RV_primer}-ref-seq.qza \\\n        --quiet\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        qiime2: \\$( qiime --version | sed -e \"s/q2cli version //g\" | tr -d '`' | sed -e \"s/Run qiime info for more version details.//g\" )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 39,
        "string_script": "    \"\"\"\n    export XDG_CONFIG_HOME=\"\\${PWD}/HOME\"\n\n    ### Import\n    qiime tools import --type \\'FeatureData[Sequence]\\' \\\n        --input-path ${database[0]} \\\n        --output-path ref-seq.qza\n    qiime tools import --type \\'FeatureData[Taxonomy]\\' \\\n        --input-format HeaderlessTSVTaxonomyFormat \\\n        --input-path ${database[1]} \\\n        --output-path ref-taxonomy.qza\n    #Extract sequences based on primers\n    qiime feature-classifier extract-reads \\\n        --i-sequences ref-seq.qza \\\n        --p-f-primer ${meta.FW_primer} \\\n        --p-r-primer ${meta.RV_primer} \\\n        --o-reads ${meta.FW_primer}-${meta.RV_primer}-ref-seq.qza \\\n        --quiet\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        qiime2: \\$( qiime --version | sed -e \"s/q2cli version //g\" | tr -d '`' | sed -e \"s/Run qiime info for more version details.//g\" )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 23,
        "language_script": "bash",
        "tools": [
            "QIIME"
        ],
        "tools_url": [
            "https://bio.tools/qiime"
        ],
        "tools_dico": [
            {
                "name": "QIIME",
                "uri": "https://bio.tools/qiime",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biological science"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2945",
                                    "term": "Analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Open-source bioinformatics pipeline for performing microbiome analysis from raw DNA sequencing data. The pipeline is designed to take users from raw sequencing data generated on the Illumina or other platforms through publication quality graphics and statistics. This includes demultiplexing and quality filtering, OTU picking, taxonomic assignment, and phylogenetic reconstruction, and diversity analyses and visualizations.",
                "homepage": "http://qiime.org/"
            }
        ],
        "inputs": [
            "meta",
            "database"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__ampliseq",
        "directive": [
            "tag \"${meta.FW_primer}-${meta.RV_primer}\"",
            "label 'process_low'",
            "label 'single_cpu'",
            "conda (params.enable_conda ? { exit 1 \"QIIME2 has no conda package\" } : null)",
            "container \"quay.io/qiime2/core:2021.8\""
        ],
        "when": "",
        "stub": ""
    },
    "FORMAT_TAXONOMY": {
        "name_process": "FORMAT_TAXONOMY",
        "string_process": "process FORMAT_TAXONOMY {\n    label 'process_low'\n\n    conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img' :\n        'biocontainers/biocontainers:v1.2.0_cv1' }\"\n\n    input:\n    path(database)\n\n    output:\n    path( \"*assignTaxonomy.fna*\" ), emit: assigntax\n    path( \"*addSpecies.fna*\"), emit: addspecies\n    path( \"ref_taxonomy.txt\"), emit: ref_tax_info\n\n    script:\n    \"\"\"\n    ${params.dada_ref_databases[params.dada_ref_taxonomy][\"fmtscript\"]}\n\n    #Giving out information\n    echo -e \"--dada_ref_taxonomy: ${params.dada_ref_taxonomy}\\n\" >ref_taxonomy.txt\n    echo -e \"Title: ${params.dada_ref_databases[params.dada_ref_taxonomy][\"title\"]}\\n\" >>ref_taxonomy.txt\n    echo -e \"Citation: ${params.dada_ref_databases[params.dada_ref_taxonomy][\"citation\"]}\\n\" >>ref_taxonomy.txt\n    echo \"All entries: ${params.dada_ref_databases[params.dada_ref_taxonomy]}\" >>ref_taxonomy.txt\n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "    \"\"\"\n    ${params.dada_ref_databases[params.dada_ref_taxonomy][\"fmtscript\"]}\n\n    #Giving out information\n    echo -e \"--dada_ref_taxonomy: ${params.dada_ref_taxonomy}\\n\" >ref_taxonomy.txt\n    echo -e \"Title: ${params.dada_ref_databases[params.dada_ref_taxonomy][\"title\"]}\\n\" >>ref_taxonomy.txt\n    echo -e \"Citation: ${params.dada_ref_databases[params.dada_ref_taxonomy][\"citation\"]}\\n\" >>ref_taxonomy.txt\n    echo \"All entries: ${params.dada_ref_databases[params.dada_ref_taxonomy]}\" >>ref_taxonomy.txt\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "database"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__ampliseq",
        "directive": [
            "label 'process_low'",
            "conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img' : 'biocontainers/biocontainers:v1.2.0_cv1' }\""
        ],
        "when": "",
        "stub": ""
    }
}
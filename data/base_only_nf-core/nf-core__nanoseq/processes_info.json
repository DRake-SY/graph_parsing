{
    "GET_NANOLYSE_FASTA": {
        "name_process": "GET_NANOLYSE_FASTA",
        "string_process": "\nprocess GET_NANOLYSE_FASTA {\n\n    conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img' :\n        'biocontainers/biocontainers:v1.2.0_cv1' }\"\n\n    output:\n    path \"*fasta.gz\"  , emit: ch_nanolyse_fasta\n\n    script:\n    \"\"\"\n    curl \\\\\n    -L https://github.com/wdecoster/nanolyse/raw/master/reference/lambda.fasta.gz \\\\\n    -o lambda.fasta.gz\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    curl \\\\\n    -L https://github.com/wdecoster/nanolyse/raw/master/reference/lambda.fasta.gz \\\\\n    -o lambda.fasta.gz\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "CURLS"
        ],
        "tools_url": [
            "https://bio.tools/CURLS"
        ],
        "tools_dico": [
            {
                "name": "CURLS",
                "uri": "https://bio.tools/CURLS",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3335",
                            "term": "Cardiology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "Public health and epidemiology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3421",
                            "term": "Surgery"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "Pathology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3335",
                            "term": "Cardiovascular medicine"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Public_health"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Epidemiology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3421",
                            "term": "https://en.wikipedia.org/wiki/Surgery"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "Disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "https://en.wikipedia.org/wiki/Pathology"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "towards a wider use of basic echo applications in Africa.\n\nBACKGROUND:Point-of-care ultrasound is increasingly being used as a diagnostic tool in resource-limited settings. The majority of existing ultrasound protocols have been developed and implemented in high-resource settings. In sub-Saharan Africa (SSA), patients with heart failure of various etiologies commonly present late in the disease process, with a similar syndrome of dyspnea, edema and cardiomegaly on chest X-ray. The causes of heart failure in SSA differ from those in high-resource settings. Point-of-care ultrasound has the potential to identify the underlying etiology of heart failure, and lead to targeted therapy.\n\n||| HOMEPAGE MISSING!.\n\n||| CORRECT NAME OF TOOL COULD ALSO BE 'ultrasound', 'Cardiac ultrasound resource-limited settings', 'high-resource', 'cardiomegaly SSA'",
                "homepage": "https://www.ncbi.nlm.nih.gov/pubmed/?term=31883027"
            }
        ],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__nanoseq",
        "directive": [
            "conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img' : 'biocontainers/biocontainers:v1.2.0_cv1' }\""
        ],
        "when": "",
        "stub": ""
    },
    "UCSC_BEDGRAPHTOBIGWIG": {
        "name_process": "UCSC_BEDGRAPHTOBIGWIG",
        "string_process": "\nprocess UCSC_BEDGRAPHTOBIGWIG {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'meta.id') }\n\n    conda     (params.enable_conda ? \"bioconda::ucsc-bedgraphtobigwig=377\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/ucsc-bedgraphtobigwig:377--h446ed27_1\"\n    } else {\n        container \"quay.io/biocontainers/ucsc-bedgraphtobigwig:377--h446ed27_1\"\n    }\n\n    input:\n    tuple val(meta), path(sizes), path(bedgraph)\n\n    output:\n    tuple val(meta), path(sizes), path(\"*.bigWig\"), emit: bigwig\n    path \"versions.yml\"                           , emit: versions\n\n    script:\n    \"\"\"\n    bedGraphToBigWig $bedgraph $sizes ${meta.id}.bigWig\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(echo $VERSION)\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "    \"\"\"\n    bedGraphToBigWig $bedgraph $sizes ${meta.id}.bigWig\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(echo $VERSION)\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "bedGraphToBigWig"
        ],
        "tools_url": [
            "https://bio.tools/bedgraphtobigwig"
        ],
        "tools_dico": [
            {
                "name": "bedGraphToBigWig",
                "uri": "https://bio.tools/bedgraphtobigwig",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Convert bedGraph to bigWig file.",
                "homepage": "https://www.encodeproject.org/software/bedgraphtobigwig/"
            }
        ],
        "inputs": [
            "meta",
            "sizes",
            "bedgraph"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__nanoseq",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'meta.id') }",
            "conda (params.enable_conda ? \"bioconda::ucsc-bedgraphtobigwig=377\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/ucsc-bedgraphtobigwig:377--h446ed27_1\" } else { container \"quay.io/biocontainers/ucsc-bedgraphtobigwig:377--h446ed27_1\" }"
        ],
        "when": "",
        "stub": ""
    },
    "NANOLYSE": {
        "name_process": "NANOLYSE",
        "string_process": "\nprocess NANOLYSE {\n    tag \"$meta.id\"\n    label 'process_low'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"bioconda::nanolyse=1.2.0\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/nanolyse:1.2.0--py_0\"\n    } else {\n        container \"quay.io/biocontainers/nanolyse:1.2.0--py_0\"\n    }\n\n    input:\n    tuple val(meta), path(fastq)\n    path  fasta\n\n    output:\n    tuple val(meta), path(\"*.fastq.gz\"), emit: fastq\n    path \"*.log\"                       , emit: log\n    path \"versions.yml\"                , emit: versions\n\n    script:\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    gunzip -c $fastq | NanoLyse -r $fasta | gzip > ${prefix}.fastq.gz\n    mv NanoLyse.log ${prefix}.nanolyse.log\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(NanoLyse --version 2>&1 | sed -e \"s/NanoLyse //g\")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    gunzip -c $fastq | NanoLyse -r $fasta | gzip > ${prefix}.fastq.gz\n    mv NanoLyse.log ${prefix}.nanolyse.log\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(NanoLyse --version 2>&1 | sed -e \"s/NanoLyse //g\")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "fastq",
            "fasta"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__nanoseq",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"bioconda::nanolyse=1.2.0\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/nanolyse:1.2.0--py_0\" } else { container \"quay.io/biocontainers/nanolyse:1.2.0--py_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "GRAPHMAP2_INDEX": {
        "name_process": "GRAPHMAP2_INDEX",
        "string_process": "\nprocess GRAPHMAP2_INDEX {\n    label 'process_high'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'') }\n\n    conda     (params.enable_conda ? \"bioconda::graphmap=0.6.3\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/graphmap:0.6.3--he513fc3_0\"\n    } else {\n        container \"quay.io/biocontainers/graphmap:0.6.3--he513fc3_0\"\n    }\n\n    input:\n    tuple path(fasta), path(sizes), val(gtf), val(bed), val(is_transcripts), val(annotation_str)\n\n    output:\n    tuple path(fasta), path(sizes), path(gtf), val(bed), val(is_transcripts), path(\"*.gmidx\"), val(annotation_str), emit: index\n    path \"versions.yml\" , emit: versions\n\n    script:\n    def preset = (params.protocol == 'DNA' || is_transcripts) ? \"\" : \"-x rnaseq\"\n    def junctions = (params.protocol != 'DNA' && !is_transcripts && gtf) ? \"--gtf $gtf\" : \"\"\n    \"\"\"\n    graphmap2 \\\\\n        align \\\\\n        $preset \\\\\n        $junctions \\\\\n        -t $task.cpus \\\\\n        -I \\\\\n        -r $fasta\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(echo \\$(graphmap2 align 2>&1) | sed 's/^.*Version: v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 37,
        "string_script": "    def preset = (params.protocol == 'DNA' || is_transcripts) ? \"\" : \"-x rnaseq\"\n    def junctions = (params.protocol != 'DNA' && !is_transcripts && gtf) ? \"--gtf $gtf\" : \"\"\n    \"\"\"\n    graphmap2 \\\\\n        align \\\\\n        $preset \\\\\n        $junctions \\\\\n        -t $task.cpus \\\\\n        -I \\\\\n        -r $fasta\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(echo \\$(graphmap2 align 2>&1) | sed 's/^.*Version: v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [
            "Graphmap2",
            "ALIGN"
        ],
        "tools_url": [
            "https://bio.tools/Graphmap2",
            "https://bio.tools/align"
        ],
        "tools_dico": [
            {
                "name": "Graphmap2",
                "uri": "https://bio.tools/Graphmap2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3320",
                            "term": "RNA splicing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "Gene transcripts"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3320",
                            "term": "Alternative splicing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "mRNA features"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Sequence trimming"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0526",
                                    "term": "EST assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Trimming"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0526",
                                    "term": "Sequence assembly (EST assembly)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Splice-aware RNA-seq mapper for long reads | GraphMap - A highly sensitive and accurate mapper for long, error-prone reads http://www.nature.com/ncomms/2016/160415/ncomms11307/full/ncomms11307.html https://www.biorxiv.org/content/10.1101/720458v1 | GraphMap2 - A highly sensitive and accurate mapper for long, error-prone reads | GMAP: A Genomic Mapping and Alignment Program for mRNA and EST Sequences, and | GSNAP: Genomic Short-read Nucleotide Alignment Program | Links are provided below in parentheses for users who wish to download the files with a command-line tool, like wget",
                "homepage": "https://github.com/lbcb-sci/graphmap2"
            },
            {
                "name": "ALIGN",
                "uri": "https://bio.tools/align",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0300",
                                    "term": "Sequence profile alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0495",
                                    "term": "Local alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0496",
                                    "term": "Global alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0495",
                                    "term": "Local sequence alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0495",
                                    "term": "Sequence alignment (local)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0496",
                                    "term": "Global sequence alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0496",
                                    "term": "Sequence alignment (global)"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_1460",
                                "term": "Protein structure"
                            },
                            {
                                "uri": "http://edamontology.org/data_2976",
                                "term": "Protein sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_1384",
                                "term": "Protein sequence alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_0869",
                                "term": "Sequence-profile alignment"
                            }
                        ]
                    }
                ],
                "description": "Pairwise alignment tool.",
                "homepage": "http://protein.bio.unipd.it/align2"
            }
        ],
        "inputs": [
            "gtf",
            "bed",
            "is_transcripts",
            "annotation_str",
            "fasta",
            "sizes"
        ],
        "nb_inputs": 6,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__nanoseq",
        "directive": [
            "label 'process_high'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'') }",
            "conda (params.enable_conda ? \"bioconda::graphmap=0.6.3\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/graphmap:0.6.3--he513fc3_0\" } else { container \"quay.io/biocontainers/graphmap:0.6.3--he513fc3_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "BEDTOOLS_BAMBED": {
        "name_process": "BEDTOOLS_BAMBED",
        "string_process": "\nprocess BEDTOOLS_BAMBED {\n    label 'process_medium'\n\n    conda     (params.enable_conda ? \"bioconda::bedtools=2.29.2\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/bedtools:2.29.2--hc088bd4_0\"\n    } else {\n        container \"quay.io/biocontainers/bedtools:2.29.2--hc088bd4_0\"\n    }\n\n    when:\n    !params.skip_alignment && !params.skip_bigbed && (params.protocol == 'directRNA' || params.protocol == 'cDNA')\n\n    input:\n    tuple val(meta), path(sizes), val(is_transcripts), path(bam), path(bai)\n\n    output:\n    tuple val(meta), path(sizes), path(\"*.bed12\") , emit: bed12\n    path \"versions.yml\"                           , emit: versions\n\n    script:\n    \"\"\"\n    bedtools \\\\\n        bamtobed \\\\\n        -bed12 \\\\\n        -cigar \\\\\n        -i ${bam[0]} \\\\\n        | bedtools sort > ${meta.id}.bed12\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(bedtools --version | sed -e \"s/bedtools v//g\")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    \"\"\"\n    bedtools \\\\\n        bamtobed \\\\\n        -bed12 \\\\\n        -cigar \\\\\n        -i ${bam[0]} \\\\\n        | bedtools sort > ${meta.id}.bed12\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(bedtools --version | sed -e \"s/bedtools v//g\")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "BEDTools"
        ],
        "tools_url": [
            "https://bio.tools/bedtools"
        ],
        "tools_dico": [
            {
                "name": "BEDTools",
                "uri": "https://bio.tools/bedtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "BEDTools is an extensive suite of utilities for comparing genomic features in BED format.",
                "homepage": "https://github.com/arq5x/bedtools2"
            }
        ],
        "inputs": [
            "meta",
            "is_transcripts",
            "sizes",
            "bam",
            "bai"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__nanoseq",
        "directive": [
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::bedtools=2.29.2\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/bedtools:2.29.2--hc088bd4_0\" } else { container \"quay.io/biocontainers/bedtools:2.29.2--hc088bd4_0\" }"
        ],
        "when": "!params.skip_alignment && !params.skip_bigbed && (params.protocol == 'directRNA' || params.protocol == 'cDNA')",
        "stub": ""
    },
    "STRINGTIE_MERGE": {
        "name_process": "STRINGTIE_MERGE",
        "string_process": "\nprocess STRINGTIE_MERGE {\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }\n\n                                                         \n    conda     (params.enable_conda ? \"bioconda::stringtie=2.1.7\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/stringtie:2.1.7--h978d192_0\"\n    } else {\n        container \"quay.io/biocontainers/stringtie:2.1.7--h978d192_0\"\n    }\n\n    input:\n    path stringtie_gtf\n    path annotation_gtf\n\n    output:\n    path \"stringtie.merged.gtf\", emit: gtf\n    path  \"versions.yml\"       , emit: versions\n\n    script:\n    \"\"\"\n    stringtie \\\\\n        --merge $stringtie_gtf \\\\\n        -G $annotation_gtf \\\\\n        -o stringtie.merged.gtf\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(stringtie --version 2>&1)\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    \"\"\"\n    stringtie \\\\\n        --merge $stringtie_gtf \\\\\n        -G $annotation_gtf \\\\\n        -o stringtie.merged.gtf\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(stringtie --version 2>&1)\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [
            "StringTie"
        ],
        "tools_url": [
            "https://bio.tools/stringtie"
        ],
        "tools_dico": [
            {
                "name": "StringTie",
                "uri": "https://bio.tools/stringtie",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3680",
                                    "term": "RNA-Seq analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3258",
                                    "term": "Transcriptome assembly"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Fast and highly efficient assembler of RNA-Seq alignments into potential transcripts. It uses a novel network flow algorithm as well as an optional de novo assembly step to assemble and quantitate full-length transcripts representing multiple splice variants for each gene locus.",
                "homepage": "https://ccb.jhu.edu/software/stringtie/"
            }
        ],
        "inputs": [
            "stringtie_gtf",
            "annotation_gtf"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__nanoseq",
        "directive": [
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"bioconda::stringtie=2.1.7\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/stringtie:2.1.7--h978d192_0\" } else { container \"quay.io/biocontainers/stringtie:2.1.7--h978d192_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "MINIMAP2_INDEX": {
        "name_process": "MINIMAP2_INDEX",
        "string_process": "\nprocess MINIMAP2_INDEX {\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'') }\n\n    conda     (params.enable_conda ? \"bioconda::minimap2=2.17\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/minimap2:2.17--hed695b0_3\"\n    } else {\n        container \"quay.io/biocontainers/minimap2:2.17--hed695b0_3\"\n    }\n\n    input:\n    tuple path(fasta), path(sizes), val(gtf), val(bed), val(is_transcripts), val(annotation_str)\n\n    output:\n    tuple path(fasta), path(sizes), val(gtf), val(bed), val(is_transcripts), path(\"*.mmi\"), val(annotation_str), emit: index\n    path \"versions.yml\" , emit: versions\n\n    script:\n    def preset    = (params.protocol == 'DNA' || is_transcripts) ? \"-ax map-ont\" : \"-ax splice\"\n    def kmer      = (params.protocol == 'directRNA') ? \"-k14\" : \"\"\n    def stranded  = (params.stranded || params.protocol == 'directRNA') ? \"-uf\" : \"\"\n    def junctions = (params.protocol != 'DNA' && bed) ? \"--junc-bed ${file(bed)}\" : \"\"\n    \"\"\"\n    minimap2 \\\\\n        $preset \\\\\n        $kmer \\\\\n        $stranded \\\\\n        $junctions \\\\\n        -t $task.cpus \\\\\n        -d ${fasta}.mmi \\\\\n        $fasta\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(minimap2 --version 2>&1)\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 40,
        "string_script": "    def preset    = (params.protocol == 'DNA' || is_transcripts) ? \"-ax map-ont\" : \"-ax splice\"\n    def kmer      = (params.protocol == 'directRNA') ? \"-k14\" : \"\"\n    def stranded  = (params.stranded || params.protocol == 'directRNA') ? \"-uf\" : \"\"\n    def junctions = (params.protocol != 'DNA' && bed) ? \"--junc-bed ${file(bed)}\" : \"\"\n    \"\"\"\n    minimap2 \\\\\n        $preset \\\\\n        $kmer \\\\\n        $stranded \\\\\n        $junctions \\\\\n        -t $task.cpus \\\\\n        -d ${fasta}.mmi \\\\\n        $fasta\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(minimap2 --version 2>&1)\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [
            "Minimap2"
        ],
        "tools_url": [
            "https://bio.tools/minimap2"
        ],
        "tools_dico": [
            {
                "name": "Minimap2",
                "uri": "https://bio.tools/minimap2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise alignment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Pairwise aligner for genomic and spliced nucleotide sequences",
                "homepage": "https://github.com/lh3/minimap2"
            }
        ],
        "inputs": [
            "gtf",
            "bed",
            "is_transcripts",
            "annotation_str",
            "fasta",
            "sizes"
        ],
        "nb_inputs": 6,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__nanoseq",
        "directive": [
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'') }",
            "conda (params.enable_conda ? \"bioconda::minimap2=2.17\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/minimap2:2.17--hed695b0_3\" } else { container \"quay.io/biocontainers/minimap2:2.17--hed695b0_3\" }"
        ],
        "when": "",
        "stub": ""
    },
    "MULTIQC": {
        "name_process": "MULTIQC",
        "string_process": "\nprocess MULTIQC {\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }\n\n    conda (params.enable_conda ? \"bioconda::multiqc=1.10.1\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/multiqc:1.10.1--py_0\"\n    } else {\n        container \"quay.io/biocontainers/multiqc:1.10.1--py_0\"\n    }\n\n    input:\n    path multiqc_files\n\n    output:\n    path \"*multiqc_report.html\", emit: report\n    path \"*_data\"              , emit: data\n    path \"*_plots\"             , optional:true, emit: plots\n    path \"*.version.txt\"       , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    \"\"\"\n    multiqc -f $options.args .\n    multiqc --version | sed -e \"s/multiqc, version //g\" > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "    def software = getSoftwareName(task.process)\n    \"\"\"\n    multiqc -f $options.args .\n    multiqc --version | sed -e \"s/multiqc, version //g\" > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "MultiQC"
        ],
        "tools_url": [
            "https://bio.tools/multiqc"
        ],
        "tools_dico": [
            {
                "name": "MultiQC",
                "uri": "https://bio.tools/multiqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "MultiQC aggregates results from multiple bioinformatics analyses across many samples into a single report. It searches a given directory for analysis logs and compiles a HTML report. It's a general use tool, perfect for summarising the output from numerous bioinformatics tools.",
                "homepage": "http://multiqc.info/"
            }
        ],
        "inputs": [
            "multiqc_files"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__nanoseq",
        "directive": [
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"bioconda::multiqc=1.10.1\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/multiqc:1.10.1--py_0\" } else { container \"quay.io/biocontainers/multiqc:1.10.1--py_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "BAMBU": {
        "name_process": "BAMBU",
        "string_process": "\nprocess BAMBU {\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'') }\n\n    conda     (params.enable_conda ? \"conda-forge::r-base=4.0.3 bioconda::bioconductor-bambu=1.0.2 bioconda::bioconductor-bsgenome=1.58.0\" : null)\n    container \"docker.io/yuukiiwa/nanoseq:bambu_bsgenome\"\n\n    input:\n    tuple path(fasta), path(gtf)\n    path bams\n\n    output:\n    path \"counts_gene.txt\"          , emit: ch_gene_counts\n    path \"counts_transcript.txt\"    , emit: ch_transcript_counts\n    path \"extended_annotations.gtf\" , emit: extended_gtf\n    path \"versions.yml\"             , emit: versions\n\n    script:\n    \"\"\"\n    run_bambu.r \\\\\n        --tag=. \\\\\n        --ncore=$task.cpus \\\\\n        --annotation=$gtf \\\\\n        --fasta=$fasta $bams\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        r-base: \\$(echo \\$(R --version 2>&1) | sed 's/^.*R version //; s/ .*\\$//')\n        bioconductor-deseq2: \\$(Rscript -e \"library(bambu); cat(as.character(packageVersion('bambu')))\")\n        bioconductor-deseq2: \\$(Rscript -e \"library(BSgenome); cat(as.character(packageVersion('BSgenome')))\")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    \"\"\"\n    run_bambu.r \\\\\n        --tag=. \\\\\n        --ncore=$task.cpus \\\\\n        --annotation=$gtf \\\\\n        --fasta=$fasta $bams\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        r-base: \\$(echo \\$(R --version 2>&1) | sed 's/^.*R version //; s/ .*\\$//')\n        bioconductor-deseq2: \\$(Rscript -e \"library(bambu); cat(as.character(packageVersion('bambu')))\")\n        bioconductor-deseq2: \\$(Rscript -e \"library(BSgenome); cat(as.character(packageVersion('BSgenome')))\")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fasta",
            "gtf",
            "bams"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__nanoseq",
        "directive": [
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'') }",
            "conda (params.enable_conda ? \"conda-forge::r-base=4.0.3 bioconda::bioconductor-bambu=1.0.2 bioconda::bioconductor-bsgenome=1.58.0\" : null)",
            "container \"docker.io/yuukiiwa/nanoseq:bambu_bsgenome\""
        ],
        "when": "",
        "stub": ""
    },
    "STRINGTIE2": {
        "name_process": "STRINGTIE2",
        "string_process": "\nprocess STRINGTIE2 {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:meta.id) }\n\n                                                         \n    conda     (params.enable_conda ? \"bioconda::stringtie=2.1.4\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/stringtie:2.1.4--h7e0af3c_0\"\n    } else {\n        container \"quay.io/biocontainers/stringtie:2.1.4--h7e0af3c_0\"\n    }\n\n    input:\n    tuple val(meta), path(fasta), path(gtf), path(bam)\n\n    output:\n    path \"*.stringtie.gtf\"       , emit: stringtie_gtf\n    path  \"versions.yml\"         , emit: versions\n\n    script:\n    \"\"\"\n    stringtie \\\\\n        -L \\\\\n        -G $gtf \\\\\n        -o ${meta.id}.stringtie.gtf $bam\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(stringtie --version 2>&1)\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    \"\"\"\n    stringtie \\\\\n        -L \\\\\n        -G $gtf \\\\\n        -o ${meta.id}.stringtie.gtf $bam\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(stringtie --version 2>&1)\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [
            "StringTie"
        ],
        "tools_url": [
            "https://bio.tools/stringtie"
        ],
        "tools_dico": [
            {
                "name": "StringTie",
                "uri": "https://bio.tools/stringtie",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3680",
                                    "term": "RNA-Seq analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3258",
                                    "term": "Transcriptome assembly"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Fast and highly efficient assembler of RNA-Seq alignments into potential transcripts. It uses a novel network flow algorithm as well as an optional de novo assembly step to assemble and quantitate full-length transcripts representing multiple splice variants for each gene locus.",
                "homepage": "https://ccb.jhu.edu/software/stringtie/"
            }
        ],
        "inputs": [
            "meta",
            "fasta",
            "gtf",
            "bam"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__nanoseq",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:meta.id) }",
            "conda (params.enable_conda ? \"bioconda::stringtie=2.1.4\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/stringtie:2.1.4--h7e0af3c_0\" } else { container \"quay.io/biocontainers/stringtie:2.1.4--h7e0af3c_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "BEDTOOLS_GENOMECOV": {
        "name_process": "BEDTOOLS_GENOMECOV",
        "string_process": "\nprocess BEDTOOLS_GENOMECOV {\n    label 'process_medium'\n\n    conda     (params.enable_conda ? \"bioconda::bedtools=2.29.2\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/bedtools:2.29.2--hc088bd4_0\"\n    } else {\n        container \"quay.io/biocontainers/bedtools:2.29.2--hc088bd4_0\"\n    }\n\n    input:\n    tuple val(meta), path(sizes), val(is_transcripts), path(bam), path(bai)\n\n    output:\n    tuple val(meta), path(sizes), path(\"*.bedGraph\"), emit: bedgraph\n    path \"versions.yml\"                             , emit: versions\n\n    script:\n    split = (params.protocol == 'DNA' || is_transcripts) ? \"\" : \"-split\"\n    \"\"\"\n    bedtools \\\\\n        genomecov \\\\\n        -split \\\\\n        -ibam ${bam[0]} \\\\\n        -bg \\\\\n        | bedtools sort > ${meta.id}.bedGraph\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(bedtools --version | sed -e \"s/bedtools v//g\")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "    split = (params.protocol == 'DNA' || is_transcripts) ? \"\" : \"-split\"\n    \"\"\"\n    bedtools \\\\\n        genomecov \\\\\n        -split \\\\\n        -ibam ${bam[0]} \\\\\n        -bg \\\\\n        | bedtools sort > ${meta.id}.bedGraph\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(bedtools --version | sed -e \"s/bedtools v//g\")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [
            "BEDTools"
        ],
        "tools_url": [
            "https://bio.tools/bedtools"
        ],
        "tools_dico": [
            {
                "name": "BEDTools",
                "uri": "https://bio.tools/bedtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "BEDTools is an extensive suite of utilities for comparing genomic features in BED format.",
                "homepage": "https://github.com/arq5x/bedtools2"
            }
        ],
        "inputs": [
            "meta",
            "is_transcripts",
            "sizes",
            "bam",
            "bai"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__nanoseq",
        "directive": [
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::bedtools=2.29.2\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/bedtools:2.29.2--hc088bd4_0\" } else { container \"quay.io/biocontainers/bedtools:2.29.2--hc088bd4_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "GET_TEST_DATA": {
        "name_process": "GET_TEST_DATA",
        "string_process": "\nprocess GET_TEST_DATA {\n    container \"docker.io/yuukiiwa/git:latest\"\n\n    output:    \n    path \"test-datasets/fast5/$barcoded\"  , emit: ch_input_path\n\n    script:\n    barcoded = workflow.profile.contains('test_bc_nodx') ? \"nonbarcoded\" : \"barcoded\"\n    \"\"\"\n    git clone https://github.com/nf-core/test-datasets.git --branch nanoseq --single-branch\n    \"\"\"\n}",
        "nb_lignes_process": 11,
        "string_script": "    barcoded = workflow.profile.contains('test_bc_nodx') ? \"nonbarcoded\" : \"barcoded\"\n    \"\"\"\n    git clone https://github.com/nf-core/test-datasets.git --branch nanoseq --single-branch\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__nanoseq",
        "directive": [
            "container \"docker.io/yuukiiwa/git:latest\""
        ],
        "when": "",
        "stub": ""
    },
    "BAM_RENAME": {
        "name_process": "BAM_RENAME",
        "string_process": "\nprocess BAM_RENAME {\n    tag \"$meta.id\"\n    conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img\"\n    } else {\n        container \"biocontainers/biocontainers:v1.2.0_cv1\"\n    }\n\n    input:\n    tuple val(meta), path(bam)\n\n    output:\n    tuple val(meta), path(\"*.bam\"), emit: bam\n\n    script:\n    \"\"\"\n    [ ! -f ${meta.id}.bam ] && ln -s $bam ${meta.id}.bam\n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "    \"\"\"\n    [ ! -f ${meta.id}.bam ] && ln -s $bam ${meta.id}.bam\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "bam"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__nanoseq",
        "directive": [
            "tag \"$meta.id\"",
            "conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img\" } else { container \"biocontainers/biocontainers:v1.2.0_cv1\" }"
        ],
        "when": "",
        "stub": ""
    },
    "CUSTOM_DUMPSOFTWAREVERSIONS": {
        "name_process": "CUSTOM_DUMPSOFTWAREVERSIONS",
        "string_process": "\nprocess CUSTOM_DUMPSOFTWAREVERSIONS {\n    label 'process_low'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'pipeline_info', meta:[:], publish_by_meta:[]) }\n\n                                                                                                  \n    conda (params.enable_conda ? \"bioconda::multiqc=1.11\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/multiqc:1.11--pyhdfd78af_0\"\n    } else {\n        container \"quay.io/biocontainers/multiqc:1.11--pyhdfd78af_0\"\n    }\n\n    input:\n    path versions\n\n    output:\n    path \"software_versions.yml\"    , emit: yml\n    path \"software_versions_mqc.yml\", emit: mqc_yml\n    path \"versions.yml\"             , emit: versions\n\n    script:\n    \"\"\"\n    #!/usr/bin/env python\n\n    import yaml\n    import platform\n    from textwrap import dedent\n\n    def _make_versions_html(versions):\n        html = [\n            dedent(\n                '''\\\\\n                <style>\n                #nf-core-versions tbody:nth-child(even) {\n                    background-color: #f2f2f2;\n                }\n                </style>\n                <table class=\"table\" style=\"width:100%\" id=\"nf-core-versions\">\n                    <thead>\n                        <tr>\n                            <th> Process Name </th>\n                            <th> Software </th>\n                            <th> Version  </th>\n                        </tr>\n                    </thead>\n                '''\n            )\n        ]\n        for process, tmp_versions in sorted(versions.items()):\n            html.append(\"<tbody>\")\n            for i, (tool, version) in enumerate(sorted(tmp_versions.items())):\n                html.append(\n                    dedent(\n                        f'''\\\\\n                        <tr>\n                            <td><samp>{process if (i == 0) else ''}</samp></td>\n                            <td><samp>{tool}</samp></td>\n                            <td><samp>{version}</samp></td>\n                        </tr>\n                        '''\n                    )\n                )\n            html.append(\"</tbody>\")\n        html.append(\"</table>\")\n        return \"\\\\n\".join(html)\n\n    module_versions = {}\n    module_versions[\"${getProcessName(task.process)}\"] = {\n        'python': platform.python_version(),\n        'yaml': yaml.__version__\n    }\n\n    with open(\"$versions\") as f:\n        workflow_versions = yaml.load(f, Loader=yaml.BaseLoader) | module_versions\n\n    workflow_versions[\"Workflow\"] = {\n        \"Nextflow\": \"$workflow.nextflow.version\",\n        \"$workflow.manifest.name\": \"$workflow.manifest.version\"\n    }\n\n    versions_mqc = {\n        'id': 'software_versions',\n        'section_name': '${workflow.manifest.name} Software Versions',\n        'section_href': 'https://github.com/${workflow.manifest.name}',\n        'plot_type': 'html',\n        'description': 'are collected at run time from the software output.',\n        'data': _make_versions_html(workflow_versions)\n    }\n\n    with open(\"software_versions.yml\", 'w') as f:\n        yaml.dump(workflow_versions, f, default_flow_style=False)\n    with open(\"software_versions_mqc.yml\", 'w') as f:\n        yaml.dump(versions_mqc, f, default_flow_style=False)\n\n    with open('versions.yml', 'w') as f:\n        yaml.dump(module_versions, f, default_flow_style=False)\n    \"\"\"\n}",
        "nb_lignes_process": 99,
        "string_script": "    \"\"\"\n    #!/usr/bin/env python\n\n    import yaml\n    import platform\n    from textwrap import dedent\n\n    def _make_versions_html(versions):\n        html = [\n            dedent(\n                '''\\\\\n                <style>\n                #nf-core-versions tbody:nth-child(even) {\n                    background-color: #f2f2f2;\n                }\n                </style>\n                <table class=\"table\" style=\"width:100%\" id=\"nf-core-versions\">\n                    <thead>\n                        <tr>\n                            <th> Process Name </th>\n                            <th> Software </th>\n                            <th> Version  </th>\n                        </tr>\n                    </thead>\n                '''\n            )\n        ]\n        for process, tmp_versions in sorted(versions.items()):\n            html.append(\"<tbody>\")\n            for i, (tool, version) in enumerate(sorted(tmp_versions.items())):\n                html.append(\n                    dedent(\n                        f'''\\\\\n                        <tr>\n                            <td><samp>{process if (i == 0) else ''}</samp></td>\n                            <td><samp>{tool}</samp></td>\n                            <td><samp>{version}</samp></td>\n                        </tr>\n                        '''\n                    )\n                )\n            html.append(\"</tbody>\")\n        html.append(\"</table>\")\n        return \"\\\\n\".join(html)\n\n    module_versions = {}\n    module_versions[\"${getProcessName(task.process)}\"] = {\n        'python': platform.python_version(),\n        'yaml': yaml.__version__\n    }\n\n    with open(\"$versions\") as f:\n        workflow_versions = yaml.load(f, Loader=yaml.BaseLoader) | module_versions\n\n    workflow_versions[\"Workflow\"] = {\n        \"Nextflow\": \"$workflow.nextflow.version\",\n        \"$workflow.manifest.name\": \"$workflow.manifest.version\"\n    }\n\n    versions_mqc = {\n        'id': 'software_versions',\n        'section_name': '${workflow.manifest.name} Software Versions',\n        'section_href': 'https://github.com/${workflow.manifest.name}',\n        'plot_type': 'html',\n        'description': 'are collected at run time from the software output.',\n        'data': _make_versions_html(workflow_versions)\n    }\n\n    with open(\"software_versions.yml\", 'w') as f:\n        yaml.dump(workflow_versions, f, default_flow_style=False)\n    with open(\"software_versions_mqc.yml\", 'w') as f:\n        yaml.dump(versions_mqc, f, default_flow_style=False)\n\n    with open('versions.yml', 'w') as f:\n        yaml.dump(module_versions, f, default_flow_style=False)\n    \"\"\"",
        "nb_lignes_script": 75,
        "language_script": "python",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "versions"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__nanoseq",
        "directive": [
            "label 'process_low'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'pipeline_info', meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"bioconda::multiqc=1.11\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/multiqc:1.11--pyhdfd78af_0\" } else { container \"quay.io/biocontainers/multiqc:1.11--pyhdfd78af_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "DESEQ2": {
        "name_process": "DESEQ2",
        "string_process": "\nprocess DESEQ2 {\n    label \"process_medium\"\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'') }\n\n    conda     (params.enable_conda ? \"conda-forge::r-base=4.0.3 bioconda::bioconductor-deseq2=1.28.0\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/mulled-v2-8849acf39a43cdd6c839a369a74c0adc823e2f91:ab110436faf952a33575c64dd74615a84011450b-0\"\n    } else {\n        container \"quay.io/biocontainers/mulled-v2-8849acf39a43cdd6c839a369a74c0adc823e2f91:ab110436faf952a33575c64dd74615a84011450b-0\"\n    }\n\n    input:\n    path counts\n\n    output:\n    path \"*.txt\"                , emit: deseq2_txt\n    path \"versions.yml\"         , emit: versions\n\n    script:\n    \"\"\"\n    run_deseq2.r $params.quantification_method $counts\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        r-base: \\$(echo \\$(R --version 2>&1) | sed 's/^.*R version //; s/ .*\\$//')\n        bioconductor-deseq2: \\$(Rscript -e \"library(DESeq2); cat(as.character(packageVersion('DESeq2')))\")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "    \"\"\"\n    run_deseq2.r $params.quantification_method $counts\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        r-base: \\$(echo \\$(R --version 2>&1) | sed 's/^.*R version //; s/ .*\\$//')\n        bioconductor-deseq2: \\$(Rscript -e \"library(DESeq2); cat(as.character(packageVersion('DESeq2')))\")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "counts"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__nanoseq",
        "directive": [
            "label \"process_medium\"",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'') }",
            "conda (params.enable_conda ? \"conda-forge::r-base=4.0.3 bioconda::bioconductor-deseq2=1.28.0\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/mulled-v2-8849acf39a43cdd6c839a369a74c0adc823e2f91:ab110436faf952a33575c64dd74615a84011450b-0\" } else { container \"quay.io/biocontainers/mulled-v2-8849acf39a43cdd6c839a369a74c0adc823e2f91:ab110436faf952a33575c64dd74615a84011450b-0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "GRAPHMAP2_ALIGN": {
        "name_process": "GRAPHMAP2_ALIGN",
        "string_process": "\nprocess GRAPHMAP2_ALIGN {\n    tag \"$meta.id\"\n    label 'process_high'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:meta.id) }\n\n    conda     (params.enable_conda ? \"bioconda::graphmap=0.6.3\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/graphmap:0.6.3--he513fc3_0\"\n    } else {\n        container \"quay.io/biocontainers/graphmap:0.6.3--he513fc3_0\"\n    }\n\n    input:\n    tuple val(meta), path(fastq), path(fasta), path(sizes), val(gtf), val(bed), val(is_transcripts), path(index)\n\n    output:\n    tuple val(meta), path(sizes), val(is_transcripts), path(\"*.sam\"), emit: align_sam\n    path \"versions.yml\"           , emit: versions\n\n    script:\n    def preset    = (params.protocol == 'DNA' || is_transcripts) ? \"\" : \"-x rnaseq\"\n    def junctions = (params.protocol != 'DNA' && !is_transcripts && gtf) ? \"--gtf $gtf\" : \"\"\n    \"\"\"\n    graphmap2 \\\\\n        align \\\\\n        $preset \\\\\n        $junctions \\\\\n        -t $task.cpus \\\\\n        -r $fasta \\\\\n        -i $index \\\\\n        -d $fastq \\\\\n        -o ${meta.id}.sam \\\\\n        --extcigar\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(echo \\$(graphmap2 align 2>&1) | sed 's/^.*Version: v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 41,
        "string_script": "    def preset    = (params.protocol == 'DNA' || is_transcripts) ? \"\" : \"-x rnaseq\"\n    def junctions = (params.protocol != 'DNA' && !is_transcripts && gtf) ? \"--gtf $gtf\" : \"\"\n    \"\"\"\n    graphmap2 \\\\\n        align \\\\\n        $preset \\\\\n        $junctions \\\\\n        -t $task.cpus \\\\\n        -r $fasta \\\\\n        -i $index \\\\\n        -d $fastq \\\\\n        -o ${meta.id}.sam \\\\\n        --extcigar\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(echo \\$(graphmap2 align 2>&1) | sed 's/^.*Version: v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [
            "Graphmap2",
            "ALIGN"
        ],
        "tools_url": [
            "https://bio.tools/Graphmap2",
            "https://bio.tools/align"
        ],
        "tools_dico": [
            {
                "name": "Graphmap2",
                "uri": "https://bio.tools/Graphmap2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3320",
                            "term": "RNA splicing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "Gene transcripts"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3320",
                            "term": "Alternative splicing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "mRNA features"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Sequence trimming"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0526",
                                    "term": "EST assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Trimming"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0526",
                                    "term": "Sequence assembly (EST assembly)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Splice-aware RNA-seq mapper for long reads | GraphMap - A highly sensitive and accurate mapper for long, error-prone reads http://www.nature.com/ncomms/2016/160415/ncomms11307/full/ncomms11307.html https://www.biorxiv.org/content/10.1101/720458v1 | GraphMap2 - A highly sensitive and accurate mapper for long, error-prone reads | GMAP: A Genomic Mapping and Alignment Program for mRNA and EST Sequences, and | GSNAP: Genomic Short-read Nucleotide Alignment Program | Links are provided below in parentheses for users who wish to download the files with a command-line tool, like wget",
                "homepage": "https://github.com/lbcb-sci/graphmap2"
            },
            {
                "name": "ALIGN",
                "uri": "https://bio.tools/align",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0300",
                                    "term": "Sequence profile alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0495",
                                    "term": "Local alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0496",
                                    "term": "Global alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0495",
                                    "term": "Local sequence alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0495",
                                    "term": "Sequence alignment (local)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0496",
                                    "term": "Global sequence alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0496",
                                    "term": "Sequence alignment (global)"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_1460",
                                "term": "Protein structure"
                            },
                            {
                                "uri": "http://edamontology.org/data_2976",
                                "term": "Protein sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_1384",
                                "term": "Protein sequence alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_0869",
                                "term": "Sequence-profile alignment"
                            }
                        ]
                    }
                ],
                "description": "Pairwise alignment tool.",
                "homepage": "http://protein.bio.unipd.it/align2"
            }
        ],
        "inputs": [
            "meta",
            "gtf",
            "bed",
            "is_transcripts",
            "fastq",
            "fasta",
            "sizes",
            "index"
        ],
        "nb_inputs": 8,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__nanoseq",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:meta.id) }",
            "conda (params.enable_conda ? \"bioconda::graphmap=0.6.3\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/graphmap:0.6.3--he513fc3_0\" } else { container \"quay.io/biocontainers/graphmap:0.6.3--he513fc3_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "SAMTOOLS_VIEW_BAM": {
        "name_process": "SAMTOOLS_VIEW_BAM",
        "string_process": "\nprocess SAMTOOLS_VIEW_BAM {\n    tag \"$meta.id\"\n    label 'process_medium'\n                                    \n                                        \n                                                                                                                                                       \n\n    conda     (params.enable_conda ? \"bioconda::samtools=1.10\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/samtools:1.11--h6270b1f_0\"\n    } else {\n        container \"quay.io/biocontainers/samtools:1.11--h6270b1f_0\"\n    }\n\n    input:\n    tuple val(meta), path(sizes), val(is_transcripts), path(sam)\n\n    output:\n    tuple val(meta), path(\"*.bam\") ,emit: bam\n    path \"versions.yml\"        , emit: versions\n\n    script:\n    \"\"\"\n    samtools view -b -h -O BAM -@ $task.cpus -o ${meta.id}.bam $sam\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "    \"\"\"\n    samtools view -b -h -O BAM -@ $task.cpus -o ${meta.id}.bam $sam\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "is_transcripts",
            "sizes",
            "sam"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__nanoseq",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::samtools=1.10\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/samtools:1.11--h6270b1f_0\" } else { container \"quay.io/biocontainers/samtools:1.11--h6270b1f_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "SAMTOOLS_IDXSTATS": {
        "name_process": "SAMTOOLS_IDXSTATS",
        "string_process": "\nprocess SAMTOOLS_IDXSTATS {\n    tag \"$meta.id\"\n    label 'process_low'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? 'bioconda::samtools=1.13' : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/samtools:1.13--h8c37831_0\"\n    } else {\n        container \"quay.io/biocontainers/samtools:1.13--h8c37831_0\"\n    }\n\n    input:\n    tuple val(meta), path(bam), path(bai)\n\n    output:\n    tuple val(meta), path(\"*.idxstats\"), emit: idxstats\n    path  \"versions.yml\"               , emit: versions\n\n    script:\n    \"\"\"\n    samtools idxstats $bam > ${bam}.idxstats\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "    \"\"\"\n    samtools idxstats $bam > ${bam}.idxstats\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "bam",
            "bai"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__nanoseq",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? 'bioconda::samtools=1.13' : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/samtools:1.13--h8c37831_0\" } else { container \"quay.io/biocontainers/samtools:1.13--h8c37831_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "SAMTOOLS_SORT": {
        "name_process": "SAMTOOLS_SORT",
        "string_process": "\nprocess SAMTOOLS_SORT {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? 'bioconda::samtools=1.13' : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/samtools:1.13--h8c37831_0\"\n    } else {\n        container \"quay.io/biocontainers/samtools:1.13--h8c37831_0\"\n    }\n\n    input:\n    tuple val(meta), path(bam)\n\n    output:\n    tuple val(meta), path(\"*.bam\"), emit: bam\n    path  \"versions.yml\"          , emit: versions\n\n    script:\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    samtools sort $options.args -@ $task.cpus -o ${prefix}.bam -T $prefix $bam\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    samtools sort $options.args -@ $task.cpus -o ${prefix}.bam -T $prefix $bam\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "bam"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__nanoseq",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? 'bioconda::samtools=1.13' : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/samtools:1.13--h8c37831_0\" } else { container \"quay.io/biocontainers/samtools:1.13--h8c37831_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "SUBREAD_FEATURECOUNTS": {
        "name_process": "SUBREAD_FEATURECOUNTS",
        "string_process": "\nprocess SUBREAD_FEATURECOUNTS {\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'') }\n\n                                                         \n    conda     (params.enable_conda ? \"bioconda::subread=2.0.1\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/subread:2.0.1--hed695b0_0\"\n    } else {\n        container \"quay.io/biocontainers/subread:2.0.1--hed695b0_0\"\n    }\n\n    input:\n    path gtf\n    path bams\n\n    output:\n    path \"counts_gene.txt\"               , emit: gene_counts\n    path \"counts_transcript.txt\"         , emit: transcript_counts\n    path \"counts_gene.txt.summary\"       , emit: featurecounts_gene_multiqc\n    path \"counts_transcript.txt.summary\" , emit: featurecounts_transcript_multiqc\n    path \"versions.yml\"                  , emit: versions\n\n    script:\n    \"\"\"\n    featureCounts \\\\\n        -L \\\\\n        -O \\\\\n        -f \\\\\n        -g gene_id \\\\\n        -t exon \\\\\n        -T $task.cpus \\\\\n        -a $gtf \\\\\n        -o counts_gene.txt \\\\\n        $bams\n\n    featureCounts \\\\\n        -L \\\\\n        -O \\\\\n        -f \\\\\n        --primary \\\\\n        --fraction \\\\\n        -F GTF \\\\\n        -g transcript_id \\\\\n        -t transcript \\\\\n        --extraAttributes gene_id \\\\\n        -T $task.cpus \\\\\n        -a $gtf \\\\\n        -o counts_transcript.txt \\\\\n        $bams\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$( echo \\$(featureCounts -v 2>&1) | sed -e \"s/featureCounts v//g\")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 58,
        "string_script": "    \"\"\"\n    featureCounts \\\\\n        -L \\\\\n        -O \\\\\n        -f \\\\\n        -g gene_id \\\\\n        -t exon \\\\\n        -T $task.cpus \\\\\n        -a $gtf \\\\\n        -o counts_gene.txt \\\\\n        $bams\n\n    featureCounts \\\\\n        -L \\\\\n        -O \\\\\n        -f \\\\\n        --primary \\\\\n        --fraction \\\\\n        -F GTF \\\\\n        -g transcript_id \\\\\n        -t transcript \\\\\n        --extraAttributes gene_id \\\\\n        -T $task.cpus \\\\\n        -a $gtf \\\\\n        -o counts_transcript.txt \\\\\n        $bams\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$( echo \\$(featureCounts -v 2>&1) | sed -e \"s/featureCounts v//g\")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 31,
        "language_script": "bash",
        "tools": [
            "FeatureCounts"
        ],
        "tools_url": [
            "https://bio.tools/featurecounts"
        ],
        "tools_dico": [
            {
                "name": "FeatureCounts",
                "uri": "https://bio.tools/featurecounts",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3793",
                                    "term": "Read summarisation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "featureCounts is a very efficient read quantifier. It can be used to summarize RNA-seq reads and gDNA-seq reads to a variety of genomic features such as genes, exons, promoters, gene bodies and genomic bins. It is included in the Bioconductor Rsubread package and also in the SourceForge Subread package.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/Rsubread.html"
            }
        ],
        "inputs": [
            "gtf",
            "bams"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__nanoseq",
        "directive": [
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'') }",
            "conda (params.enable_conda ? \"bioconda::subread=2.0.1\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/subread:2.0.1--hed695b0_0\" } else { container \"quay.io/biocontainers/subread:2.0.1--hed695b0_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "NANOPLOT": {
        "name_process": "NANOPLOT",
        "string_process": "\nprocess NANOPLOT {\n    tag \"$meta.id\"\n    label 'process_low'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? 'bioconda::nanoplot=1.38.0' : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/nanoplot:1.38.0--pyhdfd78af_0\"\n    } else {\n        container \"quay.io/biocontainers/nanoplot:1.38.0--pyhdfd78af_0\"\n    }\n\n    input:\n    tuple val(meta), path(ontfile)\n\n    output:\n    tuple val(meta), path(\"$output_html\"), emit: html\n    tuple val(meta), path(\"$output_png\") , emit: png\n    tuple val(meta), path(\"$output_txt\") , emit: txt\n    tuple val(meta), path(\"$output_log\") , emit: log\n    path  \"versions.yml\"           , emit: versions\n\n    script:\n    def input_file = (\"$ontfile\".endsWith(\".fastq.gz\")) ? \"--fastq ${ontfile}\" :\n                     (\"$ontfile\".endsWith(\".txt\")) ? \"--summary ${ontfile}\" : ''\n    def output_dir = (\"$ontfile\".endsWith(\".fastq.gz\")) ? \"fastq/${meta.id}\" :\n                     (\"$ontfile\".endsWith(\".txt\")) ? \"summary\" : ''\n    output_html = output_dir+\"/*.html\"\n    output_png  = output_dir+\"/*.png\"\n    output_txt  = output_dir+\"/*.txt\"\n    output_log  = output_dir+\"/*.log\"\n    \"\"\"\n    NanoPlot \\\\\n        $options.args \\\\\n        -t $task.cpus \\\\\n        $input_file \\\\\n        -o $output_dir\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(echo \\$(NanoPlot --version 2>&1) | sed 's/^.*NanoPlot //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 44,
        "string_script": "    def input_file = (\"$ontfile\".endsWith(\".fastq.gz\")) ? \"--fastq ${ontfile}\" :\n                     (\"$ontfile\".endsWith(\".txt\")) ? \"--summary ${ontfile}\" : ''\n    def output_dir = (\"$ontfile\".endsWith(\".fastq.gz\")) ? \"fastq/${meta.id}\" :\n                     (\"$ontfile\".endsWith(\".txt\")) ? \"summary\" : ''\n    output_html = output_dir+\"/*.html\"\n    output_png  = output_dir+\"/*.png\"\n    output_txt  = output_dir+\"/*.txt\"\n    output_log  = output_dir+\"/*.log\"\n    \"\"\"\n    NanoPlot \\\\\n        $options.args \\\\\n        -t $task.cpus \\\\\n        $input_file \\\\\n        -o $output_dir\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(echo \\$(NanoPlot --version 2>&1) | sed 's/^.*NanoPlot //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "ontfile"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__nanoseq",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? 'bioconda::nanoplot=1.38.0' : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/nanoplot:1.38.0--pyhdfd78af_0\" } else { container \"quay.io/biocontainers/nanoplot:1.38.0--pyhdfd78af_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "PYCOQC": {
        "name_process": "PYCOQC",
        "string_process": "\nprocess PYCOQC {\n    tag \"$summary\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }\n\n    conda (params.enable_conda ? \"bioconda::pycoqc=2.5.2\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/pycoqc:2.5.2--py_0\"\n    } else {\n        container \"quay.io/biocontainers/pycoqc:2.5.2--py_0\"\n    }\n\n    input:\n    path summary\n\n    output:\n    path \"*.html\"        , emit: html\n    path \"*.json\"        , emit: json\n    path  \"versions.yml\" , emit: versions\n\n    script:\n    \"\"\"\n    pycoQC \\\\\n        $options.args \\\\\n        -f $summary \\\\\n        -o pycoqc.html \\\\\n        -j pycoqc.json\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(pycoQC --version 2>&1 | sed 's/^.*pycoQC v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "    \"\"\"\n    pycoQC \\\\\n        $options.args \\\\\n        -f $summary \\\\\n        -o pycoqc.html \\\\\n        -j pycoqc.json\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(pycoQC --version 2>&1 | sed 's/^.*pycoQC v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "summary"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__nanoseq",
        "directive": [
            "tag \"$summary\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"bioconda::pycoqc=2.5.2\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/pycoqc:2.5.2--py_0\" } else { container \"quay.io/biocontainers/pycoqc:2.5.2--py_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "GET_SOFTWARE_VERSIONS": {
        "name_process": "GET_SOFTWARE_VERSIONS",
        "string_process": "\nprocess GET_SOFTWARE_VERSIONS {\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'pipeline_info', meta:[:], publish_by_meta:[]) }\n\n    conda (params.enable_conda ? \"conda-forge::python=3.8.3\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/python:3.8.3\"\n    } else {\n        container \"quay.io/biocontainers/python:3.8.3\"\n    }\n\n    cache false\n\n    input:\n    path versions\n\n    output:\n    path \"software_versions.tsv\"     , emit: tsv\n    path 'software_versions_mqc.yaml', emit: yaml\n\n    script:                                                                     \n    \"\"\"\n    echo $workflow.manifest.version > pipeline.version.txt\n    echo $workflow.nextflow.version > nextflow.version.txt\n    scrape_software_versions.py &> software_versions_mqc.yaml\n    \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "    \"\"\"\n    echo $workflow.manifest.version > pipeline.version.txt\n    echo $workflow.nextflow.version > nextflow.version.txt\n    scrape_software_versions.py &> software_versions_mqc.yaml\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "versions"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__nanoseq",
        "directive": [
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'pipeline_info', meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"conda-forge::python=3.8.3\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/python:3.8.3\" } else { container \"quay.io/biocontainers/python:3.8.3\" }",
            "cache false"
        ],
        "when": "",
        "stub": ""
    },
    "GUPPY": {
        "name_process": "GUPPY",
        "string_process": "\nprocess GUPPY {\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process)) }\n\n    if (params.guppy_gpu) {\n        container = 'genomicpariscentre/guppy-gpu:4.0.14'\n        clusterOptions = params.gpu_cluster_options\n    } else {\n        container = 'genomicpariscentre/guppy:4.0.14'\n    }\n\n    input:\n    path(input_path)\n    val meta\n    path guppy_config\n    path guppy_model\n\n    output:\n    path \"fastq/*.fastq.gz\"                    , emit: fastq\n    tuple val(meta), path(\"basecalling/*.txt\") , emit: summary\n    path \"basecalling/*\"                       , emit: called\n    path \"versions.yml\"                        , emit: versions\n\n    script:\n    def barcode_kit  = params.barcode_kit ? \"--barcode_kits $params.barcode_kit\" : \"\"\n    def barcode_ends = params.barcode_both_ends ? \"--require_barcodes_both_ends\" : \"\"\n    def proc_options = params.guppy_gpu ? \"--device $params.gpu_device --num_callers $task.cpus --cpu_threads_per_caller $params.guppy_cpu_threads --gpu_runners_per_device $params.guppy_gpu_runners\" : \"--num_callers 2 --cpu_threads_per_caller ${task.cpus/2}\"\n    def config   = \"--flowcell $params.flowcell --kit $params.kit\"\n    if (params.guppy_config) config = file(params.guppy_config).exists() ? \"--config ./$guppy_config\" : \"--config $params.guppy_config\"\n    def model    = \"\"\n    if (params.guppy_model)  model  = file(params.guppy_model).exists() ? \"--model ./$guppy_model\" : \"--model $params.guppy_model\"\n    \"\"\"\n    guppy_basecaller \\\\\n        --input_path $input_path \\\\\n        --save_path ./basecalling \\\\\n        --records_per_fastq 0 \\\\\n        --compress_fastq \\\\\n        $barcode_kit \\\\\n        $proc_options \\\\\n        $barcode_ends \\\\\n        $config \\\\\n        $model\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(echo \\$(guppy_basecaller --version 2>&1) | sed -r 's/.{81}//')\n    END_VERSIONS\n\n    ## Concatenate fastq files\n    mkdir fastq\n    cd basecalling\n    if [ \"\\$(find . -type d -name \"barcode*\" )\" != \"\" ]\n    then\n        for dir in barcode*/\n        do\n            dir=\\${dir%*/}\n            cat \\$dir/*.fastq.gz > ../fastq/\\$dir.fastq.gz\n        done\n    else\n        cat *.fastq.gz > ../fastq/${meta.id}.fastq.gz\n    fi\n    \"\"\"\n}",
        "nb_lignes_process": 64,
        "string_script": "    def barcode_kit  = params.barcode_kit ? \"--barcode_kits $params.barcode_kit\" : \"\"\n    def barcode_ends = params.barcode_both_ends ? \"--require_barcodes_both_ends\" : \"\"\n    def proc_options = params.guppy_gpu ? \"--device $params.gpu_device --num_callers $task.cpus --cpu_threads_per_caller $params.guppy_cpu_threads --gpu_runners_per_device $params.guppy_gpu_runners\" : \"--num_callers 2 --cpu_threads_per_caller ${task.cpus/2}\"\n    def config   = \"--flowcell $params.flowcell --kit $params.kit\"\n    if (params.guppy_config) config = file(params.guppy_config).exists() ? \"--config ./$guppy_config\" : \"--config $params.guppy_config\"\n    def model    = \"\"\n    if (params.guppy_model)  model  = file(params.guppy_model).exists() ? \"--model ./$guppy_model\" : \"--model $params.guppy_model\"\n    \"\"\"\n    guppy_basecaller \\\\\n        --input_path $input_path \\\\\n        --save_path ./basecalling \\\\\n        --records_per_fastq 0 \\\\\n        --compress_fastq \\\\\n        $barcode_kit \\\\\n        $proc_options \\\\\n        $barcode_ends \\\\\n        $config \\\\\n        $model\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(echo \\$(guppy_basecaller --version 2>&1) | sed -r 's/.{81}//')\n    END_VERSIONS\n\n    ## Concatenate fastq files\n    mkdir fastq\n    cd basecalling\n    if [ \"\\$(find . -type d -name \"barcode*\" )\" != \"\" ]\n    then\n        for dir in barcode*/\n        do\n            dir=\\${dir%*/}\n            cat \\$dir/*.fastq.gz > ../fastq/\\$dir.fastq.gz\n        done\n    else\n        cat *.fastq.gz > ../fastq/${meta.id}.fastq.gz\n    fi\n    \"\"\"",
        "nb_lignes_script": 37,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "input_path",
            "meta",
            "guppy_config",
            "guppy_model"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__nanoseq",
        "directive": [
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process)) } if (params.guppy_gpu) { container = 'genomicpariscentre/guppy-gpu:4.0.14' clusterOptions = params.gpu_cluster_options } else { container = 'genomicpariscentre/guppy:4.0.14' }"
        ],
        "when": "",
        "stub": ""
    },
    "SAMTOOLS_FLAGSTAT": {
        "name_process": "SAMTOOLS_FLAGSTAT",
        "string_process": "\nprocess SAMTOOLS_FLAGSTAT {\n    tag \"$meta.id\"\n    label 'process_low'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? 'bioconda::samtools=1.13' : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/samtools:1.13--h8c37831_0\"\n    } else {\n        container \"quay.io/biocontainers/samtools:1.13--h8c37831_0\"\n    }\n\n    input:\n    tuple val(meta), path(bam), path(bai)\n\n    output:\n    tuple val(meta), path(\"*.flagstat\"), emit: flagstat\n    path  \"versions.yml\"               , emit: versions\n\n    script:\n    \"\"\"\n    samtools flagstat $bam > ${bam}.flagstat\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "    \"\"\"\n    samtools flagstat $bam > ${bam}.flagstat\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "bam",
            "bai"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__nanoseq",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? 'bioconda::samtools=1.13' : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/samtools:1.13--h8c37831_0\" } else { container \"quay.io/biocontainers/samtools:1.13--h8c37831_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "GET_CHROM_SIZES": {
        "name_process": "GET_CHROM_SIZES",
        "string_process": "\nprocess GET_CHROM_SIZES {\n                                    \n                                        \n                                                                                    \n\n    conda     (params.enable_conda ? \"bioconda::samtools=1.10\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/samtools:1.13--h8c37831_0\"\n    } else {\n        container \"quay.io/biocontainers/samtools:1.13--h8c37831_0\"\n    }\n\n    input:\n    tuple path(fasta), val(name)\n\n    output:\n    tuple path('*.sizes'), val(name) , emit: sizes\n                                                    \n    path  \"versions.yml\"            , emit: versions\n\n    script:\n    \"\"\"\n    samtools faidx $fasta\n    cut -f 1,2 ${fasta}.fai > ${fasta}.sizes\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "    \"\"\"\n    samtools faidx $fasta\n    cut -f 1,2 ${fasta}.fai > ${fasta}.sizes\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "name",
            "fasta"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__nanoseq",
        "directive": [
            "conda (params.enable_conda ? \"bioconda::samtools=1.10\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/samtools:1.13--h8c37831_0\" } else { container \"quay.io/biocontainers/samtools:1.13--h8c37831_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "FASTQC": {
        "name_process": "FASTQC",
        "string_process": "\nprocess FASTQC {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"bioconda::fastqc=0.11.9\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/fastqc:0.11.9--0\"\n    } else {\n        container \"quay.io/biocontainers/fastqc:0.11.9--0\"\n    }\n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path(\"*.html\"), emit: html\n    tuple val(meta), path(\"*.zip\") , emit: zip\n    path  \"*.version.txt\"          , emit: version\n\n    script:\n                                                                          \n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    if (meta.single_end) {\n        \"\"\"\n        [ ! -f  ${prefix}.fastq.gz ] && ln -s $reads ${prefix}.fastq.gz\n        fastqc $options.args --threads $task.cpus ${prefix}.fastq.gz\n        fastqc --version | sed -e \"s/FastQC v//g\" > ${software}.version.txt\n        \"\"\"\n    } else {\n        \"\"\"\n        [ ! -f  ${prefix}_1.fastq.gz ] && ln -s ${reads[0]} ${prefix}_1.fastq.gz\n        [ ! -f  ${prefix}_2.fastq.gz ] && ln -s ${reads[1]} ${prefix}_2.fastq.gz\n        fastqc $options.args --threads $task.cpus ${prefix}_1.fastq.gz ${prefix}_2.fastq.gz\n        fastqc --version | sed -e \"s/FastQC v//g\" > ${software}.version.txt\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 40,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    if (meta.single_end) {\n        \"\"\"\n        [ ! -f  ${prefix}.fastq.gz ] && ln -s $reads ${prefix}.fastq.gz\n        fastqc $options.args --threads $task.cpus ${prefix}.fastq.gz\n        fastqc --version | sed -e \"s/FastQC v//g\" > ${software}.version.txt\n        \"\"\"\n    } else {\n        \"\"\"\n        [ ! -f  ${prefix}_1.fastq.gz ] && ln -s ${reads[0]} ${prefix}_1.fastq.gz\n        [ ! -f  ${prefix}_2.fastq.gz ] && ln -s ${reads[1]} ${prefix}_2.fastq.gz\n        fastqc $options.args --threads $task.cpus ${prefix}_1.fastq.gz ${prefix}_2.fastq.gz\n        fastqc --version | sed -e \"s/FastQC v//g\" > ${software}.version.txt\n        \"\"\"\n    }",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [
            "FastQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            }
        ],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__nanoseq",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"bioconda::fastqc=0.11.9\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/fastqc:0.11.9--0\" } else { container \"quay.io/biocontainers/fastqc:0.11.9--0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "QCAT": {
        "name_process": "QCAT",
        "string_process": "\nprocess QCAT {\n    tag \"$input_path\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:input_path) }\n\n    conda     (params.enable_conda ? \"bioconda::qcat=1.1.0\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/qcat:1.1.0--py_0\"\n    } else {\n        container \"quay.io/biocontainers/qcat:1.1.0--py_0\"\n    }\n\n    input:\n    path input_path\n\n    output:\n    path \"fastq/*.fastq.gz\"               , emit: fastq\n    path \"versions.yml\"                   , emit: versions\n\n    script:\n    def detect_middle = params.qcat_detect_middle ? \"--detect-middle $params.qcat_detect_middle\" : \"\"\n    \"\"\"\n    ## Unzip fastq file\n    ## qcat doesnt support zipped files yet\n    FILE=$input_path\n    if [[ \\$FILE == *.gz ]]\n    then\n    zcat $input_path > unzipped.fastq\n    FILE=unzipped.fastq\n    fi\n    qcat  \\\\\n    -f \\$FILE \\\\\n    -b ./fastq \\\\\n    --kit $params.barcode_kit \\\\\n    --min-score $params.qcat_min_score \\\\\n    $detect_middle\n\n    ## Zip fastq files (cannot find pigz command)\n    gzip fastq/*\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(qcat --version 2>&1 | sed 's/^.*qcat //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 47,
        "string_script": "    def detect_middle = params.qcat_detect_middle ? \"--detect-middle $params.qcat_detect_middle\" : \"\"\n    \"\"\"\n    ## Unzip fastq file\n    ## qcat doesnt support zipped files yet\n    FILE=$input_path\n    if [[ \\$FILE == *.gz ]]\n    then\n    zcat $input_path > unzipped.fastq\n    FILE=unzipped.fastq\n    fi\n    qcat  \\\\\n    -f \\$FILE \\\\\n    -b ./fastq \\\\\n    --kit $params.barcode_kit \\\\\n    --min-score $params.qcat_min_score \\\\\n    $detect_middle\n\n    ## Zip fastq files (cannot find pigz command)\n    gzip fastq/*\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(qcat --version 2>&1 | sed 's/^.*qcat //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 24,
        "language_script": "bash",
        "tools": [
            "seqCAT"
        ],
        "tools_url": [
            "https://bio.tools/seqcat"
        ],
        "tools_dico": [
            {
                "name": "seqCAT",
                "uri": "https://bio.tools/seqcat",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Sequence variation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Variant analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation annotation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "This package uses variant calling data (in the form of VCF files) from high throughput sequencing technologies to authenticate and validate the source, function and characteristics of biological samples used in scientific endeavours.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/seqCAT.html"
            }
        ],
        "inputs": [
            "input_path"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__nanoseq",
        "directive": [
            "tag \"$input_path\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:input_path) }",
            "conda (params.enable_conda ? \"bioconda::qcat=1.1.0\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/qcat:1.1.0--py_0\" } else { container \"quay.io/biocontainers/qcat:1.1.0--py_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "SAMTOOLS_STATS": {
        "name_process": "SAMTOOLS_STATS",
        "string_process": "\nprocess SAMTOOLS_STATS {\n    tag \"$meta.id\"\n    label 'process_low'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? 'bioconda::samtools=1.13' : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/samtools:1.13--h8c37831_0\"\n    } else {\n        container \"quay.io/biocontainers/samtools:1.13--h8c37831_0\"\n    }\n\n    input:\n    tuple val(meta), path(bam), path(bai)\n\n    output:\n    tuple val(meta), path(\"*.stats\"), emit: stats\n    path  \"versions.yml\"            , emit: versions\n\n    script:\n    \"\"\"\n    samtools stats $bam > ${bam}.stats\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "    \"\"\"\n    samtools stats $bam > ${bam}.stats\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "bam",
            "bai"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__nanoseq",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? 'bioconda::samtools=1.13' : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/samtools:1.13--h8c37831_0\" } else { container \"quay.io/biocontainers/samtools:1.13--h8c37831_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "UCSC_BED12TOBIGBED": {
        "name_process": "UCSC_BED12TOBIGBED",
        "string_process": "\nprocess UCSC_BED12TOBIGBED {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'bigBed', publish_id:'meta.id') }\n\n    conda     (params.enable_conda ? \"bioconda::ucsc-bedtobigbed=377\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/ucsc-bedtobigbed:377--h446ed27_1\"\n    } else {\n        container \"quay.io/biocontainers/ucsc-bedtobigbed:377--h446ed27_1\"\n    }\n\n    when:\n    !params.skip_alignment && !params.skip_bigbed && (params.protocol == 'directRNA' || params.protocol == 'cDNA')\n\n    input:\n    tuple val(meta), path(sizes),  path(bed12)\n\n    output:\n    tuple val(meta), path(sizes),  path(\"*.bigBed\"), emit: bigbed\n    path \"versions.yml\"                            , emit: versions\n\n    script:\n    \"\"\"\n    bedToBigBed \\\\\n        $bed12 \\\\\n        $sizes \\\\\n        ${meta.id}.bigBed\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(echo $VERSION)\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 36,
        "string_script": "    \"\"\"\n    bedToBigBed \\\\\n        $bed12 \\\\\n        $sizes \\\\\n        ${meta.id}.bigBed\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(echo $VERSION)\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "sizes",
            "bed12"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__nanoseq",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'bigBed', publish_id:'meta.id') }",
            "conda (params.enable_conda ? \"bioconda::ucsc-bedtobigbed=377\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/ucsc-bedtobigbed:377--h446ed27_1\" } else { container \"quay.io/biocontainers/ucsc-bedtobigbed:377--h446ed27_1\" }"
        ],
        "when": "!params.skip_alignment && !params.skip_bigbed && (params.protocol == 'directRNA' || params.protocol == 'cDNA')",
        "stub": ""
    },
    "MINIMAP2_ALIGN": {
        "name_process": "MINIMAP2_ALIGN",
        "string_process": "\nprocess MINIMAP2_ALIGN {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'meta.id') }\n\n    conda     (params.enable_conda ? \"bioconda::minimap2=2.17\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/minimap2:2.17--hed695b0_3\"\n    } else {\n        container \"quay.io/biocontainers/minimap2:2.17--hed695b0_3\"\n    }\n\n    input:\n    tuple val(meta), path(fastq), path(fasta), path(sizes), val(gtf), val(bed), val(is_transcripts), path(index)\n\n    output:\n    tuple val(meta), path(sizes), val(is_transcripts), path(\"*.sam\"), emit: align_sam\n    path \"versions.yml\" , emit: versions\n\n    script:\n    def preset    = (params.protocol == 'DNA' || is_transcripts) ? \"-ax map-ont\" : \"-ax splice\"\n    def kmer      = (params.protocol == 'directRNA') ? \"-k14\" : \"\"\n    def stranded  = (params.stranded || params.protocol == 'directRNA') ? \"-uf\" : \"\"\n    def junctions = (params.protocol != 'DNA' && bed) ? \"--junc-bed ${file(bed)}\" : \"\"\n    \"\"\"\n    minimap2 \\\\\n        $preset \\\\\n        $kmer \\\\\n        $stranded \\\\\n        $junctions \\\\\n        -t $task.cpus \\\\\n        $index \\\\\n        $fastq > ${meta.id}.sam\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(minimap2 --version 2>&1)\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 41,
        "string_script": "    def preset    = (params.protocol == 'DNA' || is_transcripts) ? \"-ax map-ont\" : \"-ax splice\"\n    def kmer      = (params.protocol == 'directRNA') ? \"-k14\" : \"\"\n    def stranded  = (params.stranded || params.protocol == 'directRNA') ? \"-uf\" : \"\"\n    def junctions = (params.protocol != 'DNA' && bed) ? \"--junc-bed ${file(bed)}\" : \"\"\n    \"\"\"\n    minimap2 \\\\\n        $preset \\\\\n        $kmer \\\\\n        $stranded \\\\\n        $junctions \\\\\n        -t $task.cpus \\\\\n        $index \\\\\n        $fastq > ${meta.id}.sam\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(minimap2 --version 2>&1)\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [
            "Minimap2"
        ],
        "tools_url": [
            "https://bio.tools/minimap2"
        ],
        "tools_dico": [
            {
                "name": "Minimap2",
                "uri": "https://bio.tools/minimap2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise alignment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Pairwise aligner for genomic and spliced nucleotide sequences",
                "homepage": "https://github.com/lh3/minimap2"
            }
        ],
        "inputs": [
            "meta",
            "gtf",
            "bed",
            "is_transcripts",
            "fastq",
            "fasta",
            "sizes",
            "index"
        ],
        "nb_inputs": 8,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__nanoseq",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'meta.id') }",
            "conda (params.enable_conda ? \"bioconda::minimap2=2.17\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/minimap2:2.17--hed695b0_3\" } else { container \"quay.io/biocontainers/minimap2:2.17--hed695b0_3\" }"
        ],
        "when": "",
        "stub": ""
    },
    "SAMPLESHEET_CHECK": {
        "name_process": "SAMPLESHEET_CHECK",
        "string_process": "\nprocess SAMPLESHEET_CHECK {\n    tag \"$samplesheet\"\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'pipeline_info', meta:[:], publish_by_meta:[]) }\n\n    conda (params.enable_conda ? \"conda-forge::python=3.8.3\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/python:3.8.3\"\n    } else {\n        container \"quay.io/biocontainers/python:3.8.3\"\n    }\n\n    input:\n    path samplesheet\n\n    output:\n    path '*.csv'\n\n    script:                                                                     \n    \"\"\"\n    check_samplesheet.py \\\\\n        $samplesheet \\\\\n        samplesheet.valid.csv\n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "    \"\"\"\n    check_samplesheet.py \\\\\n        $samplesheet \\\\\n        samplesheet.valid.csv\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "samplesheet"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__nanoseq",
        "directive": [
            "tag \"$samplesheet\"",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'pipeline_info', meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"conda-forge::python=3.8.3\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/python:3.8.3\" } else { container \"quay.io/biocontainers/python:3.8.3\" }"
        ],
        "when": "",
        "stub": ""
    },
    "SAMTOOLS_INDEX": {
        "name_process": "SAMTOOLS_INDEX",
        "string_process": "\nprocess SAMTOOLS_INDEX {\n    tag \"$meta.id\"\n    label 'process_low'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? 'bioconda::samtools=1.13' : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/samtools:1.13--h8c37831_0\"\n    } else {\n        container \"quay.io/biocontainers/samtools:1.13--h8c37831_0\"\n    }\n\n    input:\n    tuple val(meta), path(bam)\n\n    output:\n    tuple val(meta), path(\"*.bai\"), optional:true, emit: bai\n    tuple val(meta), path(\"*.csi\"), optional:true, emit: csi\n    path  \"versions.yml\"          , emit: versions\n\n    script:\n    \"\"\"\n    samtools index $options.args $bam\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "    \"\"\"\n    samtools index $options.args $bam\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        ${getSoftwareName(task.process)}: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "bam"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__nanoseq",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? 'bioconda::samtools=1.13' : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/samtools:1.13--h8c37831_0\" } else { container \"quay.io/biocontainers/samtools:1.13--h8c37831_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "DEXSEQ": {
        "name_process": "DEXSEQ",
        "string_process": "\nprocess DEXSEQ {\n    label \"process_medium\"\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'') }\n\n    conda     (params.enable_conda ? \"conda-forge::r-base=4.0.2 bioconda::bioconductor-dexseq=1.36.0 bioconda::bioconductor-drimseq=1.18.0 bioconda::bioconductor-stager=1.12.0\" : null)\n    container \"docker.io/yuukiiwa/nanoseq:dexseq\"\n                                                                                     \n\n    input:\n    path counts\n\n    output:\n    path \"*.txt\"                , emit: dexseq_txt\n    path \"versions.yml\"         , emit: versions\n\n    script:\n    def software    = getSoftwareName(task.process)\n    def label_lower = params.multiqc_label.toLowerCase()\n    def label_upper = params.multiqc_label.toUpperCase()\n    \"\"\"\n    run_dexseq.r $params.quantification_method $counts\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        r-base: \\$(echo \\$(R --version 2>&1) | sed 's/^.*R version //; s/ .*\\$//')\n        bioconductor-deseq2: \\$(Rscript -e \"library(DEXSeq); cat(as.character(packageVersion('DEXSeq')))\")\n        bioconductor-deseq2: \\$(Rscript -e \"library(DRIMSeq); cat(as.character(packageVersion('DRIMSeq')))\")\n        bioconductor-deseq2: \\$(Rscript -e \"library(stageR); cat(as.character(packageVersion('stageR')))\")\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "    def software    = getSoftwareName(task.process)\n    def label_lower = params.multiqc_label.toLowerCase()\n    def label_upper = params.multiqc_label.toUpperCase()\n    \"\"\"\n    run_dexseq.r $params.quantification_method $counts\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        r-base: \\$(echo \\$(R --version 2>&1) | sed 's/^.*R version //; s/ .*\\$//')\n        bioconductor-deseq2: \\$(Rscript -e \"library(DEXSeq); cat(as.character(packageVersion('DEXSeq')))\")\n        bioconductor-deseq2: \\$(Rscript -e \"library(DRIMSeq); cat(as.character(packageVersion('DRIMSeq')))\")\n        bioconductor-deseq2: \\$(Rscript -e \"library(stageR); cat(as.character(packageVersion('stageR')))\")\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "counts"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__nanoseq",
        "directive": [
            "label \"process_medium\"",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'') }",
            "conda (params.enable_conda ? \"conda-forge::r-base=4.0.2 bioconda::bioconductor-dexseq=1.36.0 bioconda::bioconductor-drimseq=1.18.0 bioconda::bioconductor-stager=1.12.0\" : null)",
            "container \"docker.io/yuukiiwa/nanoseq:dexseq\""
        ],
        "when": "",
        "stub": ""
    },
    "GTF2BED": {
        "name_process": "GTF2BED",
        "string_process": "\nprocess GTF2BED {\n    label 'process_low'\n                                    \n                                        \n                                                                                                                           \n\n    conda     (params.enable_conda ? \"conda-forge::perl=5.26.2\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/perl:5.26.2\"\n    } else {\n        container \"quay.io/biocontainers/perl:5.26.2\"\n    }\n\n    input:\n    tuple path(gtf), val(name)\n\n    output:\n    tuple path('*.bed'), val(name) , emit: gtf_bed\n    path \"versions.yml\", emit: versions\n\n    script:                                                                     \n    \"\"\"\n    gtf2bed $gtf > ${gtf.baseName}.bed\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        perl: \\$(echo \\$(perl --version 2>&1) | sed 's/.*v\\\\(.*\\\\)) built.*/\\\\1/')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "    \"\"\"\n    gtf2bed $gtf > ${gtf.baseName}.bed\n\n    cat <<-END_VERSIONS > versions.yml\n    ${getProcessName(task.process)}:\n        perl: \\$(echo \\$(perl --version 2>&1) | sed 's/.*v\\\\(.*\\\\)) built.*/\\\\1/')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "name",
            "gtf"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__nanoseq",
        "directive": [
            "label 'process_low'",
            "conda (params.enable_conda ? \"conda-forge::perl=5.26.2\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/perl:5.26.2\" } else { container \"quay.io/biocontainers/perl:5.26.2\" }"
        ],
        "when": "",
        "stub": ""
    }
}
{
    "CUSTOM_DUMPSOFTWAREVERSIONS": {
        "name_process": "CUSTOM_DUMPSOFTWAREVERSIONS",
        "string_process": "process CUSTOM_DUMPSOFTWAREVERSIONS {\n    label 'process_low'\n\n                                                                                                  \n    conda (params.enable_conda ? \"bioconda::multiqc=1.11\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/multiqc:1.11--pyhdfd78af_0' :\n        'quay.io/biocontainers/multiqc:1.11--pyhdfd78af_0' }\"\n\n    input:\n    path versions\n\n    output:\n    path \"software_versions.yml\"    , emit: yml\n    path \"software_versions_mqc.yml\", emit: mqc_yml\n    path \"versions.yml\"             , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    template 'dumpsoftwareversions.py'\n}",
        "nb_lignes_process": 22,
        "string_script": "    def args = task.ext.args ?: ''\n    template 'dumpsoftwareversions.py'",
        "nb_lignes_script": 1,
        "language_script": "bash",
        "tools": [
            "docxtemplate"
        ],
        "tools_url": [
            "https://bio.tools/docxtemplate"
        ],
        "tools_dico": [
            {
                "name": "docxtemplate",
                "uri": "https://bio.tools/docxtemplate",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3314",
                            "term": "Chemistry"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0176",
                            "term": "Molecular dynamics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3489",
                            "term": "Database management"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3489",
                            "term": "Database administration"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0249",
                                    "term": "Protein geometry calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0322",
                                    "term": "Molecular model refinement"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Deposition"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Data submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Database deposition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Database submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Data deposition"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "> VERY_LOW CONFIDENCE! | > CORRECT NAME OF TOOL COULD ALSO BE 'Phenix', 'restraints', 'Amber', 'refinement' | Improved chemistry restraints for crystallographic refinement by integrating the Amber force field into Phenix | Word templates and tools for Windows | The IUCr Word templates utilize the content management features and document styles of Word to format your manuscript and to store essential details for submission of your manuscript",
                "homepage": "http://journals.iucr.org/services/docxtemplate/"
            }
        ],
        "inputs": [
            "versions"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__gwas",
        "directive": [
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::multiqc=1.11\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/multiqc:1.11--pyhdfd78af_0' : 'quay.io/biocontainers/multiqc:1.11--pyhdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "TABIX_TABIX": {
        "name_process": "TABIX_TABIX",
        "string_process": "process TABIX_TABIX {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? 'bioconda::tabix=1.11' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/tabix:1.11--hdfd78af_0' :\n        'quay.io/biocontainers/tabix:1.11--hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(tab)\n\n    output:\n    tuple val(meta), path(\"*.tbi\"), emit: tbi\n    path  \"versions.yml\"          , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    tabix $args $tab\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        tabix: \\$(echo \\$(tabix -h 2>&1) | sed 's/^.*Version: //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    tabix $args $tab\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        tabix: \\$(echo \\$(tabix -h 2>&1) | sed 's/^.*Version: //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "tab"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__gwas",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? 'bioconda::tabix=1.11' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/tabix:1.11--hdfd78af_0' : 'quay.io/biocontainers/tabix:1.11--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "FASTQC": {
        "name_process": "FASTQC",
        "string_process": "process FASTQC {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::fastqc=0.11.9\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/fastqc:0.11.9--0' :\n        'quay.io/biocontainers/fastqc:0.11.9--0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path(\"*.html\"), emit: html\n    tuple val(meta), path(\"*.zip\") , emit: zip\n    path  \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n                                                                          \n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (meta.single_end) {\n        \"\"\"\n        [ ! -f  ${prefix}.fastq.gz ] && ln -s $reads ${prefix}.fastq.gz\n        fastqc $args --threads $task.cpus ${prefix}.fastq.gz\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            fastqc: \\$( fastqc --version | sed -e \"s/FastQC v//g\" )\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        [ ! -f  ${prefix}_1.fastq.gz ] && ln -s ${reads[0]} ${prefix}_1.fastq.gz\n        [ ! -f  ${prefix}_2.fastq.gz ] && ln -s ${reads[1]} ${prefix}_2.fastq.gz\n        fastqc $args --threads $task.cpus ${prefix}_1.fastq.gz ${prefix}_2.fastq.gz\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            fastqc: \\$( fastqc --version | sed -e \"s/FastQC v//g\" )\n        END_VERSIONS\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 45,
        "string_script": "    def args = task.ext.args ?: ''\n                                                                          \n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (meta.single_end) {\n        \"\"\"\n        [ ! -f  ${prefix}.fastq.gz ] && ln -s $reads ${prefix}.fastq.gz\n        fastqc $args --threads $task.cpus ${prefix}.fastq.gz\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            fastqc: \\$( fastqc --version | sed -e \"s/FastQC v//g\" )\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        [ ! -f  ${prefix}_1.fastq.gz ] && ln -s ${reads[0]} ${prefix}_1.fastq.gz\n        [ ! -f  ${prefix}_2.fastq.gz ] && ln -s ${reads[1]} ${prefix}_2.fastq.gz\n        fastqc $args --threads $task.cpus ${prefix}_1.fastq.gz ${prefix}_2.fastq.gz\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            fastqc: \\$( fastqc --version | sed -e \"s/FastQC v//g\" )\n        END_VERSIONS\n        \"\"\"\n    }",
        "nb_lignes_script": 24,
        "language_script": "bash",
        "tools": [
            "FastQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            }
        ],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__gwas",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::fastqc=0.11.9\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/fastqc:0.11.9--0' : 'quay.io/biocontainers/fastqc:0.11.9--0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "MULTIQC": {
        "name_process": "MULTIQC",
        "string_process": "process MULTIQC {\n    label 'process_medium'\n\n    conda (params.enable_conda ? 'bioconda::multiqc=1.12' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/multiqc:1.12--pyhdfd78af_0' :\n        'quay.io/biocontainers/multiqc:1.12--pyhdfd78af_0' }\"\n\n    input:\n    path multiqc_files\n\n    output:\n    path \"*multiqc_report.html\", emit: report\n    path \"*_data\"              , emit: data\n    path \"*_plots\"             , optional:true, emit: plots\n    path \"versions.yml\"        , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    multiqc -f $args .\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        multiqc: \\$( multiqc --version | sed -e \"s/multiqc, version //g\" )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    multiqc -f $args .\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        multiqc: \\$( multiqc --version | sed -e \"s/multiqc, version //g\" )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "MultiQC"
        ],
        "tools_url": [
            "https://bio.tools/multiqc"
        ],
        "tools_dico": [
            {
                "name": "MultiQC",
                "uri": "https://bio.tools/multiqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "MultiQC aggregates results from multiple bioinformatics analyses across many samples into a single report. It searches a given directory for analysis logs and compiles a HTML report. It's a general use tool, perfect for summarising the output from numerous bioinformatics tools.",
                "homepage": "http://multiqc.info/"
            }
        ],
        "inputs": [
            "multiqc_files"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__gwas",
        "directive": [
            "label 'process_medium'",
            "conda (params.enable_conda ? 'bioconda::multiqc=1.12' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/multiqc:1.12--pyhdfd78af_0' : 'quay.io/biocontainers/multiqc:1.12--pyhdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "TABIX_BGZIP": {
        "name_process": "TABIX_BGZIP",
        "string_process": "process TABIX_BGZIP {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? 'bioconda::tabix=1.11' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/tabix:1.11--hdfd78af_0' :\n        'quay.io/biocontainers/tabix:1.11--hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(input)\n\n    output:\n    tuple val(meta), path(\"*.gz\"), emit: gz\n    path  \"versions.yml\"         , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    bgzip -c $args $input > ${prefix}.${input.getExtension()}.gz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        tabix: \\$(echo \\$(tabix -h 2>&1) | sed 's/^.*Version: //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    bgzip -c $args $input > ${prefix}.${input.getExtension()}.gz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        tabix: \\$(echo \\$(tabix -h 2>&1) | sed 's/^.*Version: //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "input"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__gwas",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? 'bioconda::tabix=1.11' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/tabix:1.11--hdfd78af_0' : 'quay.io/biocontainers/tabix:1.11--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "SAMPLESHEET_CHECK": {
        "name_process": "SAMPLESHEET_CHECK",
        "string_process": "process SAMPLESHEET_CHECK {\n    tag \"$samplesheet\"\n\n    conda (params.enable_conda ? \"conda-forge::python=3.8.3\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/python:3.8.3' :\n        'quay.io/biocontainers/python:3.8.3' }\"\n\n    input:\n    path samplesheet\n\n    output:\n    path '*.csv'       , emit: csv\n    path \"versions.yml\", emit: versions\n\n    script:                                                                  \n    \"\"\"\n    check_samplesheet.py \\\\\n        $samplesheet \\\\\n        samplesheet.valid.csv\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        python: \\$(python --version | sed 's/Python //g')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "    \"\"\"\n    check_samplesheet.py \\\\\n        $samplesheet \\\\\n        samplesheet.valid.csv\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        python: \\$(python --version | sed 's/Python //g')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "samplesheet"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__gwas",
        "directive": [
            "tag \"$samplesheet\"",
            "conda (params.enable_conda ? \"conda-forge::python=3.8.3\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/python:3.8.3' : 'quay.io/biocontainers/python:3.8.3' }\""
        ],
        "when": "",
        "stub": ""
    },
    "BCFTOOLS_MERGE": {
        "name_process": "BCFTOOLS_MERGE",
        "string_process": "process BCFTOOLS_MERGE {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? 'bioconda::bcftools=1.14' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bcftools:1.14--h88f3f91_0' :\n        'quay.io/biocontainers/bcftools:1.14--h88f3f91_0' }\"\n\n    input:\n    tuple val(meta), path(vcfs), path(tbis)\n\n    output:\n    tuple val(meta), path(\"*.gz\"), emit: vcf\n    path  \"versions.yml\"         , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args   ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    bcftools merge -Oz \\\\\n        --output ${prefix}.vcf.gz \\\\\n        $args \\\\\n        *.vcf.gz\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bcftools: \\$(bcftools --version 2>&1 | head -n1 | sed 's/^.*bcftools //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "    def args = task.ext.args   ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    bcftools merge -Oz \\\\\n        --output ${prefix}.vcf.gz \\\\\n        $args \\\\\n        *.vcf.gz\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bcftools: \\$(bcftools --version 2>&1 | head -n1 | sed 's/^.*bcftools //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "BCFtools"
        ],
        "tools_url": [
            "https://bio.tools/bcftools"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "vcfs",
            "tbis"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__gwas",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? 'bioconda::bcftools=1.14' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bcftools:1.14--h88f3f91_0' : 'quay.io/biocontainers/bcftools:1.14--h88f3f91_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "VCFTOOLS": {
        "name_process": "VCFTOOLS",
        "string_process": "process VCFTOOLS {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::vcftools=0.1.16\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/vcftools:0.1.16--he513fc3_4' :\n        'quay.io/biocontainers/vcftools:0.1.16--he513fc3_4' }\"\n\n    input:\n                                                                                                                \n                                                                         \n                                                                                                                           \n                                                           \n    tuple val(meta), path(variant_file)\n    path  bed\n    path  diff_variant_file\n\n    output:\n    tuple val(meta), path(\"*.vcf\")                    , optional:true, emit: vcf\n    tuple val(meta), path(\"*.bcf\")                    , optional:true, emit: bcf\n    tuple val(meta), path(\"*.frq\")                    , optional:true, emit: frq\n    tuple val(meta), path(\"*.frq.count\")              , optional:true, emit: frq_count\n    tuple val(meta), path(\"*.idepth\")                 , optional:true, emit: idepth\n    tuple val(meta), path(\"*.ldepth\")                 , optional:true, emit: ldepth\n    tuple val(meta), path(\"*.ldepth.mean\")            , optional:true, emit: ldepth_mean\n    tuple val(meta), path(\"*.gdepth\")                 , optional:true, emit: gdepth\n    tuple val(meta), path(\"*.hap.ld\")                 , optional:true, emit: hap_ld\n    tuple val(meta), path(\"*.geno.ld\")                , optional:true, emit: geno_ld\n    tuple val(meta), path(\"*.geno.chisq\")             , optional:true, emit: geno_chisq\n    tuple val(meta), path(\"*.list.hap.ld\")            , optional:true, emit: list_hap_ld\n    tuple val(meta), path(\"*.list.geno.ld\")           , optional:true, emit: list_geno_ld\n    tuple val(meta), path(\"*.interchrom.hap.ld\")      , optional:true, emit: interchrom_hap_ld\n    tuple val(meta), path(\"*.interchrom.geno.ld\")     , optional:true, emit: interchrom_geno_ld\n    tuple val(meta), path(\"*.TsTv\")                   , optional:true, emit: tstv\n    tuple val(meta), path(\"*.TsTv.summary\")           , optional:true, emit: tstv_summary\n    tuple val(meta), path(\"*.TsTv.count\")             , optional:true, emit: tstv_count\n    tuple val(meta), path(\"*.TsTv.qual\")              , optional:true, emit: tstv_qual\n    tuple val(meta), path(\"*.FILTER.summary\")         , optional:true, emit: filter_summary\n    tuple val(meta), path(\"*.sites.pi\")               , optional:true, emit: sites_pi\n    tuple val(meta), path(\"*.windowed.pi\")            , optional:true, emit: windowed_pi\n    tuple val(meta), path(\"*.weir.fst\")               , optional:true, emit: weir_fst\n    tuple val(meta), path(\"*.het\")                    , optional:true, emit: heterozygosity\n    tuple val(meta), path(\"*.hwe\")                    , optional:true, emit: hwe\n    tuple val(meta), path(\"*.Tajima.D\")               , optional:true, emit: tajima_d\n    tuple val(meta), path(\"*.ifreqburden\")            , optional:true, emit: freq_burden\n    tuple val(meta), path(\"*.LROH\")                   , optional:true, emit: lroh\n    tuple val(meta), path(\"*.relatedness\")            , optional:true, emit: relatedness\n    tuple val(meta), path(\"*.relatedness2\")           , optional:true, emit: relatedness2\n    tuple val(meta), path(\"*.lqual\")                  , optional:true, emit: lqual\n    tuple val(meta), path(\"*.imiss\")                  , optional:true, emit: missing_individual\n    tuple val(meta), path(\"*.lmiss\")                  , optional:true, emit: missing_site\n    tuple val(meta), path(\"*.snpden\")                 , optional:true, emit: snp_density\n    tuple val(meta), path(\"*.kept.sites\")             , optional:true, emit: kept_sites\n    tuple val(meta), path(\"*.removed.sites\")          , optional:true, emit: removed_sites\n    tuple val(meta), path(\"*.singletons\")             , optional:true, emit: singeltons\n    tuple val(meta), path(\"*.indel.hist\")             , optional:true, emit: indel_hist\n    tuple val(meta), path(\"*.hapcount\")               , optional:true, emit: hapcount\n    tuple val(meta), path(\"*.mendel\")                 , optional:true, emit: mendel\n    tuple val(meta), path(\"*.FORMAT\")                 , optional:true, emit: format\n    tuple val(meta), path(\"*.INFO\")                   , optional:true, emit: info\n    tuple val(meta), path(\"*.012\")                    , optional:true, emit: genotypes_matrix\n    tuple val(meta), path(\"*.012.indv\")               , optional:true, emit: genotypes_matrix_individual\n    tuple val(meta), path(\"*.012.pos\")                , optional:true, emit: genotypes_matrix_position\n    tuple val(meta), path(\"*.impute.hap\")             , optional:true, emit: impute_hap\n    tuple val(meta), path(\"*.impute.hap.legend\")      , optional:true, emit: impute_hap_legend\n    tuple val(meta), path(\"*.impute.hap.indv\")        , optional:true, emit: impute_hap_indv\n    tuple val(meta), path(\"*.ldhat.sites\")            , optional:true, emit: ldhat_sites\n    tuple val(meta), path(\"*.ldhat.locs\")             , optional:true, emit: ldhat_locs\n    tuple val(meta), path(\"*.BEAGLE.GL\")              , optional:true, emit: beagle_gl\n    tuple val(meta), path(\"*.BEAGLE.PL\")              , optional:true, emit: beagle_pl\n    tuple val(meta), path(\"*.ped\")                    , optional:true, emit: ped\n    tuple val(meta), path(\"*.map\")                    , optional:true, emit: map_\n    tuple val(meta), path(\"*.tped\")                   , optional:true, emit: tped\n    tuple val(meta), path(\"*.tfam\")                   , optional:true, emit: tfam\n    tuple val(meta), path(\"*.diff.sites_in_files\")    , optional:true, emit: diff_sites_in_files\n    tuple val(meta), path(\"*.diff.indv_in_files\")     , optional:true, emit: diff_indv_in_files\n    tuple val(meta), path(\"*.diff.sites\")             , optional:true, emit: diff_sites\n    tuple val(meta), path(\"*.diff.indv\")              , optional:true, emit: diff_indv\n    tuple val(meta), path(\"*.diff.discordance.matrix\"), optional:true, emit: diff_discd_matrix\n    tuple val(meta), path(\"*.diff.switch\")            , optional:true, emit: diff_switch_error\n    path \"versions.yml\"                               , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def args_list = args.tokenize()\n\n    def bed_arg  = (args.contains('--bed')) ? \"--bed ${bed}\" :\n        (args.contains('--exclude-bed')) ? \"--exclude-bed ${bed}\" :\n        (args.contains('--hapcount')) ? \"--hapcount ${bed}\" : ''\n    args_list.removeIf { it.contains('--bed') }\n    args_list.removeIf { it.contains('--exclude-bed') }\n    args_list.removeIf { it.contains('--hapcount') }\n\n    def diff_variant_arg = (args.contains('--diff')) ? \"--diff ${diff_variant_file}\" :\n        (args.contains('--gzdiff')) ? \"--gzdiff ${diff_variant_file}\" :\n        (args.contains('--diff-bcf')) ? \"--diff-bcf ${diff_variant_file}\" : ''\n    args_list.removeIf { it.contains('--diff') }\n    args_list.removeIf { it.contains('--gzdiff') }\n    args_list.removeIf { it.contains('--diff-bcf') }\n\n    def input_file = (\"$variant_file\".endsWith(\".vcf\")) ? \"--vcf ${variant_file}\" :\n        (\"$variant_file\".endsWith(\".vcf.gz\")) ? \"--gzvcf ${variant_file}\" :\n        (\"$variant_file\".endsWith(\".bcf\")) ? \"--bcf ${variant_file}\" : ''\n\n    \"\"\"\n    vcftools \\\\\n        $input_file \\\\\n        --out $prefix \\\\\n        ${args_list.join(' ')} \\\\\n        $bed_arg \\\\\n        $diff_variant_arg\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        vcftools: \\$(echo \\$(vcftools --version 2>&1) | sed 's/^.*VCFtools (//;s/).*//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 121,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def args_list = args.tokenize()\n\n    def bed_arg  = (args.contains('--bed')) ? \"--bed ${bed}\" :\n        (args.contains('--exclude-bed')) ? \"--exclude-bed ${bed}\" :\n        (args.contains('--hapcount')) ? \"--hapcount ${bed}\" : ''\n    args_list.removeIf { it.contains('--bed') }\n    args_list.removeIf { it.contains('--exclude-bed') }\n    args_list.removeIf { it.contains('--hapcount') }\n\n    def diff_variant_arg = (args.contains('--diff')) ? \"--diff ${diff_variant_file}\" :\n        (args.contains('--gzdiff')) ? \"--gzdiff ${diff_variant_file}\" :\n        (args.contains('--diff-bcf')) ? \"--diff-bcf ${diff_variant_file}\" : ''\n    args_list.removeIf { it.contains('--diff') }\n    args_list.removeIf { it.contains('--gzdiff') }\n    args_list.removeIf { it.contains('--diff-bcf') }\n\n    def input_file = (\"$variant_file\".endsWith(\".vcf\")) ? \"--vcf ${variant_file}\" :\n        (\"$variant_file\".endsWith(\".vcf.gz\")) ? \"--gzvcf ${variant_file}\" :\n        (\"$variant_file\".endsWith(\".bcf\")) ? \"--bcf ${variant_file}\" : ''\n\n    \"\"\"\n    vcftools \\\\\n        $input_file \\\\\n        --out $prefix \\\\\n        ${args_list.join(' ')} \\\\\n        $bed_arg \\\\\n        $diff_variant_arg\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        vcftools: \\$(echo \\$(vcftools --version 2>&1) | sed 's/^.*VCFtools (//;s/).*//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 34,
        "language_script": "bash",
        "tools": [
            "VCFtools"
        ],
        "tools_url": [
            "https://bio.tools/vcftools"
        ],
        "tools_dico": [
            {
                "name": "VCFtools",
                "uri": "https://bio.tools/vcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3675",
                                    "term": "Variant filtering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Sequence variation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Variant analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation annotation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Provide easily accessible methods for working with complex genetic variation data in the form of VCF files.",
                "homepage": "https://vcftools.github.io/index.html"
            }
        ],
        "inputs": [
            "meta",
            "variant_file",
            "bed",
            "diff_variant_file"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__gwas",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::vcftools=0.1.16\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/vcftools:0.1.16--he513fc3_4' : 'quay.io/biocontainers/vcftools:0.1.16--he513fc3_4' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    }
}
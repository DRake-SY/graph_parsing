{
    "OPERATION_1": {
        "string": "ch_multiqc_config = Channel.fromPath(params.multiqc_config)",
        "origin": [
            [
                "params.multiqc_config",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_multiqc_config",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "ch_output_docs = Channel.fromPath(\"$baseDir/docs/output.md\")",
        "origin": [
            [
                "\"$baseDir/docs/output.md\"",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_output_docs",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "Channel.fromPath(params.fasta)\n           .ifEmpty { exit 1, \"Fasta file not found: ${params.fasta}\" }\n           .into { genome_fasta; ch_fasta_for_hisat_index}",
        "origin": [
            [
                "params.fasta",
                "A"
            ]
        ],
        "gives": [
            [
                "genome_fasta",
                "P"
            ],
            [
                "ch_fasta_for_hisat_index",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "Channel\n        .fromPath(params.chrom_sizes, checkIfExists: true)\n        .ifEmpty { exit 1, \"Chrom sizes file not found: ${params.chrom_sizes}\" }\n        .into { chrom_sizes_for_bed;\n                chrom_sizes_for_bigwig;\n                chrom_sizes_for_igv }",
        "origin": [
            [
                "params.chrom_sizes, checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "chrom_sizes_for_bed",
                "P"
            ],
            [
                "chrom_sizes_for_bigwig",
                "P"
            ],
            [
                "chrom_sizes_for_igv",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "Channel\n            .from(params.readPaths)\n            .map { row -> [ row[0], [file(row[1][0])]] }\n            .dump()\n            .ifEmpty { exit 1, \"params.readPaths was empty - no input files supplied\" }\n            .into { fastq_reads_qc; fastq_reads_trim; fastq_reads_gzip }",
        "origin": [
            [
                "params.readPaths",
                "V"
            ]
        ],
        "gives": [
            [
                "fastq_reads_qc",
                "P"
            ],
            [
                "fastq_reads_trim",
                "P"
            ],
            [
                "fastq_reads_gzip",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "Channel\n            .from(params.readPaths)\n            .map { row -> [ row[0], [file(row[1][0]), file(row[1][1])]] }\n            .ifEmpty { exit 1, \"params.readPaths was empty - no input files supplied\" }\n            .dump()\n            .into { fastq_reads_qc; fastq_reads_trim; fastq_reads_gzip }",
        "origin": [
            [
                "params.readPaths",
                "V"
            ]
        ],
        "gives": [
            [
                "fastq_reads_qc",
                "P"
            ],
            [
                "fastq_reads_trim",
                "P"
            ],
            [
                "fastq_reads_gzip",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "fastq_reads_qc = Channel\n                            .fromPath(params.reads)\n                            .map { file -> tuple(file.baseName, file) }",
        "origin": [
            [
                "params.reads",
                "A"
            ]
        ],
        "gives": [
            [
                "fastq_reads_qc",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "fastq_reads_trim = Channel\n                            .fromPath(params.reads)\n                            .map { file -> tuple(file.baseName, file) }",
        "origin": [
            [
                "params.reads",
                "A"
            ]
        ],
        "gives": [
            [
                "fastq_reads_trim",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "fastq_reads_gzip = Channel\n                            .fromPath(params.reads)\n                            .map { file -> tuple(file.baseName, file) }",
        "origin": [
            [
                "params.reads",
                "A"
            ]
        ],
        "gives": [
            [
                "fastq_reads_gzip",
                "P"
            ]
        ]
    },
    "OPERATION_10": {
        "string": "Channel\n            .fromFilePairs( params.reads, size: params.singleEnd ? 1 : 2 )\n            .ifEmpty { exit 1, \"Cannot find any reads matching: ${params.reads}\\nNB: Path needs to be enclosed in quotes!\\nIf this is single-end data, please specify --singleEnd on the command line.\" }\n            .into { fastq_reads_qc; fastq_reads_trim; fastq_reads_gzip }",
        "origin": [
            [
                "params.reads, size: params.singleEnd ? 1 : 2",
                "A"
            ]
        ],
        "gives": [
            [
                "fastq_reads_qc",
                "P"
            ],
            [
                "fastq_reads_trim",
                "P"
            ],
            [
                "fastq_reads_gzip",
                "P"
            ]
        ]
    },
    "OPERATION_11": {
        "string": "read_files_sra = Channel\n                        .fromPath(params.sras)\n                        .map { file -> tuple(file.baseName, file) }",
        "origin": [
            [
                "params.sras",
                "A"
            ]
        ],
        "gives": [
            [
                "read_files_sra",
                "P"
            ]
        ]
    },
    "OPERATION_12": {
        "string": "Channel\n             .fromFilePairs( params.sras, size: params.singleEnd ? 1 : 2 )\n             .ifEmpty { exit 1, \"Cannot find any reads matching: ${params.reads}\\nNB: Path needs to be enclosed in quotes!\\nIf this is single-end data, please specify --singleEnd on the command line.\" }\n             .into { fastq_reads_qc; fastq_reads_trim; fastq_reads_gzip }",
        "origin": [
            [
                "params.sras, size: params.singleEnd ? 1 : 2",
                "A"
            ]
        ],
        "gives": [
            [
                "fastq_reads_qc",
                "P"
            ],
            [
                "fastq_reads_trim",
                "P"
            ],
            [
                "fastq_reads_gzip",
                "P"
            ]
        ]
    },
    "OPERATION_13": {
        "string": "read_files_sra = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "read_files_sra",
                "P"
            ]
        ]
    },
    "OPERATION_14": {
        "string": "summary.collect { k,v -> \"${k.padRight(18)}: $v\" }.join(\"\\n\")",
        "origin": [
            [
                "summary",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_15": {
        "string": "sorted_bam_ch\n   .into {sorted_bams_for_bedtools_bedgraph; sorted_bams_for_preseq; sorted_bams_for_rseqc; sorted_bams_for_dreg_prep; sorted_bams_for_pileup}",
        "origin": [
            [
                "sorted_bam_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "sorted_bams_for_bedtools_bedgraph",
                "P"
            ],
            [
                "sorted_bams_for_preseq",
                "P"
            ],
            [
                "sorted_bams_for_rseqc",
                "P"
            ],
            [
                "sorted_bams_for_dreg_prep",
                "P"
            ],
            [
                "sorted_bams_for_pileup",
                "P"
            ]
        ]
    },
    "OPERATION_16": {
        "string": "sorted_bam_indices_ch\n    .into {sorted_bam_indices_for_bedtools_bedgraph; sorted_bam_indices_for_bedtools_normalized_bedgraph; sorted_bam_indicies_for_pileup; sorted_bam_indices_for_preseq; sorted_bam_indices_for_rseqc}",
        "origin": [
            [
                "sorted_bam_indices_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "sorted_bam_indices_for_bedtools_bedgraph",
                "P"
            ],
            [
                "sorted_bam_indices_for_bedtools_normalized_bedgraph",
                "P"
            ],
            [
                "sorted_bam_indicies_for_pileup",
                "P"
            ],
            [
                "sorted_bam_indices_for_preseq",
                "P"
            ],
            [
                "sorted_bam_indices_for_rseqc",
                "P"
            ]
        ]
    },
    "OPERATION_17": {
        "string": "chrom_sizes_ch.into{chrom_sizes_for_bed; chrom_sizes_for_bigwig; chrom_sizes_for_igv}",
        "origin": [
            [
                "chrom_sizes_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "chrom_sizes_for_bed",
                "P"
            ],
            [
                "chrom_sizes_for_bigwig",
                "P"
            ],
            [
                "chrom_sizes_for_igv",
                "P"
            ]
        ]
    }
}
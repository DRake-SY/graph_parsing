{
    "BCFTOOLS_NORM": {
        "name_process": "BCFTOOLS_NORM",
        "string_process": "process BCFTOOLS_NORM {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? 'bioconda::bcftools=1.14' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bcftools:1.14--h88f3f91_0' :\n        'quay.io/biocontainers/bcftools:1.14--h88f3f91_0' }\"\n\n    input:\n    tuple val(meta), path(vcf)\n    path(fasta)\n\n    output:\n    tuple val(meta), path(\"*.gz\") , emit: vcf\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    bcftools norm \\\\\n        --fasta-ref ${fasta} \\\\\n        --output ${prefix}.vcf.gz \\\\\n        $args \\\\\n        --threads $task.cpus \\\\\n        ${vcf}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bcftools: \\$(bcftools --version 2>&1 | head -n1 | sed 's/^.*bcftools //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.vcf.gz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bcftools: \\$(bcftools --version 2>&1 | head -n1 | sed 's/^.*bcftools //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 46,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    bcftools norm \\\\\n        --fasta-ref ${fasta} \\\\\n        --output ${prefix}.vcf.gz \\\\\n        $args \\\\\n        --threads $task.cpus \\\\\n        ${vcf}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bcftools: \\$(bcftools --version 2>&1 | head -n1 | sed 's/^.*bcftools //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "BCFtools"
        ],
        "tools_url": [
            "https://bio.tools/bcftools"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "vcf",
            "fasta"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__raredisease",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? 'bioconda::bcftools=1.14' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bcftools:1.14--h88f3f91_0' : 'quay.io/biocontainers/bcftools:1.14--h88f3f91_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.vcf.gz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bcftools: \\$(bcftools --version 2>&1 | head -n1 | sed 's/^.*bcftools //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\""
    },
    "CAT_CAT": {
        "name_process": "CAT_CAT",
        "string_process": "process CAT_CAT {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"conda-forge::pigz=2.3.4\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/pigz:2.3.4' :\n        'quay.io/biocontainers/pigz:2.3.4' }\"\n\n    input:\n    tuple val(meta), path(files_in)\n\n    output:\n    tuple val(meta), path(\"${prefix}\"), emit: file_out\n    path \"versions.yml\"               , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    def file_list = files_in.collect { it.toString() }\n\n                                                       \n                                                       \n                                                       \n                                                       \n                                                       \n                                                       \n\n                                       \n    prefix   = task.ext.prefix ?: \"${meta.id}${file_list[0].substring(file_list[0].lastIndexOf('.'))}\"\n    out_zip  = prefix.endsWith('.gz')\n    in_zip   = file_list[0].endsWith('.gz')\n    command1 = (in_zip && !out_zip) ? 'zcat' : 'cat'\n    command2 = (!in_zip && out_zip) ? \"| pigz -c -p $task.cpus $args2\" : ''\n    \"\"\"\n    $command1 \\\\\n        $args \\\\\n        ${file_list.join(' ')} \\\\\n        $command2 \\\\\n        > ${prefix}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        pigz: \\$( pigz --version 2>&1 | sed 's/pigz //g' )\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    def file_list = files_in.collect { it.toString() }\n    prefix   = task.ext.prefix ?: \"${meta.id}${file_list[0].substring(file_list[0].lastIndexOf('.'))}\"\n    \"\"\"\n    touch $prefix\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        pigz: \\$( pigz --version 2>&1 | sed 's/pigz //g' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 60,
        "string_script": "    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    def file_list = files_in.collect { it.toString() }\n\n                                                       \n                                                       \n                                                       \n                                                       \n                                                       \n                                                       \n\n                                       \n    prefix   = task.ext.prefix ?: \"${meta.id}${file_list[0].substring(file_list[0].lastIndexOf('.'))}\"\n    out_zip  = prefix.endsWith('.gz')\n    in_zip   = file_list[0].endsWith('.gz')\n    command1 = (in_zip && !out_zip) ? 'zcat' : 'cat'\n    command2 = (!in_zip && out_zip) ? \"| pigz -c -p $task.cpus $args2\" : ''\n    \"\"\"\n    $command1 \\\\\n        $args \\\\\n        ${file_list.join(' ')} \\\\\n        $command2 \\\\\n        > ${prefix}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        pigz: \\$( pigz --version 2>&1 | sed 's/pigz //g' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 28,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "files_in"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__raredisease",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"conda-forge::pigz=2.3.4\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/pigz:2.3.4' : 'quay.io/biocontainers/pigz:2.3.4' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    def file_list = files_in.collect { it.toString() }\n    prefix   = task.ext.prefix ?: \"${meta.id}${file_list[0].substring(file_list[0].lastIndexOf('.'))}\"\n    \"\"\"\n    touch $prefix\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        pigz: \\$( pigz --version 2>&1 | sed 's/pigz //g' )\n    END_VERSIONS\n    \"\"\""
    },
    "TABIX_BGZIPTABIX": {
        "name_process": "TABIX_BGZIPTABIX",
        "string_process": "process TABIX_BGZIPTABIX {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? 'bioconda::tabix=1.11' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/tabix:1.11--hdfd78af_0' :\n        'quay.io/biocontainers/tabix:1.11--hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(input)\n\n    output:\n    tuple val(meta), path(\"*.gz\"), path(\"*.tbi\"), emit: gz_tbi\n    path  \"versions.yml\" ,                        emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    bgzip  --threads ${task.cpus} -c $args $input > ${prefix}.gz\n    tabix $args2 ${prefix}.gz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        tabix: \\$(echo \\$(tabix -h 2>&1) | sed 's/^.*Version: //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.gz\n    touch ${prefix}.gz.tbi\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        tabix: \\$(echo \\$(tabix -h 2>&1) | sed 's/^.*Version: //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 43,
        "string_script": "    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    bgzip  --threads ${task.cpus} -c $args $input > ${prefix}.gz\n    tabix $args2 ${prefix}.gz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        tabix: \\$(echo \\$(tabix -h 2>&1) | sed 's/^.*Version: //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "input"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__raredisease",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? 'bioconda::tabix=1.11' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/tabix:1.11--hdfd78af_0' : 'quay.io/biocontainers/tabix:1.11--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.gz\n    touch ${prefix}.gz.tbi\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        tabix: \\$(echo \\$(tabix -h 2>&1) | sed 's/^.*Version: //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\""
    },
    "GET_CHROM_SIZES": {
        "name_process": "GET_CHROM_SIZES",
        "string_process": "process GET_CHROM_SIZES {\n    tag \"$fai\"\n\n    conda (params.enable_conda ? \"conda-forge::coreutils=8.31\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/gnu-wget:1.18--0' :\n        'quay.io/biocontainers/gnu-wget:1.18--0' }\"\n\n    input:\n    path fai\n\n    output:\n    path '*.sizes'     , emit: sizes\n    path \"versions.yml\", emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    \"\"\"\n    cut -f 1,2 $fai > ${fai}.sizes\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        cut: \\$(echo \\$(cut --help 2>&1 | head -n 1 | cut -f1,2 -d' '))\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "    \"\"\"\n    cut -f 1,2 $fai > ${fai}.sizes\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        cut: \\$(echo \\$(cut --help 2>&1 | head -n 1 | cut -f1,2 -d' '))\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fai"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__raredisease",
        "directive": [
            "tag \"$fai\"",
            "conda (params.enable_conda ? \"conda-forge::coreutils=8.31\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/gnu-wget:1.18--0' : 'quay.io/biocontainers/gnu-wget:1.18--0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "DEEPVARIANT": {
        "name_process": "DEEPVARIANT",
        "string_process": "process DEEPVARIANT {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n\n    if (params.enable_conda) {\n        exit 1, \"Conda environments cannot be used when using the DeepVariant tool. Please use docker or singularity containers.\"\n    }\n\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'google/deepvariant:1.3.0' :\n        'google/deepvariant:1.3.0' }\"\n\n    input:\n    tuple val(meta), path(input), path(index), path(intervals)\n    path(fasta)\n    path(fai)\n\n    output:\n    tuple val(meta), path(\"${prefix}.vcf.gz\") ,  emit: vcf\n    tuple val(meta), path(\"${prefix}.g.vcf.gz\"),  emit: gvcf\n    path \"versions.yml\"               ,  emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    prefix = task.ext.prefix ?: \"${meta.id}\"\n    def regions = intervals ? \"--regions ${intervals}\" : \"\"\n\n    \"\"\"\n    /opt/deepvariant/bin/run_deepvariant \\\\\n        --ref=${fasta} \\\\\n        --reads=${input} \\\\\n        --output_vcf=${prefix}.vcf.gz \\\\\n        --output_gvcf=${prefix}.g.vcf.gz \\\\\n        ${args} \\\\\n        ${regions} \\\\\n        --num_shards=${task.cpus}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        deepvariant: \\$(echo \\$(/opt/deepvariant/bin/run_deepvariant --version) | sed 's/^.*version //; s/ .*\\$//' )\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.vcf.gz\n    touch ${prefix}.g.vcf.gz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        deepvariant: \\$(echo \\$(/opt/deepvariant/bin/run_deepvariant --version) | sed 's/^.*version //; s/ .*\\$//' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 57,
        "string_script": "    def args = task.ext.args ?: ''\n    prefix = task.ext.prefix ?: \"${meta.id}\"\n    def regions = intervals ? \"--regions ${intervals}\" : \"\"\n\n    \"\"\"\n    /opt/deepvariant/bin/run_deepvariant \\\\\n        --ref=${fasta} \\\\\n        --reads=${input} \\\\\n        --output_vcf=${prefix}.vcf.gz \\\\\n        --output_gvcf=${prefix}.g.vcf.gz \\\\\n        ${args} \\\\\n        ${regions} \\\\\n        --num_shards=${task.cpus}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        deepvariant: \\$(echo \\$(/opt/deepvariant/bin/run_deepvariant --version) | sed 's/^.*version //; s/ .*\\$//' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "input",
            "index",
            "intervals",
            "fasta",
            "fai"
        ],
        "nb_inputs": 6,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__raredisease",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium' if (params.enable_conda) { exit 1, \"Conda environments cannot be used when using the DeepVariant tool. Please use docker or singularity containers.\" }",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'google/deepvariant:1.3.0' : 'google/deepvariant:1.3.0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.vcf.gz\n    touch ${prefix}.g.vcf.gz\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        deepvariant: \\$(echo \\$(/opt/deepvariant/bin/run_deepvariant --version) | sed 's/^.*version //; s/ .*\\$//' )\n    END_VERSIONS\n    \"\"\""
    },
    "EXPANSIONHUNTER": {
        "name_process": "EXPANSIONHUNTER",
        "string_process": "process EXPANSIONHUNTER {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::expansionhunter=4.0.2\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/expansionhunter:4.0.2--he785bd8_0' :\n        'quay.io/biocontainers/expansionhunter:4.0.2--he785bd8_0' }\"\n\n    input:\n    tuple val(meta), path(bam), path(bai)\n    path fasta\n    path variant_catalog\n\n    output:\n    tuple val(meta), path(\"*.vcf\"), emit: vcf\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def gender = (meta.gender == 'male' || meta.gender == 1 || meta.gender == 'XY') ? \"male\" : \"female\"\n    \"\"\"\n    ExpansionHunter \\\\\n        $args \\\\\n        --reads $bam \\\\\n        --output-prefix $prefix \\\\\n        --reference $fasta \\\\\n        --variant-catalog $variant_catalog \\\\\n        --sex $gender\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        expansionhunter: \\$( echo \\$(ExpansionHunter --version 2>&1) | sed 's/^.*ExpansionHunter v//')\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.vcf\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        expansionhunter: \\$( echo \\$(ExpansionHunter --version 2>&1) | sed 's/^.*ExpansionHunter v//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 49,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def gender = (meta.gender == 'male' || meta.gender == 1 || meta.gender == 'XY') ? \"male\" : \"female\"\n    \"\"\"\n    ExpansionHunter \\\\\n        $args \\\\\n        --reads $bam \\\\\n        --output-prefix $prefix \\\\\n        --reference $fasta \\\\\n        --variant-catalog $variant_catalog \\\\\n        --sex $gender\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        expansionhunter: \\$( echo \\$(ExpansionHunter --version 2>&1) | sed 's/^.*ExpansionHunter v//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [
            "ExpansionHunter"
        ],
        "tools_url": [
            "https://bio.tools/ExpansionHunter"
        ],
        "tools_dico": [
            {
                "name": "ExpansionHunter",
                "uri": "https://bio.tools/ExpansionHunter",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype and phenotype"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Whole genome sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype and phenotype resources"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype-phenotype analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype-phenotype"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "WGS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Sequence-graph-based tool to analyze variation in short tandem repeat regions.",
                "homepage": "https://github.com/Illumina/ExpansionHunter/"
            }
        ],
        "inputs": [
            "meta",
            "bam",
            "bai",
            "fasta",
            "variant_catalog"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__raredisease",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::expansionhunter=4.0.2\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/expansionhunter:4.0.2--he785bd8_0' : 'quay.io/biocontainers/expansionhunter:4.0.2--he785bd8_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.vcf\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        expansionhunter: \\$( echo \\$(ExpansionHunter --version 2>&1) | sed 's/^.*ExpansionHunter v//')\n    END_VERSIONS\n    \"\"\""
    },
    "CHECK_INPUT_VCF": {
        "name_process": "CHECK_INPUT_VCF",
        "string_process": "process CHECK_INPUT_VCF {\n    tag \"check_vcf\"\n\n    conda (params.enable_conda ? \"conda-forge::python=3.9.5\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/python:3.9--1' :\n        'quay.io/biocontainers/python:3.9--1' }\"\n\n    input:\n    path vcf\n\n    output:\n    path '*.txt'       , emit: txt\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:                                                                         \n    \"\"\"\n    export INPUT_FILE=${vcf}\n    export OUTPUT_FILE=\"checked_vcfs.txt\"\n\n    python3 <<CODE\n    import os, gzip\n    file_in  = os.environ.get('INPUT_FILE')\n    file_out = os.environ.get('OUTPUT_FILE')\n    if file_in.endswith(\".gz\"):\n        with open(file_out,'w') as out:\n            base = os.path.basename(file_in).rsplit(\".\",2)[0]\n            out.write(\"id,filepath,processed\\\\n\")\n            with gzip.open(file_in,'rt') as vcf:\n                for line in vcf:\n                    if line.startswith(\"##bcftools_norm\"):\n                        out.write(base + \",\" + os.path.abspath(file_in) + \",yes\\\\n\")\n                        break\n                    elif not line.startswith(\"#\"):\n                        out.write(base + \",\" + os.path.abspath(file_in) + \",no\\\\n\")\n                        break\n    else:\n        print(\"Please compress %s using bgzip\" %file_in)\n    CODE\n    \"\"\"\n}",
        "nb_lignes_process": 41,
        "string_script": "    \"\"\"\n    export INPUT_FILE=${vcf}\n    export OUTPUT_FILE=\"checked_vcfs.txt\"\n\n    python3 <<CODE\n    import os, gzip\n    file_in  = os.environ.get('INPUT_FILE')\n    file_out = os.environ.get('OUTPUT_FILE')\n    if file_in.endswith(\".gz\"):\n        with open(file_out,'w') as out:\n            base = os.path.basename(file_in).rsplit(\".\",2)[0]\n            out.write(\"id,filepath,processed\\\\n\")\n            with gzip.open(file_in,'rt') as vcf:\n                for line in vcf:\n                    if line.startswith(\"##bcftools_norm\"):\n                        out.write(base + \",\" + os.path.abspath(file_in) + \",yes\\\\n\")\n                        break\n                    elif not line.startswith(\"#\"):\n                        out.write(base + \",\" + os.path.abspath(file_in) + \",no\\\\n\")\n                        break\n    else:\n        print(\"Please compress %s using bgzip\" %file_in)\n    CODE\n    \"\"\"",
        "nb_lignes_script": 23,
        "language_script": "bash",
        "tools": [
            "tximport",
            "BASE",
            "BreakSeq",
            "tcode"
        ],
        "tools_url": [
            "https://bio.tools/tximport",
            "https://bio.tools/base-antibody",
            "https://bio.tools/breakseq",
            "https://bio.tools/tcode"
        ],
        "tools_dico": [
            {
                "name": "tximport",
                "uri": "https://bio.tools/tximport",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "Gene transcripts"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "mRNA features"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3680",
                                    "term": "RNA-Seq analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2497",
                                    "term": "Pathway or network analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "An R/Bioconductor package that imports transcript-level abundance, estimated counts and transcript lengths, and summarizes into matrices for use with downstream gene-level analysis packages.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/tximport.html"
            },
            {
                "name": "BASE",
                "uri": "https://bio.tools/base-antibody",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0804",
                            "term": "Immunology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3304",
                            "term": "Neurobiology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0632",
                            "term": "Probes and primers"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "An easy-to-use software for complete data analysis in single cell immunoglobulin cloning.",
                "homepage": "https://github.com/automatedSequencing/BASE"
            },
            {
                "name": "BreakSeq",
                "uri": "https://bio.tools/breakseq",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "Structural variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "Genomic structural variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "DNA structural variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Database of known human breakpoint junctions and software to search short reads against them.",
                "homepage": "http://sv.gersteinlab.org/breakseq/"
            },
            {
                "name": "tcode",
                "uri": "https://bio.tools/tcode",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0623",
                            "term": "Gene and protein families"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0623",
                            "term": "Genes, gene family or system"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "Coding region prediction"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "ORF prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "ORF finding"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0914",
                                "term": "Codon usage data"
                            },
                            {
                                "uri": "http://edamontology.org/data_2887",
                                "term": "Nucleic acid sequence record"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2160",
                                "term": "Fickett testcode plot"
                            },
                            {
                                "uri": "http://edamontology.org/data_1276",
                                "term": "Nucleic acid features"
                            }
                        ]
                    }
                ],
                "description": "Identify protein-coding regions using Fickett TESTCODE statistic.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/tcode.html"
            }
        ],
        "inputs": [
            "vcf"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__raredisease",
        "directive": [
            "tag \"check_vcf\"",
            "conda (params.enable_conda ? \"conda-forge::python=3.9.5\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/python:3.9--1' : 'quay.io/biocontainers/python:3.9--1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "MULTIQC": {
        "name_process": "MULTIQC",
        "string_process": "process MULTIQC {\n    label 'process_medium'\n\n    conda (params.enable_conda ? 'bioconda::multiqc=1.12' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/multiqc:1.12--pyhdfd78af_0' :\n        'quay.io/biocontainers/multiqc:1.12--pyhdfd78af_0' }\"\n\n    input:\n    path multiqc_files\n\n    output:\n    path \"*multiqc_report.html\", emit: report\n    path \"*_data\"              , emit: data\n    path \"*_plots\"             , optional:true, emit: plots\n    path \"versions.yml\"        , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    multiqc -f $args .\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        multiqc: \\$( multiqc --version | sed -e \"s/multiqc, version //g\" )\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    \"\"\"\n    touch multiqc_data\n    touch multiqc_plots\n    touch multiqc_report.html\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        multiqc: \\$( multiqc --version | sed -e \"s/multiqc, version //g\" )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 41,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    multiqc -f $args .\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        multiqc: \\$( multiqc --version | sed -e \"s/multiqc, version //g\" )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "MultiQC"
        ],
        "tools_url": [
            "https://bio.tools/multiqc"
        ],
        "tools_dico": [
            {
                "name": "MultiQC",
                "uri": "https://bio.tools/multiqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "MultiQC aggregates results from multiple bioinformatics analyses across many samples into a single report. It searches a given directory for analysis logs and compiles a HTML report. It's a general use tool, perfect for summarising the output from numerous bioinformatics tools.",
                "homepage": "http://multiqc.info/"
            }
        ],
        "inputs": [
            "multiqc_files"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__raredisease",
        "directive": [
            "label 'process_medium'",
            "conda (params.enable_conda ? 'bioconda::multiqc=1.12' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/multiqc:1.12--pyhdfd78af_0' : 'quay.io/biocontainers/multiqc:1.12--pyhdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    \"\"\"\n    touch multiqc_data\n    touch multiqc_plots\n    touch multiqc_report.html\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        multiqc: \\$( multiqc --version | sed -e \"s/multiqc, version //g\" )\n    END_VERSIONS\n    \"\"\""
    },
    "SAMPLESHEET_CHECK": {
        "name_process": "SAMPLESHEET_CHECK",
        "string_process": "process SAMPLESHEET_CHECK {\n    tag \"$samplesheet\"\n\n    conda (params.enable_conda ? \"conda-forge::python=3.9.5\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/python:3.9--1' :\n        'quay.io/biocontainers/python:3.9--1' }\"\n\n    input:\n    path samplesheet\n\n    output:\n    path '*.csv'       , emit: csv\n    path \"versions.yml\", emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:                                                                         \n    \"\"\"\n    check_samplesheet.py \\\\\n        $samplesheet \\\\\n        samplesheet.valid.csv\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        python: \\$(python --version | sed 's/Python //g')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "    \"\"\"\n    check_samplesheet.py \\\\\n        $samplesheet \\\\\n        samplesheet.valid.csv\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        python: \\$(python --version | sed 's/Python //g')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "samplesheet"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__raredisease",
        "directive": [
            "tag \"$samplesheet\"",
            "conda (params.enable_conda ? \"conda-forge::python=3.9.5\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/python:3.9--1' : 'quay.io/biocontainers/python:3.9--1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "SAMTOOLS_STATS": {
        "name_process": "SAMTOOLS_STATS",
        "string_process": "process SAMTOOLS_STATS {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::samtools=1.15.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/samtools:1.15.1--h1170115_0' :\n        'quay.io/biocontainers/samtools:1.15.1--h1170115_0' }\"\n\n    input:\n    tuple val(meta), path(input), path(input_index)\n    path fasta\n\n    output:\n    tuple val(meta), path(\"*.stats\"), emit: stats\n    path  \"versions.yml\"            , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def reference = fasta ? \"--reference ${fasta}\" : \"\"\n    \"\"\"\n    samtools \\\\\n        stats \\\\\n        --threads ${task.cpus-1} \\\\\n        ${reference} \\\\\n        ${input} \\\\\n        > ${input}.stats\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${input}.stats\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 46,
        "string_script": "    def args = task.ext.args ?: ''\n    def reference = fasta ? \"--reference ${fasta}\" : \"\"\n    \"\"\"\n    samtools \\\\\n        stats \\\\\n        --threads ${task.cpus-1} \\\\\n        ${reference} \\\\\n        ${input} \\\\\n        > ${input}.stats\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "SAMtools",
            "GOstats"
        ],
        "tools_url": [
            "https://bio.tools/samtools",
            "https://bio.tools/gostats"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "GOstats",
                "uri": "https://bio.tools/gostats",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0089",
                            "term": "Ontology and terminology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2436",
                                    "term": "Gene-set enrichment analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2436",
                                    "term": "GSEA"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2436",
                                    "term": "Functional enrichment analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2436",
                                    "term": "Gene-set over-represenation analysis"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2603",
                                "term": "Expression data"
                            },
                            {
                                "uri": "http://edamontology.org/data_0582",
                                "term": "Ontology"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2884",
                                "term": "Plot"
                            },
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            },
                            {
                                "uri": "http://edamontology.org/data_1772",
                                "term": "Score"
                            }
                        ]
                    }
                ],
                "description": "A set of tools for interacting with GO and microarray data. A variety of basic manipulation tools for graphs, hypothesis testing and other simple calculations.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/GOstats.html"
            }
        ],
        "inputs": [
            "meta",
            "input",
            "input_index",
            "fasta"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__raredisease",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::samtools=1.15.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/samtools:1.15.1--h1170115_0' : 'quay.io/biocontainers/samtools:1.15.1--h1170115_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${input}.stats\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\""
    },
    "PICARD_MARKDUPLICATES": {
        "name_process": "PICARD_MARKDUPLICATES",
        "string_process": "process PICARD_MARKDUPLICATES {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::picard=2.26.10\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/picard:2.26.10--hdfd78af_0' :\n        'quay.io/biocontainers/picard:2.26.10--hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(bam)\n\n    output:\n    tuple val(meta), path(\"*.bam\")        , emit: bam\n    tuple val(meta), path(\"*.bai\")        , optional:true, emit: bai\n    tuple val(meta), path(\"*.metrics.txt\"), emit: metrics\n    path  \"versions.yml\"                  , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[Picard MarkDuplicates] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    picard \\\\\n        -Xmx${avail_mem}g \\\\\n        MarkDuplicates \\\\\n        $args \\\\\n        I=$bam \\\\\n        O=${prefix}.bam \\\\\n        M=${prefix}.MarkDuplicates.metrics.txt\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        picard: \\$(echo \\$(picard MarkDuplicates --version 2>&1) | grep -o 'Version:.*' | cut -f2- -d:)\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.bam\n    touch ${prefix}.bam.bai\n    touch ${prefix}.MarkDuplicates.metrics.txt\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        picard: \\$(echo \\$(picard MarkDuplicates --version 2>&1) | grep -o 'Version:.*' | cut -f2- -d:)\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 56,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[Picard MarkDuplicates] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    picard \\\\\n        -Xmx${avail_mem}g \\\\\n        MarkDuplicates \\\\\n        $args \\\\\n        I=$bam \\\\\n        O=${prefix}.bam \\\\\n        M=${prefix}.MarkDuplicates.metrics.txt\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        picard: \\$(echo \\$(picard MarkDuplicates --version 2>&1) | grep -o 'Version:.*' | cut -f2- -d:)\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 21,
        "language_script": "bash",
        "tools": [
            "Picard",
            "MarkDuplicates (IP)"
        ],
        "tools_url": [
            "https://bio.tools/picard_tools",
            "https://bio.tools/markduplicates_ip"
        ],
        "tools_dico": [
            {
                "name": "Picard",
                "uri": "https://bio.tools/picard_tools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Sequence variation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Variant analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation annotation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A set of command line tools for manipulating high-throughput sequencing (HTS) data in formats such as SAM/BAM/CRAM and VCF. Available as a standalone program or within the GATK4 program.",
                "homepage": "https://github.com/broadinstitute/picard"
            },
            {
                "name": "MarkDuplicates (IP)",
                "uri": "https://bio.tools/markduplicates_ip",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0253",
                                    "term": "Sequence feature detection"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0253",
                                    "term": "Sequence feature recognition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0253",
                                    "term": "Sequence feature prediction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            },
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "Marks all duplicate reads in a provided SAM or BAM file and either removes them or flags them.",
                "homepage": "https://galaxy.pasteur.fr/tool_runner?tool_id=toolshed.pasteur.fr/repos/fmareuil/picard_pasteur_wrapper/rgPicardMarkDups/1.56.0"
            }
        ],
        "inputs": [
            "meta",
            "bam"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__raredisease",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::picard=2.26.10\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/picard:2.26.10--hdfd78af_0' : 'quay.io/biocontainers/picard:2.26.10--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.bam\n    touch ${prefix}.bam.bai\n    touch ${prefix}.MarkDuplicates.metrics.txt\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        picard: \\$(echo \\$(picard MarkDuplicates --version 2>&1) | grep -o 'Version:.*' | cut -f2- -d:)\n    END_VERSIONS\n    \"\"\""
    },
    "GATK4_INTERVALLISTTOOLS": {
        "name_process": "GATK4_INTERVALLISTTOOLS",
        "string_process": "process GATK4_INTERVALLISTTOOLS {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::gatk4=4.2.5.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/gatk4:4.2.5.0--hdfd78af_0' :\n        'quay.io/biocontainers/gatk4:4.2.5.0--hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(intervals)\n\n    output:\n    tuple val(meta), path(\"*_split/*/*.interval_list\"), emit: interval_list\n    path \"versions.yml\"                               , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[GATK IntervalListTools] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n\n    mkdir ${prefix}_split\n\n    gatk --java-options \"-Xmx${avail_mem}g\" IntervalListTools \\\\\n        --INPUT $intervals \\\\\n        --OUTPUT ${prefix}_split \\\\\n        --TMP_DIR . \\\\\n        $args\n\n    python3 <<CODE\n    import glob, os\n    # The following python code snippet rename the output files into different name to avoid overwriting or name conflict\n    intervals = sorted(glob.glob(\"*_split/*/*.interval_list\"))\n    for i, interval in enumerate(intervals):\n        (directory, filename) = os.path.split(interval)\n        newName = os.path.join(directory, str(i + 1) + filename)\n        os.rename(interval, newName)\n    CODE\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    mkdir -p ${prefix}_split/temp_0001_of_6\n    mkdir -p ${prefix}_split/temp_0002_of_6\n    mkdir -p ${prefix}_split/temp_0003_of_6\n    mkdir -p ${prefix}_split/temp_0004_of_6\n    touch ${prefix}_split/temp_0001_of_6/1scattered.interval_list\n    touch ${prefix}_split/temp_0002_of_6/2scattered.interval_list\n    touch ${prefix}_split/temp_0003_of_6/3scattered.interval_list\n    touch ${prefix}_split/temp_0004_of_6/4scattered.interval_list\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 71,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[GATK IntervalListTools] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n\n    mkdir ${prefix}_split\n\n    gatk --java-options \"-Xmx${avail_mem}g\" IntervalListTools \\\\\n        --INPUT $intervals \\\\\n        --OUTPUT ${prefix}_split \\\\\n        --TMP_DIR . \\\\\n        $args\n\n    python3 <<CODE\n    import glob, os\n    # The following python code snippet rename the output files into different name to avoid overwriting or name conflict\n    intervals = sorted(glob.glob(\"*_split/*/*.interval_list\"))\n    for i, interval in enumerate(intervals):\n        (directory, filename) = os.path.split(interval)\n        newName = os.path.join(directory, str(i + 1) + filename)\n        os.rename(interval, newName)\n    CODE\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 33,
        "language_script": "bash",
        "tools": [
            "GATK",
            "tximport",
            "tcode"
        ],
        "tools_url": [
            "https://bio.tools/gatk",
            "https://bio.tools/tximport",
            "https://bio.tools/tcode"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            },
            {
                "name": "tximport",
                "uri": "https://bio.tools/tximport",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "Gene transcripts"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "mRNA features"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3680",
                                    "term": "RNA-Seq analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2497",
                                    "term": "Pathway or network analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "An R/Bioconductor package that imports transcript-level abundance, estimated counts and transcript lengths, and summarizes into matrices for use with downstream gene-level analysis packages.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/tximport.html"
            },
            {
                "name": "tcode",
                "uri": "https://bio.tools/tcode",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0623",
                            "term": "Gene and protein families"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0623",
                            "term": "Genes, gene family or system"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "Coding region prediction"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "ORF prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "ORF finding"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0914",
                                "term": "Codon usage data"
                            },
                            {
                                "uri": "http://edamontology.org/data_2887",
                                "term": "Nucleic acid sequence record"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2160",
                                "term": "Fickett testcode plot"
                            },
                            {
                                "uri": "http://edamontology.org/data_1276",
                                "term": "Nucleic acid features"
                            }
                        ]
                    }
                ],
                "description": "Identify protein-coding regions using Fickett TESTCODE statistic.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/tcode.html"
            }
        ],
        "inputs": [
            "meta",
            "intervals"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__raredisease",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::gatk4=4.2.5.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/gatk4:4.2.5.0--hdfd78af_0' : 'quay.io/biocontainers/gatk4:4.2.5.0--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    mkdir -p ${prefix}_split/temp_0001_of_6\n    mkdir -p ${prefix}_split/temp_0002_of_6\n    mkdir -p ${prefix}_split/temp_0003_of_6\n    mkdir -p ${prefix}_split/temp_0004_of_6\n    touch ${prefix}_split/temp_0001_of_6/1scattered.interval_list\n    touch ${prefix}_split/temp_0002_of_6/2scattered.interval_list\n    touch ${prefix}_split/temp_0003_of_6/3scattered.interval_list\n    touch ${prefix}_split/temp_0004_of_6/4scattered.interval_list\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\""
    },
    "CUSTOM_DUMPSOFTWAREVERSIONS": {
        "name_process": "CUSTOM_DUMPSOFTWAREVERSIONS",
        "string_process": "process CUSTOM_DUMPSOFTWAREVERSIONS {\n    label 'process_low'\n\n                                                                                                  \n    conda (params.enable_conda ? \"bioconda::multiqc=1.11\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/multiqc:1.11--pyhdfd78af_0' :\n        'quay.io/biocontainers/multiqc:1.11--pyhdfd78af_0' }\"\n\n    input:\n    path versions\n\n    output:\n    path \"software_versions.yml\"    , emit: yml\n    path \"software_versions_mqc.yml\", emit: mqc_yml\n    path \"versions.yml\"             , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    template 'dumpsoftwareversions.py'\n}",
        "nb_lignes_process": 22,
        "string_script": "    def args = task.ext.args ?: ''\n    template 'dumpsoftwareversions.py'",
        "nb_lignes_script": 1,
        "language_script": "bash",
        "tools": [
            "docxtemplate"
        ],
        "tools_url": [
            "https://bio.tools/docxtemplate"
        ],
        "tools_dico": [
            {
                "name": "docxtemplate",
                "uri": "https://bio.tools/docxtemplate",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3314",
                            "term": "Chemistry"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0176",
                            "term": "Molecular dynamics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3489",
                            "term": "Database management"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3489",
                            "term": "Database administration"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0249",
                                    "term": "Protein geometry calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0322",
                                    "term": "Molecular model refinement"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Deposition"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Data submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Database deposition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Database submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Data deposition"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "> VERY_LOW CONFIDENCE! | > CORRECT NAME OF TOOL COULD ALSO BE 'Phenix', 'restraints', 'Amber', 'refinement' | Improved chemistry restraints for crystallographic refinement by integrating the Amber force field into Phenix | Word templates and tools for Windows | The IUCr Word templates utilize the content management features and document styles of Word to format your manuscript and to store essential details for submission of your manuscript",
                "homepage": "http://journals.iucr.org/services/docxtemplate/"
            }
        ],
        "inputs": [
            "versions"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__raredisease",
        "directive": [
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::multiqc=1.11\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/multiqc:1.11--pyhdfd78af_0' : 'quay.io/biocontainers/multiqc:1.11--pyhdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "MOSDEPTH": {
        "name_process": "MOSDEPTH",
        "string_process": "process MOSDEPTH {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? 'bioconda::mosdepth=0.3.3' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mosdepth:0.3.3--hdfd78af_1' :\n        'quay.io/biocontainers/mosdepth:0.3.3--hdfd78af_1'}\"\n\n    input:\n    tuple val(meta), path(bam), path(bai)\n    path  bed\n    val   window_size\n\n    output:\n    tuple val(meta), path('*.global.dist.txt')    , emit: global_txt\n    tuple val(meta), path('*.region.dist.txt')    , emit: regions_txt , optional:true\n    tuple val(meta), path('*.summary.txt')        , emit: summary_txt\n    tuple val(meta), path('*.per-base.d4')        , emit: d4          , optional:true\n    tuple val(meta), path('*.per-base.bed.gz')    , emit: per_base_bed, optional:true\n    tuple val(meta), path('*.per-base.bed.gz.csi'), emit: per_base_csi, optional:true\n    tuple val(meta), path('*.regions.bed.gz')     , emit: regions_bed , optional:true\n    tuple val(meta), path('*.regions.bed.gz.csi') , emit: regions_csi , optional:true\n    path  \"versions.yml\"                          , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (window_size) {\n        interval = \"--by ${window_size}\"\n    } else if ( bed ) {\n        interval = \"--by ${bed}\"\n    } else {\n        interval = \"\"\n    }\n    \"\"\"\n    mosdepth \\\\\n        $interval \\\\\n        $args \\\\\n        $prefix \\\\\n        $bam\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        mosdepth: \\$(mosdepth --version 2>&1 | sed 's/^.*mosdepth //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.global.dist.txt\n    touch ${prefix}.region.dist.txt\n    touch ${prefix}.summary.txt\n    touch ${prefix}.per-base.d4\n    touch ${prefix}.per-base.bed.gz\n    touch ${prefix}.per-base.bed.gz.csi\n    touch ${prefix}.regions.bed.gz\n    touch ${prefix}.regions.bed.gz.csi\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        mosdepth: \\$(mosdepth --version 2>&1 | sed 's/^.*mosdepth //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 66,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (window_size) {\n        interval = \"--by ${window_size}\"\n    } else if ( bed ) {\n        interval = \"--by ${bed}\"\n    } else {\n        interval = \"\"\n    }\n    \"\"\"\n    mosdepth \\\\\n        $interval \\\\\n        $args \\\\\n        $prefix \\\\\n        $bam\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        mosdepth: \\$(mosdepth --version 2>&1 | sed 's/^.*mosdepth //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [
            "mosdepth"
        ],
        "tools_url": [
            "https://bio.tools/mosdepth"
        ],
        "tools_dico": [
            {
                "name": "mosdepth",
                "uri": "https://bio.tools/mosdepth",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2269",
                            "term": "Statistics and probability"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2478",
                                    "term": "Nucleic acid sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3230",
                                    "term": "Read depth analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2478",
                                    "term": "Sequence analysis (nucleic acid)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Fast BAM/CRAM depth calculation for WGS, exome, or targeted sequencing.",
                "homepage": "https://github.com/brentp/mosdepth"
            }
        ],
        "inputs": [
            "meta",
            "bam",
            "bai",
            "bed",
            "window_size"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__raredisease",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? 'bioconda::mosdepth=0.3.3' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mosdepth:0.3.3--hdfd78af_1' : 'quay.io/biocontainers/mosdepth:0.3.3--hdfd78af_1'}\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.global.dist.txt\n    touch ${prefix}.region.dist.txt\n    touch ${prefix}.summary.txt\n    touch ${prefix}.per-base.d4\n    touch ${prefix}.per-base.bed.gz\n    touch ${prefix}.per-base.bed.gz.csi\n    touch ${prefix}.regions.bed.gz\n    touch ${prefix}.regions.bed.gz.csi\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        mosdepth: \\$(mosdepth --version 2>&1 | sed 's/^.*mosdepth //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\""
    },
    "SAMTOOLS_FAIDX": {
        "name_process": "SAMTOOLS_FAIDX",
        "string_process": "process SAMTOOLS_FAIDX {\n    tag \"$fasta\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::samtools=1.15.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/samtools:1.15.1--h1170115_0' :\n        'quay.io/biocontainers/samtools:1.15.1--h1170115_0' }\"\n\n    input:\n    tuple val(meta), path(fasta)\n\n    output:\n    tuple val(meta), path (\"*.fai\"), emit: fai\n    path \"versions.yml\"            , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    samtools \\\\\n        faidx \\\\\n        $fasta\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    \"\"\"\n    touch ${fasta}.fai\n    cat <<-END_VERSIONS > versions.yml\n\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 40,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    samtools \\\\\n        faidx \\\\\n        $fasta\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [
            "SAMtools",
            "pyfaidx"
        ],
        "tools_url": [
            "https://bio.tools/samtools",
            "https://bio.tools/pyfaidx"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "pyfaidx",
                "uri": "https://bio.tools/pyfaidx",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "This python module implements pure Python classes for indexing, retrieval, and in-place modification of FASTA files using a samtools compatible index.",
                "homepage": "https://pythonhosted.org/pyfaidx/"
            }
        ],
        "inputs": [
            "meta",
            "fasta"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__raredisease",
        "directive": [
            "tag \"$fasta\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::samtools=1.15.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/samtools:1.15.1--h1170115_0' : 'quay.io/biocontainers/samtools:1.15.1--h1170115_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    \"\"\"\n    touch ${fasta}.fai\n    cat <<-END_VERSIONS > versions.yml\n\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\""
    },
    "BWAMEM2_MEM": {
        "name_process": "BWAMEM2_MEM",
        "string_process": "process BWAMEM2_MEM {\n    tag \"$meta.id\"\n    label 'process_high'\n\n    conda (params.enable_conda ? \"bioconda::bwa-mem2=2.2.1 bioconda::samtools=1.15.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mulled-v2-e5d375990341c5aef3c9aff74f96f66f65375ef6:38aed4501da19db366dc7c8d52d31d94e760cfaf-0' :\n        'quay.io/biocontainers/mulled-v2-e5d375990341c5aef3c9aff74f96f66f65375ef6:38aed4501da19db366dc7c8d52d31d94e760cfaf-0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n    path  index\n    val   sort_bam\n\n    output:\n    tuple val(meta), path(\"*.bam\"), emit: bam\n    path  \"versions.yml\"          , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def samtools_command = sort_bam ? 'sort' : 'view'\n    \"\"\"\n    INDEX=`find -L ./ -name \"*.amb\" | sed 's/.amb//'`\n\n    bwa-mem2 \\\\\n        mem \\\\\n        $args \\\\\n        -t $task.cpus \\\\\n        \\$INDEX \\\\\n        $reads \\\\\n        | samtools $samtools_command $args2 -@ $task.cpus -o ${prefix}.bam -\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bwamem2: \\$(echo \\$(bwa-mem2 version 2>&1) | sed 's/.* //')\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.bam\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bwamem2: \\$(echo \\$(bwa-mem2 version 2>&1) | sed 's/.* //')\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 53,
        "string_script": "    def args = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def samtools_command = sort_bam ? 'sort' : 'view'\n    \"\"\"\n    INDEX=`find -L ./ -name \"*.amb\" | sed 's/.amb//'`\n\n    bwa-mem2 \\\\\n        mem \\\\\n        $args \\\\\n        -t $task.cpus \\\\\n        \\$INDEX \\\\\n        $reads \\\\\n        | samtools $samtools_command $args2 -@ $task.cpus -o ${prefix}.bam -\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bwamem2: \\$(echo \\$(bwa-mem2 version 2>&1) | sed 's/.* //')\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 20,
        "language_script": "bash",
        "tools": [
            "MEMo",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/memo_cancer",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "MEMo",
                "uri": "https://bio.tools/memo_cancer",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0602",
                            "term": "Molecular interactions, pathways and networks"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2259",
                            "term": "Systems biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2640",
                            "term": "Oncology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_2640",
                            "term": "Cancer biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2640",
                            "term": "https://en.wikipedia.org/wiki/Oncology"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3439",
                                    "term": "Pathway or network prediction"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Method for identifying mutually exclusive driver networks in cancer. The method identifies networks defined by three properties: first, member genes are recurrently altered via somatic mutation or copy number changes; second, member genes are likely to participate in the same biological pathway or process, as determined from prior pathway and network knowledge; and third, genomic events within the network exhibit a statistically significant level of mutual exclusivity.",
                "homepage": "http://cbio.mskcc.org/tools/memo/"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "index",
            "sort_bam"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__raredisease",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "conda (params.enable_conda ? \"bioconda::bwa-mem2=2.2.1 bioconda::samtools=1.15.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mulled-v2-e5d375990341c5aef3c9aff74f96f66f65375ef6:38aed4501da19db366dc7c8d52d31d94e760cfaf-0' : 'quay.io/biocontainers/mulled-v2-e5d375990341c5aef3c9aff74f96f66f65375ef6:38aed4501da19db366dc7c8d52d31d94e760cfaf-0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.bam\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bwamem2: \\$(echo \\$(bwa-mem2 version 2>&1) | sed 's/.* //')\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\""
    },
    "MANTA_GERMLINE": {
        "name_process": "MANTA_GERMLINE",
        "string_process": "process MANTA_GERMLINE {\n    tag \"$meta.id\"\n    label 'process_high'\n\n    conda (params.enable_conda ? \"bioconda::manta=1.6.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/manta:1.6.0--h9ee0642_1' :\n        'quay.io/biocontainers/manta:1.6.0--h9ee0642_1' }\"\n\n    input:\n                                                                                                                                             \n    tuple val(meta), path(input), path(index), path(target_bed), path(target_bed_tbi)\n    path fasta\n    path fasta_fai\n\n    output:\n    tuple val(meta), path(\"*candidate_small_indels.vcf.gz\")    , emit: candidate_small_indels_vcf\n    tuple val(meta), path(\"*candidate_small_indels.vcf.gz.tbi\"), emit: candidate_small_indels_vcf_tbi\n    tuple val(meta), path(\"*candidate_sv.vcf.gz\")              , emit: candidate_sv_vcf\n    tuple val(meta), path(\"*candidate_sv.vcf.gz.tbi\")          , emit: candidate_sv_vcf_tbi\n    tuple val(meta), path(\"*diploid_sv.vcf.gz\")                , emit: diploid_sv_vcf\n    tuple val(meta), path(\"*diploid_sv.vcf.gz.tbi\")            , emit: diploid_sv_vcf_tbi\n    path \"versions.yml\"                                        , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def input_files = input.collect{\"--bam ${it}\"}.join(' ')\n    def options_manta = target_bed ? \"--callRegions $target_bed\" : \"\"\n    \"\"\"\n    configManta.py \\\n        ${input_files} \\\n        --reference $fasta \\\n        --runDir manta \\\n        $options_manta \\\n        $args\n\n    python manta/runWorkflow.py -m local -j $task.cpus\n\n    mv manta/results/variants/candidateSmallIndels.vcf.gz \\\n        ${prefix}.candidate_small_indels.vcf.gz\n    mv manta/results/variants/candidateSmallIndels.vcf.gz.tbi \\\n        ${prefix}.candidate_small_indels.vcf.gz.tbi\n    mv manta/results/variants/candidateSV.vcf.gz \\\n        ${prefix}.candidate_sv.vcf.gz\n    mv manta/results/variants/candidateSV.vcf.gz.tbi \\\n        ${prefix}.candidate_sv.vcf.gz.tbi\n    mv manta/results/variants/diploidSV.vcf.gz \\\n        ${prefix}.diploid_sv.vcf.gz\n    mv manta/results/variants/diploidSV.vcf.gz.tbi \\\n        ${prefix}.diploid_sv.vcf.gz.tbi\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        manta: \\$( configManta.py --version )\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.candidate_small_indels.vcf.gz\n    touch ${prefix}.candidate_small_indels.vcf.gz.tbi\n    touch ${prefix}.candidate_sv.vcf.gz\n    touch ${prefix}.candidate_sv.vcf.gz.tbi\n    touch ${prefix}.diploid_sv.vcf.gz\n    touch ${prefix}.diploid_sv.vcf.gz.tbi\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        manta: \\$( configManta.py --version )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 75,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def input_files = input.collect{\"--bam ${it}\"}.join(' ')\n    def options_manta = target_bed ? \"--callRegions $target_bed\" : \"\"\n    \"\"\"\n    configManta.py \\\n        ${input_files} \\\n        --reference $fasta \\\n        --runDir manta \\\n        $options_manta \\\n        $args\n\n    python manta/runWorkflow.py -m local -j $task.cpus\n\n    mv manta/results/variants/candidateSmallIndels.vcf.gz \\\n        ${prefix}.candidate_small_indels.vcf.gz\n    mv manta/results/variants/candidateSmallIndels.vcf.gz.tbi \\\n        ${prefix}.candidate_small_indels.vcf.gz.tbi\n    mv manta/results/variants/candidateSV.vcf.gz \\\n        ${prefix}.candidate_sv.vcf.gz\n    mv manta/results/variants/candidateSV.vcf.gz.tbi \\\n        ${prefix}.candidate_sv.vcf.gz.tbi\n    mv manta/results/variants/diploidSV.vcf.gz \\\n        ${prefix}.diploid_sv.vcf.gz\n    mv manta/results/variants/diploidSV.vcf.gz.tbi \\\n        ${prefix}.diploid_sv.vcf.gz.tbi\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        manta: \\$( configManta.py --version )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 31,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "input",
            "index",
            "target_bed",
            "target_bed_tbi",
            "fasta",
            "fasta_fai"
        ],
        "nb_inputs": 7,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__raredisease",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "conda (params.enable_conda ? \"bioconda::manta=1.6.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/manta:1.6.0--h9ee0642_1' : 'quay.io/biocontainers/manta:1.6.0--h9ee0642_1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.candidate_small_indels.vcf.gz\n    touch ${prefix}.candidate_small_indels.vcf.gz.tbi\n    touch ${prefix}.candidate_sv.vcf.gz\n    touch ${prefix}.candidate_sv.vcf.gz.tbi\n    touch ${prefix}.diploid_sv.vcf.gz\n    touch ${prefix}.diploid_sv.vcf.gz.tbi\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        manta: \\$( configManta.py --version )\n    END_VERSIONS\n    \"\"\""
    },
    "UNTAR": {
        "name_process": "UNTAR",
        "string_process": "process UNTAR {\n    tag \"$archive\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/ubuntu:20.04' :\n        'ubuntu:20.04' }\"\n\n    input:\n    tuple val(meta), path(archive)\n\n    output:\n    tuple val(meta), path(\"$untar\"), emit: untar\n    path \"versions.yml\"            , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args  = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    untar     = archive.toString() - '.tar.gz'\n    \"\"\"\n    tar \\\\\n        -xzvf \\\\\n        $args \\\\\n        $archive \\\\\n        $args2 \\\\\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        untar: \\$(echo \\$(tar --version 2>&1) | sed 's/^.*(GNU tar) //; s/ Copyright.*\\$//')\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    untar     = archive.toString() - '.tar.gz'\n    \"\"\"\n    touch $untar\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        untar: \\$(echo \\$(tar --version 2>&1) | sed 's/^.*(GNU tar) //; s/ Copyright.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 45,
        "string_script": "    def args  = task.ext.args ?: ''\n    def args2 = task.ext.args2 ?: ''\n    untar     = archive.toString() - '.tar.gz'\n    \"\"\"\n    tar \\\\\n        -xzvf \\\\\n        $args \\\\\n        $archive \\\\\n        $args2 \\\\\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        untar: \\$(echo \\$(tar --version 2>&1) | sed 's/^.*(GNU tar) //; s/ Copyright.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "archive"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__raredisease",
        "directive": [
            "tag \"$archive\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/ubuntu:20.04' : 'ubuntu:20.04' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    untar     = archive.toString() - '.tar.gz'\n    \"\"\"\n    touch $untar\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        untar: \\$(echo \\$(tar --version 2>&1) | sed 's/^.*(GNU tar) //; s/ Copyright.*\\$//')\n    END_VERSIONS\n    \"\"\""
    },
    "SVDB_MERGE": {
        "name_process": "SVDB_MERGE",
        "string_process": "process SVDB_MERGE {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::svdb=2.6.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/svdb:2.6.1--py39h5371cbf_0':\n        'quay.io/biocontainers/svdb:2.6.1--py39h5371cbf_0' }\"\n\n    input:\n    tuple val(meta), path(vcfs)\n    val (priority)\n\n    output:\n    tuple val(meta), path(\"*_sv_merge.vcf\"), emit: vcf\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args   = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def input  = \"${vcfs.join(\" \")}\"\n    def prio   = \"\"\n    if(priority) {\n        prio = \"--priority ${priority.join(',')}\"\n        input = \"\"\n        for (int index = 0; index < vcfs.size(); index++) {\n            input += \" ${vcfs[index]}:${priority[index]}\"\n        }\n    }\n    \"\"\"\n    svdb \\\\\n        --merge \\\\\n        $args \\\\\n        $prio \\\\\n        --vcf $input \\\\\n        > ${prefix}_sv_merge.vcf\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        svdb: \\$( echo \\$(svdb) | head -1 | sed 's/usage: SVDB-\\\\([0-9]\\\\.[0-9]\\\\.[0-9]\\\\).*/\\\\1/' )\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}_sv_merge.vcf\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        svdb: \\$( echo \\$(svdb) | head -1 | sed 's/usage: SVDB-\\\\([0-9]\\\\.[0-9]\\\\.[0-9]\\\\).*/\\\\1/' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 55,
        "string_script": "    def args   = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def input  = \"${vcfs.join(\" \")}\"\n    def prio   = \"\"\n    if(priority) {\n        prio = \"--priority ${priority.join(',')}\"\n        input = \"\"\n        for (int index = 0; index < vcfs.size(); index++) {\n            input += \" ${vcfs[index]}:${priority[index]}\"\n        }\n    }\n    \"\"\"\n    svdb \\\\\n        --merge \\\\\n        $args \\\\\n        $prio \\\\\n        --vcf $input \\\\\n        > ${prefix}_sv_merge.vcf\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        svdb: \\$( echo \\$(svdb) | head -1 | sed 's/usage: SVDB-\\\\([0-9]\\\\.[0-9]\\\\.[0-9]\\\\).*/\\\\1/' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 23,
        "language_script": "bash",
        "tools": [
            "PriorCD",
            "wossinput",
            "CINdex"
        ],
        "tools_url": [
            "https://bio.tools/PriorCD",
            "https://bio.tools/wossinput",
            "https://bio.tools/cindex"
        ],
        "tools_dico": [
            {
                "name": "PriorCD",
                "uri": "https://bio.tools/PriorCD",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3375",
                            "term": "Drug metabolism"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3336",
                            "term": "Drug discovery"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3379",
                            "term": "Preclinical and clinical studies"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3223",
                                    "term": "Differential gene expression profiling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2436",
                                    "term": "Gene-set enrichment analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3223",
                                    "term": "Differential gene analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3223",
                                    "term": "Differentially expressed gene identification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3223",
                                    "term": "Differential expression analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3223",
                                    "term": "Differential gene expression analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2436",
                                    "term": "GSEA"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2436",
                                    "term": "Functional enrichment analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2436",
                                    "term": "Gene-set over-represenation analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Prioritization of candidate cancer drugs based on a drug functional similarity network constructed by integrating pathway activities and drug activities | Prioritizing Cancer Drugs for Interested Cancer | Prioritize candidate cancer drugs for drug repositioning based on the random walk with restart algorithm in a drug-drug functional similarity network. 1) We firstly constructed a drug-drug functional similarity network by integrating pathway activity and drug activity derived from the NCI-60 cancer cell lines. 2) Secondly, we calculated drug repurposing score according to a set of approved therapeutic drugs of interested cancer based on the random walk with restart algorithm in the drug-drug functional similarity network. 3) Finally, the permutation test was used to calculate the statistical significance level for the drug repurposing score",
                "homepage": "https://cran.r-project.org/web/packages/PriorCD"
            },
            {
                "name": "wossinput",
                "uri": "https://bio.tools/wossinput",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0219",
                            "term": "Data submission, annotation and curation"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0958",
                                "term": "Tool metadata"
                            }
                        ]
                    }
                ],
                "description": "Find programs by EDAM input data.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/wossinput.html"
            },
            {
                "name": "CINdex",
                "uri": "https://bio.tools/cindex",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3233",
                                    "term": "Copy number estimation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3233",
                                    "term": "Transcript copy number estimation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The package addresses important area of high-throughput genomic analysis. It allows the automated processing and analysis of the experimental DNA copy number data generated by Affymetrix SNP 6.0 arrays or similar. It calculates the chromosome instability index to quantitatively characterize genome-wide DNA copy number alterations. This package calculates not only overall genomic instability, but also instability in terms of copy number gains and losses at the chromosome and cytoband level.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/CINdex.html"
            }
        ],
        "inputs": [
            "meta",
            "vcfs",
            "priority"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__raredisease",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::svdb=2.6.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/svdb:2.6.1--py39h5371cbf_0': 'quay.io/biocontainers/svdb:2.6.1--py39h5371cbf_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}_sv_merge.vcf\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        svdb: \\$( echo \\$(svdb) | head -1 | sed 's/usage: SVDB-\\\\([0-9]\\\\.[0-9]\\\\.[0-9]\\\\).*/\\\\1/' )\n    END_VERSIONS\n    \"\"\""
    },
    "TIDDIT_SV": {
        "name_process": "TIDDIT_SV",
        "string_process": "process TIDDIT_SV {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::tiddit=2.12.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/tiddit:2.12.1--py38h1773678_0' :\n        'quay.io/biocontainers/tiddit:2.12.1--py38h1773678_0' }\"\n\n    input:\n    tuple val(meta), path(bam)\n    path  fasta\n    path  fai\n\n    output:\n    tuple val(meta), path(\"*.vcf\")        , emit: vcf\n    tuple val(meta), path(\"*.ploidy.tab\") , emit: ploidy\n    tuple val(meta), path(\"*.signals.tab\"), emit: signals\n    path  \"versions.yml\"                  , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def reference = fasta == \"dummy_file.txt\" ? \"--ref $fasta\" : \"\"\n    \"\"\"\n    tiddit \\\\\n        --sv \\\\\n        $args \\\\\n        --bam $bam \\\\\n        $reference \\\\\n        -o $prefix\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        tiddit: \\$(echo \\$(tiddit 2>&1) | sed 's/^.*TIDDIT-//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.vcf\n    touch ${prefix}.ploidy.tab\n    touch ${prefix}.signals.tab\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        tiddit: \\$(echo \\$(tiddit 2>&1) | sed 's/^.*TIDDIT-//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 52,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def reference = fasta == \"dummy_file.txt\" ? \"--ref $fasta\" : \"\"\n    \"\"\"\n    tiddit \\\\\n        --sv \\\\\n        $args \\\\\n        --bam $bam \\\\\n        $reference \\\\\n        -o $prefix\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        tiddit: \\$(echo \\$(tiddit 2>&1) | sed 's/^.*TIDDIT-//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [
            "TIDDIT"
        ],
        "tools_url": [
            "https://bio.tools/tiddit"
        ],
        "tools_dico": [
            {
                "name": "TIDDIT",
                "uri": "https://bio.tools/tiddit",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "Structural variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Exome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Whole genome sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "Genomic structural variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "DNA structural variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Targeted exome capture"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Exome analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "WES"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Exome"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Whole exome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Exome capture"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "WGS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3228",
                                    "term": "Structural variation detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3225",
                                    "term": "Variant classification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3228",
                                    "term": "Structural variation discovery"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_1383",
                                "term": "Nucleic acid sequence alignment"
                            }
                        ],
                        "output": []
                    }
                ],
                "description": "Efficient and comprehensive structural variant caller for massive parallel sequencing data. Identify chromosomal rearrangements using Mate Pair or Paired End sequencing data. It allows identification of intra and inter-chromosomal translocations, deletions, tandem-duplications and inversions, using supplementary alignments as well as discordant pairs.",
                "homepage": "https://github.com/J35P312/TIDDIT"
            }
        ],
        "inputs": [
            "meta",
            "bam",
            "fasta",
            "fai"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__raredisease",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::tiddit=2.12.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/tiddit:2.12.1--py38h1773678_0' : 'quay.io/biocontainers/tiddit:2.12.1--py38h1773678_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.vcf\n    touch ${prefix}.ploidy.tab\n    touch ${prefix}.signals.tab\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        tiddit: \\$(echo \\$(tiddit 2>&1) | sed 's/^.*TIDDIT-//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\""
    },
    "TIDDIT_COV": {
        "name_process": "TIDDIT_COV",
        "string_process": "process TIDDIT_COV {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::tiddit=2.12.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/tiddit:2.12.1--py38h1773678_0' :\n        'quay.io/biocontainers/tiddit:2.12.1--py38h1773678_0' }\"\n\n    input:\n    tuple val(meta), path(bam)\n    path  fasta\n\n    output:\n    tuple val(meta), path(\"*.tab\"), optional: true, emit: cov\n    tuple val(meta), path(\"*.wig\"), optional: true, emit: wig\n    path  \"versions.yml\"          , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def reference = fasta ? \"--ref $fasta\" : \"\"\n    \"\"\"\n    tiddit \\\\\n        --cov \\\\\n        -o $prefix \\\\\n        $args \\\\\n        --bam $bam \\\\\n        $reference\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        tiddit: \\$(echo \\$(tiddit 2>&1) | sed 's/^.*TIDDIT-//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.wig\n    touch ${prefix}.tab\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        tiddit: \\$(echo \\$(tiddit 2>&1) | sed 's/^.*TIDDIT-//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 49,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def reference = fasta ? \"--ref $fasta\" : \"\"\n    \"\"\"\n    tiddit \\\\\n        --cov \\\\\n        -o $prefix \\\\\n        $args \\\\\n        --bam $bam \\\\\n        $reference\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        tiddit: \\$(echo \\$(tiddit 2>&1) | sed 's/^.*TIDDIT-//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [
            "TIDDIT"
        ],
        "tools_url": [
            "https://bio.tools/tiddit"
        ],
        "tools_dico": [
            {
                "name": "TIDDIT",
                "uri": "https://bio.tools/tiddit",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "Structural variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Exome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Whole genome sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "Genomic structural variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "DNA structural variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Targeted exome capture"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Exome analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "WES"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Exome"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Whole exome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3676",
                            "term": "Exome capture"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "WGS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3228",
                                    "term": "Structural variation detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3225",
                                    "term": "Variant classification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3228",
                                    "term": "Structural variation discovery"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_1383",
                                "term": "Nucleic acid sequence alignment"
                            }
                        ],
                        "output": []
                    }
                ],
                "description": "Efficient and comprehensive structural variant caller for massive parallel sequencing data. Identify chromosomal rearrangements using Mate Pair or Paired End sequencing data. It allows identification of intra and inter-chromosomal translocations, deletions, tandem-duplications and inversions, using supplementary alignments as well as discordant pairs.",
                "homepage": "https://github.com/J35P312/TIDDIT"
            }
        ],
        "inputs": [
            "meta",
            "bam",
            "fasta"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__raredisease",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::tiddit=2.12.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/tiddit:2.12.1--py38h1773678_0' : 'quay.io/biocontainers/tiddit:2.12.1--py38h1773678_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.wig\n    touch ${prefix}.tab\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        tiddit: \\$(echo \\$(tiddit 2>&1) | sed 's/^.*TIDDIT-//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\""
    },
    "UCSC_WIGTOBIGWIG": {
        "name_process": "UCSC_WIGTOBIGWIG",
        "string_process": "\nprocess UCSC_WIGTOBIGWIG {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::ucsc-wigtobigwig=377\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/ucsc-wigtobigwig:377--h0b8a92a_2' :\n        'quay.io/biocontainers/ucsc-wigtobigwig:377--h0b8a92a_2' }\"\n\n    input:\n    tuple val(meta), path(wig)\n    path sizes\n\n    output:\n    tuple val(meta), path(\"*.bw\"), emit: bw\n    path \"versions.yml\"          , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    wigToBigWig \\\\\n        $args \\\\\n        $wig \\\\\n        $sizes \\\\\n        ${prefix}.bw\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        ucsc: $VERSION\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.bw\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        ucsc: $VERSION\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 46,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    wigToBigWig \\\\\n        $args \\\\\n        $wig \\\\\n        $sizes \\\\\n        ${prefix}.bw\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        ucsc: $VERSION\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "wig",
            "sizes"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__raredisease",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::ucsc-wigtobigwig=377\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/ucsc-wigtobigwig:377--h0b8a92a_2' : 'quay.io/biocontainers/ucsc-wigtobigwig:377--h0b8a92a_2' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.bw\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        ucsc: $VERSION\n    END_VERSIONS\n    \"\"\""
    },
    "GATK4_CREATESEQUENCEDICTIONARY": {
        "name_process": "GATK4_CREATESEQUENCEDICTIONARY",
        "string_process": "process GATK4_CREATESEQUENCEDICTIONARY {\n    tag \"$fasta\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::gatk4=4.2.5.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/gatk4:4.2.5.0--hdfd78af_0' :\n        'quay.io/biocontainers/gatk4:4.2.5.0--hdfd78af_0' }\"\n\n    input:\n    path fasta\n\n    output:\n    path \"*.dict\"       , emit: dict\n    path \"versions.yml\" , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n\n    def avail_mem = 6\n    if (!task.memory) {\n        log.info '[GATK CreateSequenceDictionary] Available memory not known - defaulting to 6GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    gatk --java-options \"-Xmx${avail_mem}g\" CreateSequenceDictionary \\\\\n        --REFERENCE $fasta \\\\\n        --URI $fasta \\\\\n        --TMP_DIR . \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    \"\"\"\n    touch test.dict\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 49,
        "string_script": "    def args = task.ext.args ?: ''\n\n    def avail_mem = 6\n    if (!task.memory) {\n        log.info '[GATK CreateSequenceDictionary] Available memory not known - defaulting to 6GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    gatk --java-options \"-Xmx${avail_mem}g\" CreateSequenceDictionary \\\\\n        --REFERENCE $fasta \\\\\n        --URI $fasta \\\\\n        --TMP_DIR . \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "fasta"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__raredisease",
        "directive": [
            "tag \"$fasta\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::gatk4=4.2.5.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/gatk4:4.2.5.0--hdfd78af_0' : 'quay.io/biocontainers/gatk4:4.2.5.0--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    \"\"\"\n    touch test.dict\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\""
    },
    "SAMTOOLS_INDEX": {
        "name_process": "SAMTOOLS_INDEX",
        "string_process": "process SAMTOOLS_INDEX {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::samtools=1.15.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/samtools:1.15.1--h1170115_0' :\n        'quay.io/biocontainers/samtools:1.15.1--h1170115_0' }\"\n\n    input:\n    tuple val(meta), path(input)\n\n    output:\n    tuple val(meta), path(\"*.bai\") , optional:true, emit: bai\n    tuple val(meta), path(\"*.csi\") , optional:true, emit: csi\n    tuple val(meta), path(\"*.crai\"), optional:true, emit: crai\n    path  \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    samtools \\\\\n        index \\\\\n        -@ ${task.cpus-1} \\\\\n        $args \\\\\n        $input\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    \"\"\"\n    touch ${input}.bai\n    touch ${input}.crai\n    touch ${input}.csi\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 46,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    samtools \\\\\n        index \\\\\n        -@ ${task.cpus-1} \\\\\n        $args \\\\\n        $input\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [
            "SAMtools",
            "CINdex"
        ],
        "tools_url": [
            "https://bio.tools/samtools",
            "https://bio.tools/cindex"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "CINdex",
                "uri": "https://bio.tools/cindex",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3233",
                                    "term": "Copy number estimation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3233",
                                    "term": "Transcript copy number estimation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The package addresses important area of high-throughput genomic analysis. It allows the automated processing and analysis of the experimental DNA copy number data generated by Affymetrix SNP 6.0 arrays or similar. It calculates the chromosome instability index to quantitatively characterize genome-wide DNA copy number alterations. This package calculates not only overall genomic instability, but also instability in terms of copy number gains and losses at the chromosome and cytoband level.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/CINdex.html"
            }
        ],
        "inputs": [
            "meta",
            "input"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__raredisease",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::samtools=1.15.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/samtools:1.15.1--h1170115_0' : 'quay.io/biocontainers/samtools:1.15.1--h1170115_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    \"\"\"\n    touch ${input}.bai\n    touch ${input}.crai\n    touch ${input}.csi\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\""
    },
    "SAMTOOLS_MERGE": {
        "name_process": "SAMTOOLS_MERGE",
        "string_process": "process SAMTOOLS_MERGE {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::samtools=1.15.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/samtools:1.15.1--h1170115_0' :\n        'quay.io/biocontainers/samtools:1.15.1--h1170115_0' }\"\n\n    input:\n    tuple val(meta), path(input_files)\n    path fasta\n\n    output:\n    tuple val(meta), path(\"${prefix}.bam\") , optional:true, emit: bam\n    tuple val(meta), path(\"${prefix}.cram\"), optional:true, emit: cram\n    path  \"versions.yml\"                                  , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args   ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n    def file_type = input_files[0].getExtension()\n    def reference = fasta ? \"--reference ${fasta}\" : \"\"\n    \"\"\"\n    samtools \\\\\n        merge \\\\\n        --threads ${task.cpus-1} \\\\\n        $args \\\\\n        ${reference} \\\\\n        ${prefix}.${file_type} \\\\\n        $input_files\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    prefix = task.ext.suffix ? \"${meta.id}${task.ext.suffix}\" : \"${meta.id}\"\n    def file_type = input_files[0].getExtension()\n    \"\"\"\n    touch ${prefix}.${file_type}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 51,
        "string_script": "    def args = task.ext.args   ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n    def file_type = input_files[0].getExtension()\n    def reference = fasta ? \"--reference ${fasta}\" : \"\"\n    \"\"\"\n    samtools \\\\\n        merge \\\\\n        --threads ${task.cpus-1} \\\\\n        $args \\\\\n        ${reference} \\\\\n        ${prefix}.${file_type} \\\\\n        $input_files\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 17,
        "language_script": "bash",
        "tools": [
            "SAMtools",
            "merger"
        ],
        "tools_url": [
            "https://bio.tools/samtools",
            "https://bio.tools/merger"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "merger",
                "uri": "https://bio.tools/merger",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0097",
                            "term": "Nucleic acid structure analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0097",
                            "term": "Nucleic acid structure"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise sequence alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0232",
                                    "term": "Sequence merging"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0232",
                                    "term": "Sequence splicing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0874",
                                "term": "Comparison matrix"
                            },
                            {
                                "uri": "http://edamontology.org/data_0849",
                                "term": "Sequence record"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0849",
                                "term": "Sequence record"
                            },
                            {
                                "uri": "http://edamontology.org/data_1381",
                                "term": "Pair sequence alignment"
                            }
                        ]
                    }
                ],
                "description": "Merge two overlapping sequences.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/merger.html"
            }
        ],
        "inputs": [
            "meta",
            "input_files",
            "fasta"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__raredisease",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::samtools=1.15.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/samtools:1.15.1--h1170115_0' : 'quay.io/biocontainers/samtools:1.15.1--h1170115_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    prefix = task.ext.suffix ? \"${meta.id}${task.ext.suffix}\" : \"${meta.id}\"\n    def file_type = input_files[0].getExtension()\n    \"\"\"\n    touch ${prefix}.${file_type}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        samtools: \\$(echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//')\n    END_VERSIONS\n    \"\"\""
    },
    "QUALIMAP_BAMQC": {
        "name_process": "QUALIMAP_BAMQC",
        "string_process": "process QUALIMAP_BAMQC {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::qualimap=2.2.2d\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/qualimap:2.2.2d--1' :\n        'quay.io/biocontainers/qualimap:2.2.2d--1' }\"\n\n    input:\n    tuple val(meta), path(bam)\n    path gff\n\n    output:\n    tuple val(meta), path(\"${prefix}\"), emit: results\n    path  \"versions.yml\"              , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args   ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n\n    def collect_pairs = meta.single_end ? '' : '--collect-overlap-pairs'\n    def memory     = task.memory.toGiga() + \"G\"\n    def regions = gff ? \"--gff $gff\" : ''\n\n    def strandedness = 'non-strand-specific'\n    if (meta.strandedness == 'forward') {\n        strandedness = 'strand-specific-forward'\n    } else if (meta.strandedness == 'reverse') {\n        strandedness = 'strand-specific-reverse'\n    }\n    \"\"\"\n    unset DISPLAY\n    mkdir tmp\n    export _JAVA_OPTIONS=-Djava.io.tmpdir=./tmp\n    qualimap \\\\\n        --java-mem-size=$memory \\\\\n        bamqc \\\\\n        $args \\\\\n        -bam $bam \\\\\n        $regions \\\\\n        -p $strandedness \\\\\n        $collect_pairs \\\\\n        -outdir $prefix \\\\\n        -nt $task.cpus\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        qualimap: \\$(echo \\$(qualimap 2>&1) | sed 's/^.*QualiMap v.//; s/Built.*\\$//')\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    prefix = task.ext.suffix ? \"${meta.id}${task.ext.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    mkdir -p $prefix/css\n    mkdir $prefix/images_qualimapReport\n    mkdir $prefix/raw_data_qualimapReport\n    cd $prefix/css\n    touch agogo.css\n    touch basic.css\n    touch bgtop.png\n    touch comment-close.png\n    touch doctools.js\n    touch down-pressed.png\n    touch jquery.js\n    touch plus.png\n    touch qualimap_logo_small.png\n    touch searchtools.js\n    touch up.png\n    touch websupport.js\n    touch ajax-loader.gif\n    touch bgfooter.png\n    touch comment-bright.png\n    touch comment.png\n    touch down.png\n    touch file.png\n    touch minus.png\n    touch pygments.css\n    touch report.css\n    touch underscore.js\n    touch up-pressed.png\n    cd ../images_qualimapReport/\n    touch genome_coverage_0to50_histogram.png\n    touch genome_coverage_quotes.png\n    touch genome_insert_size_across_reference.png\n    touch genome_mapping_quality_histogram.png\n    touch genome_uniq_read_starts_histogram.png\n    touch genome_coverage_across_reference.png\n    touch genome_gc_content_per_window.png\n    touch genome_insert_size_histogram.png\n    touch genome_reads_clipping_profile.png\n    touch genome_coverage_histogram.png\n    touch genome_homopolymer_indels.png\n    touch genome_mapping_quality_across_reference.png\n    touch genome_reads_content_per_read_position.png\n    cd ../raw_data_qualimapReport\n    touch coverage_across_reference.txt\n    touch genome_fraction_coverage.txt\n    touch insert_size_histogram.txt\n    touch mapped_reads_nucleotide_content.txt\n    touch coverage_histogram.txt\n    touch homopolymer_indels.txt\n    touch mapped_reads_clipping_profile.txt\n    touch mapping_quality_across_reference.txt\n    touch duplication_rate_histogram.txt\n    touch insert_size_across_reference.txt\n    touch mapped_reads_gc-content_distribution.txt\n    touch mapping_quality_histogram.txt\n    cd ../\n    touch genome_results.txt\n    touch qualimapReport.html\n    cd ../\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        qualimap: \\$(echo \\$(qualimap 2>&1) | sed 's/^.*QualiMap v.//; s/Built.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 121,
        "string_script": "    def args = task.ext.args   ?: ''\n    prefix   = task.ext.prefix ?: \"${meta.id}\"\n\n    def collect_pairs = meta.single_end ? '' : '--collect-overlap-pairs'\n    def memory     = task.memory.toGiga() + \"G\"\n    def regions = gff ? \"--gff $gff\" : ''\n\n    def strandedness = 'non-strand-specific'\n    if (meta.strandedness == 'forward') {\n        strandedness = 'strand-specific-forward'\n    } else if (meta.strandedness == 'reverse') {\n        strandedness = 'strand-specific-reverse'\n    }\n    \"\"\"\n    unset DISPLAY\n    mkdir tmp\n    export _JAVA_OPTIONS=-Djava.io.tmpdir=./tmp\n    qualimap \\\\\n        --java-mem-size=$memory \\\\\n        bamqc \\\\\n        $args \\\\\n        -bam $bam \\\\\n        $regions \\\\\n        -p $strandedness \\\\\n        $collect_pairs \\\\\n        -outdir $prefix \\\\\n        -nt $task.cpus\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        qualimap: \\$(echo \\$(qualimap 2>&1) | sed 's/^.*QualiMap v.//; s/Built.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 32,
        "language_script": "bash",
        "tools": [
            "QualiMap"
        ],
        "tools_url": [
            "https://bio.tools/qualimap"
        ],
        "tools_dico": [
            {
                "name": "QualiMap",
                "uri": "https://bio.tools/qualimap",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Platform-independent application written in Java and R that provides both a Graphical User Inteface (GUI) and a command-line interface to facilitate the quality control of alignment sequencing data.",
                "homepage": "http://qualimap.bioinfo.cipf.es/"
            }
        ],
        "inputs": [
            "meta",
            "bam",
            "gff"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__raredisease",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::qualimap=2.2.2d\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/qualimap:2.2.2d--1' : 'quay.io/biocontainers/qualimap:2.2.2d--1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    prefix = task.ext.suffix ? \"${meta.id}${task.ext.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    mkdir -p $prefix/css\n    mkdir $prefix/images_qualimapReport\n    mkdir $prefix/raw_data_qualimapReport\n    cd $prefix/css\n    touch agogo.css\n    touch basic.css\n    touch bgtop.png\n    touch comment-close.png\n    touch doctools.js\n    touch down-pressed.png\n    touch jquery.js\n    touch plus.png\n    touch qualimap_logo_small.png\n    touch searchtools.js\n    touch up.png\n    touch websupport.js\n    touch ajax-loader.gif\n    touch bgfooter.png\n    touch comment-bright.png\n    touch comment.png\n    touch down.png\n    touch file.png\n    touch minus.png\n    touch pygments.css\n    touch report.css\n    touch underscore.js\n    touch up-pressed.png\n    cd ../images_qualimapReport/\n    touch genome_coverage_0to50_histogram.png\n    touch genome_coverage_quotes.png\n    touch genome_insert_size_across_reference.png\n    touch genome_mapping_quality_histogram.png\n    touch genome_uniq_read_starts_histogram.png\n    touch genome_coverage_across_reference.png\n    touch genome_gc_content_per_window.png\n    touch genome_insert_size_histogram.png\n    touch genome_reads_clipping_profile.png\n    touch genome_coverage_histogram.png\n    touch genome_homopolymer_indels.png\n    touch genome_mapping_quality_across_reference.png\n    touch genome_reads_content_per_read_position.png\n    cd ../raw_data_qualimapReport\n    touch coverage_across_reference.txt\n    touch genome_fraction_coverage.txt\n    touch insert_size_histogram.txt\n    touch mapped_reads_nucleotide_content.txt\n    touch coverage_histogram.txt\n    touch homopolymer_indels.txt\n    touch mapped_reads_clipping_profile.txt\n    touch mapping_quality_across_reference.txt\n    touch duplication_rate_histogram.txt\n    touch insert_size_across_reference.txt\n    touch mapped_reads_gc-content_distribution.txt\n    touch mapping_quality_histogram.txt\n    cd ../\n    touch genome_results.txt\n    touch qualimapReport.html\n    cd ../\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        qualimap: \\$(echo \\$(qualimap 2>&1) | sed 's/^.*QualiMap v.//; s/Built.*\\$//')\n    END_VERSIONS\n    \"\"\""
    },
    "FASTQC": {
        "name_process": "FASTQC",
        "string_process": "process FASTQC {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::fastqc=0.11.9\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/fastqc:0.11.9--0' :\n        'quay.io/biocontainers/fastqc:0.11.9--0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path(\"*.html\"), emit: html\n    tuple val(meta), path(\"*.zip\") , emit: zip\n    path  \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n                                                                          \n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (meta.single_end) {\n        \"\"\"\n        [ ! -f  ${prefix}.fastq.gz ] && ln -s $reads ${prefix}.fastq.gz\n        fastqc $args --threads $task.cpus ${prefix}.fastq.gz\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            fastqc: \\$( fastqc --version | sed -e \"s/FastQC v//g\" )\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        [ ! -f  ${prefix}_1.fastq.gz ] && ln -s ${reads[0]} ${prefix}_1.fastq.gz\n        [ ! -f  ${prefix}_2.fastq.gz ] && ln -s ${reads[1]} ${prefix}_2.fastq.gz\n        fastqc $args --threads $task.cpus ${prefix}_1.fastq.gz ${prefix}_2.fastq.gz\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            fastqc: \\$( fastqc --version | sed -e \"s/FastQC v//g\" )\n        END_VERSIONS\n        \"\"\"\n    }\n\n    stub:\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.html\n    touch ${prefix}.zip\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        fastqc: \\$( fastqc --version | sed -e \"s/FastQC v//g\" )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 57,
        "string_script": "    def args = task.ext.args ?: ''\n                                                                          \n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (meta.single_end) {\n        \"\"\"\n        [ ! -f  ${prefix}.fastq.gz ] && ln -s $reads ${prefix}.fastq.gz\n        fastqc $args --threads $task.cpus ${prefix}.fastq.gz\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            fastqc: \\$( fastqc --version | sed -e \"s/FastQC v//g\" )\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        [ ! -f  ${prefix}_1.fastq.gz ] && ln -s ${reads[0]} ${prefix}_1.fastq.gz\n        [ ! -f  ${prefix}_2.fastq.gz ] && ln -s ${reads[1]} ${prefix}_2.fastq.gz\n        fastqc $args --threads $task.cpus ${prefix}_1.fastq.gz ${prefix}_2.fastq.gz\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            fastqc: \\$( fastqc --version | sed -e \"s/FastQC v//g\" )\n        END_VERSIONS\n        \"\"\"\n    }",
        "nb_lignes_script": 24,
        "language_script": "bash",
        "tools": [
            "FastQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            }
        ],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__raredisease",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::fastqc=0.11.9\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/fastqc:0.11.9--0' : 'quay.io/biocontainers/fastqc:0.11.9--0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.html\n    touch ${prefix}.zip\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        fastqc: \\$( fastqc --version | sed -e \"s/FastQC v//g\" )\n    END_VERSIONS\n    \"\"\""
    },
    "GATK4_BEDTOINTERVALLIST": {
        "name_process": "GATK4_BEDTOINTERVALLIST",
        "string_process": "process GATK4_BEDTOINTERVALLIST {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::gatk4=4.2.5.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/gatk4:4.2.5.0--hdfd78af_0' :\n        'quay.io/biocontainers/gatk4:4.2.5.0--hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(bed)\n    path  dict\n\n    output:\n    tuple val(meta), path('*.interval_list'), emit: interval_list\n    path  \"versions.yml\"                    , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[GATK BedToIntervalList] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    gatk --java-options \"-Xmx${avail_mem}g\" BedToIntervalList \\\\\n        --INPUT $bed \\\\\n        --OUTPUT ${prefix}.interval_list \\\\\n        --SEQUENCE_DICTIONARY $dict \\\\\n        --TMP_DIR . \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.interval_list\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 53,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[GATK BedToIntervalList] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    gatk --java-options \"-Xmx${avail_mem}g\" BedToIntervalList \\\\\n        --INPUT $bed \\\\\n        --OUTPUT ${prefix}.interval_list \\\\\n        --SEQUENCE_DICTIONARY $dict \\\\\n        --TMP_DIR . \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 21,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "meta",
            "bed",
            "dict"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__raredisease",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::gatk4=4.2.5.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/gatk4:4.2.5.0--hdfd78af_0' : 'quay.io/biocontainers/gatk4:4.2.5.0--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.interval_list\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\""
    },
    "BWAMEM2_INDEX": {
        "name_process": "BWAMEM2_INDEX",
        "string_process": "process BWAMEM2_INDEX {\n    tag \"$fasta\"\n    label 'process_high'\n\n    conda (params.enable_conda ? \"bioconda::bwa-mem2=2.2.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bwa-mem2:2.2.1--he513fc3_0' :\n        'quay.io/biocontainers/bwa-mem2:2.2.1--he513fc3_0' }\"\n\n    input:\n    path fasta\n\n    output:\n    path \"bwamem2\"      , emit: index\n    path \"versions.yml\" , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    mkdir bwamem2\n    bwa-mem2 \\\\\n        index \\\\\n        $args \\\\\n        $fasta -p bwamem2/${fasta}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bwamem2: \\$(echo \\$(bwa-mem2 version 2>&1) | sed 's/.* //')\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    \"\"\"\n    mkdir bwamem2\n    touch bwamem2/${fasta}.0123\n    touch bwamem2/${fasta}.ann\n    touch bwamem2/${fasta}.pac\n    touch bwamem2/${fasta}.amb\n    touch bwamem2/${fasta}.bwt.2bit.64\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bwamem2: \\$(echo \\$(bwa-mem2 version 2>&1) | sed 's/.* //')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 47,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    mkdir bwamem2\n    bwa-mem2 \\\\\n        index \\\\\n        $args \\\\\n        $fasta -p bwamem2/${fasta}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bwamem2: \\$(echo \\$(bwa-mem2 version 2>&1) | sed 's/.* //')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [
            "CINdex"
        ],
        "tools_url": [
            "https://bio.tools/cindex"
        ],
        "tools_dico": [
            {
                "name": "CINdex",
                "uri": "https://bio.tools/cindex",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3233",
                                    "term": "Copy number estimation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3233",
                                    "term": "Transcript copy number estimation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The package addresses important area of high-throughput genomic analysis. It allows the automated processing and analysis of the experimental DNA copy number data generated by Affymetrix SNP 6.0 arrays or similar. It calculates the chromosome instability index to quantitatively characterize genome-wide DNA copy number alterations. This package calculates not only overall genomic instability, but also instability in terms of copy number gains and losses at the chromosome and cytoband level.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/CINdex.html"
            }
        ],
        "inputs": [
            "fasta"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__raredisease",
        "directive": [
            "tag \"$fasta\"",
            "label 'process_high'",
            "conda (params.enable_conda ? \"bioconda::bwa-mem2=2.2.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bwa-mem2:2.2.1--he513fc3_0' : 'quay.io/biocontainers/bwa-mem2:2.2.1--he513fc3_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    \"\"\"\n    mkdir bwamem2\n    touch bwamem2/${fasta}.0123\n    touch bwamem2/${fasta}.ann\n    touch bwamem2/${fasta}.pac\n    touch bwamem2/${fasta}.amb\n    touch bwamem2/${fasta}.bwt.2bit.64\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        bwamem2: \\$(echo \\$(bwa-mem2 version 2>&1) | sed 's/.* //')\n    END_VERSIONS\n    \"\"\""
    },
    "VCFANNO": {
        "name_process": "VCFANNO",
        "string_process": "process VCFANNO {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::vcfanno=0.3.3\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/vcfanno:0.3.3--h9ee0642_0':\n        'quay.io/biocontainers/vcfanno:0.3.3--h9ee0642_0' }\"\n\n    input:\n    tuple val(meta), path(vcf), path(tbi)\n    tuple val(meta), path(vcf_uncompressed)\n    path toml\n    path resource_dir\n\n    output:\n    tuple val(meta), path(\"*_annotated.vcf\"), emit: vcf\n    path \"versions.yml\"                     , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def input_vcf = vcf_uncompressed ?: vcf\n    \"\"\"\n    ln -sf $resource_dir/* \\$(pwd)\n\n    vcfanno \\\\\n        -p $task.cpus \\\\\n        $args \\\\\n        $toml \\\\\n        $input_vcf \\\\\n        > ${prefix}_annotated.vcf\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        vcfanno: \\$(echo \\$(vcfanno 2>&1 | grep version | cut -f3 -d' ' ))\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}_annotated.vcf\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        vcfanno: \\$(echo \\$(vcfanno 2>&1 | grep version | cut -f3 -d' ' ))\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 51,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def input_vcf = vcf_uncompressed ?: vcf\n    \"\"\"\n    ln -sf $resource_dir/* \\$(pwd)\n\n    vcfanno \\\\\n        -p $task.cpus \\\\\n        $args \\\\\n        $toml \\\\\n        $input_vcf \\\\\n        > ${prefix}_annotated.vcf\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        vcfanno: \\$(echo \\$(vcfanno 2>&1 | grep version | cut -f3 -d' ' ))\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 17,
        "language_script": "bash",
        "tools": [
            "vcfanno"
        ],
        "tools_url": [
            "https://bio.tools/vcfanno"
        ],
        "tools_dico": [
            {
                "name": "vcfanno",
                "uri": "https://bio.tools/vcfanno",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0219",
                            "term": "Data submission, annotation and curation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3661",
                                    "term": "SNP annotation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Fast, flexible annotation of genetic variants.",
                "homepage": "https://github.com/brentp/vcfanno"
            }
        ],
        "inputs": [
            "meta",
            "vcf",
            "tbi",
            "meta",
            "vcf_uncompressed",
            "toml",
            "resource_dir"
        ],
        "nb_inputs": 7,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__raredisease",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::vcfanno=0.3.3\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/vcfanno:0.3.3--h9ee0642_0': 'quay.io/biocontainers/vcfanno:0.3.3--h9ee0642_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}_annotated.vcf\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        vcfanno: \\$(echo \\$(vcfanno 2>&1 | grep version | cut -f3 -d' ' ))\n    END_VERSIONS\n    \"\"\""
    },
    "GLNEXUS": {
        "name_process": "GLNEXUS",
        "string_process": "process GLNEXUS {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::glnexus=1.4.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/glnexus:1.4.1--h40d77a6_0' :\n        'quay.io/biocontainers/glnexus:1.4.1--h40d77a6_0' }\"\n\n    input:\n    tuple val(meta), path(gvcfs)\n\n    output:\n    tuple val(meta), path(\"*.bcf\"), emit: bcf\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n                                  \n    def input = gvcfs.collect { it.toString() }\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[Glnexus] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    glnexus_cli \\\\\n        --threads $task.cpus \\\\\n        --mem-gbytes $avail_mem \\\\\n        $args \\\\\n        ${input.join(' ')} \\\\\n        > ${prefix}.bcf\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        glnexus: \\$( echo \\$(glnexus_cli 2>&1) | head -n 1 | sed 's/^.*release v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.bcf\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        glnexus: \\$( echo \\$(glnexus_cli 2>&1) | head -n 1 | sed 's/^.*release v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 54,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n                                  \n    def input = gvcfs.collect { it.toString() }\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[Glnexus] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    glnexus_cli \\\\\n        --threads $task.cpus \\\\\n        --mem-gbytes $avail_mem \\\\\n        $args \\\\\n        ${input.join(' ')} \\\\\n        > ${prefix}.bcf\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        glnexus: \\$( echo \\$(glnexus_cli 2>&1) | head -n 1 | sed 's/^.*release v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 23,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "gvcfs"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__raredisease",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::glnexus=1.4.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/glnexus:1.4.1--h40d77a6_0' : 'quay.io/biocontainers/glnexus:1.4.1--h40d77a6_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.bcf\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        glnexus: \\$( echo \\$(glnexus_cli 2>&1) | head -n 1 | sed 's/^.*release v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\""
    },
    "TABIX_TABIX": {
        "name_process": "TABIX_TABIX",
        "string_process": "process TABIX_TABIX {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? 'bioconda::tabix=1.11' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/tabix:1.11--hdfd78af_0' :\n        'quay.io/biocontainers/tabix:1.11--hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(tab)\n\n    output:\n    tuple val(meta), path(\"*.tbi\"), emit: tbi\n    path  \"versions.yml\"          , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    tabix $args $tab\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        tabix: \\$(echo \\$(tabix -h 2>&1) | sed 's/^.*Version: //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${tab}.tbi\n    cat <<-END_VERSIONS > versions.yml\n\n    \"${task.process}\":\n        tabix: \\$(echo \\$(tabix -h 2>&1) | sed 's/^.*Version: //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 39,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    tabix $args $tab\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        tabix: \\$(echo \\$(tabix -h 2>&1) | sed 's/^.*Version: //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "tab"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__raredisease",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? 'bioconda::tabix=1.11' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/tabix:1.11--hdfd78af_0' : 'quay.io/biocontainers/tabix:1.11--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${tab}.tbi\n    cat <<-END_VERSIONS > versions.yml\n\n    \"${task.process}\":\n        tabix: \\$(echo \\$(tabix -h 2>&1) | sed 's/^.*Version: //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\""
    },
    "PICARD_COLLECTHSMETRICS": {
        "name_process": "PICARD_COLLECTHSMETRICS",
        "string_process": "process PICARD_COLLECTHSMETRICS {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::picard=2.26.10\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/picard:2.26.10--hdfd78af_0' :\n        'quay.io/biocontainers/picard:2.26.10--hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(bam)\n    path fasta\n    path fai\n    path bait_intervals\n    path target_intervals\n\n    output:\n    tuple val(meta), path(\"*_metrics\")  , emit: metrics\n    path \"versions.yml\"                 , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def reference = fasta ? \"-R $fasta\" : \"\"\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[Picard CollectHsMetrics] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    picard \\\\\n        -Xmx${avail_mem}g \\\\\n        CollectHsMetrics \\\\\n        $args \\\\\n        $reference \\\\\n        -BAIT_INTERVALS $bait_intervals \\\\\n        -TARGET_INTERVALS $target_intervals \\\\\n        -INPUT $bam \\\\\n        -OUTPUT ${prefix}.CollectHsMetrics.coverage_metrics\n\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        picard: \\$(echo \\$(picard CollectHsMetrics --version 2>&1) | grep -o 'Version:.*' | cut -f2- -d:)\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.CollectHsMetrics.coverage_metrics\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        picard: \\$(echo \\$(picard CollectHsMetrics --version 2>&1) | grep -o 'Version:.*' | cut -f2- -d:)\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 61,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def reference = fasta ? \"-R $fasta\" : \"\"\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[Picard CollectHsMetrics] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    picard \\\\\n        -Xmx${avail_mem}g \\\\\n        CollectHsMetrics \\\\\n        $args \\\\\n        $reference \\\\\n        -BAIT_INTERVALS $bait_intervals \\\\\n        -TARGET_INTERVALS $target_intervals \\\\\n        -INPUT $bam \\\\\n        -OUTPUT ${prefix}.CollectHsMetrics.coverage_metrics\n\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        picard: \\$(echo \\$(picard CollectHsMetrics --version 2>&1) | grep -o 'Version:.*' | cut -f2- -d:)\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 26,
        "language_script": "bash",
        "tools": [
            "Picard"
        ],
        "tools_url": [
            "https://bio.tools/picard_tools"
        ],
        "tools_dico": [
            {
                "name": "Picard",
                "uri": "https://bio.tools/picard_tools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Sequence variation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Variant analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation annotation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A set of command line tools for manipulating high-throughput sequencing (HTS) data in formats such as SAM/BAM/CRAM and VCF. Available as a standalone program or within the GATK4 program.",
                "homepage": "https://github.com/broadinstitute/picard"
            }
        ],
        "inputs": [
            "meta",
            "bam",
            "fasta",
            "fai",
            "bait_intervals",
            "target_intervals"
        ],
        "nb_inputs": 6,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__raredisease",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::picard=2.26.10\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/picard:2.26.10--hdfd78af_0' : 'quay.io/biocontainers/picard:2.26.10--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.CollectHsMetrics.coverage_metrics\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        picard: \\$(echo \\$(picard CollectHsMetrics --version 2>&1) | grep -o 'Version:.*' | cut -f2- -d:)\n    END_VERSIONS\n    \"\"\""
    },
    "PICARD_COLLECTMULTIPLEMETRICS": {
        "name_process": "PICARD_COLLECTMULTIPLEMETRICS",
        "string_process": "process PICARD_COLLECTMULTIPLEMETRICS {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::picard=2.26.10\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/picard:2.26.10--hdfd78af_0' :\n        'quay.io/biocontainers/picard:2.26.10--hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(bam)\n    path  fasta\n\n    output:\n    tuple val(meta), path(\"*_metrics\"), emit: metrics\n    tuple val(meta), path(\"*.pdf\")    , emit: pdf\n    path  \"versions.yml\"              , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[Picard CollectMultipleMetrics] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    picard \\\\\n        -Xmx${avail_mem}g \\\\\n        CollectMultipleMetrics \\\\\n        $args \\\\\n        INPUT=$bam \\\\\n        OUTPUT=${prefix}.CollectMultipleMetrics \\\\\n        REFERENCE_SEQUENCE=$fasta\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        picard: \\$(picard CollectMultipleMetrics --version 2>&1 | grep -o 'Version.*' | cut -f2- -d:)\n    END_VERSIONS\n    \"\"\"\n\n    stub:\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.CollectMultipleMetrics.alignment_summary_metrics\n    touch ${prefix}.CollectMultipleMetrics.insert_size_metrics\n    touch ${prefix}.CollectMultipleMetrics.quality_distribution.pdf\n    touch ${prefix}.CollectMultipleMetrics.base_distribution_by_cycle_metrics\n    touch ${prefix}.CollectMultipleMetrics.quality_by_cycle_metrics\n    touch ${prefix}.CollectMultipleMetrics.read_length_histogram.pdf\n    touch ${prefix}.CollectMultipleMetrics.base_distribution_by_cycle.pdf\n    touch ${prefix}.CollectMultipleMetrics.quality_by_cycle.pdf\n    touch ${prefix}.CollectMultipleMetrics.insert_size_histogram.pdf\n    touch ${prefix}.CollectMultipleMetrics.quality_distribution_metrics\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        picard: \\$(echo \\$(picard CollectMultipleMetrics --version 2>&1) | grep -o 'Version:.*' | cut -f2- -d:)\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 63,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[Picard CollectMultipleMetrics] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    picard \\\\\n        -Xmx${avail_mem}g \\\\\n        CollectMultipleMetrics \\\\\n        $args \\\\\n        INPUT=$bam \\\\\n        OUTPUT=${prefix}.CollectMultipleMetrics \\\\\n        REFERENCE_SEQUENCE=$fasta\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        picard: \\$(picard CollectMultipleMetrics --version 2>&1 | grep -o 'Version.*' | cut -f2- -d:)\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 21,
        "language_script": "bash",
        "tools": [
            "Picard"
        ],
        "tools_url": [
            "https://bio.tools/picard_tools"
        ],
        "tools_dico": [
            {
                "name": "Picard",
                "uri": "https://bio.tools/picard_tools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Sequence variation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Variant analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation annotation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A set of command line tools for manipulating high-throughput sequencing (HTS) data in formats such as SAM/BAM/CRAM and VCF. Available as a standalone program or within the GATK4 program.",
                "homepage": "https://github.com/broadinstitute/picard"
            }
        ],
        "inputs": [
            "meta",
            "bam",
            "fasta"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nf-core__raredisease",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::picard=2.26.10\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/picard:2.26.10--hdfd78af_0' : 'quay.io/biocontainers/picard:2.26.10--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    touch ${prefix}.CollectMultipleMetrics.alignment_summary_metrics\n    touch ${prefix}.CollectMultipleMetrics.insert_size_metrics\n    touch ${prefix}.CollectMultipleMetrics.quality_distribution.pdf\n    touch ${prefix}.CollectMultipleMetrics.base_distribution_by_cycle_metrics\n    touch ${prefix}.CollectMultipleMetrics.quality_by_cycle_metrics\n    touch ${prefix}.CollectMultipleMetrics.read_length_histogram.pdf\n    touch ${prefix}.CollectMultipleMetrics.base_distribution_by_cycle.pdf\n    touch ${prefix}.CollectMultipleMetrics.quality_by_cycle.pdf\n    touch ${prefix}.CollectMultipleMetrics.insert_size_histogram.pdf\n    touch ${prefix}.CollectMultipleMetrics.quality_distribution_metrics\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        picard: \\$(echo \\$(picard CollectMultipleMetrics --version 2>&1) | grep -o 'Version:.*' | cut -f2- -d:)\n    END_VERSIONS\n    \"\"\""
    }
}